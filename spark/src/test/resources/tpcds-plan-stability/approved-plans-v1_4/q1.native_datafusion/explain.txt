== Physical Plan ==
* CometColumnarToRow (41)
+- CometTakeOrderedAndProject (40)
   +- CometProject (39)
      +- CometBroadcastHashJoin (38)
         :- CometProject (33)
         :  +- CometBroadcastHashJoin (32)
         :     :- CometProject (27)
         :     :  +- CometBroadcastHashJoin (26)
         :     :     :- CometFilter (12)
         :     :     :  +- CometHashAggregate (11)
         :     :     :     +- CometExchange (10)
         :     :     :        +- CometHashAggregate (9)
         :     :     :           +- CometProject (8)
         :     :     :              +- CometBroadcastHashJoin (7)
         :     :     :                 :- CometFilter (2)
         :     :     :                 :  +- CometNativeScan parquet spark_catalog.default.store_returns (1)
         :     :     :                 +- CometBroadcastExchange (6)
         :     :     :                    +- CometProject (5)
         :     :     :                       +- CometFilter (4)
         :     :     :                          +- CometNativeScan parquet spark_catalog.default.date_dim (3)
         :     :     +- CometBroadcastExchange (25)
         :     :        +- CometFilter (24)
         :     :           +- CometHashAggregate (23)
         :     :              +- CometExchange (22)
         :     :                 +- CometHashAggregate (21)
         :     :                    +- CometHashAggregate (20)
         :     :                       +- CometExchange (19)
         :     :                          +- CometHashAggregate (18)
         :     :                             +- CometProject (17)
         :     :                                +- CometBroadcastHashJoin (16)
         :     :                                   :- CometFilter (14)
         :     :                                   :  +- CometNativeScan parquet spark_catalog.default.store_returns (13)
         :     :                                   +- ReusedExchange (15)
         :     +- CometBroadcastExchange (31)
         :        +- CometProject (30)
         :           +- CometFilter (29)
         :              +- CometNativeScan parquet spark_catalog.default.store (28)
         +- CometBroadcastExchange (37)
            +- CometProject (36)
               +- CometFilter (35)
                  +- CometNativeScan parquet spark_catalog.default.customer (34)


(1) CometNativeScan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(sr_returned_date_sk#4)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) CometFilter
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : (isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_year#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Right output [1]: [d_date_sk#5]
Arguments: [sr_returned_date_sk#4], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#5]
Arguments: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3], [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]

(9) CometHashAggregate
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]

(10) CometExchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#7]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(11) CometHashAggregate
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#7]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]

(12) CometFilter
Input [3]: [ctr_customer_sk#8, ctr_store_sk#9, ctr_total_return#10]
Condition : isnotnull(ctr_total_return#10)

(13) CometNativeScan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(sr_returned_date_sk#4)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(14) CometFilter
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : isnotnull(sr_store_sk#2)

(15) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#5]

(16) CometBroadcastHashJoin
Left output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Right output [1]: [d_date_sk#5]
Arguments: [sr_returned_date_sk#4], [d_date_sk#5], Inner, BuildRight

(17) CometProject
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#5]
Arguments: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3], [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]

(18) CometHashAggregate
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]

(19) CometExchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#11]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(20) CometHashAggregate
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#11]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]

(21) CometHashAggregate
Input [2]: [ctr_store_sk#9, ctr_total_return#10]
Keys [1]: [ctr_store_sk#9]
Functions [1]: [partial_avg(ctr_total_return#10)]

(22) CometExchange
Input [3]: [ctr_store_sk#9, sum#12, count#13]
Arguments: hashpartitioning(ctr_store_sk#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(23) CometHashAggregate
Input [3]: [ctr_store_sk#9, sum#12, count#13]
Keys [1]: [ctr_store_sk#9]
Functions [1]: [avg(ctr_total_return#10)]

(24) CometFilter
Input [2]: [(avg(ctr_total_return) * 1.2)#14, ctr_store_sk#9#15]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#14)

(25) CometBroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#14, ctr_store_sk#9#15]
Arguments: [(avg(ctr_total_return) * 1.2)#14, ctr_store_sk#9#15]

(26) CometBroadcastHashJoin
Left output [3]: [ctr_customer_sk#8, ctr_store_sk#9, ctr_total_return#10]
Right output [2]: [(avg(ctr_total_return) * 1.2)#14, ctr_store_sk#9#15]
Arguments: [ctr_store_sk#9], [ctr_store_sk#9#15], Inner, (cast(ctr_total_return#10 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#14), BuildRight

(27) CometProject
Input [5]: [ctr_customer_sk#8, ctr_store_sk#9, ctr_total_return#10, (avg(ctr_total_return) * 1.2)#14, ctr_store_sk#9#15]
Arguments: [ctr_customer_sk#8, ctr_store_sk#9], [ctr_customer_sk#8, ctr_store_sk#9]

(28) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_state#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(29) CometFilter
Input [2]: [s_store_sk#16, s_state#17]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#17, 2, true, false, true) = TN) AND isnotnull(s_store_sk#16))

(30) CometProject
Input [2]: [s_store_sk#16, s_state#17]
Arguments: [s_store_sk#16], [s_store_sk#16]

(31) CometBroadcastExchange
Input [1]: [s_store_sk#16]
Arguments: [s_store_sk#16]

(32) CometBroadcastHashJoin
Left output [2]: [ctr_customer_sk#8, ctr_store_sk#9]
Right output [1]: [s_store_sk#16]
Arguments: [ctr_store_sk#9], [s_store_sk#16], Inner, BuildRight

(33) CometProject
Input [3]: [ctr_customer_sk#8, ctr_store_sk#9, s_store_sk#16]
Arguments: [ctr_customer_sk#8], [ctr_customer_sk#8]

(34) CometNativeScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#18, c_customer_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(35) CometFilter
Input [2]: [c_customer_sk#18, c_customer_id#19]
Condition : isnotnull(c_customer_sk#18)

(36) CometProject
Input [2]: [c_customer_sk#18, c_customer_id#19]
Arguments: [c_customer_sk#18, c_customer_id#20], [c_customer_sk#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#19, 16, true, false, true) AS c_customer_id#20]

(37) CometBroadcastExchange
Input [2]: [c_customer_sk#18, c_customer_id#20]
Arguments: [c_customer_sk#18, c_customer_id#20]

(38) CometBroadcastHashJoin
Left output [1]: [ctr_customer_sk#8]
Right output [2]: [c_customer_sk#18, c_customer_id#20]
Arguments: [ctr_customer_sk#8], [c_customer_sk#18], Inner, BuildRight

(39) CometProject
Input [3]: [ctr_customer_sk#8, c_customer_sk#18, c_customer_id#20]
Arguments: [c_customer_id#20], [c_customer_id#20]

(40) CometTakeOrderedAndProject
Input [1]: [c_customer_id#20]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#20 ASC NULLS FIRST], output=[c_customer_id#20]), [c_customer_id#20], 100, 0, [c_customer_id#20 ASC NULLS FIRST], [c_customer_id#20]

(41) CometColumnarToRow [codegen id : 1]
Input [1]: [c_customer_id#20]

