== Physical Plan ==
TakeOrderedAndProject (105)
+- * HashAggregate (104)
   +- Exchange (103)
      +- * HashAggregate (102)
         +- * Expand (101)
            +- Union (100)
               :- * Project (67)
               :  +- * Filter (66)
               :     +- * HashAggregate (65)
               :        +- Exchange (64)
               :           +- * HashAggregate (63)
               :              +- * Project (62)
               :                 +- * BroadcastHashJoin Inner BuildRight (61)
               :                    :- * Project (59)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (58)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
               :                    :     :  :- * ColumnarToRow (3)
               :                    :     :  :  +- CometFilter (2)
               :                    :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
               :                    :     :  +- BroadcastExchange (50)
               :                    :     :     +- * Project (49)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (48)
               :                    :     :           :- * ColumnarToRow (6)
               :                    :     :           :  +- CometFilter (5)
               :                    :     :           :     +- CometScan parquet spark_catalog.default.item (4)
               :                    :     :           +- BroadcastExchange (47)
               :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
               :                    :     :                 :- * HashAggregate (35)
               :                    :     :                 :  +- Exchange (34)
               :                    :     :                 :     +- * ColumnarToRow (33)
               :                    :     :                 :        +- CometHashAggregate (32)
               :                    :     :                 :           +- CometProject (31)
               :                    :     :                 :              +- CometBroadcastHashJoin (30)
               :                    :     :                 :                 :- CometProject (28)
               :                    :     :                 :                 :  +- CometBroadcastHashJoin (27)
               :                    :     :                 :                 :     :- CometFilter (8)
               :                    :     :                 :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (7)
               :                    :     :                 :                 :     +- CometBroadcastExchange (26)
               :                    :     :                 :                 :        +- CometBroadcastHashJoin (25)
               :                    :     :                 :                 :           :- CometFilter (10)
               :                    :     :                 :                 :           :  +- CometScan parquet spark_catalog.default.item (9)
               :                    :     :                 :                 :           +- CometBroadcastExchange (24)
               :                    :     :                 :                 :              +- CometProject (23)
               :                    :     :                 :                 :                 +- CometBroadcastHashJoin (22)
               :                    :     :                 :                 :                    :- CometProject (17)
               :                    :     :                 :                 :                    :  +- CometBroadcastHashJoin (16)
               :                    :     :                 :                 :                    :     :- CometFilter (12)
               :                    :     :                 :                 :                    :     :  +- CometScan parquet spark_catalog.default.catalog_sales (11)
               :                    :     :                 :                 :                    :     +- CometBroadcastExchange (15)
               :                    :     :                 :                 :                    :        +- CometFilter (14)
               :                    :     :                 :                 :                    :           +- CometScan parquet spark_catalog.default.item (13)
               :                    :     :                 :                 :                    +- CometBroadcastExchange (21)
               :                    :     :                 :                 :                       +- CometProject (20)
               :                    :     :                 :                 :                          +- CometFilter (19)
               :                    :     :                 :                 :                             +- CometScan parquet spark_catalog.default.date_dim (18)
               :                    :     :                 :                 +- ReusedExchange (29)
               :                    :     :                 +- BroadcastExchange (45)
               :                    :     :                    +- * ColumnarToRow (44)
               :                    :     :                       +- CometProject (43)
               :                    :     :                          +- CometBroadcastHashJoin (42)
               :                    :     :                             :- CometProject (40)
               :                    :     :                             :  +- CometBroadcastHashJoin (39)
               :                    :     :                             :     :- CometFilter (37)
               :                    :     :                             :     :  +- CometScan parquet spark_catalog.default.web_sales (36)
               :                    :     :                             :     +- ReusedExchange (38)
               :                    :     :                             +- ReusedExchange (41)
               :                    :     +- BroadcastExchange (57)
               :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
               :                    :           :- * ColumnarToRow (54)
               :                    :           :  +- CometFilter (53)
               :                    :           :     +- CometScan parquet spark_catalog.default.item (52)
               :                    :           +- ReusedExchange (55)
               :                    +- ReusedExchange (60)
               :- * Project (83)
               :  +- * Filter (82)
               :     +- * HashAggregate (81)
               :        +- Exchange (80)
               :           +- * HashAggregate (79)
               :              +- * Project (78)
               :                 +- * BroadcastHashJoin Inner BuildRight (77)
               :                    :- * Project (75)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (74)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (72)
               :                    :     :  :- * ColumnarToRow (70)
               :                    :     :  :  +- CometFilter (69)
               :                    :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (68)
               :                    :     :  +- ReusedExchange (71)
               :                    :     +- ReusedExchange (73)
               :                    +- ReusedExchange (76)
               +- * Project (99)
                  +- * Filter (98)
                     +- * HashAggregate (97)
                        +- Exchange (96)
                           +- * HashAggregate (95)
                              +- * Project (94)
                                 +- * BroadcastHashJoin Inner BuildRight (93)
                                    :- * Project (91)
                                    :  +- * BroadcastHashJoin Inner BuildRight (90)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (88)
                                    :     :  :- * ColumnarToRow (86)
                                    :     :  :  +- CometFilter (85)
                                    :     :  :     +- CometScan parquet spark_catalog.default.web_sales (84)
                                    :     :  +- ReusedExchange (87)
                                    :     +- ReusedExchange (89)
                                    +- ReusedExchange (92)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 11]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(10) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(11) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(12) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(15) CometBroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(16) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Right output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_item_sk#17], [i_item_sk#20], Inner, BuildRight

(17) CometProject
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23], [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]

(18) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(19) CometFilter
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1999)) AND (d_year#25 <= 2001)) AND isnotnull(d_date_sk#24))

(20) CometProject
Input [2]: [d_date_sk#24, d_year#25]
Arguments: [d_date_sk#24], [d_date_sk#24]

(21) CometBroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: [d_date_sk#24]

(22) CometBroadcastHashJoin
Left output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#18], [d_date_sk#24], Inner, BuildRight

(23) CometProject
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23], [i_brand_id#21, i_class_id#22, i_category_id#23]

(24) CometBroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23]

(25) CometBroadcastHashJoin
Left output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)], [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)], LeftSemi, BuildRight

(26) CometBroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(27) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Right output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_item_sk#10], [i_item_sk#13], Inner, BuildRight

(28) CometProject
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16], [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]

(29) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#26]

(30) CometBroadcastHashJoin
Left output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [1]: [d_date_sk#26]
Arguments: [ss_sold_date_sk#11], [d_date_sk#26], Inner, BuildRight

(31) CometProject
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#26]
Arguments: [brand_id#27, class_id#28, category_id#29], [i_brand_id#14 AS brand_id#27, i_class_id#15 AS class_id#28, i_category_id#16 AS category_id#29]

(32) CometHashAggregate
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []

(33) ColumnarToRow [codegen id : 1]
Input [3]: [brand_id#27, class_id#28, category_id#29]

(34) Exchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: hashpartitioning(brand_id#27, class_id#28, category_id#29, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(35) HashAggregate [codegen id : 3]
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#27, class_id#28, category_id#29]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#31), dynamicpruningexpression(ws_sold_date_sk#31 IN dynamicpruning#32)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) CometFilter
Input [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Condition : isnotnull(ws_item_sk#30)

(38) ReusedExchange [Reuses operator id: 15]
Output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]

(39) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Right output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_item_sk#30], [i_item_sk#33], Inner, BuildRight

(40) CometProject
Input [6]: [ws_item_sk#30, ws_sold_date_sk#31, i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36], [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]

(41) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#37]

(42) CometBroadcastHashJoin
Left output [4]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]
Right output [1]: [d_date_sk#37]
Arguments: [ws_sold_date_sk#31], [d_date_sk#37], Inner, BuildRight

(43) CometProject
Input [5]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36, d_date_sk#37]
Arguments: [i_brand_id#34, i_class_id#35, i_category_id#36], [i_brand_id#34, i_class_id#35, i_category_id#36]

(44) ColumnarToRow [codegen id : 2]
Input [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]

(45) BroadcastExchange
Input [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(46) BroadcastHashJoin [codegen id : 3]
Left keys [6]: [coalesce(brand_id#27, 0), isnull(brand_id#27), coalesce(class_id#28, 0), isnull(class_id#28), coalesce(category_id#29, 0), isnull(category_id#29)]
Right keys [6]: [coalesce(i_brand_id#34, 0), isnull(i_brand_id#34), coalesce(i_class_id#35, 0), isnull(i_class_id#35), coalesce(i_category_id#36, 0), isnull(i_category_id#36)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=3]

(48) BroadcastHashJoin [codegen id : 4]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#27, class_id#28, category_id#29]
Join type: Inner
Join condition: None

(49) Project [codegen id : 4]
Output [1]: [i_item_sk#6 AS ss_item_sk#38]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#27, class_id#28, category_id#29]

(50) BroadcastExchange
Input [1]: [ss_item_sk#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(51) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) CometFilter
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Condition : isnotnull(i_item_sk#39)

(54) ColumnarToRow [codegen id : 9]
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#38]

(56) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_sk#39]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(58) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#39]
Join type: Inner
Join condition: None

(59) Project [codegen id : 11]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(60) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#43]

(61) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#43]
Join type: Inner
Join condition: None

(62) Project [codegen id : 11]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42, d_date_sk#43]

(63) HashAggregate [codegen id : 11]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#44, isEmpty#45, count#46]
Results [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]

(64) Exchange
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]
Arguments: hashpartitioning(i_brand_id#40, i_class_id#41, i_category_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(65) HashAggregate [codegen id : 12]
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#50, count(1)#51]
Results [5]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#50 AS sales#52, count(1)#51 AS number_sales#53]

(66) Filter [codegen id : 12]
Input [5]: [i_brand_id#40, i_class_id#41, i_category_id#42, sales#52, number_sales#53]
Condition : (isnotnull(sales#52) AND (cast(sales#52 as decimal(32,6)) > cast(Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(67) Project [codegen id : 12]
Output [6]: [sales#52, number_sales#53, store AS channel#56, i_brand_id#40 AS i_brand_id#57, i_class_id#41 AS i_class_id#58, i_category_id#42 AS i_category_id#59]
Input [5]: [i_brand_id#40, i_class_id#41, i_category_id#42, sales#52, number_sales#53]

(68) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#60, cs_quantity#61, cs_list_price#62, cs_sold_date_sk#63]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#63), dynamicpruningexpression(cs_sold_date_sk#63 IN dynamicpruning#64)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(69) CometFilter
Input [4]: [cs_item_sk#60, cs_quantity#61, cs_list_price#62, cs_sold_date_sk#63]
Condition : isnotnull(cs_item_sk#60)

(70) ColumnarToRow [codegen id : 23]
Input [4]: [cs_item_sk#60, cs_quantity#61, cs_list_price#62, cs_sold_date_sk#63]

(71) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#38]

(72) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#60]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(73) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#65, i_brand_id#66, i_class_id#67, i_category_id#68]

(74) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#60]
Right keys [1]: [i_item_sk#65]
Join type: Inner
Join condition: None

(75) Project [codegen id : 23]
Output [6]: [cs_quantity#61, cs_list_price#62, cs_sold_date_sk#63, i_brand_id#66, i_class_id#67, i_category_id#68]
Input [8]: [cs_item_sk#60, cs_quantity#61, cs_list_price#62, cs_sold_date_sk#63, i_item_sk#65, i_brand_id#66, i_class_id#67, i_category_id#68]

(76) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#69]

(77) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#63]
Right keys [1]: [d_date_sk#69]
Join type: Inner
Join condition: None

(78) Project [codegen id : 23]
Output [5]: [cs_quantity#61, cs_list_price#62, i_brand_id#66, i_class_id#67, i_category_id#68]
Input [7]: [cs_quantity#61, cs_list_price#62, cs_sold_date_sk#63, i_brand_id#66, i_class_id#67, i_category_id#68, d_date_sk#69]

(79) HashAggregate [codegen id : 23]
Input [5]: [cs_quantity#61, cs_list_price#62, i_brand_id#66, i_class_id#67, i_category_id#68]
Keys [3]: [i_brand_id#66, i_class_id#67, i_category_id#68]
Functions [2]: [partial_sum((cast(cs_quantity#61 as decimal(10,0)) * cs_list_price#62)), partial_count(1)]
Aggregate Attributes [3]: [sum#70, isEmpty#71, count#72]
Results [6]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum#73, isEmpty#74, count#75]

(80) Exchange
Input [6]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum#73, isEmpty#74, count#75]
Arguments: hashpartitioning(i_brand_id#66, i_class_id#67, i_category_id#68, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(81) HashAggregate [codegen id : 24]
Input [6]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum#73, isEmpty#74, count#75]
Keys [3]: [i_brand_id#66, i_class_id#67, i_category_id#68]
Functions [2]: [sum((cast(cs_quantity#61 as decimal(10,0)) * cs_list_price#62)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#61 as decimal(10,0)) * cs_list_price#62))#76, count(1)#77]
Results [5]: [i_brand_id#66, i_class_id#67, i_category_id#68, sum((cast(cs_quantity#61 as decimal(10,0)) * cs_list_price#62))#76 AS sales#78, count(1)#77 AS number_sales#79]

(82) Filter [codegen id : 24]
Input [5]: [i_brand_id#66, i_class_id#67, i_category_id#68, sales#78, number_sales#79]
Condition : (isnotnull(sales#78) AND (cast(sales#78 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(83) Project [codegen id : 24]
Output [6]: [sales#78, number_sales#79, catalog AS channel#80, i_brand_id#66, i_class_id#67, i_category_id#68]
Input [5]: [i_brand_id#66, i_class_id#67, i_category_id#68, sales#78, number_sales#79]

(84) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#84), dynamicpruningexpression(ws_sold_date_sk#84 IN dynamicpruning#85)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(85) CometFilter
Input [4]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84]
Condition : isnotnull(ws_item_sk#81)

(86) ColumnarToRow [codegen id : 35]
Input [4]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84]

(87) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#38]

(88) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#81]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(89) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#86, i_brand_id#87, i_class_id#88, i_category_id#89]

(90) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#81]
Right keys [1]: [i_item_sk#86]
Join type: Inner
Join condition: None

(91) Project [codegen id : 35]
Output [6]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84, i_brand_id#87, i_class_id#88, i_category_id#89]
Input [8]: [ws_item_sk#81, ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84, i_item_sk#86, i_brand_id#87, i_class_id#88, i_category_id#89]

(92) ReusedExchange [Reuses operator id: 127]
Output [1]: [d_date_sk#90]

(93) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#84]
Right keys [1]: [d_date_sk#90]
Join type: Inner
Join condition: None

(94) Project [codegen id : 35]
Output [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#87, i_class_id#88, i_category_id#89]
Input [7]: [ws_quantity#82, ws_list_price#83, ws_sold_date_sk#84, i_brand_id#87, i_class_id#88, i_category_id#89, d_date_sk#90]

(95) HashAggregate [codegen id : 35]
Input [5]: [ws_quantity#82, ws_list_price#83, i_brand_id#87, i_class_id#88, i_category_id#89]
Keys [3]: [i_brand_id#87, i_class_id#88, i_category_id#89]
Functions [2]: [partial_sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83)), partial_count(1)]
Aggregate Attributes [3]: [sum#91, isEmpty#92, count#93]
Results [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum#94, isEmpty#95, count#96]

(96) Exchange
Input [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum#94, isEmpty#95, count#96]
Arguments: hashpartitioning(i_brand_id#87, i_class_id#88, i_category_id#89, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(97) HashAggregate [codegen id : 36]
Input [6]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum#94, isEmpty#95, count#96]
Keys [3]: [i_brand_id#87, i_class_id#88, i_category_id#89]
Functions [2]: [sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83))#97, count(1)#98]
Results [5]: [i_brand_id#87, i_class_id#88, i_category_id#89, sum((cast(ws_quantity#82 as decimal(10,0)) * ws_list_price#83))#97 AS sales#99, count(1)#98 AS number_sales#100]

(98) Filter [codegen id : 36]
Input [5]: [i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100]
Condition : (isnotnull(sales#99) AND (cast(sales#99 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#54, [id=#55] as decimal(32,6))))

(99) Project [codegen id : 36]
Output [6]: [sales#99, number_sales#100, web AS channel#101, i_brand_id#87, i_class_id#88, i_category_id#89]
Input [5]: [i_brand_id#87, i_class_id#88, i_category_id#89, sales#99, number_sales#100]

(100) Union

(101) Expand [codegen id : 37]
Input [6]: [sales#52, number_sales#53, channel#56, i_brand_id#57, i_class_id#58, i_category_id#59]
Arguments: [[sales#52, number_sales#53, channel#56, i_brand_id#57, i_class_id#58, i_category_id#59, 0], [sales#52, number_sales#53, channel#56, i_brand_id#57, i_class_id#58, null, 1], [sales#52, number_sales#53, channel#56, i_brand_id#57, null, null, 3], [sales#52, number_sales#53, channel#56, null, null, null, 7], [sales#52, number_sales#53, null, null, null, null, 15]], [sales#52, number_sales#53, channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]

(102) HashAggregate [codegen id : 37]
Input [7]: [sales#52, number_sales#53, channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]
Keys [5]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]
Functions [2]: [partial_sum(sales#52), partial_sum(number_sales#53)]
Aggregate Attributes [3]: [sum#107, isEmpty#108, sum#109]
Results [8]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, sum#110, isEmpty#111, sum#112]

(103) Exchange
Input [8]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, sum#110, isEmpty#111, sum#112]
Arguments: hashpartitioning(channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(104) HashAggregate [codegen id : 38]
Input [8]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106, sum#110, isEmpty#111, sum#112]
Keys [5]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, spark_grouping_id#106]
Functions [2]: [sum(sales#52), sum(number_sales#53)]
Aggregate Attributes [2]: [sum(sales#52)#113, sum(number_sales#53)#114]
Results [6]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, sum(sales#52)#113 AS sum(sales)#115, sum(number_sales#53)#114 AS sum(number_sales)#116]

(105) TakeOrderedAndProject
Input [6]: [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, sum(sales)#115, sum(number_sales)#116]
Arguments: 100, [channel#102 ASC NULLS FIRST, i_brand_id#103 ASC NULLS FIRST, i_class_id#104 ASC NULLS FIRST, i_category_id#105 ASC NULLS FIRST], [channel#102, i_brand_id#103, i_class_id#104, i_category_id#105, sum(sales)#115, sum(number_sales)#116]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#54, [id=#55]
* HashAggregate (122)
+- Exchange (121)
   +- * ColumnarToRow (120)
      +- CometHashAggregate (119)
         +- CometUnion (118)
            :- CometProject (109)
            :  +- CometBroadcastHashJoin (108)
            :     :- CometScan parquet spark_catalog.default.store_sales (106)
            :     +- ReusedExchange (107)
            :- CometProject (113)
            :  +- CometBroadcastHashJoin (112)
            :     :- CometScan parquet spark_catalog.default.catalog_sales (110)
            :     +- ReusedExchange (111)
            +- CometProject (117)
               +- CometBroadcastHashJoin (116)
                  :- CometScan parquet spark_catalog.default.web_sales (114)
                  +- ReusedExchange (115)


(106) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#117, ss_list_price#118, ss_sold_date_sk#119]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#119), dynamicpruningexpression(ss_sold_date_sk#119 IN dynamicpruning#120)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(107) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#121]

(108) CometBroadcastHashJoin
Left output [3]: [ss_quantity#117, ss_list_price#118, ss_sold_date_sk#119]
Right output [1]: [d_date_sk#121]
Arguments: [ss_sold_date_sk#119], [d_date_sk#121], Inner, BuildRight

(109) CometProject
Input [4]: [ss_quantity#117, ss_list_price#118, ss_sold_date_sk#119, d_date_sk#121]
Arguments: [quantity#122, list_price#123], [ss_quantity#117 AS quantity#122, ss_list_price#118 AS list_price#123]

(110) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#124, cs_list_price#125, cs_sold_date_sk#126]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#126), dynamicpruningexpression(cs_sold_date_sk#126 IN dynamicpruning#127)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(111) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#128]

(112) CometBroadcastHashJoin
Left output [3]: [cs_quantity#124, cs_list_price#125, cs_sold_date_sk#126]
Right output [1]: [d_date_sk#128]
Arguments: [cs_sold_date_sk#126], [d_date_sk#128], Inner, BuildRight

(113) CometProject
Input [4]: [cs_quantity#124, cs_list_price#125, cs_sold_date_sk#126, d_date_sk#128]
Arguments: [quantity#129, list_price#130], [cs_quantity#124 AS quantity#129, cs_list_price#125 AS list_price#130]

(114) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#131, ws_list_price#132, ws_sold_date_sk#133]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#133), dynamicpruningexpression(ws_sold_date_sk#133 IN dynamicpruning#134)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(115) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#135]

(116) CometBroadcastHashJoin
Left output [3]: [ws_quantity#131, ws_list_price#132, ws_sold_date_sk#133]
Right output [1]: [d_date_sk#135]
Arguments: [ws_sold_date_sk#133], [d_date_sk#135], Inner, BuildRight

(117) CometProject
Input [4]: [ws_quantity#131, ws_list_price#132, ws_sold_date_sk#133, d_date_sk#135]
Arguments: [quantity#136, list_price#137], [ws_quantity#131 AS quantity#136, ws_list_price#132 AS list_price#137]

(118) CometUnion
Child 0 Input [2]: [quantity#122, list_price#123]
Child 1 Input [2]: [quantity#129, list_price#130]
Child 2 Input [2]: [quantity#136, list_price#137]

(119) CometHashAggregate
Input [2]: [quantity#122, list_price#123]
Keys: []
Functions [1]: [partial_avg((cast(quantity#122 as decimal(10,0)) * list_price#123))]

(120) ColumnarToRow [codegen id : 1]
Input [2]: [sum#138, count#139]

(121) Exchange
Input [2]: [sum#138, count#139]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(122) HashAggregate [codegen id : 2]
Input [2]: [sum#138, count#139]
Keys: []
Functions [1]: [avg((cast(quantity#122 as decimal(10,0)) * list_price#123))]
Aggregate Attributes [1]: [avg((cast(quantity#122 as decimal(10,0)) * list_price#123))#140]
Results [1]: [avg((cast(quantity#122 as decimal(10,0)) * list_price#123))#140 AS average_sales#141]

Subquery:2 Hosting operator id = 106 Hosting Expression = ss_sold_date_sk#119 IN dynamicpruning#12

Subquery:3 Hosting operator id = 110 Hosting Expression = cs_sold_date_sk#126 IN dynamicpruning#12

Subquery:4 Hosting operator id = 114 Hosting Expression = ws_sold_date_sk#133 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (127)
+- * ColumnarToRow (126)
   +- CometProject (125)
      +- CometFilter (124)
         +- CometScan parquet spark_catalog.default.date_dim (123)


(123) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#43, d_year#142, d_moy#143]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(124) CometFilter
Input [3]: [d_date_sk#43, d_year#142, d_moy#143]
Condition : ((((isnotnull(d_year#142) AND isnotnull(d_moy#143)) AND (d_year#142 = 2001)) AND (d_moy#143 = 11)) AND isnotnull(d_date_sk#43))

(125) CometProject
Input [3]: [d_date_sk#43, d_year#142, d_moy#143]
Arguments: [d_date_sk#43], [d_date_sk#43]

(126) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#43]

(127) BroadcastExchange
Input [1]: [d_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (132)
+- * ColumnarToRow (131)
   +- CometProject (130)
      +- CometFilter (129)
         +- CometScan parquet spark_catalog.default.date_dim (128)


(128) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#144]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(129) CometFilter
Input [2]: [d_date_sk#26, d_year#144]
Condition : (((isnotnull(d_year#144) AND (d_year#144 >= 1999)) AND (d_year#144 <= 2001)) AND isnotnull(d_date_sk#26))

(130) CometProject
Input [2]: [d_date_sk#26, d_year#144]
Arguments: [d_date_sk#26], [d_date_sk#26]

(131) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#26]

(132) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:7 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#31 IN dynamicpruning#12

Subquery:9 Hosting operator id = 82 Hosting Expression = ReusedSubquery Subquery scalar-subquery#54, [id=#55]

Subquery:10 Hosting operator id = 68 Hosting Expression = cs_sold_date_sk#63 IN dynamicpruning#5

Subquery:11 Hosting operator id = 98 Hosting Expression = ReusedSubquery Subquery scalar-subquery#54, [id=#55]

Subquery:12 Hosting operator id = 84 Hosting Expression = ws_sold_date_sk#84 IN dynamicpruning#5


