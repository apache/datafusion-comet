== Physical Plan ==
* CometColumnarToRow (50)
+- CometTakeOrderedAndProject (49)
   +- CometProject (48)
      +- CometBroadcastHashJoin (47)
         :- CometProject (42)
         :  +- CometBroadcastHashJoin (41)
         :     :- CometProject (36)
         :     :  +- CometBroadcastHashJoin (35)
         :     :     :- CometFilter (18)
         :     :     :  +- CometHashAggregate (17)
         :     :     :     +- CometExchange (16)
         :     :     :        +- CometHashAggregate (15)
         :     :     :           +- CometProject (14)
         :     :     :              +- CometBroadcastHashJoin (13)
         :     :     :                 :- CometProject (8)
         :     :     :                 :  +- CometBroadcastHashJoin (7)
         :     :     :                 :     :- CometFilter (2)
         :     :     :                 :     :  +- CometScan parquet spark_catalog.default.catalog_returns (1)
         :     :     :                 :     +- CometBroadcastExchange (6)
         :     :     :                 :        +- CometProject (5)
         :     :     :                 :           +- CometFilter (4)
         :     :     :                 :              +- CometScan parquet spark_catalog.default.date_dim (3)
         :     :     :                 +- CometBroadcastExchange (12)
         :     :     :                    +- CometProject (11)
         :     :     :                       +- CometFilter (10)
         :     :     :                          +- CometScan parquet spark_catalog.default.customer_address (9)
         :     :     +- CometBroadcastExchange (34)
         :     :        +- CometFilter (33)
         :     :           +- CometHashAggregate (32)
         :     :              +- CometExchange (31)
         :     :                 +- CometHashAggregate (30)
         :     :                    +- CometHashAggregate (29)
         :     :                       +- CometExchange (28)
         :     :                          +- CometHashAggregate (27)
         :     :                             +- CometProject (26)
         :     :                                +- CometBroadcastHashJoin (25)
         :     :                                   :- CometProject (23)
         :     :                                   :  +- CometBroadcastHashJoin (22)
         :     :                                   :     :- CometFilter (20)
         :     :                                   :     :  +- CometScan parquet spark_catalog.default.catalog_returns (19)
         :     :                                   :     +- ReusedExchange (21)
         :     :                                   +- ReusedExchange (24)
         :     +- CometBroadcastExchange (40)
         :        +- CometProject (39)
         :           +- CometFilter (38)
         :              +- CometScan parquet spark_catalog.default.customer (37)
         +- CometBroadcastExchange (46)
            +- CometProject (45)
               +- CometFilter (44)
                  +- CometScan parquet spark_catalog.default.customer_address (43)


(1) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(cr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) CometFilter
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : (isnotnull(cr_returning_addr_sk#2) AND isnotnull(cr_returning_customer_sk#1))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [cr_returned_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]
Arguments: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3], [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]

(9) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(10) CometFilter
Input [2]: [ca_address_sk#8, ca_state#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#9, 2, true, false, true)))

(11) CometProject
Input [2]: [ca_address_sk#8, ca_state#9]
Arguments: [ca_address_sk#8, ca_state#10], [ca_address_sk#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#9, 2, true, false, true) AS ca_state#10]

(12) CometBroadcastExchange
Input [2]: [ca_address_sk#8, ca_state#10]
Arguments: [ca_address_sk#8, ca_state#10]

(13) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Right output [2]: [ca_address_sk#8, ca_state#10]
Arguments: [cr_returning_addr_sk#2], [ca_address_sk#8], Inner, BuildRight

(14) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#8, ca_state#10]
Arguments: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10], [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]

(15) CometHashAggregate
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]

(16) CometExchange
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#11]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometHashAggregate
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#11]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]

(18) CometFilter
Input [3]: [ctr_customer_sk#12, ctr_state#13, ctr_total_return#14]
Condition : isnotnull(ctr_total_return#14)

(19) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(cr_returned_date_sk#4 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(20) CometFilter
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : isnotnull(cr_returning_addr_sk#2)

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#6]

(22) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [cr_returned_date_sk#4], [d_date_sk#6], Inner, BuildRight

(23) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]
Arguments: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3], [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]

(24) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#8, ca_state#10]

(25) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Right output [2]: [ca_address_sk#8, ca_state#10]
Arguments: [cr_returning_addr_sk#2], [ca_address_sk#8], Inner, BuildRight

(26) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#8, ca_state#10]
Arguments: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10], [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]

(27) CometHashAggregate
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]

(28) CometExchange
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#16]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(29) CometHashAggregate
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#16]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]

(30) CometHashAggregate
Input [2]: [ctr_state#13, ctr_total_return#14]
Keys [1]: [ctr_state#13]
Functions [1]: [partial_avg(ctr_total_return#14)]

(31) CometExchange
Input [3]: [ctr_state#13, sum#17, count#18]
Arguments: hashpartitioning(ctr_state#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(32) CometHashAggregate
Input [3]: [ctr_state#13, sum#17, count#18]
Keys [1]: [ctr_state#13]
Functions [1]: [avg(ctr_total_return#14)]

(33) CometFilter
Input [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_state#13#20]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#19)

(34) CometBroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_state#13#20]
Arguments: [(avg(ctr_total_return) * 1.2)#19, ctr_state#13#20]

(35) CometBroadcastHashJoin
Left output [3]: [ctr_customer_sk#12, ctr_state#13, ctr_total_return#14]
Right output [2]: [(avg(ctr_total_return) * 1.2)#19, ctr_state#13#20]
Arguments: [ctr_state#13], [ctr_state#13#20], Inner, (cast(ctr_total_return#14 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#19), BuildRight

(36) CometProject
Input [5]: [ctr_customer_sk#12, ctr_state#13, ctr_total_return#14, (avg(ctr_total_return) * 1.2)#19, ctr_state#13#20]
Arguments: [ctr_customer_sk#12, ctr_total_return#14], [ctr_customer_sk#12, ctr_total_return#14]

(37) CometScan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(38) CometFilter
Input [6]: [c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26]
Condition : (isnotnull(c_customer_sk#21) AND isnotnull(c_current_addr_sk#23))

(39) CometProject
Input [6]: [c_customer_sk#21, c_customer_id#22, c_current_addr_sk#23, c_salutation#24, c_first_name#25, c_last_name#26]
Arguments: [c_customer_sk#21, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30], [c_customer_sk#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#22, 16, true, false, true) AS c_customer_id#27, c_current_addr_sk#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_salutation#24, 10, true, false, true) AS c_salutation#28, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#25, 20, true, false, true) AS c_first_name#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#26, 30, true, false, true) AS c_last_name#30]

(40) CometBroadcastExchange
Input [6]: [c_customer_sk#21, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30]
Arguments: [c_customer_sk#21, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30]

(41) CometBroadcastHashJoin
Left output [2]: [ctr_customer_sk#12, ctr_total_return#14]
Right output [6]: [c_customer_sk#21, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30]
Arguments: [ctr_customer_sk#12], [c_customer_sk#21], Inner, BuildRight

(42) CometProject
Input [8]: [ctr_customer_sk#12, ctr_total_return#14, c_customer_sk#21, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30]
Arguments: [ctr_total_return#14, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30], [ctr_total_return#14, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30]

(43) CometScan parquet spark_catalog.default.customer_address
Output [12]: [ca_address_sk#31, ca_street_number#32, ca_street_name#33, ca_street_type#34, ca_suite_number#35, ca_city#36, ca_county#37, ca_state#38, ca_zip#39, ca_country#40, ca_gmt_offset#41, ca_location_type#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(44) CometFilter
Input [12]: [ca_address_sk#31, ca_street_number#32, ca_street_name#33, ca_street_type#34, ca_suite_number#35, ca_city#36, ca_county#37, ca_state#38, ca_zip#39, ca_country#40, ca_gmt_offset#41, ca_location_type#42]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#38, 2, true, false, true) = GA) AND isnotnull(ca_address_sk#31))

(45) CometProject
Input [12]: [ca_address_sk#31, ca_street_number#32, ca_street_name#33, ca_street_type#34, ca_suite_number#35, ca_city#36, ca_county#37, ca_state#38, ca_zip#39, ca_country#40, ca_gmt_offset#41, ca_location_type#42]
Arguments: [ca_address_sk#31, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48], [ca_address_sk#31, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_street_number#32, 10, true, false, true) AS ca_street_number#43, ca_street_name#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_street_type#34, 15, true, false, true) AS ca_street_type#44, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_suite_number#35, 10, true, false, true) AS ca_suite_number#45, ca_city#36, ca_county#37, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#38, 2, true, false, true) AS ca_state#46, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_zip#39, 10, true, false, true) AS ca_zip#47, ca_country#40, ca_gmt_offset#41, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_location_type#42, 20, true, false, true) AS ca_location_type#48]

(46) CometBroadcastExchange
Input [12]: [ca_address_sk#31, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48]
Arguments: [ca_address_sk#31, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48]

(47) CometBroadcastHashJoin
Left output [6]: [ctr_total_return#14, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30]
Right output [12]: [ca_address_sk#31, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48]
Arguments: [c_current_addr_sk#23], [ca_address_sk#31], Inner, BuildRight

(48) CometProject
Input [18]: [ctr_total_return#14, c_customer_id#27, c_current_addr_sk#23, c_salutation#28, c_first_name#29, c_last_name#30, ca_address_sk#31, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48]
Arguments: [c_customer_id#27, c_salutation#28, c_first_name#29, c_last_name#30, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48, ctr_total_return#14], [c_customer_id#27, c_salutation#28, c_first_name#29, c_last_name#30, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48, ctr_total_return#14]

(49) CometTakeOrderedAndProject
Input [16]: [c_customer_id#27, c_salutation#28, c_first_name#29, c_last_name#30, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48, ctr_total_return#14]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#27 ASC NULLS FIRST,c_salutation#28 ASC NULLS FIRST,c_first_name#29 ASC NULLS FIRST,c_last_name#30 ASC NULLS FIRST,ca_street_number#43 ASC NULLS FIRST,ca_street_name#33 ASC NULLS FIRST,ca_street_type#44 ASC NULLS FIRST,ca_suite_number#45 ASC NULLS FIRST,ca_city#36 ASC NULLS FIRST,ca_county#37 ASC NULLS FIRST,ca_state#46 ASC NULLS FIRST,ca_zip#47 ASC NULLS FIRST,ca_country#40 ASC NULLS FIRST,ca_gmt_offset#41 ASC NULLS FIRST,ca_location_type#48 ASC NULLS FIRST,ctr_total_return#14 ASC NULLS FIRST], output=[c_customer_id#27,c_salutation#28,c_first_name#29,c_last_name#30,ca_street_number#43,ca_street_name#33,ca_street_type#44,ca_suite_number#45,ca_city#36,ca_county#37,ca_state#46,ca_zip#47,ca_country#40,ca_gmt_offset#41,ca_location_type#48,ctr_total_return#14]), [c_customer_id#27, c_salutation#28, c_first_name#29, c_last_name#30, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48, ctr_total_return#14], 100, [c_customer_id#27 ASC NULLS FIRST, c_salutation#28 ASC NULLS FIRST, c_first_name#29 ASC NULLS FIRST, c_last_name#30 ASC NULLS FIRST, ca_street_number#43 ASC NULLS FIRST, ca_street_name#33 ASC NULLS FIRST, ca_street_type#44 ASC NULLS FIRST, ca_suite_number#45 ASC NULLS FIRST, ca_city#36 ASC NULLS FIRST, ca_county#37 ASC NULLS FIRST, ca_state#46 ASC NULLS FIRST, ca_zip#47 ASC NULLS FIRST, ca_country#40 ASC NULLS FIRST, ca_gmt_offset#41 ASC NULLS FIRST, ca_location_type#48 ASC NULLS FIRST, ctr_total_return#14 ASC NULLS FIRST], [c_customer_id#27, c_salutation#28, c_first_name#29, c_last_name#30, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48, ctr_total_return#14]

(50) CometColumnarToRow [codegen id : 1]
Input [16]: [c_customer_id#27, c_salutation#28, c_first_name#29, c_last_name#30, ca_street_number#43, ca_street_name#33, ca_street_type#44, ca_suite_number#45, ca_city#36, ca_county#37, ca_state#46, ca_zip#47, ca_country#40, ca_gmt_offset#41, ca_location_type#48, ctr_total_return#14]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (55)
+- * CometColumnarToRow (54)
   +- CometProject (53)
      +- CometFilter (52)
         +- CometScan parquet spark_catalog.default.date_dim (51)


(51) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(52) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(53) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(54) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(55) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 19 Hosting Expression = cr_returned_date_sk#4 IN dynamicpruning#5


