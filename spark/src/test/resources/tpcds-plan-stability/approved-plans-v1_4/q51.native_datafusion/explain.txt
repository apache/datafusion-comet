== Physical Plan ==
TakeOrderedAndProject (27)
+- * Filter (26)
   +- Window (25)
      +- * Sort (24)
         +- Exchange (23)
            +- * Project (22)
               +- * SortMergeJoin FullOuter (21)
                  :- * Sort (18)
                  :  +- Exchange (17)
                  :     +- * Project (16)
                  :        +- Window (15)
                  :           +- * ColumnarToRow (14)
                  :              +- CometSort (13)
                  :                 +- CometExchange (12)
                  :                    +- CometHashAggregate (11)
                  :                       +- CometExchange (10)
                  :                          +- CometHashAggregate (9)
                  :                             +- CometProject (8)
                  :                                +- CometBroadcastHashJoin (7)
                  :                                   :- CometFilter (2)
                  :                                   :  +- CometNativeScan: `spark_catalog`.`default`.`web_sales` (1)
                  :                                   +- CometBroadcastExchange (6)
                  :                                      +- CometProject (5)
                  :                                         +- CometFilter (4)
                  :                                            +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (3)
                  +- * Sort (20)
                     +- ReusedExchange (19)


(1) CometNativeScan: `spark_catalog`.`default`.`web_sales`
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Arguments: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Arguments: [d_date_sk#4, d_date#5, d_month_seq#6]

(4) CometFilter
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Arguments: [d_date_sk#4, d_date#5], [d_date_sk#4, d_date#5]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: [d_date_sk#4, d_date#5]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Right output [2]: [d_date_sk#4, d_date#5]
Arguments: [ws_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#4, d_date#5]
Arguments: [ws_item_sk#1, ws_sales_price#2, d_date#5], [ws_item_sk#1, ws_sales_price#2, d_date#5]

(9) CometHashAggregate
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#5]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]

(10) CometExchange
Input [3]: [ws_item_sk#1, d_date#5, sum#7]
Arguments: hashpartitioning(ws_item_sk#1, d_date#5, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(11) CometHashAggregate
Input [3]: [ws_item_sk#1, d_date#5, sum#7]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]

(12) CometExchange
Input [4]: [item_sk#8, d_date#5, _w0#9, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(13) CometSort
Input [4]: [item_sk#8, d_date#5, _w0#9, ws_item_sk#1]
Arguments: [item_sk#8, d_date#5, _w0#9, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST]

(14) ColumnarToRow [codegen id : 1]
Input [4]: [item_sk#8, d_date#5, _w0#9, ws_item_sk#1]

(15) Window
Input [4]: [item_sk#8, d_date#5, _w0#9, ws_item_sk#1]
Arguments: [sum(_w0#9) windowspecdefinition(ws_item_sk#1, d_date#5 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#10], [ws_item_sk#1], [d_date#5 ASC NULLS FIRST]

(16) Project [codegen id : 2]
Output [3]: [item_sk#8, d_date#5, cume_sales#10]
Input [5]: [item_sk#8, d_date#5, _w0#9, ws_item_sk#1, cume_sales#10]

(17) Exchange
Input [3]: [item_sk#8, d_date#5, cume_sales#10]
Arguments: hashpartitioning(item_sk#8, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 3]
Input [3]: [item_sk#8, d_date#5, cume_sales#10]
Arguments: [item_sk#8 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(19) ReusedExchange [Reuses operator id: 17]
Output [3]: [item_sk#11, d_date#12, cume_sales#13]

(20) Sort [codegen id : 6]
Input [3]: [item_sk#11, d_date#12, cume_sales#13]
Arguments: [item_sk#11 ASC NULLS FIRST, d_date#12 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 7]
Left keys [2]: [item_sk#8, d_date#5]
Right keys [2]: [item_sk#11, d_date#12]
Join type: FullOuter
Join condition: None

(22) Project [codegen id : 7]
Output [4]: [CASE WHEN isnotnull(item_sk#8) THEN item_sk#8 ELSE item_sk#11 END AS item_sk#14, CASE WHEN isnotnull(d_date#5) THEN d_date#5 ELSE d_date#12 END AS d_date#15, cume_sales#10 AS web_sales#16, cume_sales#13 AS store_sales#17]
Input [6]: [item_sk#8, d_date#5, cume_sales#10, item_sk#11, d_date#12, cume_sales#13]

(23) Exchange
Input [4]: [item_sk#14, d_date#15, web_sales#16, store_sales#17]
Arguments: hashpartitioning(item_sk#14, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 8]
Input [4]: [item_sk#14, d_date#15, web_sales#16, store_sales#17]
Arguments: [item_sk#14 ASC NULLS FIRST, d_date#15 ASC NULLS FIRST], false, 0

(25) Window
Input [4]: [item_sk#14, d_date#15, web_sales#16, store_sales#17]
Arguments: [max(web_sales#16) windowspecdefinition(item_sk#14, d_date#15 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#18, max(store_sales#17) windowspecdefinition(item_sk#14, d_date#15 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#19], [item_sk#14], [d_date#15 ASC NULLS FIRST]

(26) Filter [codegen id : 9]
Input [6]: [item_sk#14, d_date#15, web_sales#16, store_sales#17, web_cumulative#18, store_cumulative#19]
Condition : ((isnotnull(web_cumulative#18) AND isnotnull(store_cumulative#19)) AND (web_cumulative#18 > store_cumulative#19))

(27) TakeOrderedAndProject
Input [6]: [item_sk#14, d_date#15, web_sales#16, store_sales#17, web_cumulative#18, store_cumulative#19]
Arguments: 100, [item_sk#14 ASC NULLS FIRST, d_date#15 ASC NULLS FIRST], [item_sk#14, d_date#15, web_sales#16, store_sales#17, web_cumulative#18, store_cumulative#19]

