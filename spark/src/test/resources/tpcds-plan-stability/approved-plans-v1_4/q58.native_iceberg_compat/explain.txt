== Physical Plan ==
* ColumnarToRow (54)
+- CometTakeOrderedAndProject (53)
   +- CometProject (52)
      +- CometBroadcastHashJoin (51)
         :- CometProject (37)
         :  +- CometBroadcastHashJoin (36)
         :     :- CometFilter (22)
         :     :  +- CometHashAggregate (21)
         :     :     +- CometExchange (20)
         :     :        +- CometHashAggregate (19)
         :     :           +- CometProject (18)
         :     :              +- CometBroadcastHashJoin (17)
         :     :                 :- CometProject (7)
         :     :                 :  +- CometBroadcastHashJoin (6)
         :     :                 :     :- CometFilter (2)
         :     :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :                 :     +- CometBroadcastExchange (5)
         :     :                 :        +- CometFilter (4)
         :     :                 :           +- CometScan parquet spark_catalog.default.item (3)
         :     :                 +- CometBroadcastExchange (16)
         :     :                    +- CometProject (15)
         :     :                       +- CometBroadcastHashJoin (14)
         :     :                          :- CometFilter (9)
         :     :                          :  +- CometScan parquet spark_catalog.default.date_dim (8)
         :     :                          +- CometBroadcastExchange (13)
         :     :                             +- CometProject (12)
         :     :                                +- CometFilter (11)
         :     :                                   +- CometScan parquet spark_catalog.default.date_dim (10)
         :     +- CometBroadcastExchange (35)
         :        +- CometFilter (34)
         :           +- CometHashAggregate (33)
         :              +- CometExchange (32)
         :                 +- CometHashAggregate (31)
         :                    +- CometProject (30)
         :                       +- CometBroadcastHashJoin (29)
         :                          :- CometProject (27)
         :                          :  +- CometBroadcastHashJoin (26)
         :                          :     :- CometFilter (24)
         :                          :     :  +- CometScan parquet spark_catalog.default.catalog_sales (23)
         :                          :     +- ReusedExchange (25)
         :                          +- ReusedExchange (28)
         +- CometBroadcastExchange (50)
            +- CometFilter (49)
               +- CometHashAggregate (48)
                  +- CometExchange (47)
                     +- CometHashAggregate (46)
                        +- CometProject (45)
                           +- CometBroadcastHashJoin (44)
                              :- CometProject (42)
                              :  +- CometBroadcastHashJoin (41)
                              :     :- CometFilter (39)
                              :     :  +- CometScan parquet spark_catalog.default.web_sales (38)
                              :     +- ReusedExchange (40)
                              +- ReusedExchange (43)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(i_item_id#5))

(5) CometBroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: [i_item_sk#4, i_item_id#5]

(6) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#4, i_item_id#5]
Arguments: [ss_item_sk#1], [i_item_sk#4], Inner, BuildRight

(7) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#4, i_item_id#5]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#5], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#5]

(8) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(9) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : isnotnull(d_date_sk#6)

(10) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(11) CometFilter
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND (d_week_seq#9 = Subquery scalar-subquery#10, [id=#11]))

(12) CometProject
Input [2]: [d_date#8, d_week_seq#9]
Arguments: [d_date#8], [d_date#8]

(13) CometBroadcastExchange
Input [1]: [d_date#8]
Arguments: [d_date#8]

(14) CometBroadcastHashJoin
Left output [2]: [d_date_sk#6, d_date#7]
Right output [1]: [d_date#8]
Arguments: [d_date#7], [d_date#8], LeftSemi, BuildRight

(15) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(16) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(17) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#5]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#3], [d_date_sk#6], Inner, BuildRight

(18) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#5, d_date_sk#6]
Arguments: [ss_ext_sales_price#2, i_item_id#5], [ss_ext_sales_price#2, i_item_id#5]

(19) CometHashAggregate
Input [2]: [ss_ext_sales_price#2, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(20) CometExchange
Input [2]: [i_item_id#5, sum#12]
Arguments: hashpartitioning(i_item_id#5, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(21) CometHashAggregate
Input [2]: [i_item_id#5, sum#12]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]

(22) CometFilter
Input [2]: [item_id#13, ss_item_rev#14]
Condition : isnotnull(ss_item_rev#14)

(23) CometScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#17)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(24) CometFilter
Input [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Condition : isnotnull(cs_item_sk#15)

(25) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#18, i_item_id#19]

(26) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Right output [2]: [i_item_sk#18, i_item_id#19]
Arguments: [cs_item_sk#15], [i_item_sk#18], Inner, BuildRight

(27) CometProject
Input [5]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_sk#18, i_item_id#19]
Arguments: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#19], [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#19]

(28) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#20]

(29) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#19]
Right output [1]: [d_date_sk#20]
Arguments: [cs_sold_date_sk#17], [d_date_sk#20], Inner, BuildRight

(30) CometProject
Input [4]: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#19, d_date_sk#20]
Arguments: [cs_ext_sales_price#16, i_item_id#19], [cs_ext_sales_price#16, i_item_id#19]

(31) CometHashAggregate
Input [2]: [cs_ext_sales_price#16, i_item_id#19]
Keys [1]: [i_item_id#19]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#16))]

(32) CometExchange
Input [2]: [i_item_id#19, sum#21]
Arguments: hashpartitioning(i_item_id#19, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(33) CometHashAggregate
Input [2]: [i_item_id#19, sum#21]
Keys [1]: [i_item_id#19]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#16))]

(34) CometFilter
Input [2]: [item_id#22, cs_item_rev#23]
Condition : isnotnull(cs_item_rev#23)

(35) CometBroadcastExchange
Input [2]: [item_id#22, cs_item_rev#23]
Arguments: [item_id#22, cs_item_rev#23]

(36) CometBroadcastHashJoin
Left output [2]: [item_id#13, ss_item_rev#14]
Right output [2]: [item_id#22, cs_item_rev#23]
Arguments: [item_id#13], [item_id#22], Inner, ((((cast(ss_item_rev#14 as decimal(19,3)) >= (0.9 * cs_item_rev#23)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= (1.1 * cs_item_rev#23))) AND (cast(cs_item_rev#23 as decimal(19,3)) >= (0.9 * ss_item_rev#14))) AND (cast(cs_item_rev#23 as decimal(20,3)) <= (1.1 * ss_item_rev#14))), BuildRight

(37) CometProject
Input [4]: [item_id#13, ss_item_rev#14, item_id#22, cs_item_rev#23]
Arguments: [item_id#13, ss_item_rev#14, cs_item_rev#23], [item_id#13, ss_item_rev#14, cs_item_rev#23]

(38) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#26)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(39) CometFilter
Input [3]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26]
Condition : isnotnull(ws_item_sk#24)

(40) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#27, i_item_id#28]

(41) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26]
Right output [2]: [i_item_sk#27, i_item_id#28]
Arguments: [ws_item_sk#24], [i_item_sk#27], Inner, BuildRight

(42) CometProject
Input [5]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_sk#27, i_item_id#28]
Arguments: [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#28], [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#28]

(43) ReusedExchange [Reuses operator id: 16]
Output [1]: [d_date_sk#29]

(44) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#28]
Right output [1]: [d_date_sk#29]
Arguments: [ws_sold_date_sk#26], [d_date_sk#29], Inner, BuildRight

(45) CometProject
Input [4]: [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#28, d_date_sk#29]
Arguments: [ws_ext_sales_price#25, i_item_id#28], [ws_ext_sales_price#25, i_item_id#28]

(46) CometHashAggregate
Input [2]: [ws_ext_sales_price#25, i_item_id#28]
Keys [1]: [i_item_id#28]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#25))]

(47) CometExchange
Input [2]: [i_item_id#28, sum#30]
Arguments: hashpartitioning(i_item_id#28, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(48) CometHashAggregate
Input [2]: [i_item_id#28, sum#30]
Keys [1]: [i_item_id#28]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#25))]

(49) CometFilter
Input [2]: [item_id#31, ws_item_rev#32]
Condition : isnotnull(ws_item_rev#32)

(50) CometBroadcastExchange
Input [2]: [item_id#31, ws_item_rev#32]
Arguments: [item_id#31, ws_item_rev#32]

(51) CometBroadcastHashJoin
Left output [3]: [item_id#13, ss_item_rev#14, cs_item_rev#23]
Right output [2]: [item_id#31, ws_item_rev#32]
Arguments: [item_id#13], [item_id#31], Inner, ((((((((cast(ss_item_rev#14 as decimal(19,3)) >= (0.9 * ws_item_rev#32)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= (1.1 * ws_item_rev#32))) AND (cast(cs_item_rev#23 as decimal(19,3)) >= (0.9 * ws_item_rev#32))) AND (cast(cs_item_rev#23 as decimal(20,3)) <= (1.1 * ws_item_rev#32))) AND (cast(ws_item_rev#32 as decimal(19,3)) >= (0.9 * ss_item_rev#14))) AND (cast(ws_item_rev#32 as decimal(20,3)) <= (1.1 * ss_item_rev#14))) AND (cast(ws_item_rev#32 as decimal(19,3)) >= (0.9 * cs_item_rev#23))) AND (cast(ws_item_rev#32 as decimal(20,3)) <= (1.1 * cs_item_rev#23))), BuildRight

(52) CometProject
Input [5]: [item_id#13, ss_item_rev#14, cs_item_rev#23, item_id#31, ws_item_rev#32]
Arguments: [item_id#13, ss_item_rev#14, ss_dev#33, cs_item_rev#23, cs_dev#34, ws_item_rev#32, ws_dev#35, average#36], [item_id#13, ss_item_rev#14, (((ss_item_rev#14 / ((ss_item_rev#14 + cs_item_rev#23) + ws_item_rev#32)) / 3) * 100) AS ss_dev#33, cs_item_rev#23, (((cs_item_rev#23 / ((ss_item_rev#14 + cs_item_rev#23) + ws_item_rev#32)) / 3) * 100) AS cs_dev#34, ws_item_rev#32, (((ws_item_rev#32 / ((ss_item_rev#14 + cs_item_rev#23) + ws_item_rev#32)) / 3) * 100) AS ws_dev#35, (((ss_item_rev#14 + cs_item_rev#23) + ws_item_rev#32) / 3) AS average#36]

(53) CometTakeOrderedAndProject
Input [8]: [item_id#13, ss_item_rev#14, ss_dev#33, cs_item_rev#23, cs_dev#34, ws_item_rev#32, ws_dev#35, average#36]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[item_id#13 ASC NULLS FIRST,ss_item_rev#14 ASC NULLS FIRST], output=[item_id#13,ss_item_rev#14,ss_dev#33,cs_item_rev#23,cs_dev#34,ws_item_rev#32,ws_dev#35,average#36]), [item_id#13, ss_item_rev#14, ss_dev#33, cs_item_rev#23, cs_dev#34, ws_item_rev#32, ws_dev#35, average#36], 100, [item_id#13 ASC NULLS FIRST, ss_item_rev#14 ASC NULLS FIRST], [item_id#13, ss_item_rev#14, ss_dev#33, cs_item_rev#23, cs_dev#34, ws_item_rev#32, ws_dev#35, average#36]

(54) ColumnarToRow [codegen id : 1]
Input [8]: [item_id#13, ss_item_rev#14, ss_dev#33, cs_item_rev#23, cs_dev#34, ws_item_rev#32, ws_dev#35, average#36]

===== Subqueries =====

Subquery:1 Hosting operator id = 11 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
* ColumnarToRow (58)
+- CometProject (57)
   +- CometFilter (56)
      +- CometScan parquet spark_catalog.default.date_dim (55)


(55) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#37, d_week_seq#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(56) CometFilter
Input [2]: [d_date#37, d_week_seq#38]
Condition : (isnotnull(d_date#37) AND (d_date#37 = 2000-01-03))

(57) CometProject
Input [2]: [d_date#37, d_week_seq#38]
Arguments: [d_week_seq#38], [d_week_seq#38]

(58) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#38]


