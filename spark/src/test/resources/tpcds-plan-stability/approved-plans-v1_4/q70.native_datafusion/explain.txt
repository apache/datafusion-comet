== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- Window (46)
      +- * CometColumnarToRow (45)
         +- CometSort (44)
            +- CometColumnarExchange (43)
               +- * HashAggregate (42)
                  +- * CometColumnarToRow (41)
                     +- CometColumnarExchange (40)
                        +- * HashAggregate (39)
                           +- * Expand (38)
                              +- * Project (37)
                                 +- * BroadcastHashJoin Inner BuildRight (36)
                                    :- * CometColumnarToRow (9)
                                    :  +- CometProject (8)
                                    :     +- CometBroadcastHashJoin (7)
                                    :        :- CometFilter (2)
                                    :        :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
                                    :        +- CometBroadcastExchange (6)
                                    :           +- CometProject (5)
                                    :              +- CometFilter (4)
                                    :                 +- CometNativeScan parquet spark_catalog.default.date_dim (3)
                                    +- BroadcastExchange (35)
                                       +- * Project (34)
                                          +- * BroadcastHashJoin LeftSemi BuildRight (33)
                                             :- * CometColumnarToRow (12)
                                             :  +- CometFilter (11)
                                             :     +- CometNativeScan parquet spark_catalog.default.store (10)
                                             +- BroadcastExchange (32)
                                                +- * Project (31)
                                                   +- * Filter (30)
                                                      +- Window (29)
                                                         +- * CometColumnarToRow (28)
                                                            +- CometSort (27)
                                                               +- CometHashAggregate (26)
                                                                  +- CometExchange (25)
                                                                     +- CometHashAggregate (24)
                                                                        +- CometProject (23)
                                                                           +- CometBroadcastHashJoin (22)
                                                                              :- CometProject (20)
                                                                              :  +- CometBroadcastHashJoin (19)
                                                                              :     :- CometFilter (14)
                                                                              :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (13)
                                                                              :     +- CometBroadcastExchange (18)
                                                                              :        +- CometProject (17)
                                                                              :           +- CometFilter (16)
                                                                              :              +- CometNativeScan parquet spark_catalog.default.store (15)
                                                                              +- ReusedExchange (21)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4], [d_date_sk#4]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: [d_date_sk#4]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#4]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#4]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) CometColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometNativeScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(12) CometColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(13) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#11)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_store_sk#9)

(15) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#6, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#6, s_state#8]
Condition : isnotnull(s_store_sk#6)

(17) CometProject
Input [2]: [s_store_sk#6, s_state#8]
Arguments: [s_store_sk#6, s_state#12], [s_store_sk#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#8, 2, true, false, true) AS s_state#12]

(18) CometBroadcastExchange
Input [2]: [s_store_sk#6, s_state#12]
Arguments: [s_store_sk#6, s_state#12]

(19) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Right output [2]: [s_store_sk#6, s_state#12]
Arguments: [ss_store_sk#9], [s_store_sk#6], Inner, BuildRight

(20) CometProject
Input [5]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11, s_store_sk#6, s_state#12]
Arguments: [ss_net_profit#10, ss_sold_date_sk#11, s_state#12], [ss_net_profit#10, ss_sold_date_sk#11, s_state#12]

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#4]

(22) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#12]
Right output [1]: [d_date_sk#4]
Arguments: [ss_sold_date_sk#11], [d_date_sk#4], Inner, BuildRight

(23) CometProject
Input [4]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#12, d_date_sk#4]
Arguments: [ss_net_profit#10, s_state#12], [ss_net_profit#10, s_state#12]

(24) CometHashAggregate
Input [2]: [ss_net_profit#10, s_state#12]
Keys [1]: [s_state#12]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]

(25) CometExchange
Input [2]: [s_state#12, sum#13]
Arguments: hashpartitioning(s_state#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(26) CometHashAggregate
Input [2]: [s_state#12, sum#13]
Keys [1]: [s_state#12]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]

(27) CometSort
Input [3]: [s_state#12, _w0#14, s_state#12]
Arguments: [s_state#12, _w0#14, s_state#12], [s_state#12 ASC NULLS FIRST, _w0#14 DESC NULLS LAST]

(28) CometColumnarToRow [codegen id : 1]
Input [3]: [s_state#12, _w0#14, s_state#12]

(29) Window
Input [3]: [s_state#12, _w0#14, s_state#12]
Arguments: [rank(_w0#14) windowspecdefinition(s_state#12, _w0#14 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#15], [s_state#12], [_w0#14 DESC NULLS LAST]

(30) Filter [codegen id : 2]
Input [4]: [s_state#12, _w0#14, s_state#12, ranking#15]
Condition : (ranking#15 <= 5)

(31) Project [codegen id : 2]
Output [1]: [s_state#12]
Input [4]: [s_state#12, _w0#14, s_state#12, ranking#15]

(32) BroadcastExchange
Input [1]: [s_state#12]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(33) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#8, 2, true, false, true)]
Right keys [1]: [s_state#12]
Join type: LeftSemi
Join condition: None

(34) Project [codegen id : 3]
Output [3]: [s_store_sk#6, s_county#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#8, 2, true, false, true) AS s_state#16]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(35) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(36) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join type: Inner
Join condition: None

(37) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_state#16, s_county#7]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#16]

(38) Expand [codegen id : 4]
Input [3]: [ss_net_profit#2, s_state#16, s_county#7]
Arguments: [[ss_net_profit#2, s_state#16, s_county#7, 0], [ss_net_profit#2, s_state#16, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#17, s_county#18, spark_grouping_id#19]

(39) HashAggregate [codegen id : 4]
Input [4]: [ss_net_profit#2, s_state#17, s_county#18, spark_grouping_id#19]
Keys [3]: [s_state#17, s_county#18, spark_grouping_id#19]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#20]
Results [4]: [s_state#17, s_county#18, spark_grouping_id#19, sum#21]

(40) CometColumnarExchange
Input [4]: [s_state#17, s_county#18, spark_grouping_id#19, sum#21]
Arguments: hashpartitioning(s_state#17, s_county#18, spark_grouping_id#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(41) CometColumnarToRow [codegen id : 5]
Input [4]: [s_state#17, s_county#18, spark_grouping_id#19, sum#21]

(42) HashAggregate [codegen id : 5]
Input [4]: [s_state#17, s_county#18, spark_grouping_id#19, sum#21]
Keys [3]: [s_state#17, s_county#18, spark_grouping_id#19]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#22]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#22,17,2) AS total_sum#23, s_state#17, s_county#18, (cast((shiftright(spark_grouping_id#19, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#19, 0) & 1) as tinyint)) AS lochierarchy#24, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#22,17,2) AS _w0#25, (cast((shiftright(spark_grouping_id#19, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#19, 0) & 1) as tinyint)) AS _w1#26, CASE WHEN (cast((shiftright(spark_grouping_id#19, 0) & 1) as tinyint) = 0) THEN s_state#17 END AS _w2#27]

(43) CometColumnarExchange
Input [7]: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, _w0#25, _w1#26, _w2#27]
Arguments: hashpartitioning(_w1#26, _w2#27, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(44) CometSort
Input [7]: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, _w0#25, _w1#26, _w2#27]
Arguments: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, _w0#25, _w1#26, _w2#27], [_w1#26 ASC NULLS FIRST, _w2#27 ASC NULLS FIRST, _w0#25 DESC NULLS LAST]

(45) CometColumnarToRow [codegen id : 6]
Input [7]: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, _w0#25, _w1#26, _w2#27]

(46) Window
Input [7]: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, _w0#25, _w1#26, _w2#27]
Arguments: [rank(_w0#25) windowspecdefinition(_w1#26, _w2#27, _w0#25 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#28], [_w1#26, _w2#27], [_w0#25 DESC NULLS LAST]

(47) Project [codegen id : 7]
Output [5]: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, rank_within_parent#28]
Input [8]: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, _w0#25, _w1#26, _w2#27, rank_within_parent#28]

(48) TakeOrderedAndProject
Input [5]: [total_sum#23, s_state#17, s_county#18, lochierarchy#24, rank_within_parent#28]
Arguments: 100, [lochierarchy#24 DESC NULLS LAST, CASE WHEN (lochierarchy#24 = 0) THEN s_state#17 END ASC NULLS FIRST, rank_within_parent#28 ASC NULLS FIRST], [total_sum#23, s_state#17, s_county#18, lochierarchy#24, rank_within_parent#28]

