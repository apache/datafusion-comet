== Physical Plan ==
* ColumnarToRow (55)
+- CometTakeOrderedAndProject (54)
   +- CometProject (53)
      +- CometBroadcastHashJoin (52)
         :- CometProject (39)
         :  +- CometBroadcastHashJoin (38)
         :     :- CometHashAggregate (25)
         :     :  +- CometExchange (24)
         :     :     +- CometHashAggregate (23)
         :     :        +- CometProject (22)
         :     :           +- CometBroadcastHashJoin (21)
         :     :              :- CometProject (7)
         :     :              :  +- CometBroadcastHashJoin (6)
         :     :              :     :- CometFilter (2)
         :     :              :     :  +- CometScan parquet spark_catalog.default.store_returns (1)
         :     :              :     +- CometBroadcastExchange (5)
         :     :              :        +- CometFilter (4)
         :     :              :           +- CometScan parquet spark_catalog.default.item (3)
         :     :              +- CometBroadcastExchange (20)
         :     :                 +- CometProject (19)
         :     :                    +- CometBroadcastHashJoin (18)
         :     :                       :- CometFilter (9)
         :     :                       :  +- CometScan parquet spark_catalog.default.date_dim (8)
         :     :                       +- CometBroadcastExchange (17)
         :     :                          +- CometProject (16)
         :     :                             +- CometBroadcastHashJoin (15)
         :     :                                :- CometScan parquet spark_catalog.default.date_dim (10)
         :     :                                +- CometBroadcastExchange (14)
         :     :                                   +- CometProject (13)
         :     :                                      +- CometFilter (12)
         :     :                                         +- CometScan parquet spark_catalog.default.date_dim (11)
         :     +- CometBroadcastExchange (37)
         :        +- CometHashAggregate (36)
         :           +- CometExchange (35)
         :              +- CometHashAggregate (34)
         :                 +- CometProject (33)
         :                    +- CometBroadcastHashJoin (32)
         :                       :- CometProject (30)
         :                       :  +- CometBroadcastHashJoin (29)
         :                       :     :- CometFilter (27)
         :                       :     :  +- CometScan parquet spark_catalog.default.catalog_returns (26)
         :                       :     +- ReusedExchange (28)
         :                       +- ReusedExchange (31)
         +- CometBroadcastExchange (51)
            +- CometHashAggregate (50)
               +- CometExchange (49)
                  +- CometHashAggregate (48)
                     +- CometProject (47)
                        +- CometBroadcastHashJoin (46)
                           :- CometProject (44)
                           :  +- CometBroadcastHashJoin (43)
                           :     :- CometFilter (41)
                           :     :  +- CometScan parquet spark_catalog.default.web_returns (40)
                           :     +- ReusedExchange (42)
                           +- ReusedExchange (45)


(1) CometScan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#3)]
PushedFilters: [IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_return_quantity:int>

(2) CometFilter
Input [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Condition : isnotnull(sr_item_sk#1)

(3) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(i_item_id#5))

(5) CometBroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: [i_item_sk#4, i_item_id#5]

(6) CometBroadcastHashJoin
Left output [3]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3]
Right output [2]: [i_item_sk#4, i_item_id#5]
Arguments: [sr_item_sk#1], [i_item_sk#4], Inner, BuildRight

(7) CometProject
Input [5]: [sr_item_sk#1, sr_return_quantity#2, sr_returned_date_sk#3, i_item_sk#4, i_item_id#5]
Arguments: [sr_return_quantity#2, sr_returned_date_sk#3, i_item_id#5], [sr_return_quantity#2, sr_returned_date_sk#3, i_item_id#5]

(8) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(9) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : isnotnull(d_date_sk#6)

(10) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(11) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#10, d_week_seq#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
ReadSchema: struct<d_date:date,d_week_seq:int>

(12) CometFilter
Input [2]: [d_date#10, d_week_seq#11]
Condition : cast(d_date#10 as string) IN (2000-06-30,2000-09-27,2000-11-17)

(13) CometProject
Input [2]: [d_date#10, d_week_seq#11]
Arguments: [d_week_seq#11], [d_week_seq#11]

(14) CometBroadcastExchange
Input [1]: [d_week_seq#11]
Arguments: [d_week_seq#11]

(15) CometBroadcastHashJoin
Left output [2]: [d_date#8, d_week_seq#9]
Right output [1]: [d_week_seq#11]
Arguments: [d_week_seq#9], [d_week_seq#11], LeftSemi, BuildRight

(16) CometProject
Input [2]: [d_date#8, d_week_seq#9]
Arguments: [d_date#8], [d_date#8]

(17) CometBroadcastExchange
Input [1]: [d_date#8]
Arguments: [d_date#8]

(18) CometBroadcastHashJoin
Left output [2]: [d_date_sk#6, d_date#7]
Right output [1]: [d_date#8]
Arguments: [d_date#7], [d_date#8], LeftSemi, BuildRight

(19) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(20) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(21) CometBroadcastHashJoin
Left output [3]: [sr_return_quantity#2, sr_returned_date_sk#3, i_item_id#5]
Right output [1]: [d_date_sk#6]
Arguments: [sr_returned_date_sk#3], [d_date_sk#6], Inner, BuildRight

(22) CometProject
Input [4]: [sr_return_quantity#2, sr_returned_date_sk#3, i_item_id#5, d_date_sk#6]
Arguments: [sr_return_quantity#2, i_item_id#5], [sr_return_quantity#2, i_item_id#5]

(23) CometHashAggregate
Input [2]: [sr_return_quantity#2, i_item_id#5]
Keys [1]: [i_item_id#5]
Functions [1]: [partial_sum(sr_return_quantity#2)]

(24) CometExchange
Input [2]: [i_item_id#5, sum#12]
Arguments: hashpartitioning(i_item_id#5, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(25) CometHashAggregate
Input [2]: [i_item_id#5, sum#12]
Keys [1]: [i_item_id#5]
Functions [1]: [sum(sr_return_quantity#2)]

(26) CometScan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_item_sk#13, cr_return_quantity#14, cr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#15)]
PushedFilters: [IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_return_quantity:int>

(27) CometFilter
Input [3]: [cr_item_sk#13, cr_return_quantity#14, cr_returned_date_sk#15]
Condition : isnotnull(cr_item_sk#13)

(28) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#16, i_item_id#17]

(29) CometBroadcastHashJoin
Left output [3]: [cr_item_sk#13, cr_return_quantity#14, cr_returned_date_sk#15]
Right output [2]: [i_item_sk#16, i_item_id#17]
Arguments: [cr_item_sk#13], [i_item_sk#16], Inner, BuildRight

(30) CometProject
Input [5]: [cr_item_sk#13, cr_return_quantity#14, cr_returned_date_sk#15, i_item_sk#16, i_item_id#17]
Arguments: [cr_return_quantity#14, cr_returned_date_sk#15, i_item_id#17], [cr_return_quantity#14, cr_returned_date_sk#15, i_item_id#17]

(31) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#18]

(32) CometBroadcastHashJoin
Left output [3]: [cr_return_quantity#14, cr_returned_date_sk#15, i_item_id#17]
Right output [1]: [d_date_sk#18]
Arguments: [cr_returned_date_sk#15], [d_date_sk#18], Inner, BuildRight

(33) CometProject
Input [4]: [cr_return_quantity#14, cr_returned_date_sk#15, i_item_id#17, d_date_sk#18]
Arguments: [cr_return_quantity#14, i_item_id#17], [cr_return_quantity#14, i_item_id#17]

(34) CometHashAggregate
Input [2]: [cr_return_quantity#14, i_item_id#17]
Keys [1]: [i_item_id#17]
Functions [1]: [partial_sum(cr_return_quantity#14)]

(35) CometExchange
Input [2]: [i_item_id#17, sum#19]
Arguments: hashpartitioning(i_item_id#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(36) CometHashAggregate
Input [2]: [i_item_id#17, sum#19]
Keys [1]: [i_item_id#17]
Functions [1]: [sum(cr_return_quantity#14)]

(37) CometBroadcastExchange
Input [2]: [item_id#20, cr_item_qty#21]
Arguments: [item_id#20, cr_item_qty#21]

(38) CometBroadcastHashJoin
Left output [2]: [item_id#22, sr_item_qty#23]
Right output [2]: [item_id#20, cr_item_qty#21]
Arguments: [item_id#22], [item_id#20], Inner, BuildRight

(39) CometProject
Input [4]: [item_id#22, sr_item_qty#23, item_id#20, cr_item_qty#21]
Arguments: [item_id#22, sr_item_qty#23, cr_item_qty#21], [item_id#22, sr_item_qty#23, cr_item_qty#21]

(40) CometScan parquet spark_catalog.default.web_returns
Output [3]: [wr_item_sk#24, wr_return_quantity#25, wr_returned_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#26)]
PushedFilters: [IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_return_quantity:int>

(41) CometFilter
Input [3]: [wr_item_sk#24, wr_return_quantity#25, wr_returned_date_sk#26]
Condition : isnotnull(wr_item_sk#24)

(42) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#27, i_item_id#28]

(43) CometBroadcastHashJoin
Left output [3]: [wr_item_sk#24, wr_return_quantity#25, wr_returned_date_sk#26]
Right output [2]: [i_item_sk#27, i_item_id#28]
Arguments: [wr_item_sk#24], [i_item_sk#27], Inner, BuildRight

(44) CometProject
Input [5]: [wr_item_sk#24, wr_return_quantity#25, wr_returned_date_sk#26, i_item_sk#27, i_item_id#28]
Arguments: [wr_return_quantity#25, wr_returned_date_sk#26, i_item_id#28], [wr_return_quantity#25, wr_returned_date_sk#26, i_item_id#28]

(45) ReusedExchange [Reuses operator id: 20]
Output [1]: [d_date_sk#29]

(46) CometBroadcastHashJoin
Left output [3]: [wr_return_quantity#25, wr_returned_date_sk#26, i_item_id#28]
Right output [1]: [d_date_sk#29]
Arguments: [wr_returned_date_sk#26], [d_date_sk#29], Inner, BuildRight

(47) CometProject
Input [4]: [wr_return_quantity#25, wr_returned_date_sk#26, i_item_id#28, d_date_sk#29]
Arguments: [wr_return_quantity#25, i_item_id#28], [wr_return_quantity#25, i_item_id#28]

(48) CometHashAggregate
Input [2]: [wr_return_quantity#25, i_item_id#28]
Keys [1]: [i_item_id#28]
Functions [1]: [partial_sum(wr_return_quantity#25)]

(49) CometExchange
Input [2]: [i_item_id#28, sum#30]
Arguments: hashpartitioning(i_item_id#28, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(50) CometHashAggregate
Input [2]: [i_item_id#28, sum#30]
Keys [1]: [i_item_id#28]
Functions [1]: [sum(wr_return_quantity#25)]

(51) CometBroadcastExchange
Input [2]: [item_id#31, wr_item_qty#32]
Arguments: [item_id#31, wr_item_qty#32]

(52) CometBroadcastHashJoin
Left output [3]: [item_id#22, sr_item_qty#23, cr_item_qty#21]
Right output [2]: [item_id#31, wr_item_qty#32]
Arguments: [item_id#22], [item_id#31], Inner, BuildRight

(53) CometProject
Input [5]: [item_id#22, sr_item_qty#23, cr_item_qty#21, item_id#31, wr_item_qty#32]
Arguments: [item_id#22, sr_item_qty#23, sr_dev#33, cr_item_qty#21, cr_dev#34, wr_item_qty#32, wr_dev#35, average#36], [item_id#22, sr_item_qty#23, (((cast(sr_item_qty#23 as double) / knownfloatingpointnormalized(normalizenanandzero(cast(((sr_item_qty#23 + cr_item_qty#21) + wr_item_qty#32) as double)))) / 3.0) * 100.0) AS sr_dev#33, cr_item_qty#21, (((cast(cr_item_qty#21 as double) / knownfloatingpointnormalized(normalizenanandzero(cast(((sr_item_qty#23 + cr_item_qty#21) + wr_item_qty#32) as double)))) / 3.0) * 100.0) AS cr_dev#34, wr_item_qty#32, (((cast(wr_item_qty#32 as double) / knownfloatingpointnormalized(normalizenanandzero(cast(((sr_item_qty#23 + cr_item_qty#21) + wr_item_qty#32) as double)))) / 3.0) * 100.0) AS wr_dev#35, (cast(((sr_item_qty#23 + cr_item_qty#21) + wr_item_qty#32) as decimal(20,0)) / 3.0) AS average#36]

(54) CometTakeOrderedAndProject
Input [8]: [item_id#22, sr_item_qty#23, sr_dev#33, cr_item_qty#21, cr_dev#34, wr_item_qty#32, wr_dev#35, average#36]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[item_id#22 ASC NULLS FIRST,sr_item_qty#23 ASC NULLS FIRST], output=[item_id#22,sr_item_qty#23,sr_dev#33,cr_item_qty#21,cr_dev#34,wr_item_qty#32,wr_dev#35,average#36]), [item_id#22, sr_item_qty#23, sr_dev#33, cr_item_qty#21, cr_dev#34, wr_item_qty#32, wr_dev#35, average#36], 100, [item_id#22 ASC NULLS FIRST, sr_item_qty#23 ASC NULLS FIRST], [item_id#22, sr_item_qty#23, sr_dev#33, cr_item_qty#21, cr_dev#34, wr_item_qty#32, wr_dev#35, average#36]

(55) ColumnarToRow [codegen id : 1]
Input [8]: [item_id#22, sr_item_qty#23, sr_dev#33, cr_item_qty#21, cr_dev#34, wr_item_qty#32, wr_dev#35, average#36]

