== Physical Plan ==
* ColumnarToRow (33)
+- CometSort (32)
   +- CometColumnarExchange (31)
      +- CometProject (30)
         +- CometBroadcastHashJoin (29)
            :- CometProject (19)
            :  +- CometBroadcastHashJoin (18)
            :     :- CometHashAggregate (13)
            :     :  +- CometExchange (12)
            :     :     +- CometHashAggregate (11)
            :     :        +- CometProject (10)
            :     :           +- CometBroadcastHashJoin (9)
            :     :              :- CometUnion (5)
            :     :              :  :- CometProject (2)
            :     :              :  :  +- CometScan parquet spark_catalog.default.web_sales (1)
            :     :              :  +- CometProject (4)
            :     :              :     +- CometScan parquet spark_catalog.default.catalog_sales (3)
            :     :              +- CometBroadcastExchange (8)
            :     :                 +- CometFilter (7)
            :     :                    +- CometScan parquet spark_catalog.default.date_dim (6)
            :     +- CometBroadcastExchange (17)
            :        +- CometProject (16)
            :           +- CometFilter (15)
            :              +- CometScan parquet spark_catalog.default.date_dim (14)
            +- CometBroadcastExchange (28)
               +- CometProject (27)
                  +- CometBroadcastHashJoin (26)
                     :- CometHashAggregate (21)
                     :  +- ReusedExchange (20)
                     +- CometBroadcastExchange (25)
                        +- CometProject (24)
                           +- CometFilter (23)
                              +- CometScan parquet spark_catalog.default.date_dim (22)


(1) CometScan parquet spark_catalog.default.web_sales
Output [2]: [ws_ext_sales_price#1, ws_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#2)]
ReadSchema: struct<ws_ext_sales_price:decimal(7,2)>

(2) CometProject
Input [2]: [ws_ext_sales_price#1, ws_sold_date_sk#2]
Arguments: [sold_date_sk#3, sales_price#4], [ws_sold_date_sk#2 AS sold_date_sk#3, ws_ext_sales_price#1 AS sales_price#4]

(3) CometScan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ext_sales_price#5, cs_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#6)]
ReadSchema: struct<cs_ext_sales_price:decimal(7,2)>

(4) CometProject
Input [2]: [cs_ext_sales_price#5, cs_sold_date_sk#6]
Arguments: [sold_date_sk#7, sales_price#8], [cs_sold_date_sk#6 AS sold_date_sk#7, cs_ext_sales_price#5 AS sales_price#8]

(5) CometUnion
Child 0 Input [2]: [sold_date_sk#3, sales_price#4]
Child 1 Input [2]: [sold_date_sk#7, sales_price#8]

(6) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(7) CometFilter
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Condition : (isnotnull(d_date_sk#9) AND isnotnull(d_week_seq#10))

(8) CometBroadcastExchange
Input [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Arguments: [d_date_sk#9, d_week_seq#10, d_day_name#11]

(9) CometBroadcastHashJoin
Left output [2]: [sold_date_sk#3, sales_price#4]
Right output [3]: [d_date_sk#9, d_week_seq#10, d_day_name#11]
Arguments: [sold_date_sk#3], [d_date_sk#9], Inner, BuildRight

(10) CometProject
Input [5]: [sold_date_sk#3, sales_price#4, d_date_sk#9, d_week_seq#10, d_day_name#11]
Arguments: [sales_price#4, d_week_seq#10, d_day_name#11], [sales_price#4, d_week_seq#10, d_day_name#11]

(11) CometHashAggregate
Input [3]: [sales_price#4, d_week_seq#10, d_day_name#11]
Keys [1]: [d_week_seq#10]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday   ) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday   ) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday  ) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday ) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday   ) THEN sales_price#4 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday ) THEN sales_price#4 END))]

(12) CometExchange
Input [8]: [d_week_seq#10, sum#12, sum#13, sum#14, sum#15, sum#16, sum#17, sum#18]
Arguments: hashpartitioning(d_week_seq#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(13) CometHashAggregate
Input [8]: [d_week_seq#10, sum#12, sum#13, sum#14, sum#15, sum#16, sum#17, sum#18]
Keys [1]: [d_week_seq#10]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday   ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday   ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday  ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday   ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday ) THEN sales_price#4 END))]

(14) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_week_seq#19, d_year#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_week_seq)]
ReadSchema: struct<d_week_seq:int,d_year:int>

(15) CometFilter
Input [2]: [d_week_seq#19, d_year#20]
Condition : ((isnotnull(d_year#20) AND (d_year#20 = 2001)) AND isnotnull(d_week_seq#19))

(16) CometProject
Input [2]: [d_week_seq#19, d_year#20]
Arguments: [d_week_seq#19], [d_week_seq#19]

(17) CometBroadcastExchange
Input [1]: [d_week_seq#19]
Arguments: [d_week_seq#19]

(18) CometBroadcastHashJoin
Left output [8]: [d_week_seq#10, sun_sales#21, mon_sales#22, tue_sales#23, wed_sales#24, thu_sales#25, fri_sales#26, sat_sales#27]
Right output [1]: [d_week_seq#19]
Arguments: [d_week_seq#10], [d_week_seq#19], Inner, BuildRight

(19) CometProject
Input [9]: [d_week_seq#10, sun_sales#21, mon_sales#22, tue_sales#23, wed_sales#24, thu_sales#25, fri_sales#26, sat_sales#27, d_week_seq#19]
Arguments: [d_week_seq1#28, sun_sales1#29, mon_sales1#30, tue_sales1#31, wed_sales1#32, thu_sales1#33, fri_sales1#34, sat_sales1#35], [d_week_seq#10 AS d_week_seq1#28, sun_sales#21 AS sun_sales1#29, mon_sales#22 AS mon_sales1#30, tue_sales#23 AS tue_sales1#31, wed_sales#24 AS wed_sales1#32, thu_sales#25 AS thu_sales1#33, fri_sales#26 AS fri_sales1#34, sat_sales#27 AS sat_sales1#35]

(20) ReusedExchange [Reuses operator id: 12]
Output [8]: [d_week_seq#10, sum#36, sum#37, sum#38, sum#39, sum#40, sum#41, sum#42]

(21) CometHashAggregate
Input [8]: [d_week_seq#10, sum#36, sum#37, sum#38, sum#39, sum#40, sum#41, sum#42]
Keys [1]: [d_week_seq#10]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#11 = Sunday   ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Monday   ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Tuesday  ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Wednesday) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Thursday ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Friday   ) THEN sales_price#4 END)), sum(UnscaledValue(CASE WHEN (d_day_name#11 = Saturday ) THEN sales_price#4 END))]

(22) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_week_seq#43, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_week_seq)]
ReadSchema: struct<d_week_seq:int,d_year:int>

(23) CometFilter
Input [2]: [d_week_seq#43, d_year#44]
Condition : ((isnotnull(d_year#44) AND (d_year#44 = 2002)) AND isnotnull(d_week_seq#43))

(24) CometProject
Input [2]: [d_week_seq#43, d_year#44]
Arguments: [d_week_seq#43], [d_week_seq#43]

(25) CometBroadcastExchange
Input [1]: [d_week_seq#43]
Arguments: [d_week_seq#43]

(26) CometBroadcastHashJoin
Left output [8]: [d_week_seq#10, sun_sales#21, mon_sales#22, tue_sales#23, wed_sales#24, thu_sales#25, fri_sales#26, sat_sales#27]
Right output [1]: [d_week_seq#43]
Arguments: [d_week_seq#10], [d_week_seq#43], Inner, BuildRight

(27) CometProject
Input [9]: [d_week_seq#10, sun_sales#21, mon_sales#22, tue_sales#23, wed_sales#24, thu_sales#25, fri_sales#26, sat_sales#27, d_week_seq#43]
Arguments: [d_week_seq2#45, sun_sales2#46, mon_sales2#47, tue_sales2#48, wed_sales2#49, thu_sales2#50, fri_sales2#51, sat_sales2#52], [d_week_seq#10 AS d_week_seq2#45, sun_sales#21 AS sun_sales2#46, mon_sales#22 AS mon_sales2#47, tue_sales#23 AS tue_sales2#48, wed_sales#24 AS wed_sales2#49, thu_sales#25 AS thu_sales2#50, fri_sales#26 AS fri_sales2#51, sat_sales#27 AS sat_sales2#52]

(28) CometBroadcastExchange
Input [8]: [d_week_seq2#45, sun_sales2#46, mon_sales2#47, tue_sales2#48, wed_sales2#49, thu_sales2#50, fri_sales2#51, sat_sales2#52]
Arguments: [d_week_seq2#45, sun_sales2#46, mon_sales2#47, tue_sales2#48, wed_sales2#49, thu_sales2#50, fri_sales2#51, sat_sales2#52]

(29) CometBroadcastHashJoin
Left output [8]: [d_week_seq1#28, sun_sales1#29, mon_sales1#30, tue_sales1#31, wed_sales1#32, thu_sales1#33, fri_sales1#34, sat_sales1#35]
Right output [8]: [d_week_seq2#45, sun_sales2#46, mon_sales2#47, tue_sales2#48, wed_sales2#49, thu_sales2#50, fri_sales2#51, sat_sales2#52]
Arguments: [d_week_seq1#28], [(d_week_seq2#45 - 53)], Inner, BuildRight

(30) CometProject
Input [16]: [d_week_seq1#28, sun_sales1#29, mon_sales1#30, tue_sales1#31, wed_sales1#32, thu_sales1#33, fri_sales1#34, sat_sales1#35, d_week_seq2#45, sun_sales2#46, mon_sales2#47, tue_sales2#48, wed_sales2#49, thu_sales2#50, fri_sales2#51, sat_sales2#52]
Arguments: [d_week_seq1#28, round((sun_sales1 / sun_sales2), 2)#53, round((mon_sales1 / mon_sales2), 2)#54, round((tue_sales1 / tue_sales2), 2)#55, round((wed_sales1 / wed_sales2), 2)#56, round((thu_sales1 / thu_sales2), 2)#57, round((fri_sales1 / fri_sales2), 2)#58, round((sat_sales1 / sat_sales2), 2)#59], [d_week_seq1#28, round((sun_sales1#29 / sun_sales2#46), 2) AS round((sun_sales1 / sun_sales2), 2)#53, round((mon_sales1#30 / mon_sales2#47), 2) AS round((mon_sales1 / mon_sales2), 2)#54, round((tue_sales1#31 / tue_sales2#48), 2) AS round((tue_sales1 / tue_sales2), 2)#55, round((wed_sales1#32 / wed_sales2#49), 2) AS round((wed_sales1 / wed_sales2), 2)#56, round((thu_sales1#33 / thu_sales2#50), 2) AS round((thu_sales1 / thu_sales2), 2)#57, round((fri_sales1#34 / fri_sales2#51), 2) AS round((fri_sales1 / fri_sales2), 2)#58, round((sat_sales1#35 / sat_sales2#52), 2) AS round((sat_sales1 / sat_sales2), 2)#59]

(31) CometColumnarExchange
Input [8]: [d_week_seq1#28, round((sun_sales1 / sun_sales2), 2)#53, round((mon_sales1 / mon_sales2), 2)#54, round((tue_sales1 / tue_sales2), 2)#55, round((wed_sales1 / wed_sales2), 2)#56, round((thu_sales1 / thu_sales2), 2)#57, round((fri_sales1 / fri_sales2), 2)#58, round((sat_sales1 / sat_sales2), 2)#59]
Arguments: rangepartitioning(d_week_seq1#28 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(32) CometSort
Input [8]: [d_week_seq1#28, round((sun_sales1 / sun_sales2), 2)#53, round((mon_sales1 / mon_sales2), 2)#54, round((tue_sales1 / tue_sales2), 2)#55, round((wed_sales1 / wed_sales2), 2)#56, round((thu_sales1 / thu_sales2), 2)#57, round((fri_sales1 / fri_sales2), 2)#58, round((sat_sales1 / sat_sales2), 2)#59]
Arguments: [d_week_seq1#28, round((sun_sales1 / sun_sales2), 2)#53, round((mon_sales1 / mon_sales2), 2)#54, round((tue_sales1 / tue_sales2), 2)#55, round((wed_sales1 / wed_sales2), 2)#56, round((thu_sales1 / thu_sales2), 2)#57, round((fri_sales1 / fri_sales2), 2)#58, round((sat_sales1 / sat_sales2), 2)#59], [d_week_seq1#28 ASC NULLS FIRST]

(33) ColumnarToRow [codegen id : 1]
Input [8]: [d_week_seq1#28, round((sun_sales1 / sun_sales2), 2)#53, round((mon_sales1 / mon_sales2), 2)#54, round((tue_sales1 / tue_sales2), 2)#55, round((wed_sales1 / wed_sales2), 2)#56, round((thu_sales1 / thu_sales2), 2)#57, round((fri_sales1 / fri_sales2), 2)#58, round((sat_sales1 / sat_sales2), 2)#59]

