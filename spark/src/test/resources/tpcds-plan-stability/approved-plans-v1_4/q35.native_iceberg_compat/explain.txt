== Physical Plan ==
TakeOrderedAndProject (44)
+- * HashAggregate (43)
   +- Exchange (42)
      +- * HashAggregate (41)
         +- * Project (40)
            +- * BroadcastHashJoin Inner BuildRight (39)
               :- * Project (34)
               :  +- * BroadcastHashJoin Inner BuildRight (33)
               :     :- * Project (28)
               :     :  +- * Filter (27)
               :     :     +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (26)
               :     :        :- * BroadcastHashJoin ExistenceJoin(exists#2) BuildRight (19)
               :     :        :  :- * ColumnarToRow (12)
               :     :        :  :  +- CometBroadcastHashJoin (11)
               :     :        :  :     :- CometFilter (2)
               :     :        :  :     :  +- CometScan parquet spark_catalog.default.customer (1)
               :     :        :  :     +- CometBroadcastExchange (10)
               :     :        :  :        +- CometProject (9)
               :     :        :  :           +- CometBroadcastHashJoin (8)
               :     :        :  :              :- CometScan parquet spark_catalog.default.store_sales (3)
               :     :        :  :              +- CometBroadcastExchange (7)
               :     :        :  :                 +- CometProject (6)
               :     :        :  :                    +- CometFilter (5)
               :     :        :  :                       +- CometScan parquet spark_catalog.default.date_dim (4)
               :     :        :  +- BroadcastExchange (18)
               :     :        :     +- * ColumnarToRow (17)
               :     :        :        +- CometProject (16)
               :     :        :           +- CometBroadcastHashJoin (15)
               :     :        :              :- CometScan parquet spark_catalog.default.web_sales (13)
               :     :        :              +- ReusedExchange (14)
               :     :        +- BroadcastExchange (25)
               :     :           +- * ColumnarToRow (24)
               :     :              +- CometProject (23)
               :     :                 +- CometBroadcastHashJoin (22)
               :     :                    :- CometScan parquet spark_catalog.default.catalog_sales (20)
               :     :                    +- ReusedExchange (21)
               :     +- BroadcastExchange (32)
               :        +- * ColumnarToRow (31)
               :           +- CometFilter (30)
               :              +- CometScan parquet spark_catalog.default.customer_address (29)
               +- BroadcastExchange (38)
                  +- * ColumnarToRow (37)
                     +- CometFilter (36)
                        +- CometScan parquet spark_catalog.default.customer_demographics (35)


(1) CometScan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int>

(2) CometFilter
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_current_cdemo_sk#4))

(3) CometScan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7)]
ReadSchema: struct<ss_customer_sk:int>

(4) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#8, d_year#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_qoy), EqualTo(d_year,2002), LessThan(d_qoy,4), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(5) CometFilter
Input [3]: [d_date_sk#8, d_year#9, d_qoy#10]
Condition : ((((isnotnull(d_year#9) AND isnotnull(d_qoy#10)) AND (d_year#9 = 2002)) AND (d_qoy#10 < 4)) AND isnotnull(d_date_sk#8))

(6) CometProject
Input [3]: [d_date_sk#8, d_year#9, d_qoy#10]
Arguments: [d_date_sk#8], [d_date_sk#8]

(7) CometBroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: [d_date_sk#8]

(8) CometBroadcastHashJoin
Left output [2]: [ss_customer_sk#6, ss_sold_date_sk#7]
Right output [1]: [d_date_sk#8]
Arguments: [ss_sold_date_sk#7], [d_date_sk#8], Inner, BuildRight

(9) CometProject
Input [3]: [ss_customer_sk#6, ss_sold_date_sk#7, d_date_sk#8]
Arguments: [ss_customer_sk#6], [ss_customer_sk#6]

(10) CometBroadcastExchange
Input [1]: [ss_customer_sk#6]
Arguments: [ss_customer_sk#6]

(11) CometBroadcastHashJoin
Left output [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]
Right output [1]: [ss_customer_sk#6]
Arguments: [c_customer_sk#3], [ss_customer_sk#6], LeftSemi, BuildRight

(12) ColumnarToRow [codegen id : 5]
Input [3]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5]

(13) CometScan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#11, ws_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#12)]
ReadSchema: struct<ws_bill_customer_sk:int>

(14) ReusedExchange [Reuses operator id: 7]
Output [1]: [d_date_sk#13]

(15) CometBroadcastHashJoin
Left output [2]: [ws_bill_customer_sk#11, ws_sold_date_sk#12]
Right output [1]: [d_date_sk#13]
Arguments: [ws_sold_date_sk#12], [d_date_sk#13], Inner, BuildRight

(16) CometProject
Input [3]: [ws_bill_customer_sk#11, ws_sold_date_sk#12, d_date_sk#13]
Arguments: [ws_bill_customer_sk#11], [ws_bill_customer_sk#11]

(17) ColumnarToRow [codegen id : 1]
Input [1]: [ws_bill_customer_sk#11]

(18) BroadcastExchange
Input [1]: [ws_bill_customer_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(19) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [ws_bill_customer_sk#11]
Join type: ExistenceJoin(exists#2)
Join condition: None

(20) CometScan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_ship_customer_sk#14, cs_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#15)]
ReadSchema: struct<cs_ship_customer_sk:int>

(21) ReusedExchange [Reuses operator id: 7]
Output [1]: [d_date_sk#16]

(22) CometBroadcastHashJoin
Left output [2]: [cs_ship_customer_sk#14, cs_sold_date_sk#15]
Right output [1]: [d_date_sk#16]
Arguments: [cs_sold_date_sk#15], [d_date_sk#16], Inner, BuildRight

(23) CometProject
Input [3]: [cs_ship_customer_sk#14, cs_sold_date_sk#15, d_date_sk#16]
Arguments: [cs_ship_customer_sk#14], [cs_ship_customer_sk#14]

(24) ColumnarToRow [codegen id : 2]
Input [1]: [cs_ship_customer_sk#14]

(25) BroadcastExchange
Input [1]: [cs_ship_customer_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(26) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_customer_sk#3]
Right keys [1]: [cs_ship_customer_sk#14]
Join type: ExistenceJoin(exists#1)
Join condition: None

(27) Filter [codegen id : 5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]
Condition : (exists#2 OR exists#1)

(28) Project [codegen id : 5]
Output [2]: [c_current_cdemo_sk#4, c_current_addr_sk#5]
Input [5]: [c_customer_sk#3, c_current_cdemo_sk#4, c_current_addr_sk#5, exists#2, exists#1]

(29) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#17, ca_state#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(30) CometFilter
Input [2]: [ca_address_sk#17, ca_state#18]
Condition : isnotnull(ca_address_sk#17)

(31) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#17, ca_state#18]

(32) BroadcastExchange
Input [2]: [ca_address_sk#17, ca_state#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(33) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#5]
Right keys [1]: [ca_address_sk#17]
Join type: Inner
Join condition: None

(34) Project [codegen id : 5]
Output [2]: [c_current_cdemo_sk#4, ca_state#18]
Input [4]: [c_current_cdemo_sk#4, c_current_addr_sk#5, ca_address_sk#17, ca_state#18]

(35) CometScan parquet spark_catalog.default.customer_demographics
Output [6]: [cd_demo_sk#19, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_dep_count:int,cd_dep_employed_count:int,cd_dep_college_count:int>

(36) CometFilter
Input [6]: [cd_demo_sk#19, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Condition : isnotnull(cd_demo_sk#19)

(37) ColumnarToRow [codegen id : 4]
Input [6]: [cd_demo_sk#19, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]

(38) BroadcastExchange
Input [6]: [cd_demo_sk#19, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(39) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_current_cdemo_sk#4]
Right keys [1]: [cd_demo_sk#19]
Join type: Inner
Join condition: None

(40) Project [codegen id : 5]
Output [6]: [ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Input [8]: [c_current_cdemo_sk#4, ca_state#18, cd_demo_sk#19, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]

(41) HashAggregate [codegen id : 5]
Input [6]: [ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Keys [6]: [ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Functions [10]: [partial_count(1), partial_min(cd_dep_count#22), partial_max(cd_dep_count#22), partial_avg(cd_dep_count#22), partial_min(cd_dep_employed_count#23), partial_max(cd_dep_employed_count#23), partial_avg(cd_dep_employed_count#23), partial_min(cd_dep_college_count#24), partial_max(cd_dep_college_count#24), partial_avg(cd_dep_college_count#24)]
Aggregate Attributes [13]: [count#25, min#26, max#27, sum#28, count#29, min#30, max#31, sum#32, count#33, min#34, max#35, sum#36, count#37]
Results [19]: [ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, count#38, min#39, max#40, sum#41, count#42, min#43, max#44, sum#45, count#46, min#47, max#48, sum#49, count#50]

(42) Exchange
Input [19]: [ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, count#38, min#39, max#40, sum#41, count#42, min#43, max#44, sum#45, count#46, min#47, max#48, sum#49, count#50]
Arguments: hashpartitioning(ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(43) HashAggregate [codegen id : 6]
Input [19]: [ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24, count#38, min#39, max#40, sum#41, count#42, min#43, max#44, sum#45, count#46, min#47, max#48, sum#49, count#50]
Keys [6]: [ca_state#18, cd_gender#20, cd_marital_status#21, cd_dep_count#22, cd_dep_employed_count#23, cd_dep_college_count#24]
Functions [10]: [count(1), min(cd_dep_count#22), max(cd_dep_count#22), avg(cd_dep_count#22), min(cd_dep_employed_count#23), max(cd_dep_employed_count#23), avg(cd_dep_employed_count#23), min(cd_dep_college_count#24), max(cd_dep_college_count#24), avg(cd_dep_college_count#24)]
Aggregate Attributes [10]: [count(1)#51, min(cd_dep_count#22)#52, max(cd_dep_count#22)#53, avg(cd_dep_count#22)#54, min(cd_dep_employed_count#23)#55, max(cd_dep_employed_count#23)#56, avg(cd_dep_employed_count#23)#57, min(cd_dep_college_count#24)#58, max(cd_dep_college_count#24)#59, avg(cd_dep_college_count#24)#60]
Results [18]: [ca_state#18, cd_gender#20, cd_marital_status#21, count(1)#51 AS cnt1#61, min(cd_dep_count#22)#52 AS min(cd_dep_count)#62, max(cd_dep_count#22)#53 AS max(cd_dep_count)#63, avg(cd_dep_count#22)#54 AS avg(cd_dep_count)#64, cd_dep_employed_count#23, count(1)#51 AS cnt2#65, min(cd_dep_employed_count#23)#55 AS min(cd_dep_employed_count)#66, max(cd_dep_employed_count#23)#56 AS max(cd_dep_employed_count)#67, avg(cd_dep_employed_count#23)#57 AS avg(cd_dep_employed_count)#68, cd_dep_college_count#24, count(1)#51 AS cnt3#69, min(cd_dep_college_count#24)#58 AS min(cd_dep_college_count)#70, max(cd_dep_college_count#24)#59 AS max(cd_dep_college_count)#71, avg(cd_dep_college_count#24)#60 AS avg(cd_dep_college_count)#72, cd_dep_count#22]

(44) TakeOrderedAndProject
Input [18]: [ca_state#18, cd_gender#20, cd_marital_status#21, cnt1#61, min(cd_dep_count)#62, max(cd_dep_count)#63, avg(cd_dep_count)#64, cd_dep_employed_count#23, cnt2#65, min(cd_dep_employed_count)#66, max(cd_dep_employed_count)#67, avg(cd_dep_employed_count)#68, cd_dep_college_count#24, cnt3#69, min(cd_dep_college_count)#70, max(cd_dep_college_count)#71, avg(cd_dep_college_count)#72, cd_dep_count#22]
Arguments: 100, [ca_state#18 ASC NULLS FIRST, cd_gender#20 ASC NULLS FIRST, cd_marital_status#21 ASC NULLS FIRST, cd_dep_count#22 ASC NULLS FIRST, cd_dep_employed_count#23 ASC NULLS FIRST, cd_dep_college_count#24 ASC NULLS FIRST], [ca_state#18, cd_gender#20, cd_marital_status#21, cnt1#61, min(cd_dep_count)#62, max(cd_dep_count)#63, avg(cd_dep_count)#64, cd_dep_employed_count#23, cnt2#65, min(cd_dep_employed_count)#66, max(cd_dep_employed_count)#67, avg(cd_dep_employed_count)#68, cd_dep_college_count#24, cnt3#69, min(cd_dep_college_count)#70, max(cd_dep_college_count)#71, avg(cd_dep_college_count)#72]

