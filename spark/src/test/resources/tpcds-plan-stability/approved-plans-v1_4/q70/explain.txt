== Physical Plan ==
TakeOrderedAndProject (44)
+- * Project (43)
   +- Window (42)
      +- * Sort (41)
         +- Exchange (40)
            +- * HashAggregate (39)
               +- Exchange (38)
                  +- * HashAggregate (37)
                     +- * Expand (36)
                        +- * Project (35)
                           +- * BroadcastHashJoin Inner BuildRight (34)
                              :- * ColumnarToRow (9)
                              :  +- CometProject (8)
                              :     +- CometBroadcastHashJoin (7)
                              :        :- CometFilter (2)
                              :        :  +- CometScan parquet spark_catalog.default.store_sales (1)
                              :        +- CometBroadcastExchange (6)
                              :           +- CometProject (5)
                              :              +- CometFilter (4)
                              :                 +- CometScan parquet spark_catalog.default.date_dim (3)
                              +- BroadcastExchange (33)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (32)
                                    :- * ColumnarToRow (12)
                                    :  +- CometFilter (11)
                                    :     +- CometScan parquet spark_catalog.default.store (10)
                                    +- BroadcastExchange (31)
                                       +- * Project (30)
                                          +- * Filter (29)
                                             +- Window (28)
                                                +- * ColumnarToRow (27)
                                                   +- CometSort (26)
                                                      +- CometHashAggregate (25)
                                                         +- CometExchange (24)
                                                            +- CometHashAggregate (23)
                                                               +- CometProject (22)
                                                                  +- CometBroadcastHashJoin (21)
                                                                     :- CometProject (19)
                                                                     :  +- CometBroadcastHashJoin (18)
                                                                     :     :- CometFilter (14)
                                                                     :     :  +- CometScan parquet spark_catalog.default.store_sales (13)
                                                                     :     +- CometBroadcastExchange (17)
                                                                     :        +- CometFilter (16)
                                                                     :           +- CometScan parquet spark_catalog.default.store (15)
                                                                     +- ReusedExchange (20)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) ColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(12) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_store_sk#10)

(15) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : isnotnull(s_store_sk#14)

(17) CometBroadcastExchange
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14, s_state#15]

(18) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Right output [2]: [s_store_sk#14, s_state#15]
Arguments: [ss_store_sk#10], [s_store_sk#14], Inner, BuildRight

(19) CometProject
Input [5]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12, s_store_sk#14, s_state#15]
Arguments: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15], [ss_net_profit#11, ss_sold_date_sk#12, s_state#15]

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#16]

(21) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15]
Right output [1]: [d_date_sk#16]
Arguments: [ss_sold_date_sk#12], [d_date_sk#16], Inner, BuildRight

(22) CometProject
Input [4]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15, d_date_sk#16]
Arguments: [ss_net_profit#11, s_state#15], [ss_net_profit#11, s_state#15]

(23) CometHashAggregate
Input [2]: [ss_net_profit#11, s_state#15]
Keys [1]: [s_state#15]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#11))]

(24) CometExchange
Input [2]: [s_state#15, sum#17]
Arguments: hashpartitioning(s_state#15, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(25) CometHashAggregate
Input [2]: [s_state#15, sum#17]
Keys [1]: [s_state#15]
Functions [1]: [sum(UnscaledValue(ss_net_profit#11))]

(26) CometSort
Input [3]: [s_state#15, _w0#18, s_state#15]
Arguments: [s_state#15, _w0#18, s_state#15], [s_state#15 ASC NULLS FIRST, _w0#18 DESC NULLS LAST]

(27) ColumnarToRow [codegen id : 1]
Input [3]: [s_state#15, _w0#18, s_state#15]

(28) Window
Input [3]: [s_state#15, _w0#18, s_state#15]
Arguments: [rank(_w0#18) windowspecdefinition(s_state#15, _w0#18 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#19], [s_state#15], [_w0#18 DESC NULLS LAST]

(29) Filter [codegen id : 2]
Input [4]: [s_state#15, _w0#18, s_state#15, ranking#19]
Condition : (ranking#19 <= 5)

(30) Project [codegen id : 2]
Output [1]: [s_state#15]
Input [4]: [s_state#15, _w0#18, s_state#15, ranking#19]

(31) BroadcastExchange
Input [1]: [s_state#15]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(32) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [s_state#9]
Right keys [1]: [s_state#15]
Join type: LeftSemi
Join condition: None

(33) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(34) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(35) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_state#9, s_county#8]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#7, s_county#8, s_state#9]

(36) Expand [codegen id : 4]
Input [3]: [ss_net_profit#2, s_state#9, s_county#8]
Arguments: [[ss_net_profit#2, s_state#9, s_county#8, 0], [ss_net_profit#2, s_state#9, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]

(37) HashAggregate [codegen id : 4]
Input [4]: [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#23]
Results [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]

(38) Exchange
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Arguments: hashpartitioning(s_state#20, s_county#21, spark_grouping_id#22, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(39) HashAggregate [codegen id : 5]
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#25]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS total_sum#26, s_state#20, s_county#21, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS lochierarchy#27, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS _w0#28, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS _w1#29, CASE WHEN (cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint) = 0) THEN s_state#20 END AS _w2#30]

(40) Exchange
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: hashpartitioning(_w1#29, _w2#30, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(41) Sort [codegen id : 6]
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [_w1#29 ASC NULLS FIRST, _w2#30 ASC NULLS FIRST, _w0#28 DESC NULLS LAST], false, 0

(42) Window
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [rank(_w0#28) windowspecdefinition(_w1#29, _w2#30, _w0#28 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#31], [_w1#29, _w2#30], [_w0#28 DESC NULLS LAST]

(43) Project [codegen id : 7]
Output [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Input [8]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30, rank_within_parent#31]

(44) TakeOrderedAndProject
Input [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Arguments: 100, [lochierarchy#27 DESC NULLS LAST, CASE WHEN (lochierarchy#27 = 0) THEN s_state#20 END ASC NULLS FIRST, rank_within_parent#31 ASC NULLS FIRST], [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (49)
+- * ColumnarToRow (48)
   +- CometProject (47)
      +- CometFilter (46)
         +- CometScan parquet spark_catalog.default.date_dim (45)


(45) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(46) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(47) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(48) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(49) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 13 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#4


