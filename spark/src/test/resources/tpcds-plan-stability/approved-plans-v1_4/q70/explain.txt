== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- Window (46)
      +- * CometColumnarToRow (45)
         +- CometSort (44)
            +- CometColumnarExchange (43)
               +- * HashAggregate (42)
                  +- * CometColumnarToRow (41)
                     +- CometColumnarExchange (40)
                        +- * HashAggregate (39)
                           +- * Expand (38)
                              +- * Project (37)
                                 +- * BroadcastHashJoin Inner BuildRight (36)
                                    :- * CometColumnarToRow (9)
                                    :  +- CometProject (8)
                                    :     +- CometBroadcastHashJoin (7)
                                    :        :- CometFilter (2)
                                    :        :  +- CometScan parquet spark_catalog.default.store_sales (1)
                                    :        +- CometBroadcastExchange (6)
                                    :           +- CometProject (5)
                                    :              +- CometFilter (4)
                                    :                 +- CometScan parquet spark_catalog.default.date_dim (3)
                                    +- BroadcastExchange (35)
                                       +- * Project (34)
                                          +- * BroadcastHashJoin LeftSemi BuildRight (33)
                                             :- * CometColumnarToRow (12)
                                             :  +- CometFilter (11)
                                             :     +- CometScan parquet spark_catalog.default.store (10)
                                             +- BroadcastExchange (32)
                                                +- * Project (31)
                                                   +- * Filter (30)
                                                      +- Window (29)
                                                         +- * CometColumnarToRow (28)
                                                            +- CometSort (27)
                                                               +- CometHashAggregate (26)
                                                                  +- CometExchange (25)
                                                                     +- CometHashAggregate (24)
                                                                        +- CometProject (23)
                                                                           +- CometBroadcastHashJoin (22)
                                                                              :- CometProject (20)
                                                                              :  +- CometBroadcastHashJoin (19)
                                                                              :     :- CometFilter (14)
                                                                              :     :  +- CometScan parquet spark_catalog.default.store_sales (13)
                                                                              :     +- CometBroadcastExchange (18)
                                                                              :        +- CometProject (17)
                                                                              :           +- CometFilter (16)
                                                                              :              +- CometScan parquet spark_catalog.default.store (15)
                                                                              +- ReusedExchange (21)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) CometColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(12) CometColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_store_sk#10)

(15) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#7, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#7, s_state#9]
Condition : isnotnull(s_store_sk#7)

(17) CometProject
Input [2]: [s_store_sk#7, s_state#9]
Arguments: [s_store_sk#7, s_state#14], [s_store_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#9, 2, true, false, true) AS s_state#14]

(18) CometBroadcastExchange
Input [2]: [s_store_sk#7, s_state#14]
Arguments: [s_store_sk#7, s_state#14]

(19) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Right output [2]: [s_store_sk#7, s_state#14]
Arguments: [ss_store_sk#10], [s_store_sk#7], Inner, BuildRight

(20) CometProject
Input [5]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12, s_store_sk#7, s_state#14]
Arguments: [ss_net_profit#11, ss_sold_date_sk#12, s_state#14], [ss_net_profit#11, ss_sold_date_sk#12, s_state#14]

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#5]

(22) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#14]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#12], [d_date_sk#5], Inner, BuildRight

(23) CometProject
Input [4]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#14, d_date_sk#5]
Arguments: [ss_net_profit#11, s_state#14], [ss_net_profit#11, s_state#14]

(24) CometHashAggregate
Input [2]: [ss_net_profit#11, s_state#14]
Keys [1]: [s_state#14]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#11))]

(25) CometExchange
Input [2]: [s_state#14, sum#15]
Arguments: hashpartitioning(s_state#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(26) CometHashAggregate
Input [2]: [s_state#14, sum#15]
Keys [1]: [s_state#14]
Functions [1]: [sum(UnscaledValue(ss_net_profit#11))]

(27) CometSort
Input [3]: [s_state#14, _w0#16, s_state#14]
Arguments: [s_state#14, _w0#16, s_state#14], [s_state#14 ASC NULLS FIRST, _w0#16 DESC NULLS LAST]

(28) CometColumnarToRow [codegen id : 1]
Input [3]: [s_state#14, _w0#16, s_state#14]

(29) Window
Input [3]: [s_state#14, _w0#16, s_state#14]
Arguments: [rank(_w0#16) windowspecdefinition(s_state#14, _w0#16 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#17], [s_state#14], [_w0#16 DESC NULLS LAST]

(30) Filter [codegen id : 2]
Input [4]: [s_state#14, _w0#16, s_state#14, ranking#17]
Condition : (ranking#17 <= 5)

(31) Project [codegen id : 2]
Output [1]: [s_state#14]
Input [4]: [s_state#14, _w0#16, s_state#14, ranking#17]

(32) BroadcastExchange
Input [1]: [s_state#14]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(33) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#9, 2, true, false, true)]
Right keys [1]: [s_state#14]
Join type: LeftSemi
Join condition: None

(34) Project [codegen id : 3]
Output [3]: [s_store_sk#7, s_county#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#9, 2, true, false, true) AS s_state#18]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(35) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#8, s_state#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(36) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(37) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_state#18, s_county#8]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#7, s_county#8, s_state#18]

(38) Expand [codegen id : 4]
Input [3]: [ss_net_profit#2, s_state#18, s_county#8]
Arguments: [[ss_net_profit#2, s_state#18, s_county#8, 0], [ss_net_profit#2, s_state#18, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#19, s_county#20, spark_grouping_id#21]

(39) HashAggregate [codegen id : 4]
Input [4]: [ss_net_profit#2, s_state#19, s_county#20, spark_grouping_id#21]
Keys [3]: [s_state#19, s_county#20, spark_grouping_id#21]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#22]
Results [4]: [s_state#19, s_county#20, spark_grouping_id#21, sum#23]

(40) CometColumnarExchange
Input [4]: [s_state#19, s_county#20, spark_grouping_id#21, sum#23]
Arguments: hashpartitioning(s_state#19, s_county#20, spark_grouping_id#21, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(41) CometColumnarToRow [codegen id : 5]
Input [4]: [s_state#19, s_county#20, spark_grouping_id#21, sum#23]

(42) HashAggregate [codegen id : 5]
Input [4]: [s_state#19, s_county#20, spark_grouping_id#21, sum#23]
Keys [3]: [s_state#19, s_county#20, spark_grouping_id#21]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#24]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#24,17,2) AS total_sum#25, s_state#19, s_county#20, (cast((shiftright(spark_grouping_id#21, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#21, 0) & 1) as tinyint)) AS lochierarchy#26, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#24,17,2) AS _w0#27, (cast((shiftright(spark_grouping_id#21, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#21, 0) & 1) as tinyint)) AS _w1#28, CASE WHEN (cast((shiftright(spark_grouping_id#21, 0) & 1) as tinyint) = 0) THEN s_state#19 END AS _w2#29]

(43) CometColumnarExchange
Input [7]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w0#27, _w1#28, _w2#29]
Arguments: hashpartitioning(_w1#28, _w2#29, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(44) CometSort
Input [7]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w0#27, _w1#28, _w2#29]
Arguments: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w0#27, _w1#28, _w2#29], [_w1#28 ASC NULLS FIRST, _w2#29 ASC NULLS FIRST, _w0#27 DESC NULLS LAST]

(45) CometColumnarToRow [codegen id : 6]
Input [7]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w0#27, _w1#28, _w2#29]

(46) Window
Input [7]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w0#27, _w1#28, _w2#29]
Arguments: [rank(_w0#27) windowspecdefinition(_w1#28, _w2#29, _w0#27 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#30], [_w1#28, _w2#29], [_w0#27 DESC NULLS LAST]

(47) Project [codegen id : 7]
Output [5]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, rank_within_parent#30]
Input [8]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, _w0#27, _w1#28, _w2#29, rank_within_parent#30]

(48) TakeOrderedAndProject
Input [5]: [total_sum#25, s_state#19, s_county#20, lochierarchy#26, rank_within_parent#30]
Arguments: 100, [lochierarchy#26 DESC NULLS LAST, CASE WHEN (lochierarchy#26 = 0) THEN s_state#19 END ASC NULLS FIRST, rank_within_parent#30 ASC NULLS FIRST], [total_sum#25, s_state#19, s_county#20, lochierarchy#26, rank_within_parent#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (53)
+- * CometColumnarToRow (52)
   +- CometProject (51)
      +- CometFilter (50)
         +- CometScan parquet spark_catalog.default.date_dim (49)


(49) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(50) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(51) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(52) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(53) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 13 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#4


