== Physical Plan ==
* ColumnarToRow (24)
+- CometTakeOrderedAndProject (23)
   +- CometFilter (22)
      +- CometHashAggregate (21)
         +- CometExchange (20)
            +- CometHashAggregate (19)
               +- CometProject (18)
                  +- CometBroadcastHashJoin (17)
                     :- CometProject (13)
                     :  +- CometBroadcastHashJoin (12)
                     :     :- CometProject (7)
                     :     :  +- CometBroadcastHashJoin (6)
                     :     :     :- CometFilter (2)
                     :     :     :  +- CometScan parquet spark_catalog.default.inventory (1)
                     :     :     +- CometBroadcastExchange (5)
                     :     :        +- CometFilter (4)
                     :     :           +- CometScan parquet spark_catalog.default.warehouse (3)
                     :     +- CometBroadcastExchange (11)
                     :        +- CometProject (10)
                     :           +- CometFilter (9)
                     :              +- CometScan parquet spark_catalog.default.item (8)
                     +- CometBroadcastExchange (16)
                        +- CometFilter (15)
                           +- CometScan parquet spark_catalog.default.date_dim (14)


(1) CometScan parquet spark_catalog.default.inventory
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(inv_date_sk#4)]
PushedFilters: [IsNotNull(inv_warehouse_sk), IsNotNull(inv_item_sk)]
ReadSchema: struct<inv_item_sk:int,inv_warehouse_sk:int,inv_quantity_on_hand:int>

(2) CometFilter
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_warehouse_sk#2) AND isnotnull(inv_item_sk#1))

(3) CometScan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#5, w_warehouse_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_warehouse_name:string>

(4) CometFilter
Input [2]: [w_warehouse_sk#5, w_warehouse_name#6]
Condition : isnotnull(w_warehouse_sk#5)

(5) CometBroadcastExchange
Input [2]: [w_warehouse_sk#5, w_warehouse_name#6]
Arguments: [w_warehouse_sk#5, w_warehouse_name#6]

(6) CometBroadcastHashJoin
Left output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Right output [2]: [w_warehouse_sk#5, w_warehouse_name#6]
Arguments: [inv_warehouse_sk#2], [w_warehouse_sk#5], Inner, BuildRight

(7) CometProject
Input [6]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_sk#5, w_warehouse_name#6]
Arguments: [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6], [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6]

(8) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#7, i_item_id#8, i_current_price#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_price,1.49), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>

(9) CometFilter
Input [3]: [i_item_sk#7, i_item_id#8, i_current_price#9]
Condition : (((isnotnull(i_current_price#9) AND (i_current_price#9 >= 0.99)) AND (i_current_price#9 <= 1.49)) AND isnotnull(i_item_sk#7))

(10) CometProject
Input [3]: [i_item_sk#7, i_item_id#8, i_current_price#9]
Arguments: [i_item_sk#7, i_item_id#8], [i_item_sk#7, i_item_id#8]

(11) CometBroadcastExchange
Input [2]: [i_item_sk#7, i_item_id#8]
Arguments: [i_item_sk#7, i_item_id#8]

(12) CometBroadcastHashJoin
Left output [4]: [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6]
Right output [2]: [i_item_sk#7, i_item_id#8]
Arguments: [inv_item_sk#1], [i_item_sk#7], Inner, BuildRight

(13) CometProject
Input [6]: [inv_item_sk#1, inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6, i_item_sk#7, i_item_id#8]
Arguments: [inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6, i_item_id#8], [inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6, i_item_id#8]

(14) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#10, d_date#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(15) CometFilter
Input [2]: [d_date_sk#10, d_date#11]
Condition : (((isnotnull(d_date#11) AND (d_date#11 >= 2000-02-10)) AND (d_date#11 <= 2000-04-10)) AND isnotnull(d_date_sk#10))

(16) CometBroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: [d_date_sk#10, d_date#11]

(17) CometBroadcastHashJoin
Left output [4]: [inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6, i_item_id#8]
Right output [2]: [d_date_sk#10, d_date#11]
Arguments: [inv_date_sk#4], [d_date_sk#10], Inner, BuildRight

(18) CometProject
Input [6]: [inv_quantity_on_hand#3, inv_date_sk#4, w_warehouse_name#6, i_item_id#8, d_date_sk#10, d_date#11]
Arguments: [inv_quantity_on_hand#3, w_warehouse_name#6, i_item_id#8, d_date#11], [inv_quantity_on_hand#3, w_warehouse_name#6, i_item_id#8, d_date#11]

(19) CometHashAggregate
Input [4]: [inv_quantity_on_hand#3, w_warehouse_name#6, i_item_id#8, d_date#11]
Keys [2]: [w_warehouse_name#6, i_item_id#8]
Functions [2]: [partial_sum(CASE WHEN (d_date#11 < 2000-03-11) THEN inv_quantity_on_hand#3 ELSE 0 END), partial_sum(CASE WHEN (d_date#11 >= 2000-03-11) THEN inv_quantity_on_hand#3 ELSE 0 END)]

(20) CometExchange
Input [4]: [w_warehouse_name#6, i_item_id#8, sum#12, sum#13]
Arguments: hashpartitioning(w_warehouse_name#6, i_item_id#8, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(21) CometHashAggregate
Input [4]: [w_warehouse_name#6, i_item_id#8, sum#12, sum#13]
Keys [2]: [w_warehouse_name#6, i_item_id#8]
Functions [2]: [sum(CASE WHEN (d_date#11 < 2000-03-11) THEN inv_quantity_on_hand#3 ELSE 0 END), sum(CASE WHEN (d_date#11 >= 2000-03-11) THEN inv_quantity_on_hand#3 ELSE 0 END)]

(22) CometFilter
Input [4]: [w_warehouse_name#6, i_item_id#8, inv_before#14, inv_after#15]
Condition : (CASE WHEN (inv_before#14 > 0) THEN (knownfloatingpointnormalized(normalizenanandzero((cast(inv_after#15 as double) / knownfloatingpointnormalized(normalizenanandzero(cast(inv_before#14 as double)))))) >= 0.666667) END AND CASE WHEN (inv_before#14 > 0) THEN (knownfloatingpointnormalized(normalizenanandzero((cast(inv_after#15 as double) / knownfloatingpointnormalized(normalizenanandzero(cast(inv_before#14 as double)))))) <= 1.5) END)

(23) CometTakeOrderedAndProject
Input [4]: [w_warehouse_name#6, i_item_id#8, inv_before#14, inv_after#15]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[w_warehouse_name#6 ASC NULLS FIRST,i_item_id#8 ASC NULLS FIRST], output=[w_warehouse_name#6,i_item_id#8,inv_before#14,inv_after#15]), [w_warehouse_name#6, i_item_id#8, inv_before#14, inv_after#15], 100, [w_warehouse_name#6 ASC NULLS FIRST, i_item_id#8 ASC NULLS FIRST], [w_warehouse_name#6, i_item_id#8, inv_before#14, inv_after#15]

(24) ColumnarToRow [codegen id : 1]
Input [4]: [w_warehouse_name#6, i_item_id#8, inv_before#14, inv_after#15]

