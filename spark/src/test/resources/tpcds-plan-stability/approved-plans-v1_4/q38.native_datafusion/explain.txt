== Physical Plan ==
* CometColumnarToRow (48)
+- CometHashAggregate (47)
   +- CometExchange (46)
      +- CometHashAggregate (45)
         +- CometProject (44)
            +- CometBroadcastHashJoin (43)
               :- CometBroadcastHashJoin (30)
               :  :- CometHashAggregate (17)
               :  :  +- CometExchange (16)
               :  :     +- CometHashAggregate (15)
               :  :        +- CometProject (14)
               :  :           +- CometBroadcastHashJoin (13)
               :  :              :- CometProject (8)
               :  :              :  +- CometBroadcastHashJoin (7)
               :  :              :     :- CometFilter (2)
               :  :              :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
               :  :              :     +- CometBroadcastExchange (6)
               :  :              :        +- CometProject (5)
               :  :              :           +- CometFilter (4)
               :  :              :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
               :  :              +- CometBroadcastExchange (12)
               :  :                 +- CometProject (11)
               :  :                    +- CometFilter (10)
               :  :                       +- CometNativeScan parquet spark_catalog.default.customer (9)
               :  +- CometBroadcastExchange (29)
               :     +- CometHashAggregate (28)
               :        +- CometExchange (27)
               :           +- CometHashAggregate (26)
               :              +- CometProject (25)
               :                 +- CometBroadcastHashJoin (24)
               :                    :- CometProject (22)
               :                    :  +- CometBroadcastHashJoin (21)
               :                    :     :- CometFilter (19)
               :                    :     :  +- CometNativeScan parquet spark_catalog.default.catalog_sales (18)
               :                    :     +- ReusedExchange (20)
               :                    +- ReusedExchange (23)
               +- CometBroadcastExchange (42)
                  +- CometHashAggregate (41)
                     +- CometExchange (40)
                        +- CometHashAggregate (39)
                           +- CometProject (38)
                              +- CometBroadcastHashJoin (37)
                                 :- CometProject (35)
                                 :  +- CometBroadcastHashJoin (34)
                                 :     :- CometFilter (32)
                                 :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (31)
                                 :     +- ReusedExchange (33)
                                 +- ReusedExchange (36)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#2)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) CometFilter
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : isnotnull(ss_customer_sk#1)

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(4) CometFilter
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#3))

(5) CometProject
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Arguments: [d_date_sk#3, d_date#4], [d_date_sk#3, d_date#4]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#3, d_date#4]
Arguments: [d_date_sk#3, d_date#4]

(7) CometBroadcastHashJoin
Left output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Right output [2]: [d_date_sk#3, d_date#4]
Arguments: [ss_sold_date_sk#2], [d_date_sk#3], Inner, BuildRight

(8) CometProject
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#3, d_date#4]
Arguments: [ss_customer_sk#1, d_date#4], [ss_customer_sk#1, d_date#4]

(9) CometNativeScan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#6, c_first_name#7, c_last_name#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(10) CometFilter
Input [3]: [c_customer_sk#6, c_first_name#7, c_last_name#8]
Condition : isnotnull(c_customer_sk#6)

(11) CometProject
Input [3]: [c_customer_sk#6, c_first_name#7, c_last_name#8]
Arguments: [c_customer_sk#6, c_first_name#9, c_last_name#10], [c_customer_sk#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#7, 20, true, false, true) AS c_first_name#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#8, 30, true, false, true) AS c_last_name#10]

(12) CometBroadcastExchange
Input [3]: [c_customer_sk#6, c_first_name#9, c_last_name#10]
Arguments: [c_customer_sk#6, c_first_name#9, c_last_name#10]

(13) CometBroadcastHashJoin
Left output [2]: [ss_customer_sk#1, d_date#4]
Right output [3]: [c_customer_sk#6, c_first_name#9, c_last_name#10]
Arguments: [ss_customer_sk#1], [c_customer_sk#6], Inner, BuildRight

(14) CometProject
Input [5]: [ss_customer_sk#1, d_date#4, c_customer_sk#6, c_first_name#9, c_last_name#10]
Arguments: [c_last_name#10, c_first_name#9, d_date#4], [c_last_name#10, c_first_name#9, d_date#4]

(15) CometHashAggregate
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []

(16) CometExchange
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Arguments: hashpartitioning(c_last_name#10, c_first_name#9, d_date#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometHashAggregate
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]
Keys [3]: [c_last_name#10, c_first_name#9, d_date#4]
Functions: []

(18) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_bill_customer_sk#11, cs_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#12)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(19) CometFilter
Input [2]: [cs_bill_customer_sk#11, cs_sold_date_sk#12]
Condition : isnotnull(cs_bill_customer_sk#11)

(20) ReusedExchange [Reuses operator id: 6]
Output [2]: [d_date_sk#13, d_date#14]

(21) CometBroadcastHashJoin
Left output [2]: [cs_bill_customer_sk#11, cs_sold_date_sk#12]
Right output [2]: [d_date_sk#13, d_date#14]
Arguments: [cs_sold_date_sk#12], [d_date_sk#13], Inner, BuildRight

(22) CometProject
Input [4]: [cs_bill_customer_sk#11, cs_sold_date_sk#12, d_date_sk#13, d_date#14]
Arguments: [cs_bill_customer_sk#11, d_date#14], [cs_bill_customer_sk#11, d_date#14]

(23) ReusedExchange [Reuses operator id: 12]
Output [3]: [c_customer_sk#15, c_first_name#16, c_last_name#17]

(24) CometBroadcastHashJoin
Left output [2]: [cs_bill_customer_sk#11, d_date#14]
Right output [3]: [c_customer_sk#15, c_first_name#16, c_last_name#17]
Arguments: [cs_bill_customer_sk#11], [c_customer_sk#15], Inner, BuildRight

(25) CometProject
Input [5]: [cs_bill_customer_sk#11, d_date#14, c_customer_sk#15, c_first_name#16, c_last_name#17]
Arguments: [c_last_name#17, c_first_name#16, d_date#14], [c_last_name#17, c_first_name#16, d_date#14]

(26) CometHashAggregate
Input [3]: [c_last_name#17, c_first_name#16, d_date#14]
Keys [3]: [c_last_name#17, c_first_name#16, d_date#14]
Functions: []

(27) CometExchange
Input [3]: [c_last_name#17, c_first_name#16, d_date#14]
Arguments: hashpartitioning(c_last_name#17, c_first_name#16, d_date#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(28) CometHashAggregate
Input [3]: [c_last_name#17, c_first_name#16, d_date#14]
Keys [3]: [c_last_name#17, c_first_name#16, d_date#14]
Functions: []

(29) CometBroadcastExchange
Input [3]: [c_last_name#17, c_first_name#16, d_date#14]
Arguments: [c_last_name#17, c_first_name#16, d_date#14]

(30) CometBroadcastHashJoin
Left output [3]: [c_last_name#10, c_first_name#9, d_date#4]
Right output [3]: [c_last_name#17, c_first_name#16, d_date#14]
Arguments: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 1970-01-01), isnull(d_date#4)], [coalesce(c_last_name#17, ), isnull(c_last_name#17), coalesce(c_first_name#16, ), isnull(c_first_name#16), coalesce(d_date#14, 1970-01-01), isnull(d_date#14)], LeftSemi, BuildRight

(31) CometNativeScan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#18, ws_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#19)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(32) CometFilter
Input [2]: [ws_bill_customer_sk#18, ws_sold_date_sk#19]
Condition : isnotnull(ws_bill_customer_sk#18)

(33) ReusedExchange [Reuses operator id: 6]
Output [2]: [d_date_sk#20, d_date#21]

(34) CometBroadcastHashJoin
Left output [2]: [ws_bill_customer_sk#18, ws_sold_date_sk#19]
Right output [2]: [d_date_sk#20, d_date#21]
Arguments: [ws_sold_date_sk#19], [d_date_sk#20], Inner, BuildRight

(35) CometProject
Input [4]: [ws_bill_customer_sk#18, ws_sold_date_sk#19, d_date_sk#20, d_date#21]
Arguments: [ws_bill_customer_sk#18, d_date#21], [ws_bill_customer_sk#18, d_date#21]

(36) ReusedExchange [Reuses operator id: 12]
Output [3]: [c_customer_sk#22, c_first_name#23, c_last_name#24]

(37) CometBroadcastHashJoin
Left output [2]: [ws_bill_customer_sk#18, d_date#21]
Right output [3]: [c_customer_sk#22, c_first_name#23, c_last_name#24]
Arguments: [ws_bill_customer_sk#18], [c_customer_sk#22], Inner, BuildRight

(38) CometProject
Input [5]: [ws_bill_customer_sk#18, d_date#21, c_customer_sk#22, c_first_name#23, c_last_name#24]
Arguments: [c_last_name#24, c_first_name#23, d_date#21], [c_last_name#24, c_first_name#23, d_date#21]

(39) CometHashAggregate
Input [3]: [c_last_name#24, c_first_name#23, d_date#21]
Keys [3]: [c_last_name#24, c_first_name#23, d_date#21]
Functions: []

(40) CometExchange
Input [3]: [c_last_name#24, c_first_name#23, d_date#21]
Arguments: hashpartitioning(c_last_name#24, c_first_name#23, d_date#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(41) CometHashAggregate
Input [3]: [c_last_name#24, c_first_name#23, d_date#21]
Keys [3]: [c_last_name#24, c_first_name#23, d_date#21]
Functions: []

(42) CometBroadcastExchange
Input [3]: [c_last_name#24, c_first_name#23, d_date#21]
Arguments: [c_last_name#24, c_first_name#23, d_date#21]

(43) CometBroadcastHashJoin
Left output [3]: [c_last_name#10, c_first_name#9, d_date#4]
Right output [3]: [c_last_name#24, c_first_name#23, d_date#21]
Arguments: [coalesce(c_last_name#10, ), isnull(c_last_name#10), coalesce(c_first_name#9, ), isnull(c_first_name#9), coalesce(d_date#4, 1970-01-01), isnull(d_date#4)], [coalesce(c_last_name#24, ), isnull(c_last_name#24), coalesce(c_first_name#23, ), isnull(c_first_name#23), coalesce(d_date#21, 1970-01-01), isnull(d_date#21)], LeftSemi, BuildRight

(44) CometProject
Input [3]: [c_last_name#10, c_first_name#9, d_date#4]

(45) CometHashAggregate
Input: []
Keys: []
Functions [1]: [partial_count(1)]

(46) CometExchange
Input [1]: [count#25]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(47) CometHashAggregate
Input [1]: [count#25]
Keys: []
Functions [1]: [count(1)]

(48) CometColumnarToRow [codegen id : 1]
Input [1]: [count(1)#26]

