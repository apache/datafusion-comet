== Physical Plan ==
* HashAggregate (51)
+- Exchange (50)
   +- * HashAggregate (49)
      +- * Project (48)
         +- * BroadcastHashJoin LeftAnti BuildRight (47)
            :- * BroadcastHashJoin LeftAnti BuildRight (33)
            :  :- * HashAggregate (19)
            :  :  +- Exchange (18)
            :  :     +- * HashAggregate (17)
            :  :        +- * Project (16)
            :  :           +- * BroadcastHashJoin Inner BuildRight (15)
            :  :              :- * Project (10)
            :  :              :  +- * BroadcastHashJoin Inner BuildRight (9)
            :  :              :     :- * Filter (3)
            :  :              :     :  +- * ColumnarToRow (2)
            :  :              :     :     +- Scan parquet spark_catalog.default.store_sales (1)
            :  :              :     +- BroadcastExchange (8)
            :  :              :        +- * Project (7)
            :  :              :           +- * Filter (6)
            :  :              :              +- * ColumnarToRow (5)
            :  :              :                 +- Scan parquet spark_catalog.default.date_dim (4)
            :  :              +- BroadcastExchange (14)
            :  :                 +- * Filter (13)
            :  :                    +- * ColumnarToRow (12)
            :  :                       +- Scan parquet spark_catalog.default.customer (11)
            :  +- BroadcastExchange (32)
            :     +- * HashAggregate (31)
            :        +- Exchange (30)
            :           +- * HashAggregate (29)
            :              +- * Project (28)
            :                 +- * BroadcastHashJoin Inner BuildRight (27)
            :                    :- * Project (25)
            :                    :  +- * BroadcastHashJoin Inner BuildRight (24)
            :                    :     :- * Filter (22)
            :                    :     :  +- * ColumnarToRow (21)
            :                    :     :     +- Scan parquet spark_catalog.default.catalog_sales (20)
            :                    :     +- ReusedExchange (23)
            :                    +- ReusedExchange (26)
            +- BroadcastExchange (46)
               +- * HashAggregate (45)
                  +- Exchange (44)
                     +- * HashAggregate (43)
                        +- * Project (42)
                           +- * BroadcastHashJoin Inner BuildRight (41)
                              :- * Project (39)
                              :  +- * BroadcastHashJoin Inner BuildRight (38)
                              :     :- * Filter (36)
                              :     :  +- * ColumnarToRow (35)
                              :     :     +- Scan parquet spark_catalog.default.web_sales (34)
                              :     +- ReusedExchange (37)
                              +- ReusedExchange (40)


(1) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#2)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int>

(2) ColumnarToRow [codegen id : 3]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]

(3) Filter [codegen id : 3]
Input [2]: [ss_customer_sk#1, ss_sold_date_sk#2]
Condition : isnotnull(ss_customer_sk#1)

(4) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(5) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(6) Filter [codegen id : 1]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#3))

(7) Project [codegen id : 1]
Output [2]: [d_date_sk#3, d_date#4]
Input [3]: [d_date_sk#3, d_date#4, d_month_seq#5]

(8) BroadcastExchange
Input [2]: [d_date_sk#3, d_date#4]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#2]
Right keys [1]: [d_date_sk#3]
Join type: Inner
Join condition: None

(10) Project [codegen id : 3]
Output [2]: [ss_customer_sk#1, d_date#4]
Input [4]: [ss_customer_sk#1, ss_sold_date_sk#2, d_date_sk#3, d_date#4]

(11) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#6, c_first_name#7, c_last_name#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(12) ColumnarToRow [codegen id : 2]
Input [3]: [c_customer_sk#6, c_first_name#7, c_last_name#8]

(13) Filter [codegen id : 2]
Input [3]: [c_customer_sk#6, c_first_name#7, c_last_name#8]
Condition : isnotnull(c_customer_sk#6)

(14) BroadcastExchange
Input [3]: [c_customer_sk#6, c_first_name#7, c_last_name#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(15) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#6]
Join type: Inner
Join condition: None

(16) Project [codegen id : 3]
Output [3]: [c_last_name#8, c_first_name#7, d_date#4]
Input [5]: [ss_customer_sk#1, d_date#4, c_customer_sk#6, c_first_name#7, c_last_name#8]

(17) HashAggregate [codegen id : 3]
Input [3]: [c_last_name#8, c_first_name#7, d_date#4]
Keys [3]: [c_last_name#8, c_first_name#7, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#8, c_first_name#7, d_date#4]

(18) Exchange
Input [3]: [c_last_name#8, c_first_name#7, d_date#4]
Arguments: hashpartitioning(c_last_name#8, c_first_name#7, d_date#4, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(19) HashAggregate [codegen id : 12]
Input [3]: [c_last_name#8, c_first_name#7, d_date#4]
Keys [3]: [c_last_name#8, c_first_name#7, d_date#4]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#8, c_first_name#7, d_date#4]

(20) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_bill_customer_sk#9, cs_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#10)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int>

(21) ColumnarToRow [codegen id : 6]
Input [2]: [cs_bill_customer_sk#9, cs_sold_date_sk#10]

(22) Filter [codegen id : 6]
Input [2]: [cs_bill_customer_sk#9, cs_sold_date_sk#10]
Condition : isnotnull(cs_bill_customer_sk#9)

(23) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#11, d_date#12]

(24) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_sold_date_sk#10]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(25) Project [codegen id : 6]
Output [2]: [cs_bill_customer_sk#9, d_date#12]
Input [4]: [cs_bill_customer_sk#9, cs_sold_date_sk#10, d_date_sk#11, d_date#12]

(26) ReusedExchange [Reuses operator id: 14]
Output [3]: [c_customer_sk#13, c_first_name#14, c_last_name#15]

(27) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [cs_bill_customer_sk#9]
Right keys [1]: [c_customer_sk#13]
Join type: Inner
Join condition: None

(28) Project [codegen id : 6]
Output [3]: [c_last_name#15, c_first_name#14, d_date#12]
Input [5]: [cs_bill_customer_sk#9, d_date#12, c_customer_sk#13, c_first_name#14, c_last_name#15]

(29) HashAggregate [codegen id : 6]
Input [3]: [c_last_name#15, c_first_name#14, d_date#12]
Keys [3]: [c_last_name#15, c_first_name#14, d_date#12]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#15, c_first_name#14, d_date#12]

(30) Exchange
Input [3]: [c_last_name#15, c_first_name#14, d_date#12]
Arguments: hashpartitioning(c_last_name#15, c_first_name#14, d_date#12, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) HashAggregate [codegen id : 7]
Input [3]: [c_last_name#15, c_first_name#14, d_date#12]
Keys [3]: [c_last_name#15, c_first_name#14, d_date#12]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#15, c_first_name#14, d_date#12]

(32) BroadcastExchange
Input [3]: [c_last_name#15, c_first_name#14, d_date#12]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, string, true], ), isnull(input[1, string, true]), coalesce(input[2, date, true], 1970-01-01), isnull(input[2, date, true])),false), [plan_id=5]

(33) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(c_last_name#8, ), isnull(c_last_name#8), coalesce(c_first_name#7, ), isnull(c_first_name#7), coalesce(d_date#4, 1970-01-01), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#15, ), isnull(c_last_name#15), coalesce(c_first_name#14, ), isnull(c_first_name#14), coalesce(d_date#12, 1970-01-01), isnull(d_date#12)]
Join type: LeftAnti
Join condition: None

(34) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_bill_customer_sk#16, ws_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#17)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int>

(35) ColumnarToRow [codegen id : 10]
Input [2]: [ws_bill_customer_sk#16, ws_sold_date_sk#17]

(36) Filter [codegen id : 10]
Input [2]: [ws_bill_customer_sk#16, ws_sold_date_sk#17]
Condition : isnotnull(ws_bill_customer_sk#16)

(37) ReusedExchange [Reuses operator id: 8]
Output [2]: [d_date_sk#18, d_date#19]

(38) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_sold_date_sk#17]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(39) Project [codegen id : 10]
Output [2]: [ws_bill_customer_sk#16, d_date#19]
Input [4]: [ws_bill_customer_sk#16, ws_sold_date_sk#17, d_date_sk#18, d_date#19]

(40) ReusedExchange [Reuses operator id: 14]
Output [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]

(41) BroadcastHashJoin [codegen id : 10]
Left keys [1]: [ws_bill_customer_sk#16]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(42) Project [codegen id : 10]
Output [3]: [c_last_name#22, c_first_name#21, d_date#19]
Input [5]: [ws_bill_customer_sk#16, d_date#19, c_customer_sk#20, c_first_name#21, c_last_name#22]

(43) HashAggregate [codegen id : 10]
Input [3]: [c_last_name#22, c_first_name#21, d_date#19]
Keys [3]: [c_last_name#22, c_first_name#21, d_date#19]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#22, c_first_name#21, d_date#19]

(44) Exchange
Input [3]: [c_last_name#22, c_first_name#21, d_date#19]
Arguments: hashpartitioning(c_last_name#22, c_first_name#21, d_date#19, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(45) HashAggregate [codegen id : 11]
Input [3]: [c_last_name#22, c_first_name#21, d_date#19]
Keys [3]: [c_last_name#22, c_first_name#21, d_date#19]
Functions: []
Aggregate Attributes: []
Results [3]: [c_last_name#22, c_first_name#21, d_date#19]

(46) BroadcastExchange
Input [3]: [c_last_name#22, c_first_name#21, d_date#19]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, string, true], ), isnull(input[0, string, true]), coalesce(input[1, string, true], ), isnull(input[1, string, true]), coalesce(input[2, date, true], 1970-01-01), isnull(input[2, date, true])),false), [plan_id=7]

(47) BroadcastHashJoin [codegen id : 12]
Left keys [6]: [coalesce(c_last_name#8, ), isnull(c_last_name#8), coalesce(c_first_name#7, ), isnull(c_first_name#7), coalesce(d_date#4, 1970-01-01), isnull(d_date#4)]
Right keys [6]: [coalesce(c_last_name#22, ), isnull(c_last_name#22), coalesce(c_first_name#21, ), isnull(c_first_name#21), coalesce(d_date#19, 1970-01-01), isnull(d_date#19)]
Join type: LeftAnti
Join condition: None

(48) Project [codegen id : 12]
Output: []
Input [3]: [c_last_name#8, c_first_name#7, d_date#4]

(49) HashAggregate [codegen id : 12]
Input: []
Keys: []
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#23]
Results [1]: [count#24]

(50) Exchange
Input [1]: [count#24]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(51) HashAggregate [codegen id : 13]
Input [1]: [count#24]
Keys: []
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#25]
Results [1]: [count(1)#25 AS count(1)#26]

