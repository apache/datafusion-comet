== Physical Plan ==
* ColumnarToRow (30)
+- CometTakeOrderedAndProject (29)
   +- CometProject (28)
      +- CometBroadcastHashJoin (27)
         :- CometHashAggregate (23)
         :  +- CometExchange (22)
         :     +- CometHashAggregate (21)
         :        +- CometProject (20)
         :           +- CometBroadcastHashJoin (19)
         :              :- CometProject (14)
         :              :  +- CometBroadcastHashJoin (13)
         :              :     :- CometProject (8)
         :              :     :  +- CometBroadcastHashJoin (7)
         :              :     :     :- CometFilter (2)
         :              :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :              :     :     +- CometBroadcastExchange (6)
         :              :     :        +- CometProject (5)
         :              :     :           +- CometFilter (4)
         :              :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
         :              :     +- CometBroadcastExchange (12)
         :              :        +- CometProject (11)
         :              :           +- CometFilter (10)
         :              :              +- CometScan parquet spark_catalog.default.store (9)
         :              +- CometBroadcastExchange (18)
         :                 +- CometProject (17)
         :                    +- CometFilter (16)
         :                       +- CometScan parquet spark_catalog.default.household_demographics (15)
         +- CometBroadcastExchange (26)
            +- CometFilter (25)
               +- CometScan parquet spark_catalog.default.customer (24)


(1) CometScan parquet spark_catalog.default.store_sales
Output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_customer_sk#1))

(3) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_dow#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(4) CometFilter
Input [3]: [d_date_sk#9, d_year#10, d_dow#11]
Condition : (((isnotnull(d_dow#11) AND (d_dow#11 = 1)) AND d_year#10 IN (1999,2000,2001)) AND isnotnull(d_date_sk#9))

(5) CometProject
Input [3]: [d_date_sk#9, d_year#10, d_dow#11]
Arguments: [d_date_sk#9], [d_date_sk#9]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: [d_date_sk#9]

(7) CometBroadcastHashJoin
Left output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#9]
Arguments: [ss_sold_date_sk#8], [d_date_sk#9], Inner, BuildRight

(8) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8, d_date_sk#9]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(9) CometScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#12, s_number_employees#13, s_city#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_number_employees,295), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>

(10) CometFilter
Input [3]: [s_store_sk#12, s_number_employees#13, s_city#14]
Condition : (((isnotnull(s_number_employees#13) AND (s_number_employees#13 >= 200)) AND (s_number_employees#13 <= 295)) AND isnotnull(s_store_sk#12))

(11) CometProject
Input [3]: [s_store_sk#12, s_number_employees#13, s_city#14]
Arguments: [s_store_sk#12, s_city#14], [s_store_sk#12, s_city#14]

(12) CometBroadcastExchange
Input [2]: [s_store_sk#12, s_city#14]
Arguments: [s_store_sk#12, s_city#14]

(13) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [2]: [s_store_sk#12, s_city#14]
Arguments: [ss_store_sk#4], [s_store_sk#12], Inner, BuildRight

(14) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_store_sk#12, s_city#14]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#14], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#14]

(15) CometScan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,6),GreaterThan(hd_vehicle_count,2)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(16) CometFilter
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Condition : (((hd_dep_count#16 = 6) OR (hd_vehicle_count#17 > 2)) AND isnotnull(hd_demo_sk#15))

(17) CometProject
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Arguments: [hd_demo_sk#15], [hd_demo_sk#15]

(18) CometBroadcastExchange
Input [1]: [hd_demo_sk#15]
Arguments: [hd_demo_sk#15]

(19) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#14]
Right output [1]: [hd_demo_sk#15]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#15], Inner, BuildRight

(20) CometProject
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#14, hd_demo_sk#15]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#14], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#14]

(21) CometHashAggregate
Input [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#14]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#14]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#6)), partial_sum(UnscaledValue(ss_net_profit#7))]

(22) CometExchange
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#14, sum#18, sum#19]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(23) CometHashAggregate
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#14, sum#18, sum#19]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#14]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#6)), sum(UnscaledValue(ss_net_profit#7))]

(24) CometScan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(25) CometFilter
Input [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]
Condition : isnotnull(c_customer_sk#20)

(26) CometBroadcastExchange
Input [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]
Arguments: [c_customer_sk#20, c_first_name#21, c_last_name#22]

(27) CometBroadcastHashJoin
Left output [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#14, amt#23, profit#24]
Right output [3]: [c_customer_sk#20, c_first_name#21, c_last_name#22]
Arguments: [ss_customer_sk#1], [c_customer_sk#20], Inner, BuildRight

(28) CometProject
Input [8]: [ss_ticket_number#5, ss_customer_sk#1, s_city#14, amt#23, profit#24, c_customer_sk#20, c_first_name#21, c_last_name#22]
Arguments: [c_last_name#22, c_first_name#21, substr(s_city, 1, 30)#25, ss_ticket_number#5, amt#23, profit#24, s_city#14], [c_last_name#22, c_first_name#21, substr(s_city#14, 1, 30) AS substr(s_city, 1, 30)#25, ss_ticket_number#5, amt#23, profit#24, s_city#14]

(29) CometTakeOrderedAndProject
Input [7]: [c_last_name#22, c_first_name#21, substr(s_city, 1, 30)#25, ss_ticket_number#5, amt#23, profit#24, s_city#14]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_last_name#22 ASC NULLS FIRST,c_first_name#21 ASC NULLS FIRST,substr(s_city#14, 1, 30) ASC NULLS FIRST,profit#24 ASC NULLS FIRST], output=[c_last_name#22,c_first_name#21,substr(s_city, 1, 30)#25,ss_ticket_number#5,amt#23,profit#24]), [c_last_name#22, c_first_name#21, substr(s_city, 1, 30)#25, ss_ticket_number#5, amt#23, profit#24], 100, [c_last_name#22 ASC NULLS FIRST, c_first_name#21 ASC NULLS FIRST, substr(s_city#14, 1, 30) ASC NULLS FIRST, profit#24 ASC NULLS FIRST], [c_last_name#22, c_first_name#21, substr(s_city, 1, 30)#25, ss_ticket_number#5, amt#23, profit#24]

(30) ColumnarToRow [codegen id : 1]
Input [6]: [c_last_name#22, c_first_name#21, substr(s_city, 1, 30)#25, ss_ticket_number#5, amt#23, profit#24]

