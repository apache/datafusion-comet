== Physical Plan ==
* ColumnarToRow (63)
+- CometHashAggregate (62)
   +- CometExchange (61)
      +- CometHashAggregate (60)
         +- CometUnion (59)
            :- CometProject (44)
            :  +- CometBroadcastHashJoin (43)
            :     :- CometProject (38)
            :     :  +- CometHashJoin (37)
            :     :     :- CometExchange (23)
            :     :     :  +- CometProject (22)
            :     :     :     +- CometBroadcastHashJoin (21)
            :     :     :        :- CometScan parquet spark_catalog.default.catalog_sales (1)
            :     :     :        +- CometBroadcastExchange (20)
            :     :     :           +- CometProject (19)
            :     :     :              +- CometFilter (18)
            :     :     :                 +- CometHashAggregate (17)
            :     :     :                    +- CometExchange (16)
            :     :     :                       +- CometHashAggregate (15)
            :     :     :                          +- CometProject (14)
            :     :     :                             +- CometBroadcastHashJoin (13)
            :     :     :                                :- CometProject (9)
            :     :     :                                :  +- CometBroadcastHashJoin (8)
            :     :     :                                :     :- CometFilter (3)
            :     :     :                                :     :  +- CometScan parquet spark_catalog.default.store_sales (2)
            :     :     :                                :     +- CometBroadcastExchange (7)
            :     :     :                                :        +- CometProject (6)
            :     :     :                                :           +- CometFilter (5)
            :     :     :                                :              +- CometScan parquet spark_catalog.default.date_dim (4)
            :     :     :                                +- CometBroadcastExchange (12)
            :     :     :                                   +- CometFilter (11)
            :     :     :                                      +- CometScan parquet spark_catalog.default.item (10)
            :     :     +- CometProject (36)
            :     :        +- CometFilter (35)
            :     :           +- CometHashAggregate (34)
            :     :              +- CometExchange (33)
            :     :                 +- CometHashAggregate (32)
            :     :                    +- CometProject (31)
            :     :                       +- CometBroadcastHashJoin (30)
            :     :                          :- CometProject (26)
            :     :                          :  +- CometFilter (25)
            :     :                          :     +- CometScan parquet spark_catalog.default.store_sales (24)
            :     :                          +- CometBroadcastExchange (29)
            :     :                             +- CometFilter (28)
            :     :                                +- CometScan parquet spark_catalog.default.customer (27)
            :     +- CometBroadcastExchange (42)
            :        +- CometProject (41)
            :           +- CometFilter (40)
            :              +- CometScan parquet spark_catalog.default.date_dim (39)
            +- CometProject (58)
               +- CometBroadcastHashJoin (57)
                  :- CometProject (55)
                  :  +- CometHashJoin (54)
                  :     :- CometExchange (49)
                  :     :  +- CometProject (48)
                  :     :     +- CometBroadcastHashJoin (47)
                  :     :        :- CometScan parquet spark_catalog.default.web_sales (45)
                  :     :        +- ReusedExchange (46)
                  :     +- CometProject (53)
                  :        +- CometFilter (52)
                  :           +- CometHashAggregate (51)
                  :              +- ReusedExchange (50)
                  +- ReusedExchange (56)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) CometScan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(3) CometFilter
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(4) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(5) CometFilter
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(6) CometProject
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Arguments: [d_date_sk#10, d_date#11], [d_date_sk#10, d_date#11]

(7) CometBroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: [d_date_sk#10, d_date#11]

(8) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Right output [2]: [d_date_sk#10, d_date#11]
Arguments: [ss_sold_date_sk#8], [d_date_sk#10], Inner, BuildRight

(9) CometProject
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]
Arguments: [ss_item_sk#7, d_date#11], [ss_item_sk#7, d_date#11]

(10) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) CometFilter
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(12) CometBroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: [i_item_sk#13, i_item_desc#14]

(13) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#7, d_date#11]
Right output [2]: [i_item_sk#13, i_item_desc#14]
Arguments: [ss_item_sk#7], [i_item_sk#13], Inner, BuildRight

(14) CometProject
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#13, i_item_desc#14]
Arguments: [d_date#11, i_item_sk#13, _groupingexpression#15], [d_date#11, i_item_sk#13, substr(i_item_desc#14, 1, 30) AS _groupingexpression#15]

(15) CometHashAggregate
Input [3]: [d_date#11, i_item_sk#13, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [partial_count(1)]

(16) CometExchange
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#16]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#13, d_date#11, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometHashAggregate
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#16]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [count(1)]

(18) CometFilter
Input [2]: [item_sk#17, cnt#18]
Condition : (cnt#18 > 4)

(19) CometProject
Input [2]: [item_sk#17, cnt#18]
Arguments: [item_sk#17], [item_sk#17]

(20) CometBroadcastExchange
Input [1]: [item_sk#17]
Arguments: [item_sk#17]

(21) CometBroadcastHashJoin
Left output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [item_sk#17]
Arguments: [cs_item_sk#2], [item_sk#17], LeftSemi, BuildRight

(22) CometProject
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(23) CometExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(24) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(25) CometFilter
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_customer_sk#19)

(26) CometProject
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Arguments: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21], [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21]

(27) CometScan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(28) CometFilter
Input [1]: [c_customer_sk#23]
Condition : isnotnull(c_customer_sk#23)

(29) CometBroadcastExchange
Input [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#23]

(30) CometBroadcastHashJoin
Left output [3]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21]
Right output [1]: [c_customer_sk#23]
Arguments: [ss_customer_sk#19], [c_customer_sk#23], Inner, BuildRight

(31) CometProject
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, c_customer_sk#23]
Arguments: [ss_quantity#20, ss_sales_price#21, c_customer_sk#23], [ss_quantity#20, ss_sales_price#21, c_customer_sk#23]

(32) CometHashAggregate
Input [3]: [ss_quantity#20, ss_sales_price#21, c_customer_sk#23]
Keys [1]: [c_customer_sk#23]
Functions [1]: [partial_sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(33) CometExchange
Input [3]: [c_customer_sk#23, sum#24, isEmpty#25]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(34) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#24, isEmpty#25]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(35) CometFilter
Input [2]: [c_customer_sk#23, ssales#26]
Condition : (isnotnull(ssales#26) AND (cast(ssales#26 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#27, [id=#28])))

(36) CometProject
Input [2]: [c_customer_sk#23, ssales#26]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(37) CometHashJoin
Left output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [c_customer_sk#23]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#23], LeftSemi, BuildRight

(38) CometProject
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(39) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#29, d_year#30, d_moy#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(40) CometFilter
Input [3]: [d_date_sk#29, d_year#30, d_moy#31]
Condition : ((((isnotnull(d_year#30) AND isnotnull(d_moy#31)) AND (d_year#30 = 2000)) AND (d_moy#31 = 2)) AND isnotnull(d_date_sk#29))

(41) CometProject
Input [3]: [d_date_sk#29, d_year#30, d_moy#31]
Arguments: [d_date_sk#29], [d_date_sk#29]

(42) CometBroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: [d_date_sk#29]

(43) CometBroadcastHashJoin
Left output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [d_date_sk#29]
Arguments: [cs_sold_date_sk#5], [d_date_sk#29], Inner, BuildRight

(44) CometProject
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#29]
Arguments: [sales#32], [(cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4) AS sales#32]

(45) CometScan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#33, ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#37), dynamicpruningexpression(ws_sold_date_sk#37 IN dynamicpruning#38)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(46) ReusedExchange [Reuses operator id: 20]
Output [1]: [item_sk#17]

(47) CometBroadcastHashJoin
Left output [5]: [ws_item_sk#33, ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]
Right output [1]: [item_sk#17]
Arguments: [ws_item_sk#33], [item_sk#17], LeftSemi, BuildRight

(48) CometProject
Input [5]: [ws_item_sk#33, ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]
Arguments: [ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37], [ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]

(49) CometExchange
Input [4]: [ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]
Arguments: hashpartitioning(ws_bill_customer_sk#34, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(50) ReusedExchange [Reuses operator id: 33]
Output [3]: [c_customer_sk#23, sum#24, isEmpty#25]

(51) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#24, isEmpty#25]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(52) CometFilter
Input [2]: [c_customer_sk#23, ssales#26]
Condition : (isnotnull(ssales#26) AND (cast(ssales#26 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#27, [id=#28])))

(53) CometProject
Input [2]: [c_customer_sk#23, ssales#26]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(54) CometHashJoin
Left output [4]: [ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]
Right output [1]: [c_customer_sk#23]
Arguments: [ws_bill_customer_sk#34], [c_customer_sk#23], LeftSemi, BuildRight

(55) CometProject
Input [4]: [ws_bill_customer_sk#34, ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]
Arguments: [ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37], [ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]

(56) ReusedExchange [Reuses operator id: 42]
Output [1]: [d_date_sk#39]

(57) CometBroadcastHashJoin
Left output [3]: [ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37]
Right output [1]: [d_date_sk#39]
Arguments: [ws_sold_date_sk#37], [d_date_sk#39], Inner, BuildRight

(58) CometProject
Input [4]: [ws_quantity#35, ws_list_price#36, ws_sold_date_sk#37, d_date_sk#39]
Arguments: [sales#40], [(cast(ws_quantity#35 as decimal(10,0)) * ws_list_price#36) AS sales#40]

(59) CometUnion
Child 0 Input [1]: [sales#32]
Child 1 Input [1]: [sales#40]

(60) CometHashAggregate
Input [1]: [sales#32]
Keys: []
Functions [1]: [partial_sum(sales#32)]

(61) CometExchange
Input [2]: [sum#41, isEmpty#42]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(62) CometHashAggregate
Input [2]: [sum#41, isEmpty#42]
Keys: []
Functions [1]: [sum(sales#32)]

(63) ColumnarToRow [codegen id : 1]
Input [1]: [sum(sales)#43]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (68)
+- * ColumnarToRow (67)
   +- CometProject (66)
      +- CometFilter (65)
         +- CometScan parquet spark_catalog.default.date_dim (64)


(64) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#29, d_year#30, d_moy#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(65) CometFilter
Input [3]: [d_date_sk#29, d_year#30, d_moy#31]
Condition : ((((isnotnull(d_year#30) AND isnotnull(d_moy#31)) AND (d_year#30 = 2000)) AND (d_moy#31 = 2)) AND isnotnull(d_date_sk#29))

(66) CometProject
Input [3]: [d_date_sk#29, d_year#30, d_moy#31]
Arguments: [d_date_sk#29], [d_date_sk#29]

(67) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#29]

(68) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 2 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (73)
+- * ColumnarToRow (72)
   +- CometProject (71)
      +- CometFilter (70)
         +- CometScan parquet spark_catalog.default.date_dim (69)


(69) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(70) CometFilter
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(71) CometProject
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Arguments: [d_date_sk#10, d_date#11], [d_date_sk#10, d_date#11]

(72) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_date#11]

(73) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:3 Hosting operator id = 35 Hosting Expression = Subquery scalar-subquery#27, [id=#28]
* ColumnarToRow (91)
+- CometHashAggregate (90)
   +- CometExchange (89)
      +- CometHashAggregate (88)
         +- CometHashAggregate (87)
            +- CometExchange (86)
               +- CometHashAggregate (85)
                  +- CometProject (84)
                     +- CometBroadcastHashJoin (83)
                        :- CometProject (78)
                        :  +- CometBroadcastHashJoin (77)
                        :     :- CometFilter (75)
                        :     :  +- CometScan parquet spark_catalog.default.store_sales (74)
                        :     +- ReusedExchange (76)
                        +- CometBroadcastExchange (82)
                           +- CometProject (81)
                              +- CometFilter (80)
                                 +- CometScan parquet spark_catalog.default.date_dim (79)


(74) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#44, ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#47), dynamicpruningexpression(ss_sold_date_sk#47 IN dynamicpruning#48)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(75) CometFilter
Input [4]: [ss_customer_sk#44, ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47]
Condition : isnotnull(ss_customer_sk#44)

(76) ReusedExchange [Reuses operator id: 29]
Output [1]: [c_customer_sk#49]

(77) CometBroadcastHashJoin
Left output [4]: [ss_customer_sk#44, ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47]
Right output [1]: [c_customer_sk#49]
Arguments: [ss_customer_sk#44], [c_customer_sk#49], Inner, BuildRight

(78) CometProject
Input [5]: [ss_customer_sk#44, ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47, c_customer_sk#49]
Arguments: [ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47, c_customer_sk#49], [ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47, c_customer_sk#49]

(79) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#50, d_year#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(80) CometFilter
Input [2]: [d_date_sk#50, d_year#51]
Condition : (d_year#51 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#50))

(81) CometProject
Input [2]: [d_date_sk#50, d_year#51]
Arguments: [d_date_sk#50], [d_date_sk#50]

(82) CometBroadcastExchange
Input [1]: [d_date_sk#50]
Arguments: [d_date_sk#50]

(83) CometBroadcastHashJoin
Left output [4]: [ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47, c_customer_sk#49]
Right output [1]: [d_date_sk#50]
Arguments: [ss_sold_date_sk#47], [d_date_sk#50], Inner, BuildRight

(84) CometProject
Input [5]: [ss_quantity#45, ss_sales_price#46, ss_sold_date_sk#47, c_customer_sk#49, d_date_sk#50]
Arguments: [ss_quantity#45, ss_sales_price#46, c_customer_sk#49], [ss_quantity#45, ss_sales_price#46, c_customer_sk#49]

(85) CometHashAggregate
Input [3]: [ss_quantity#45, ss_sales_price#46, c_customer_sk#49]
Keys [1]: [c_customer_sk#49]
Functions [1]: [partial_sum((cast(ss_quantity#45 as decimal(10,0)) * ss_sales_price#46))]

(86) CometExchange
Input [3]: [c_customer_sk#49, sum#52, isEmpty#53]
Arguments: hashpartitioning(c_customer_sk#49, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(87) CometHashAggregate
Input [3]: [c_customer_sk#49, sum#52, isEmpty#53]
Keys [1]: [c_customer_sk#49]
Functions [1]: [sum((cast(ss_quantity#45 as decimal(10,0)) * ss_sales_price#46))]

(88) CometHashAggregate
Input [1]: [csales#54]
Keys: []
Functions [1]: [partial_max(csales#54)]

(89) CometExchange
Input [1]: [max#55]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(90) CometHashAggregate
Input [1]: [max#55]
Keys: []
Functions [1]: [max(csales#54)]

(91) ColumnarToRow [codegen id : 1]
Input [1]: [tpcds_cmax#56]

Subquery:4 Hosting operator id = 74 Hosting Expression = ss_sold_date_sk#47 IN dynamicpruning#48
BroadcastExchange (96)
+- * ColumnarToRow (95)
   +- CometProject (94)
      +- CometFilter (93)
         +- CometScan parquet spark_catalog.default.date_dim (92)


(92) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#50, d_year#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(93) CometFilter
Input [2]: [d_date_sk#50, d_year#51]
Condition : (d_year#51 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#50))

(94) CometProject
Input [2]: [d_date_sk#50, d_year#51]
Arguments: [d_date_sk#50], [d_date_sk#50]

(95) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#50]

(96) BroadcastExchange
Input [1]: [d_date_sk#50]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:5 Hosting operator id = 45 Hosting Expression = ws_sold_date_sk#37 IN dynamicpruning#6

Subquery:6 Hosting operator id = 52 Hosting Expression = ReusedSubquery Subquery scalar-subquery#27, [id=#28]


