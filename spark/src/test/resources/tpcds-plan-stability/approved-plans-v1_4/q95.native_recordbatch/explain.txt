== Physical Plan ==
* HashAggregate (53)
+- Exchange (52)
   +- * HashAggregate (51)
      +- * HashAggregate (50)
         +- * ColumnarToRow (49)
            +- CometHashAggregate (48)
               +- CometProject (47)
                  +- CometBroadcastHashJoin (46)
                     :- CometProject (41)
                     :  +- CometBroadcastHashJoin (40)
                     :     :- CometProject (35)
                     :     :  +- CometBroadcastHashJoin (34)
                     :     :     :- CometSortMergeJoin (29)
                     :     :     :  :- CometSortMergeJoin (15)
                     :     :     :  :  :- CometSort (5)
                     :     :     :  :  :  +- CometExchange (4)
                     :     :     :  :  :     +- CometProject (3)
                     :     :     :  :  :        +- CometFilter (2)
                     :     :     :  :  :           +- CometScan parquet spark_catalog.default.web_sales (1)
                     :     :     :  :  +- CometProject (14)
                     :     :     :  :     +- CometSortMergeJoin (13)
                     :     :     :  :        :- CometSort (10)
                     :     :     :  :        :  +- CometExchange (9)
                     :     :     :  :        :     +- CometProject (8)
                     :     :     :  :        :        +- CometFilter (7)
                     :     :     :  :        :           +- CometScan parquet spark_catalog.default.web_sales (6)
                     :     :     :  :        +- CometSort (12)
                     :     :     :  :           +- ReusedExchange (11)
                     :     :     :  +- CometProject (28)
                     :     :     :     +- CometSortMergeJoin (27)
                     :     :     :        :- CometSort (20)
                     :     :     :        :  +- CometExchange (19)
                     :     :     :        :     +- CometProject (18)
                     :     :     :        :        +- CometFilter (17)
                     :     :     :        :           +- CometScan parquet spark_catalog.default.web_returns (16)
                     :     :     :        +- CometProject (26)
                     :     :     :           +- CometSortMergeJoin (25)
                     :     :     :              :- CometSort (22)
                     :     :     :              :  +- ReusedExchange (21)
                     :     :     :              +- CometSort (24)
                     :     :     :                 +- ReusedExchange (23)
                     :     :     +- CometBroadcastExchange (33)
                     :     :        +- CometProject (32)
                     :     :           +- CometFilter (31)
                     :     :              +- CometScan parquet spark_catalog.default.date_dim (30)
                     :     +- CometBroadcastExchange (39)
                     :        +- CometProject (38)
                     :           +- CometFilter (37)
                     :              +- CometScan parquet spark_catalog.default.customer_address (36)
                     +- CometBroadcastExchange (45)
                        +- CometProject (44)
                           +- CometFilter (43)
                              +- CometScan parquet spark_catalog.default.web_site (42)


(1) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3))

(3) CometProject
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6], [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(4) CometExchange
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: hashpartitioning(ws_order_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(5) CometSort
Input [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Arguments: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6], [ws_order_number#4 ASC NULLS FIRST]

(6) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_order_number), IsNotNull(ws_warehouse_sk)]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(7) CometFilter
Input [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_order_number#9) AND isnotnull(ws_warehouse_sk#8))

(8) CometProject
Input [3]: [ws_warehouse_sk#8, ws_order_number#9, ws_sold_date_sk#10]
Arguments: [ws_warehouse_sk#8, ws_order_number#9], [ws_warehouse_sk#8, ws_order_number#9]

(9) CometExchange
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]
Arguments: hashpartitioning(ws_order_number#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(10) CometSort
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]
Arguments: [ws_warehouse_sk#8, ws_order_number#9], [ws_order_number#9 ASC NULLS FIRST]

(11) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#11, ws_order_number#12]

(12) CometSort
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_warehouse_sk#11, ws_order_number#12], [ws_order_number#12 ASC NULLS FIRST]

(13) CometSortMergeJoin
Left output [2]: [ws_warehouse_sk#8, ws_order_number#9]
Right output [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_order_number#9], [ws_order_number#12], Inner, NOT (ws_warehouse_sk#8 = ws_warehouse_sk#11)

(14) CometProject
Input [4]: [ws_warehouse_sk#8, ws_order_number#9, ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_order_number#9], [ws_order_number#9]

(15) CometSortMergeJoin
Left output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Right output [1]: [ws_order_number#9]
Arguments: [ws_order_number#4], [ws_order_number#9], LeftSemi

(16) CometScan parquet spark_catalog.default.web_returns
Output [2]: [wr_order_number#13, wr_returned_date_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number)]
ReadSchema: struct<wr_order_number:int>

(17) CometFilter
Input [2]: [wr_order_number#13, wr_returned_date_sk#14]
Condition : isnotnull(wr_order_number#13)

(18) CometProject
Input [2]: [wr_order_number#13, wr_returned_date_sk#14]
Arguments: [wr_order_number#13], [wr_order_number#13]

(19) CometExchange
Input [1]: [wr_order_number#13]
Arguments: hashpartitioning(wr_order_number#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(20) CometSort
Input [1]: [wr_order_number#13]
Arguments: [wr_order_number#13], [wr_order_number#13 ASC NULLS FIRST]

(21) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#8, ws_order_number#9]

(22) CometSort
Input [2]: [ws_warehouse_sk#8, ws_order_number#9]
Arguments: [ws_warehouse_sk#8, ws_order_number#9], [ws_order_number#9 ASC NULLS FIRST]

(23) ReusedExchange [Reuses operator id: 9]
Output [2]: [ws_warehouse_sk#11, ws_order_number#12]

(24) CometSort
Input [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_warehouse_sk#11, ws_order_number#12], [ws_order_number#12 ASC NULLS FIRST]

(25) CometSortMergeJoin
Left output [2]: [ws_warehouse_sk#8, ws_order_number#9]
Right output [2]: [ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_order_number#9], [ws_order_number#12], Inner, NOT (ws_warehouse_sk#8 = ws_warehouse_sk#11)

(26) CometProject
Input [4]: [ws_warehouse_sk#8, ws_order_number#9, ws_warehouse_sk#11, ws_order_number#12]
Arguments: [ws_order_number#9], [ws_order_number#9]

(27) CometSortMergeJoin
Left output [1]: [wr_order_number#13]
Right output [1]: [ws_order_number#9]
Arguments: [wr_order_number#13], [ws_order_number#9], Inner

(28) CometProject
Input [2]: [wr_order_number#13, ws_order_number#9]
Arguments: [wr_order_number#13], [wr_order_number#13]

(29) CometSortMergeJoin
Left output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Right output [1]: [wr_order_number#13]
Arguments: [ws_order_number#4], [wr_order_number#13], LeftSemi

(30) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#15, d_date#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(31) CometFilter
Input [2]: [d_date_sk#15, d_date#16]
Condition : (((isnotnull(d_date#16) AND (d_date#16 >= 1999-02-01)) AND (d_date#16 <= 1999-04-02)) AND isnotnull(d_date_sk#15))

(32) CometProject
Input [2]: [d_date_sk#15, d_date#16]
Arguments: [d_date_sk#15], [d_date_sk#15]

(33) CometBroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: [d_date_sk#15]

(34) CometBroadcastHashJoin
Left output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Right output [1]: [d_date_sk#15]
Arguments: [ws_ship_date_sk#1], [d_date_sk#15], Inner, BuildRight

(35) CometProject
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, d_date_sk#15]
Arguments: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6], [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(36) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#17, ca_state#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(37) CometFilter
Input [2]: [ca_address_sk#17, ca_state#18]
Condition : ((isnotnull(ca_state#18) AND (ca_state#18 = IL)) AND isnotnull(ca_address_sk#17))

(38) CometProject
Input [2]: [ca_address_sk#17, ca_state#18]
Arguments: [ca_address_sk#17], [ca_address_sk#17]

(39) CometBroadcastExchange
Input [1]: [ca_address_sk#17]
Arguments: [ca_address_sk#17]

(40) CometBroadcastHashJoin
Left output [5]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Right output [1]: [ca_address_sk#17]
Arguments: [ws_ship_addr_sk#2], [ca_address_sk#17], Inner, BuildRight

(41) CometProject
Input [6]: [ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, ca_address_sk#17]
Arguments: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6], [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(42) CometScan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#19, web_company_name#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(43) CometFilter
Input [2]: [web_site_sk#19, web_company_name#20]
Condition : ((isnotnull(web_company_name#20) AND (web_company_name#20 = pri                                               )) AND isnotnull(web_site_sk#19))

(44) CometProject
Input [2]: [web_site_sk#19, web_company_name#20]
Arguments: [web_site_sk#19], [web_site_sk#19]

(45) CometBroadcastExchange
Input [1]: [web_site_sk#19]
Arguments: [web_site_sk#19]

(46) CometBroadcastHashJoin
Left output [4]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Right output [1]: [web_site_sk#19]
Arguments: [ws_web_site_sk#3], [web_site_sk#19], Inner, BuildRight

(47) CometProject
Input [5]: [ws_web_site_sk#3, ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6, web_site_sk#19]
Arguments: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6], [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]

(48) CometHashAggregate
Input [3]: [ws_order_number#4, ws_ext_ship_cost#5, ws_net_profit#6]
Keys [1]: [ws_order_number#4]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#5)), partial_sum(UnscaledValue(ws_net_profit#6))]

(49) ColumnarToRow [codegen id : 1]
Input [3]: [ws_order_number#4, sum#21, sum#22]

(50) HashAggregate [codegen id : 1]
Input [3]: [ws_order_number#4, sum#21, sum#22]
Keys [1]: [ws_order_number#4]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#5))#23, sum(UnscaledValue(ws_net_profit#6))#24]
Results [3]: [ws_order_number#4, sum#21, sum#22]

(51) HashAggregate [codegen id : 1]
Input [3]: [ws_order_number#4, sum#21, sum#22]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#5)), merge_sum(UnscaledValue(ws_net_profit#6)), partial_count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#23, sum(UnscaledValue(ws_net_profit#6))#24, count(ws_order_number#4)#25]
Results [3]: [sum#21, sum#22, count#26]

(52) Exchange
Input [3]: [sum#21, sum#22, count#26]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=4]

(53) HashAggregate [codegen id : 2]
Input [3]: [sum#21, sum#22, count#26]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#5)), sum(UnscaledValue(ws_net_profit#6)), count(distinct ws_order_number#4)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#5))#23, sum(UnscaledValue(ws_net_profit#6))#24, count(ws_order_number#4)#25]
Results [3]: [count(ws_order_number#4)#25 AS order count #27, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#5))#23,17,2) AS total shipping cost #28, MakeDecimal(sum(UnscaledValue(ws_net_profit#6))#24,17,2) AS total net profit #29]

