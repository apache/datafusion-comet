== Physical Plan ==
* ColumnarToRow (38)
+- CometTakeOrderedAndProject (37)
   +- CometProject (36)
      +- CometBroadcastHashJoin (35)
         :- CometProject (33)
         :  +- CometBroadcastHashJoin (32)
         :     :- CometHashAggregate (28)
         :     :  +- CometExchange (27)
         :     :     +- CometHashAggregate (26)
         :     :        +- CometProject (25)
         :     :           +- CometBroadcastHashJoin (24)
         :     :              :- CometProject (20)
         :     :              :  +- CometBroadcastHashJoin (19)
         :     :              :     :- CometProject (14)
         :     :              :     :  +- CometBroadcastHashJoin (13)
         :     :              :     :     :- CometProject (8)
         :     :              :     :     :  +- CometBroadcastHashJoin (7)
         :     :              :     :     :     :- CometFilter (2)
         :     :              :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :              :     :     :     +- CometBroadcastExchange (6)
         :     :              :     :     :        +- CometProject (5)
         :     :              :     :     :           +- CometFilter (4)
         :     :              :     :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
         :     :              :     :     +- CometBroadcastExchange (12)
         :     :              :     :        +- CometProject (11)
         :     :              :     :           +- CometFilter (10)
         :     :              :     :              +- CometScan parquet spark_catalog.default.store (9)
         :     :              :     +- CometBroadcastExchange (18)
         :     :              :        +- CometProject (17)
         :     :              :           +- CometFilter (16)
         :     :              :              +- CometScan parquet spark_catalog.default.household_demographics (15)
         :     :              +- CometBroadcastExchange (23)
         :     :                 +- CometFilter (22)
         :     :                    +- CometScan parquet spark_catalog.default.customer_address (21)
         :     +- CometBroadcastExchange (31)
         :        +- CometFilter (30)
         :           +- CometScan parquet spark_catalog.default.customer (29)
         +- ReusedExchange (34)


(1) Scan parquet spark_catalog.default.store_sales
Output [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)>

(2) CometFilter
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_customer_sk#1))

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_dom#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(4) CometFilter
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Condition : ((((isnotnull(d_dom#13) AND (d_dom#13 >= 1)) AND (d_dom#13 <= 2)) AND d_year#12 IN (1999,2000,2001)) AND isnotnull(d_date_sk#11))

(5) CometProject
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Arguments: [d_date_sk#11], [d_date_sk#11]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: [d_date_sk#11]

(7) CometBroadcastHashJoin
Left output [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Right output [1]: [d_date_sk#11]
Arguments: [ss_sold_date_sk#9], [d_date_sk#11], Inner, BuildRight

(8) CometProject
Input [10]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, d_date_sk#11]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]

(9) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_city#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(10) CometFilter
Input [2]: [s_store_sk#14, s_city#15]
Condition : (s_city#15 IN (Midway,Fairview) AND isnotnull(s_store_sk#14))

(11) CometProject
Input [2]: [s_store_sk#14, s_city#15]
Arguments: [s_store_sk#14], [s_store_sk#14]

(12) CometBroadcastExchange
Input [1]: [s_store_sk#14]
Arguments: [s_store_sk#14]

(13) CometBroadcastHashJoin
Left output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Right output [1]: [s_store_sk#14]
Arguments: [ss_store_sk#4], [s_store_sk#14], Inner, BuildRight

(14) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, s_store_sk#14]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]

(15) Scan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(16) CometFilter
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Condition : (((hd_dep_count#17 = 4) OR (hd_vehicle_count#18 = 3)) AND isnotnull(hd_demo_sk#16))

(17) CometProject
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Arguments: [hd_demo_sk#16], [hd_demo_sk#16]

(18) CometBroadcastExchange
Input [1]: [hd_demo_sk#16]
Arguments: [hd_demo_sk#16]

(19) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Right output [1]: [hd_demo_sk#16]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#16], Inner, BuildRight

(20) CometProject
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, hd_demo_sk#16]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]

(21) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#19, ca_city#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(22) CometFilter
Input [2]: [ca_address_sk#19, ca_city#20]
Condition : (isnotnull(ca_address_sk#19) AND isnotnull(ca_city#20))

(23) CometBroadcastExchange
Input [2]: [ca_address_sk#19, ca_city#20]
Arguments: [ca_address_sk#19, ca_city#20]

(24) CometBroadcastHashJoin
Left output [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Right output [2]: [ca_address_sk#19, ca_city#20]
Arguments: [ss_addr_sk#3], [ca_address_sk#19], Inner, BuildRight

(25) CometProject
Input [8]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_address_sk#19, ca_city#20]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#20], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#20]

(26) CometHashAggregate
Input [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#20]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#6)), partial_sum(UnscaledValue(ss_ext_list_price#7)), partial_sum(UnscaledValue(ss_ext_tax#8))]

(27) CometExchange
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20, sum#21, sum#22, sum#23]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(28) CometHashAggregate
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20, sum#21, sum#22, sum#23]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#6)), sum(UnscaledValue(ss_ext_list_price#7)), sum(UnscaledValue(ss_ext_tax#8))]

(29) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#24, c_current_addr_sk#25, c_first_name#26, c_last_name#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(30) CometFilter
Input [4]: [c_customer_sk#24, c_current_addr_sk#25, c_first_name#26, c_last_name#27]
Condition : (isnotnull(c_customer_sk#24) AND isnotnull(c_current_addr_sk#25))

(31) CometBroadcastExchange
Input [4]: [c_customer_sk#24, c_current_addr_sk#25, c_first_name#26, c_last_name#27]
Arguments: [c_customer_sk#24, c_current_addr_sk#25, c_first_name#26, c_last_name#27]

(32) CometBroadcastHashJoin
Left output [6]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#28, extended_price#29, list_price#30, extended_tax#31]
Right output [4]: [c_customer_sk#24, c_current_addr_sk#25, c_first_name#26, c_last_name#27]
Arguments: [ss_customer_sk#1], [c_customer_sk#24], Inner, BuildRight

(33) CometProject
Input [10]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#28, extended_price#29, list_price#30, extended_tax#31, c_customer_sk#24, c_current_addr_sk#25, c_first_name#26, c_last_name#27]
Arguments: [ss_ticket_number#5, bought_city#28, extended_price#29, list_price#30, extended_tax#31, c_current_addr_sk#25, c_first_name#26, c_last_name#27], [ss_ticket_number#5, bought_city#28, extended_price#29, list_price#30, extended_tax#31, c_current_addr_sk#25, c_first_name#26, c_last_name#27]

(34) ReusedExchange [Reuses operator id: 23]
Output [2]: [ca_address_sk#32, ca_city#33]

(35) CometBroadcastHashJoin
Left output [8]: [ss_ticket_number#5, bought_city#28, extended_price#29, list_price#30, extended_tax#31, c_current_addr_sk#25, c_first_name#26, c_last_name#27]
Right output [2]: [ca_address_sk#32, ca_city#33]
Arguments: [c_current_addr_sk#25], [ca_address_sk#32], Inner, NOT (ca_city#33 = bought_city#28), BuildRight

(36) CometProject
Input [10]: [ss_ticket_number#5, bought_city#28, extended_price#29, list_price#30, extended_tax#31, c_current_addr_sk#25, c_first_name#26, c_last_name#27, ca_address_sk#32, ca_city#33]
Arguments: [c_last_name#27, c_first_name#26, ca_city#33, bought_city#28, ss_ticket_number#5, extended_price#29, extended_tax#31, list_price#30], [c_last_name#27, c_first_name#26, ca_city#33, bought_city#28, ss_ticket_number#5, extended_price#29, extended_tax#31, list_price#30]

(37) CometTakeOrderedAndProject
Input [8]: [c_last_name#27, c_first_name#26, ca_city#33, bought_city#28, ss_ticket_number#5, extended_price#29, extended_tax#31, list_price#30]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_last_name#27 ASC NULLS FIRST,ss_ticket_number#5 ASC NULLS FIRST], output=[c_last_name#27,c_first_name#26,ca_city#33,bought_city#28,ss_ticket_number#5,extended_price#29,extended_tax#31,list_price#30]), [c_last_name#27, c_first_name#26, ca_city#33, bought_city#28, ss_ticket_number#5, extended_price#29, extended_tax#31, list_price#30], 100, [c_last_name#27 ASC NULLS FIRST, ss_ticket_number#5 ASC NULLS FIRST], [c_last_name#27, c_first_name#26, ca_city#33, bought_city#28, ss_ticket_number#5, extended_price#29, extended_tax#31, list_price#30]

(38) ColumnarToRow [codegen id : 1]
Input [8]: [c_last_name#27, c_first_name#26, ca_city#33, bought_city#28, ss_ticket_number#5, extended_price#29, extended_tax#31, list_price#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (43)
+- * ColumnarToRow (42)
   +- CometProject (41)
      +- CometFilter (40)
         +- CometScan parquet spark_catalog.default.date_dim (39)


(39) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_dom#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(40) CometFilter
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Condition : ((((isnotnull(d_dom#13) AND (d_dom#13 >= 1)) AND (d_dom#13 <= 2)) AND d_year#12 IN (1999,2000,2001)) AND isnotnull(d_date_sk#11))

(41) CometProject
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Arguments: [d_date_sk#11], [d_date_sk#11]

(42) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#11]

(43) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]


