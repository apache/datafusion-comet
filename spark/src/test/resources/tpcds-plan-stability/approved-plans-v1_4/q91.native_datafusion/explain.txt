== Physical Plan ==
* CometColumnarToRow (43)
+- CometSort (42)
   +- CometExchange (41)
      +- CometHashAggregate (40)
         +- CometExchange (39)
            +- CometHashAggregate (38)
               +- CometProject (37)
                  +- CometBroadcastHashJoin (36)
                     :- CometProject (31)
                     :  +- CometBroadcastHashJoin (30)
                     :     :- CometProject (25)
                     :     :  +- CometBroadcastHashJoin (24)
                     :     :     :- CometProject (19)
                     :     :     :  +- CometBroadcastHashJoin (18)
                     :     :     :     :- CometProject (14)
                     :     :     :     :  +- CometBroadcastHashJoin (13)
                     :     :     :     :     :- CometProject (8)
                     :     :     :     :     :  +- CometBroadcastHashJoin (7)
                     :     :     :     :     :     :- CometProject (3)
                     :     :     :     :     :     :  +- CometFilter (2)
                     :     :     :     :     :     :     +- CometNativeScan parquet spark_catalog.default.call_center (1)
                     :     :     :     :     :     +- CometBroadcastExchange (6)
                     :     :     :     :     :        +- CometFilter (5)
                     :     :     :     :     :           +- CometNativeScan parquet spark_catalog.default.catalog_returns (4)
                     :     :     :     :     +- CometBroadcastExchange (12)
                     :     :     :     :        +- CometProject (11)
                     :     :     :     :           +- CometFilter (10)
                     :     :     :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (9)
                     :     :     :     +- CometBroadcastExchange (17)
                     :     :     :        +- CometFilter (16)
                     :     :     :           +- CometNativeScan parquet spark_catalog.default.customer (15)
                     :     :     +- CometBroadcastExchange (23)
                     :     :        +- CometProject (22)
                     :     :           +- CometFilter (21)
                     :     :              +- CometNativeScan parquet spark_catalog.default.customer_address (20)
                     :     +- CometBroadcastExchange (29)
                     :        +- CometProject (28)
                     :           +- CometFilter (27)
                     :              +- CometNativeScan parquet spark_catalog.default.customer_demographics (26)
                     +- CometBroadcastExchange (35)
                        +- CometProject (34)
                           +- CometFilter (33)
                              +- CometNativeScan parquet spark_catalog.default.household_demographics (32)


(1) CometNativeScan parquet spark_catalog.default.call_center
Output [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_name:string,cc_manager:string>

(2) CometFilter
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Condition : isnotnull(cc_call_center_sk#1)

(3) CometProject
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Arguments: [cc_call_center_sk#1, cc_call_center_id#5, cc_name#3, cc_manager#4], [cc_call_center_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cc_call_center_id#2, 16, true, false, true) AS cc_call_center_id#5, cc_name#3, cc_manager#4]

(4) CometNativeScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#6, cr_call_center_sk#7, cr_net_loss#8, cr_returned_date_sk#9]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cr_returned_date_sk#9)]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_call_center_sk:int,cr_net_loss:decimal(7,2)>

(5) CometFilter
Input [4]: [cr_returning_customer_sk#6, cr_call_center_sk#7, cr_net_loss#8, cr_returned_date_sk#9]
Condition : (isnotnull(cr_call_center_sk#7) AND isnotnull(cr_returning_customer_sk#6))

(6) CometBroadcastExchange
Input [4]: [cr_returning_customer_sk#6, cr_call_center_sk#7, cr_net_loss#8, cr_returned_date_sk#9]
Arguments: [cr_returning_customer_sk#6, cr_call_center_sk#7, cr_net_loss#8, cr_returned_date_sk#9]

(7) CometBroadcastHashJoin
Left output [4]: [cc_call_center_sk#1, cc_call_center_id#5, cc_name#3, cc_manager#4]
Right output [4]: [cr_returning_customer_sk#6, cr_call_center_sk#7, cr_net_loss#8, cr_returned_date_sk#9]
Arguments: [cc_call_center_sk#1], [cr_call_center_sk#7], Inner, BuildRight

(8) CometProject
Input [8]: [cc_call_center_sk#1, cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_call_center_sk#7, cr_net_loss#8, cr_returned_date_sk#9]
Arguments: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8, cr_returned_date_sk#9], [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8, cr_returned_date_sk#9]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#12)) AND (d_year#11 = 1998)) AND (d_moy#12 = 11)) AND isnotnull(d_date_sk#10))

(11) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: [d_date_sk#10]

(13) CometBroadcastHashJoin
Left output [6]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8, cr_returned_date_sk#9]
Right output [1]: [d_date_sk#10]
Arguments: [cr_returned_date_sk#9], [d_date_sk#10], Inner, BuildRight

(14) CometProject
Input [7]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8, cr_returned_date_sk#9, d_date_sk#10]
Arguments: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8], [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8]

(15) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int>

(16) CometFilter
Input [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Condition : (((isnotnull(c_customer_sk#13) AND isnotnull(c_current_addr_sk#16)) AND isnotnull(c_current_cdemo_sk#14)) AND isnotnull(c_current_hdemo_sk#15))

(17) CometBroadcastExchange
Input [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Arguments: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]

(18) CometBroadcastHashJoin
Left output [5]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8]
Right output [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Arguments: [cr_returning_customer_sk#6], [c_customer_sk#13], Inner, BuildRight

(19) CometProject
Input [9]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_returning_customer_sk#6, cr_net_loss#8, c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Arguments: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16], [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]

(20) CometNativeScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#17, ca_gmt_offset#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(21) CometFilter
Input [2]: [ca_address_sk#17, ca_gmt_offset#18]
Condition : ((isnotnull(ca_gmt_offset#18) AND (ca_gmt_offset#18 = -7.00)) AND isnotnull(ca_address_sk#17))

(22) CometProject
Input [2]: [ca_address_sk#17, ca_gmt_offset#18]
Arguments: [ca_address_sk#17], [ca_address_sk#17]

(23) CometBroadcastExchange
Input [1]: [ca_address_sk#17]
Arguments: [ca_address_sk#17]

(24) CometBroadcastHashJoin
Left output [7]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Right output [1]: [ca_address_sk#17]
Arguments: [c_current_addr_sk#16], [ca_address_sk#17], Inner, BuildRight

(25) CometProject
Input [8]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16, ca_address_sk#17]
Arguments: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15], [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15]

(26) CometNativeScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(27) CometFilter
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = Unknown             )) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = W) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = Advanced Degree     ))) AND isnotnull(cd_demo_sk#19))

(28) CometProject
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Arguments: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23], [cd_demo_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) AS cd_marital_status#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) AS cd_education_status#23]

(29) CometBroadcastExchange
Input [3]: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]

(30) CometBroadcastHashJoin
Left output [6]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15]
Right output [3]: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [c_current_cdemo_sk#14], [cd_demo_sk#19], Inner, BuildRight

(31) CometProject
Input [9]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_cdemo_sk#14, c_current_hdemo_sk#15, cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_hdemo_sk#15, cd_marital_status#22, cd_education_status#23], [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_hdemo_sk#15, cd_marital_status#22, cd_education_status#23]

(32) CometNativeScan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#24, hd_buy_potential#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(33) CometFilter
Input [2]: [hd_demo_sk#24, hd_buy_potential#25]
Condition : (StartsWith(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, hd_buy_potential#25, 15, true, false, true), Unknown) AND isnotnull(hd_demo_sk#24))

(34) CometProject
Input [2]: [hd_demo_sk#24, hd_buy_potential#25]
Arguments: [hd_demo_sk#24], [hd_demo_sk#24]

(35) CometBroadcastExchange
Input [1]: [hd_demo_sk#24]
Arguments: [hd_demo_sk#24]

(36) CometBroadcastHashJoin
Left output [7]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_hdemo_sk#15, cd_marital_status#22, cd_education_status#23]
Right output [1]: [hd_demo_sk#24]
Arguments: [c_current_hdemo_sk#15], [hd_demo_sk#24], Inner, BuildRight

(37) CometProject
Input [8]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, c_current_hdemo_sk#15, cd_marital_status#22, cd_education_status#23, hd_demo_sk#24]
Arguments: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, cd_marital_status#22, cd_education_status#23], [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, cd_marital_status#22, cd_education_status#23]

(38) CometHashAggregate
Input [6]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cr_net_loss#8, cd_marital_status#22, cd_education_status#23]
Keys [5]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cd_marital_status#22, cd_education_status#23]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#8))]

(39) CometExchange
Input [6]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cd_marital_status#22, cd_education_status#23, sum#26]
Arguments: hashpartitioning(cc_call_center_id#5, cc_name#3, cc_manager#4, cd_marital_status#22, cd_education_status#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(40) CometHashAggregate
Input [6]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cd_marital_status#22, cd_education_status#23, sum#26]
Keys [5]: [cc_call_center_id#5, cc_name#3, cc_manager#4, cd_marital_status#22, cd_education_status#23]
Functions [1]: [sum(UnscaledValue(cr_net_loss#8))]

(41) CometExchange
Input [4]: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30]
Arguments: rangepartitioning(Returns_Loss#30 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(42) CometSort
Input [4]: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30]
Arguments: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30], [Returns_Loss#30 DESC NULLS LAST]

(43) CometColumnarToRow [codegen id : 1]
Input [4]: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30]

