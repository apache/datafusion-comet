== Physical Plan ==
* ColumnarToRow (81)
+- CometTakeOrderedAndProject (80)
   +- CometUnion (79)
      :- CometHashAggregate (58)
      :  +- CometExchange (57)
      :     +- CometHashAggregate (56)
      :        +- CometProject (55)
      :           +- CometBroadcastHashJoin (54)
      :              :- CometProject (49)
      :              :  +- CometBroadcastHashJoin (48)
      :              :     :- CometHashJoin (38)
      :              :     :  :- CometExchange (24)
      :              :     :  :  +- CometProject (23)
      :              :     :  :     +- CometBroadcastHashJoin (22)
      :              :     :  :        :- CometFilter (2)
      :              :     :  :        :  +- CometScan parquet spark_catalog.default.catalog_sales (1)
      :              :     :  :        +- CometBroadcastExchange (21)
      :              :     :  :           +- CometProject (20)
      :              :     :  :              +- CometFilter (19)
      :              :     :  :                 +- CometHashAggregate (18)
      :              :     :  :                    +- CometExchange (17)
      :              :     :  :                       +- CometHashAggregate (16)
      :              :     :  :                          +- CometProject (15)
      :              :     :  :                             +- CometBroadcastHashJoin (14)
      :              :     :  :                                :- CometProject (10)
      :              :     :  :                                :  +- CometBroadcastHashJoin (9)
      :              :     :  :                                :     :- CometFilter (4)
      :              :     :  :                                :     :  +- CometScan parquet spark_catalog.default.store_sales (3)
      :              :     :  :                                :     +- CometBroadcastExchange (8)
      :              :     :  :                                :        +- CometProject (7)
      :              :     :  :                                :           +- CometFilter (6)
      :              :     :  :                                :              +- CometScan parquet spark_catalog.default.date_dim (5)
      :              :     :  :                                +- CometBroadcastExchange (13)
      :              :     :  :                                   +- CometFilter (12)
      :              :     :  :                                      +- CometScan parquet spark_catalog.default.item (11)
      :              :     :  +- CometProject (37)
      :              :     :     +- CometFilter (36)
      :              :     :        +- CometHashAggregate (35)
      :              :     :           +- CometExchange (34)
      :              :     :              +- CometHashAggregate (33)
      :              :     :                 +- CometProject (32)
      :              :     :                    +- CometBroadcastHashJoin (31)
      :              :     :                       :- CometProject (27)
      :              :     :                       :  +- CometFilter (26)
      :              :     :                       :     +- CometScan parquet spark_catalog.default.store_sales (25)
      :              :     :                       +- CometBroadcastExchange (30)
      :              :     :                          +- CometFilter (29)
      :              :     :                             +- CometScan parquet spark_catalog.default.customer (28)
      :              :     +- CometBroadcastExchange (47)
      :              :        +- CometHashJoin (46)
      :              :           :- CometExchange (41)
      :              :           :  +- CometFilter (40)
      :              :           :     +- CometScan parquet spark_catalog.default.customer (39)
      :              :           +- CometProject (45)
      :              :              +- CometFilter (44)
      :              :                 +- CometHashAggregate (43)
      :              :                    +- ReusedExchange (42)
      :              +- CometBroadcastExchange (53)
      :                 +- CometProject (52)
      :                    +- CometFilter (51)
      :                       +- CometScan parquet spark_catalog.default.date_dim (50)
      +- CometHashAggregate (78)
         +- CometExchange (77)
            +- CometHashAggregate (76)
               +- CometProject (75)
                  +- CometBroadcastHashJoin (74)
                     :- CometProject (72)
                     :  +- CometBroadcastHashJoin (71)
                     :     :- CometHashJoin (69)
                     :     :  :- CometExchange (64)
                     :     :  :  +- CometProject (63)
                     :     :  :     +- CometBroadcastHashJoin (62)
                     :     :  :        :- CometFilter (60)
                     :     :  :        :  +- CometScan parquet spark_catalog.default.web_sales (59)
                     :     :  :        +- ReusedExchange (61)
                     :     :  +- CometProject (68)
                     :     :     +- CometFilter (67)
                     :     :        +- CometHashAggregate (66)
                     :     :           +- ReusedExchange (65)
                     :     +- ReusedExchange (70)
                     +- ReusedExchange (73)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) CometFilter
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(3) CometScan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(4) CometFilter
Input [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Condition : isnotnull(ss_item_sk#7)

(5) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(6) CometFilter
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(7) CometProject
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Arguments: [d_date_sk#10, d_date#11], [d_date_sk#10, d_date#11]

(8) CometBroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: [d_date_sk#10, d_date#11]

(9) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#7, ss_sold_date_sk#8]
Right output [2]: [d_date_sk#10, d_date#11]
Arguments: [ss_sold_date_sk#8], [d_date_sk#10], Inner, BuildRight

(10) CometProject
Input [4]: [ss_item_sk#7, ss_sold_date_sk#8, d_date_sk#10, d_date#11]
Arguments: [ss_item_sk#7, d_date#11], [ss_item_sk#7, d_date#11]

(11) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#13, i_item_desc#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(12) CometFilter
Input [2]: [i_item_sk#13, i_item_desc#14]
Condition : isnotnull(i_item_sk#13)

(13) CometBroadcastExchange
Input [2]: [i_item_sk#13, i_item_desc#14]
Arguments: [i_item_sk#13, i_item_desc#14]

(14) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#7, d_date#11]
Right output [2]: [i_item_sk#13, i_item_desc#14]
Arguments: [ss_item_sk#7], [i_item_sk#13], Inner, BuildRight

(15) CometProject
Input [4]: [ss_item_sk#7, d_date#11, i_item_sk#13, i_item_desc#14]
Arguments: [d_date#11, i_item_sk#13, _groupingexpression#15], [d_date#11, i_item_sk#13, substr(i_item_desc#14, 1, 30) AS _groupingexpression#15]

(16) CometHashAggregate
Input [3]: [d_date#11, i_item_sk#13, _groupingexpression#15]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [partial_count(1)]

(17) CometExchange
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#16]
Arguments: hashpartitioning(_groupingexpression#15, i_item_sk#13, d_date#11, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(18) CometHashAggregate
Input [4]: [_groupingexpression#15, i_item_sk#13, d_date#11, count#16]
Keys [3]: [_groupingexpression#15, i_item_sk#13, d_date#11]
Functions [1]: [count(1)]

(19) CometFilter
Input [2]: [item_sk#17, cnt#18]
Condition : (cnt#18 > 4)

(20) CometProject
Input [2]: [item_sk#17, cnt#18]
Arguments: [item_sk#17], [item_sk#17]

(21) CometBroadcastExchange
Input [1]: [item_sk#17]
Arguments: [item_sk#17]

(22) CometBroadcastHashJoin
Left output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [item_sk#17]
Arguments: [cs_item_sk#2], [item_sk#17], LeftSemi, BuildRight

(23) CometProject
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(24) CometExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(25) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(26) CometFilter
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_customer_sk#19)

(27) CometProject
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, ss_sold_date_sk#22]
Arguments: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21], [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21]

(28) CometScan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(29) CometFilter
Input [1]: [c_customer_sk#23]
Condition : isnotnull(c_customer_sk#23)

(30) CometBroadcastExchange
Input [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#23]

(31) CometBroadcastHashJoin
Left output [3]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21]
Right output [1]: [c_customer_sk#23]
Arguments: [ss_customer_sk#19], [c_customer_sk#23], Inner, BuildRight

(32) CometProject
Input [4]: [ss_customer_sk#19, ss_quantity#20, ss_sales_price#21, c_customer_sk#23]
Arguments: [ss_quantity#20, ss_sales_price#21, c_customer_sk#23], [ss_quantity#20, ss_sales_price#21, c_customer_sk#23]

(33) CometHashAggregate
Input [3]: [ss_quantity#20, ss_sales_price#21, c_customer_sk#23]
Keys [1]: [c_customer_sk#23]
Functions [1]: [partial_sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(34) CometExchange
Input [3]: [c_customer_sk#23, sum#24, isEmpty#25]
Arguments: hashpartitioning(c_customer_sk#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(35) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#24, isEmpty#25]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(36) CometFilter
Input [2]: [c_customer_sk#23, ssales#26]
Condition : (isnotnull(ssales#26) AND (cast(ssales#26 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#27, [id=#28])))

(37) CometProject
Input [2]: [c_customer_sk#23, ssales#26]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(38) CometHashJoin
Left output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [c_customer_sk#23]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#23], LeftSemi, BuildRight

(39) CometScan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(40) CometFilter
Input [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Condition : isnotnull(c_customer_sk#29)

(41) CometExchange
Input [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(42) ReusedExchange [Reuses operator id: 34]
Output [3]: [c_customer_sk#23, sum#24, isEmpty#25]

(43) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#24, isEmpty#25]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(44) CometFilter
Input [2]: [c_customer_sk#23, ssales#26]
Condition : (isnotnull(ssales#26) AND (cast(ssales#26 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#27, [id=#28])))

(45) CometProject
Input [2]: [c_customer_sk#23, ssales#26]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(46) CometHashJoin
Left output [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Right output [1]: [c_customer_sk#23]
Arguments: [c_customer_sk#29], [c_customer_sk#23], LeftSemi, BuildRight

(47) CometBroadcastExchange
Input [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Arguments: [c_customer_sk#29, c_first_name#30, c_last_name#31]

(48) CometBroadcastHashJoin
Left output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#29], Inner, BuildRight

(49) CometProject
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#29, c_first_name#30, c_last_name#31]
Arguments: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31], [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31]

(50) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#32, d_year#33, d_moy#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(51) CometFilter
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Condition : ((((isnotnull(d_year#33) AND isnotnull(d_moy#34)) AND (d_year#33 = 2000)) AND (d_moy#34 = 2)) AND isnotnull(d_date_sk#32))

(52) CometProject
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Arguments: [d_date_sk#32], [d_date_sk#32]

(53) CometBroadcastExchange
Input [1]: [d_date_sk#32]
Arguments: [d_date_sk#32]

(54) CometBroadcastHashJoin
Left output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31]
Right output [1]: [d_date_sk#32]
Arguments: [cs_sold_date_sk#5], [d_date_sk#32], Inner, BuildRight

(55) CometProject
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31, d_date_sk#32]
Arguments: [cs_quantity#3, cs_list_price#4, c_first_name#30, c_last_name#31], [cs_quantity#3, cs_list_price#4, c_first_name#30, c_last_name#31]

(56) CometHashAggregate
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#30, c_last_name#31]
Keys [2]: [c_last_name#31, c_first_name#30]
Functions [1]: [partial_sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]

(57) CometExchange
Input [4]: [c_last_name#31, c_first_name#30, sum#35, isEmpty#36]
Arguments: hashpartitioning(c_last_name#31, c_first_name#30, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(58) CometHashAggregate
Input [4]: [c_last_name#31, c_first_name#30, sum#35, isEmpty#36]
Keys [2]: [c_last_name#31, c_first_name#30]
Functions [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]

(59) CometScan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#41), dynamicpruningexpression(ws_sold_date_sk#41 IN dynamicpruning#42)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(60) CometFilter
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Condition : isnotnull(ws_bill_customer_sk#38)

(61) ReusedExchange [Reuses operator id: 21]
Output [1]: [item_sk#17]

(62) CometBroadcastHashJoin
Left output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Right output [1]: [item_sk#17]
Arguments: [ws_item_sk#37], [item_sk#17], LeftSemi, BuildRight

(63) CometProject
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41], [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(64) CometExchange
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_bill_customer_sk#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(65) ReusedExchange [Reuses operator id: 34]
Output [3]: [c_customer_sk#23, sum#24, isEmpty#25]

(66) CometHashAggregate
Input [3]: [c_customer_sk#23, sum#24, isEmpty#25]
Keys [1]: [c_customer_sk#23]
Functions [1]: [sum((cast(ss_quantity#20 as decimal(10,0)) * ss_sales_price#21))]

(67) CometFilter
Input [2]: [c_customer_sk#23, ssales#26]
Condition : (isnotnull(ssales#26) AND (cast(ssales#26 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#27, [id=#28])))

(68) CometProject
Input [2]: [c_customer_sk#23, ssales#26]
Arguments: [c_customer_sk#23], [c_customer_sk#23]

(69) CometHashJoin
Left output [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Right output [1]: [c_customer_sk#23]
Arguments: [ws_bill_customer_sk#38], [c_customer_sk#23], LeftSemi, BuildRight

(70) ReusedExchange [Reuses operator id: 47]
Output [3]: [c_customer_sk#43, c_first_name#44, c_last_name#45]

(71) CometBroadcastHashJoin
Left output [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Right output [3]: [c_customer_sk#43, c_first_name#44, c_last_name#45]
Arguments: [ws_bill_customer_sk#38], [c_customer_sk#43], Inner, BuildRight

(72) CometProject
Input [7]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_customer_sk#43, c_first_name#44, c_last_name#45]
Arguments: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#44, c_last_name#45], [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#44, c_last_name#45]

(73) ReusedExchange [Reuses operator id: 53]
Output [1]: [d_date_sk#46]

(74) CometBroadcastHashJoin
Left output [5]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#44, c_last_name#45]
Right output [1]: [d_date_sk#46]
Arguments: [ws_sold_date_sk#41], [d_date_sk#46], Inner, BuildRight

(75) CometProject
Input [6]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#44, c_last_name#45, d_date_sk#46]
Arguments: [ws_quantity#39, ws_list_price#40, c_first_name#44, c_last_name#45], [ws_quantity#39, ws_list_price#40, c_first_name#44, c_last_name#45]

(76) CometHashAggregate
Input [4]: [ws_quantity#39, ws_list_price#40, c_first_name#44, c_last_name#45]
Keys [2]: [c_last_name#45, c_first_name#44]
Functions [1]: [partial_sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))]

(77) CometExchange
Input [4]: [c_last_name#45, c_first_name#44, sum#47, isEmpty#48]
Arguments: hashpartitioning(c_last_name#45, c_first_name#44, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(78) CometHashAggregate
Input [4]: [c_last_name#45, c_first_name#44, sum#47, isEmpty#48]
Keys [2]: [c_last_name#45, c_first_name#44]
Functions [1]: [sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))]

(79) CometUnion
Child 0 Input [3]: [c_last_name#31, c_first_name#30, sales#49]
Child 1 Input [3]: [c_last_name#45, c_first_name#44, sales#50]

(80) CometTakeOrderedAndProject
Input [3]: [c_last_name#31, c_first_name#30, sales#49]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_last_name#31 ASC NULLS FIRST,c_first_name#30 ASC NULLS FIRST,sales#49 ASC NULLS FIRST], output=[c_last_name#31,c_first_name#30,sales#49]), [c_last_name#31, c_first_name#30, sales#49], 100, [c_last_name#31 ASC NULLS FIRST, c_first_name#30 ASC NULLS FIRST, sales#49 ASC NULLS FIRST], [c_last_name#31, c_first_name#30, sales#49]

(81) ColumnarToRow [codegen id : 1]
Input [3]: [c_last_name#31, c_first_name#30, sales#49]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (86)
+- * ColumnarToRow (85)
   +- CometProject (84)
      +- CometFilter (83)
         +- CometScan parquet spark_catalog.default.date_dim (82)


(82) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#32, d_year#33, d_moy#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(83) CometFilter
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Condition : ((((isnotnull(d_year#33) AND isnotnull(d_moy#34)) AND (d_year#33 = 2000)) AND (d_moy#34 = 2)) AND isnotnull(d_date_sk#32))

(84) CometProject
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Arguments: [d_date_sk#32], [d_date_sk#32]

(85) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#32]

(86) BroadcastExchange
Input [1]: [d_date_sk#32]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (91)
+- * ColumnarToRow (90)
   +- CometProject (89)
      +- CometFilter (88)
         +- CometScan parquet spark_catalog.default.date_dim (87)


(87) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_date#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(88) CometFilter
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Condition : (d_year#12 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#10))

(89) CometProject
Input [3]: [d_date_sk#10, d_date#11, d_year#12]
Arguments: [d_date_sk#10, d_date#11], [d_date_sk#10, d_date#11]

(90) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_date#11]

(91) BroadcastExchange
Input [2]: [d_date_sk#10, d_date#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:3 Hosting operator id = 36 Hosting Expression = Subquery scalar-subquery#27, [id=#28]
* ColumnarToRow (109)
+- CometHashAggregate (108)
   +- CometExchange (107)
      +- CometHashAggregate (106)
         +- CometHashAggregate (105)
            +- CometExchange (104)
               +- CometHashAggregate (103)
                  +- CometProject (102)
                     +- CometBroadcastHashJoin (101)
                        :- CometProject (96)
                        :  +- CometBroadcastHashJoin (95)
                        :     :- CometFilter (93)
                        :     :  +- CometScan parquet spark_catalog.default.store_sales (92)
                        :     +- ReusedExchange (94)
                        +- CometBroadcastExchange (100)
                           +- CometProject (99)
                              +- CometFilter (98)
                                 +- CometScan parquet spark_catalog.default.date_dim (97)


(92) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#54), dynamicpruningexpression(ss_sold_date_sk#54 IN dynamicpruning#55)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(93) CometFilter
Input [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]
Condition : isnotnull(ss_customer_sk#51)

(94) ReusedExchange [Reuses operator id: 30]
Output [1]: [c_customer_sk#56]

(95) CometBroadcastHashJoin
Left output [4]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54]
Right output [1]: [c_customer_sk#56]
Arguments: [ss_customer_sk#51], [c_customer_sk#56], Inner, BuildRight

(96) CometProject
Input [5]: [ss_customer_sk#51, ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56]
Arguments: [ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56], [ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56]

(97) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#57, d_year#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(98) CometFilter
Input [2]: [d_date_sk#57, d_year#58]
Condition : (d_year#58 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#57))

(99) CometProject
Input [2]: [d_date_sk#57, d_year#58]
Arguments: [d_date_sk#57], [d_date_sk#57]

(100) CometBroadcastExchange
Input [1]: [d_date_sk#57]
Arguments: [d_date_sk#57]

(101) CometBroadcastHashJoin
Left output [4]: [ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56]
Right output [1]: [d_date_sk#57]
Arguments: [ss_sold_date_sk#54], [d_date_sk#57], Inner, BuildRight

(102) CometProject
Input [5]: [ss_quantity#52, ss_sales_price#53, ss_sold_date_sk#54, c_customer_sk#56, d_date_sk#57]
Arguments: [ss_quantity#52, ss_sales_price#53, c_customer_sk#56], [ss_quantity#52, ss_sales_price#53, c_customer_sk#56]

(103) CometHashAggregate
Input [3]: [ss_quantity#52, ss_sales_price#53, c_customer_sk#56]
Keys [1]: [c_customer_sk#56]
Functions [1]: [partial_sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))]

(104) CometExchange
Input [3]: [c_customer_sk#56, sum#59, isEmpty#60]
Arguments: hashpartitioning(c_customer_sk#56, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=10]

(105) CometHashAggregate
Input [3]: [c_customer_sk#56, sum#59, isEmpty#60]
Keys [1]: [c_customer_sk#56]
Functions [1]: [sum((cast(ss_quantity#52 as decimal(10,0)) * ss_sales_price#53))]

(106) CometHashAggregate
Input [1]: [csales#61]
Keys: []
Functions [1]: [partial_max(csales#61)]

(107) CometExchange
Input [1]: [max#62]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=11]

(108) CometHashAggregate
Input [1]: [max#62]
Keys: []
Functions [1]: [max(csales#61)]

(109) ColumnarToRow [codegen id : 1]
Input [1]: [tpcds_cmax#63]

Subquery:4 Hosting operator id = 92 Hosting Expression = ss_sold_date_sk#54 IN dynamicpruning#55
BroadcastExchange (114)
+- * ColumnarToRow (113)
   +- CometProject (112)
      +- CometFilter (111)
         +- CometScan parquet spark_catalog.default.date_dim (110)


(110) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#57, d_year#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(111) CometFilter
Input [2]: [d_date_sk#57, d_year#58]
Condition : (d_year#58 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#57))

(112) CometProject
Input [2]: [d_date_sk#57, d_year#58]
Arguments: [d_date_sk#57], [d_date_sk#57]

(113) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#57]

(114) BroadcastExchange
Input [1]: [d_date_sk#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:5 Hosting operator id = 44 Hosting Expression = ReusedSubquery Subquery scalar-subquery#27, [id=#28]

Subquery:6 Hosting operator id = 59 Hosting Expression = ws_sold_date_sk#41 IN dynamicpruning#6

Subquery:7 Hosting operator id = 67 Hosting Expression = ReusedSubquery Subquery scalar-subquery#27, [id=#28]


