== Physical Plan ==
TakeOrderedAndProject (113)
+- * HashAggregate (112)
   +- Exchange (111)
      +- * HashAggregate (110)
         +- * Expand (109)
            +- Union (108)
               :- * Project (75)
               :  +- * Filter (74)
               :     +- * HashAggregate (73)
               :        +- Exchange (72)
               :           +- * HashAggregate (71)
               :              +- * Project (70)
               :                 +- * BroadcastHashJoin Inner BuildRight (69)
               :                    :- * Project (63)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (62)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (55)
               :                    :     :  :- * Filter (3)
               :                    :     :  :  +- * ColumnarToRow (2)
               :                    :     :  :     +- Scan parquet spark_catalog.default.store_sales (1)
               :                    :     :  +- BroadcastExchange (54)
               :                    :     :     +- * Project (53)
               :                    :     :        +- * BroadcastHashJoin Inner BuildRight (52)
               :                    :     :           :- * Filter (6)
               :                    :     :           :  +- * ColumnarToRow (5)
               :                    :     :           :     +- Scan parquet spark_catalog.default.item (4)
               :                    :     :           +- BroadcastExchange (51)
               :                    :     :              +- * BroadcastHashJoin LeftSemi BuildRight (50)
               :                    :     :                 :- * HashAggregate (39)
               :                    :     :                 :  +- Exchange (38)
               :                    :     :                 :     +- * HashAggregate (37)
               :                    :     :                 :        +- * Project (36)
               :                    :     :                 :           +- * BroadcastHashJoin Inner BuildRight (35)
               :                    :     :                 :              :- * Project (33)
               :                    :     :                 :              :  +- * BroadcastHashJoin Inner BuildRight (32)
               :                    :     :                 :              :     :- * Filter (9)
               :                    :     :                 :              :     :  +- * ColumnarToRow (8)
               :                    :     :                 :              :     :     +- Scan parquet spark_catalog.default.store_sales (7)
               :                    :     :                 :              :     +- BroadcastExchange (31)
               :                    :     :                 :              :        +- * BroadcastHashJoin LeftSemi BuildRight (30)
               :                    :     :                 :              :           :- * Filter (12)
               :                    :     :                 :              :           :  +- * ColumnarToRow (11)
               :                    :     :                 :              :           :     +- Scan parquet spark_catalog.default.item (10)
               :                    :     :                 :              :           +- BroadcastExchange (29)
               :                    :     :                 :              :              +- * Project (28)
               :                    :     :                 :              :                 +- * BroadcastHashJoin Inner BuildRight (27)
               :                    :     :                 :              :                    :- * Project (21)
               :                    :     :                 :              :                    :  +- * BroadcastHashJoin Inner BuildRight (20)
               :                    :     :                 :              :                    :     :- * Filter (15)
               :                    :     :                 :              :                    :     :  +- * ColumnarToRow (14)
               :                    :     :                 :              :                    :     :     +- Scan parquet spark_catalog.default.catalog_sales (13)
               :                    :     :                 :              :                    :     +- BroadcastExchange (19)
               :                    :     :                 :              :                    :        +- * Filter (18)
               :                    :     :                 :              :                    :           +- * ColumnarToRow (17)
               :                    :     :                 :              :                    :              +- Scan parquet spark_catalog.default.item (16)
               :                    :     :                 :              :                    +- BroadcastExchange (26)
               :                    :     :                 :              :                       +- * Project (25)
               :                    :     :                 :              :                          +- * Filter (24)
               :                    :     :                 :              :                             +- * ColumnarToRow (23)
               :                    :     :                 :              :                                +- Scan parquet spark_catalog.default.date_dim (22)
               :                    :     :                 :              +- ReusedExchange (34)
               :                    :     :                 +- BroadcastExchange (49)
               :                    :     :                    +- * Project (48)
               :                    :     :                       +- * BroadcastHashJoin Inner BuildRight (47)
               :                    :     :                          :- * Project (45)
               :                    :     :                          :  +- * BroadcastHashJoin Inner BuildRight (44)
               :                    :     :                          :     :- * Filter (42)
               :                    :     :                          :     :  +- * ColumnarToRow (41)
               :                    :     :                          :     :     +- Scan parquet spark_catalog.default.web_sales (40)
               :                    :     :                          :     +- ReusedExchange (43)
               :                    :     :                          +- ReusedExchange (46)
               :                    :     +- BroadcastExchange (61)
               :                    :        +- * BroadcastHashJoin LeftSemi BuildRight (60)
               :                    :           :- * Filter (58)
               :                    :           :  +- * ColumnarToRow (57)
               :                    :           :     +- Scan parquet spark_catalog.default.item (56)
               :                    :           +- ReusedExchange (59)
               :                    +- BroadcastExchange (68)
               :                       +- * Project (67)
               :                          +- * Filter (66)
               :                             +- * ColumnarToRow (65)
               :                                +- Scan parquet spark_catalog.default.date_dim (64)
               :- * Project (91)
               :  +- * Filter (90)
               :     +- * HashAggregate (89)
               :        +- Exchange (88)
               :           +- * HashAggregate (87)
               :              +- * Project (86)
               :                 +- * BroadcastHashJoin Inner BuildRight (85)
               :                    :- * Project (83)
               :                    :  +- * BroadcastHashJoin Inner BuildRight (82)
               :                    :     :- * BroadcastHashJoin LeftSemi BuildRight (80)
               :                    :     :  :- * Filter (78)
               :                    :     :  :  +- * ColumnarToRow (77)
               :                    :     :  :     +- Scan parquet spark_catalog.default.catalog_sales (76)
               :                    :     :  +- ReusedExchange (79)
               :                    :     +- ReusedExchange (81)
               :                    +- ReusedExchange (84)
               +- * Project (107)
                  +- * Filter (106)
                     +- * HashAggregate (105)
                        +- Exchange (104)
                           +- * HashAggregate (103)
                              +- * Project (102)
                                 +- * BroadcastHashJoin Inner BuildRight (101)
                                    :- * Project (99)
                                    :  +- * BroadcastHashJoin Inner BuildRight (98)
                                    :     :- * BroadcastHashJoin LeftSemi BuildRight (96)
                                    :     :  :- * Filter (94)
                                    :     :  :  +- * ColumnarToRow (93)
                                    :     :  :     +- Scan parquet spark_catalog.default.web_sales (92)
                                    :     :  +- ReusedExchange (95)
                                    :     +- ReusedExchange (97)
                                    +- ReusedExchange (100)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(3) Filter [codegen id : 25]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) ColumnarToRow [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]

(6) Filter [codegen id : 11]
Input [4]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8]
Condition : ((isnotnull(i_brand_id#6) AND isnotnull(i_class_id#7)) AND isnotnull(i_category_id#8))

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#9, ss_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#10)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) ColumnarToRow [codegen id : 6]
Input [2]: [ss_item_sk#9, ss_sold_date_sk#10]

(9) Filter [codegen id : 6]
Input [2]: [ss_item_sk#9, ss_sold_date_sk#10]
Condition : isnotnull(ss_item_sk#9)

(10) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(11) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(12) Filter [codegen id : 4]
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Condition : (((isnotnull(i_item_sk#11) AND isnotnull(i_brand_id#12)) AND isnotnull(i_class_id#13)) AND isnotnull(i_category_id#14))

(13) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(14) ColumnarToRow [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]

(15) Filter [codegen id : 3]
Input [2]: [cs_item_sk#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#15)

(16) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(17) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(18) Filter [codegen id : 1]
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Condition : isnotnull(i_item_sk#17)

(19) BroadcastExchange
Input [4]: [i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(20) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_item_sk#15]
Right keys [1]: [i_item_sk#17]
Join type: Inner
Join condition: None

(21) Project [codegen id : 3]
Output [4]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20]
Input [6]: [cs_item_sk#15, cs_sold_date_sk#16, i_item_sk#17, i_brand_id#18, i_class_id#19, i_category_id#20]

(22) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#21, d_year#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(23) ColumnarToRow [codegen id : 2]
Input [2]: [d_date_sk#21, d_year#22]

(24) Filter [codegen id : 2]
Input [2]: [d_date_sk#21, d_year#22]
Condition : (((isnotnull(d_year#22) AND (d_year#22 >= 1999)) AND (d_year#22 <= 2001)) AND isnotnull(d_date_sk#21))

(25) Project [codegen id : 2]
Output [1]: [d_date_sk#21]
Input [2]: [d_date_sk#21, d_year#22]

(26) BroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(27) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#16]
Right keys [1]: [d_date_sk#21]
Join type: Inner
Join condition: None

(28) Project [codegen id : 3]
Output [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Input [5]: [cs_sold_date_sk#16, i_brand_id#18, i_class_id#19, i_category_id#20, d_date_sk#21]

(29) BroadcastExchange
Input [3]: [i_brand_id#18, i_class_id#19, i_category_id#20]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=3]

(30) BroadcastHashJoin [codegen id : 4]
Left keys [6]: [coalesce(i_brand_id#12, 0), isnull(i_brand_id#12), coalesce(i_class_id#13, 0), isnull(i_class_id#13), coalesce(i_category_id#14, 0), isnull(i_category_id#14)]
Right keys [6]: [coalesce(i_brand_id#18, 0), isnull(i_brand_id#18), coalesce(i_class_id#19, 0), isnull(i_class_id#19), coalesce(i_category_id#20, 0), isnull(i_category_id#20)]
Join type: LeftSemi
Join condition: None

(31) BroadcastExchange
Input [4]: [i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_item_sk#9]
Right keys [1]: [i_item_sk#11]
Join type: Inner
Join condition: None

(33) Project [codegen id : 6]
Output [4]: [ss_sold_date_sk#10, i_brand_id#12, i_class_id#13, i_category_id#14]
Input [6]: [ss_item_sk#9, ss_sold_date_sk#10, i_item_sk#11, i_brand_id#12, i_class_id#13, i_category_id#14]

(34) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#23]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#23]
Join type: Inner
Join condition: None

(36) Project [codegen id : 6]
Output [3]: [i_brand_id#12 AS brand_id#24, i_class_id#13 AS class_id#25, i_category_id#14 AS category_id#26]
Input [5]: [ss_sold_date_sk#10, i_brand_id#12, i_class_id#13, i_category_id#14, d_date_sk#23]

(37) HashAggregate [codegen id : 6]
Input [3]: [brand_id#24, class_id#25, category_id#26]
Keys [3]: [brand_id#24, class_id#25, category_id#26]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#24, class_id#25, category_id#26]

(38) Exchange
Input [3]: [brand_id#24, class_id#25, category_id#26]
Arguments: hashpartitioning(brand_id#24, class_id#25, category_id#26, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(39) HashAggregate [codegen id : 10]
Input [3]: [brand_id#24, class_id#25, category_id#26]
Keys [3]: [brand_id#24, class_id#25, category_id#26]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#24, class_id#25, category_id#26]

(40) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(41) ColumnarToRow [codegen id : 9]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]

(42) Filter [codegen id : 9]
Input [2]: [ws_item_sk#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#27)

(43) ReusedExchange [Reuses operator id: 19]
Output [4]: [i_item_sk#29, i_brand_id#30, i_class_id#31, i_category_id#32]

(44) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_item_sk#27]
Right keys [1]: [i_item_sk#29]
Join type: Inner
Join condition: None

(45) Project [codegen id : 9]
Output [4]: [ws_sold_date_sk#28, i_brand_id#30, i_class_id#31, i_category_id#32]
Input [6]: [ws_item_sk#27, ws_sold_date_sk#28, i_item_sk#29, i_brand_id#30, i_class_id#31, i_category_id#32]

(46) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#33]

(47) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ws_sold_date_sk#28]
Right keys [1]: [d_date_sk#33]
Join type: Inner
Join condition: None

(48) Project [codegen id : 9]
Output [3]: [i_brand_id#30, i_class_id#31, i_category_id#32]
Input [5]: [ws_sold_date_sk#28, i_brand_id#30, i_class_id#31, i_category_id#32, d_date_sk#33]

(49) BroadcastExchange
Input [3]: [i_brand_id#30, i_class_id#31, i_category_id#32]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=6]

(50) BroadcastHashJoin [codegen id : 10]
Left keys [6]: [coalesce(brand_id#24, 0), isnull(brand_id#24), coalesce(class_id#25, 0), isnull(class_id#25), coalesce(category_id#26, 0), isnull(category_id#26)]
Right keys [6]: [coalesce(i_brand_id#30, 0), isnull(i_brand_id#30), coalesce(i_class_id#31, 0), isnull(i_class_id#31), coalesce(i_category_id#32, 0), isnull(i_category_id#32)]
Join type: LeftSemi
Join condition: None

(51) BroadcastExchange
Input [3]: [brand_id#24, class_id#25, category_id#26]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=7]

(52) BroadcastHashJoin [codegen id : 11]
Left keys [3]: [i_brand_id#6, i_class_id#7, i_category_id#8]
Right keys [3]: [brand_id#24, class_id#25, category_id#26]
Join type: Inner
Join condition: None

(53) Project [codegen id : 11]
Output [1]: [i_item_sk#5 AS ss_item_sk#34]
Input [7]: [i_item_sk#5, i_brand_id#6, i_class_id#7, i_category_id#8, brand_id#24, class_id#25, category_id#26]

(54) BroadcastExchange
Input [1]: [ss_item_sk#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(55) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#34]
Join type: LeftSemi
Join condition: None

(56) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#35, i_brand_id#36, i_class_id#37, i_category_id#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(57) ColumnarToRow [codegen id : 23]
Input [4]: [i_item_sk#35, i_brand_id#36, i_class_id#37, i_category_id#38]

(58) Filter [codegen id : 23]
Input [4]: [i_item_sk#35, i_brand_id#36, i_class_id#37, i_category_id#38]
Condition : isnotnull(i_item_sk#35)

(59) ReusedExchange [Reuses operator id: 54]
Output [1]: [ss_item_sk#34]

(60) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [i_item_sk#35]
Right keys [1]: [ss_item_sk#34]
Join type: LeftSemi
Join condition: None

(61) BroadcastExchange
Input [4]: [i_item_sk#35, i_brand_id#36, i_class_id#37, i_category_id#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(62) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#35]
Join type: Inner
Join condition: None

(63) Project [codegen id : 25]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#36, i_class_id#37, i_category_id#38]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#35, i_brand_id#36, i_class_id#37, i_category_id#38]

(64) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#39, d_year#40, d_moy#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(65) ColumnarToRow [codegen id : 24]
Input [3]: [d_date_sk#39, d_year#40, d_moy#41]

(66) Filter [codegen id : 24]
Input [3]: [d_date_sk#39, d_year#40, d_moy#41]
Condition : ((((isnotnull(d_year#40) AND isnotnull(d_moy#41)) AND (d_year#40 = 2001)) AND (d_moy#41 = 11)) AND isnotnull(d_date_sk#39))

(67) Project [codegen id : 24]
Output [1]: [d_date_sk#39]
Input [3]: [d_date_sk#39, d_year#40, d_moy#41]

(68) BroadcastExchange
Input [1]: [d_date_sk#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

(69) BroadcastHashJoin [codegen id : 25]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#39]
Join type: Inner
Join condition: None

(70) Project [codegen id : 25]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#36, i_class_id#37, i_category_id#38]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#36, i_class_id#37, i_category_id#38, d_date_sk#39]

(71) HashAggregate [codegen id : 25]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#36, i_class_id#37, i_category_id#38]
Keys [3]: [i_brand_id#36, i_class_id#37, i_category_id#38]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#42, isEmpty#43, count#44]
Results [6]: [i_brand_id#36, i_class_id#37, i_category_id#38, sum#45, isEmpty#46, count#47]

(72) Exchange
Input [6]: [i_brand_id#36, i_class_id#37, i_category_id#38, sum#45, isEmpty#46, count#47]
Arguments: hashpartitioning(i_brand_id#36, i_class_id#37, i_category_id#38, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(73) HashAggregate [codegen id : 26]
Input [6]: [i_brand_id#36, i_class_id#37, i_category_id#38, sum#45, isEmpty#46, count#47]
Keys [3]: [i_brand_id#36, i_class_id#37, i_category_id#38]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#48, count(1)#49]
Results [5]: [i_brand_id#36, i_class_id#37, i_category_id#38, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#48 AS sales#50, count(1)#49 AS number_sales#51]

(74) Filter [codegen id : 26]
Input [5]: [i_brand_id#36, i_class_id#37, i_category_id#38, sales#50, number_sales#51]
Condition : (isnotnull(sales#50) AND (cast(sales#50 as decimal(32,6)) > cast(Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(75) Project [codegen id : 26]
Output [6]: [sales#50, number_sales#51, store AS channel#54, i_brand_id#36 AS i_brand_id#55, i_class_id#37 AS i_class_id#56, i_category_id#38 AS i_category_id#57]
Input [5]: [i_brand_id#36, i_class_id#37, i_category_id#38, sales#50, number_sales#51]

(76) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#58, cs_quantity#59, cs_list_price#60, cs_sold_date_sk#61]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#61)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(77) ColumnarToRow [codegen id : 51]
Input [4]: [cs_item_sk#58, cs_quantity#59, cs_list_price#60, cs_sold_date_sk#61]

(78) Filter [codegen id : 51]
Input [4]: [cs_item_sk#58, cs_quantity#59, cs_list_price#60, cs_sold_date_sk#61]
Condition : isnotnull(cs_item_sk#58)

(79) ReusedExchange [Reuses operator id: 54]
Output [1]: [ss_item_sk#34]

(80) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#58]
Right keys [1]: [ss_item_sk#34]
Join type: LeftSemi
Join condition: None

(81) ReusedExchange [Reuses operator id: 61]
Output [4]: [i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(82) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_item_sk#58]
Right keys [1]: [i_item_sk#62]
Join type: Inner
Join condition: None

(83) Project [codegen id : 51]
Output [6]: [cs_quantity#59, cs_list_price#60, cs_sold_date_sk#61, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [8]: [cs_item_sk#58, cs_quantity#59, cs_list_price#60, cs_sold_date_sk#61, i_item_sk#62, i_brand_id#63, i_class_id#64, i_category_id#65]

(84) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#66]

(85) BroadcastHashJoin [codegen id : 51]
Left keys [1]: [cs_sold_date_sk#61]
Right keys [1]: [d_date_sk#66]
Join type: Inner
Join condition: None

(86) Project [codegen id : 51]
Output [5]: [cs_quantity#59, cs_list_price#60, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [7]: [cs_quantity#59, cs_list_price#60, cs_sold_date_sk#61, i_brand_id#63, i_class_id#64, i_category_id#65, d_date_sk#66]

(87) HashAggregate [codegen id : 51]
Input [5]: [cs_quantity#59, cs_list_price#60, i_brand_id#63, i_class_id#64, i_category_id#65]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [partial_sum((cast(cs_quantity#59 as decimal(10,0)) * cs_list_price#60)), partial_count(1)]
Aggregate Attributes [3]: [sum#67, isEmpty#68, count#69]
Results [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]

(88) Exchange
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]
Arguments: hashpartitioning(i_brand_id#63, i_class_id#64, i_category_id#65, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(89) HashAggregate [codegen id : 52]
Input [6]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum#70, isEmpty#71, count#72]
Keys [3]: [i_brand_id#63, i_class_id#64, i_category_id#65]
Functions [2]: [sum((cast(cs_quantity#59 as decimal(10,0)) * cs_list_price#60)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#59 as decimal(10,0)) * cs_list_price#60))#73, count(1)#74]
Results [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sum((cast(cs_quantity#59 as decimal(10,0)) * cs_list_price#60))#73 AS sales#75, count(1)#74 AS number_sales#76]

(90) Filter [codegen id : 52]
Input [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sales#75, number_sales#76]
Condition : (isnotnull(sales#75) AND (cast(sales#75 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(91) Project [codegen id : 52]
Output [6]: [sales#75, number_sales#76, catalog AS channel#77, i_brand_id#63, i_class_id#64, i_category_id#65]
Input [5]: [i_brand_id#63, i_class_id#64, i_category_id#65, sales#75, number_sales#76]

(92) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#81)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(93) ColumnarToRow [codegen id : 77]
Input [4]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81]

(94) Filter [codegen id : 77]
Input [4]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81]
Condition : isnotnull(ws_item_sk#78)

(95) ReusedExchange [Reuses operator id: 54]
Output [1]: [ss_item_sk#34]

(96) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#78]
Right keys [1]: [ss_item_sk#34]
Join type: LeftSemi
Join condition: None

(97) ReusedExchange [Reuses operator id: 61]
Output [4]: [i_item_sk#82, i_brand_id#83, i_class_id#84, i_category_id#85]

(98) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_item_sk#78]
Right keys [1]: [i_item_sk#82]
Join type: Inner
Join condition: None

(99) Project [codegen id : 77]
Output [6]: [ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81, i_brand_id#83, i_class_id#84, i_category_id#85]
Input [8]: [ws_item_sk#78, ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81, i_item_sk#82, i_brand_id#83, i_class_id#84, i_category_id#85]

(100) ReusedExchange [Reuses operator id: 68]
Output [1]: [d_date_sk#86]

(101) BroadcastHashJoin [codegen id : 77]
Left keys [1]: [ws_sold_date_sk#81]
Right keys [1]: [d_date_sk#86]
Join type: Inner
Join condition: None

(102) Project [codegen id : 77]
Output [5]: [ws_quantity#79, ws_list_price#80, i_brand_id#83, i_class_id#84, i_category_id#85]
Input [7]: [ws_quantity#79, ws_list_price#80, ws_sold_date_sk#81, i_brand_id#83, i_class_id#84, i_category_id#85, d_date_sk#86]

(103) HashAggregate [codegen id : 77]
Input [5]: [ws_quantity#79, ws_list_price#80, i_brand_id#83, i_class_id#84, i_category_id#85]
Keys [3]: [i_brand_id#83, i_class_id#84, i_category_id#85]
Functions [2]: [partial_sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80)), partial_count(1)]
Aggregate Attributes [3]: [sum#87, isEmpty#88, count#89]
Results [6]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum#90, isEmpty#91, count#92]

(104) Exchange
Input [6]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum#90, isEmpty#91, count#92]
Arguments: hashpartitioning(i_brand_id#83, i_class_id#84, i_category_id#85, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(105) HashAggregate [codegen id : 78]
Input [6]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum#90, isEmpty#91, count#92]
Keys [3]: [i_brand_id#83, i_class_id#84, i_category_id#85]
Functions [2]: [sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80))#93, count(1)#94]
Results [5]: [i_brand_id#83, i_class_id#84, i_category_id#85, sum((cast(ws_quantity#79 as decimal(10,0)) * ws_list_price#80))#93 AS sales#95, count(1)#94 AS number_sales#96]

(106) Filter [codegen id : 78]
Input [5]: [i_brand_id#83, i_class_id#84, i_category_id#85, sales#95, number_sales#96]
Condition : (isnotnull(sales#95) AND (cast(sales#95 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#52, [id=#53] as decimal(32,6))))

(107) Project [codegen id : 78]
Output [6]: [sales#95, number_sales#96, web AS channel#97, i_brand_id#83, i_class_id#84, i_category_id#85]
Input [5]: [i_brand_id#83, i_class_id#84, i_category_id#85, sales#95, number_sales#96]

(108) Union

(109) Expand [codegen id : 79]
Input [6]: [sales#50, number_sales#51, channel#54, i_brand_id#55, i_class_id#56, i_category_id#57]
Arguments: [[sales#50, number_sales#51, channel#54, i_brand_id#55, i_class_id#56, i_category_id#57, 0], [sales#50, number_sales#51, channel#54, i_brand_id#55, i_class_id#56, null, 1], [sales#50, number_sales#51, channel#54, i_brand_id#55, null, null, 3], [sales#50, number_sales#51, channel#54, null, null, null, 7], [sales#50, number_sales#51, null, null, null, null, 15]], [sales#50, number_sales#51, channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102]

(110) HashAggregate [codegen id : 79]
Input [7]: [sales#50, number_sales#51, channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102]
Keys [5]: [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102]
Functions [2]: [partial_sum(sales#50), partial_sum(number_sales#51)]
Aggregate Attributes [3]: [sum#103, isEmpty#104, sum#105]
Results [8]: [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102, sum#106, isEmpty#107, sum#108]

(111) Exchange
Input [8]: [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102, sum#106, isEmpty#107, sum#108]
Arguments: hashpartitioning(channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(112) HashAggregate [codegen id : 80]
Input [8]: [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102, sum#106, isEmpty#107, sum#108]
Keys [5]: [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, spark_grouping_id#102]
Functions [2]: [sum(sales#50), sum(number_sales#51)]
Aggregate Attributes [2]: [sum(sales#50)#109, sum(number_sales#51)#110]
Results [6]: [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, sum(sales#50)#109 AS sum(sales)#111, sum(number_sales#51)#110 AS sum(number_sales)#112]

(113) TakeOrderedAndProject
Input [6]: [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, sum(sales)#111, sum(number_sales)#112]
Arguments: 100, [channel#98 ASC NULLS FIRST, i_brand_id#99 ASC NULLS FIRST, i_class_id#100 ASC NULLS FIRST, i_category_id#101 ASC NULLS FIRST], [channel#98, i_brand_id#99, i_class_id#100, i_category_id#101, sum(sales)#111, sum(number_sales)#112]

===== Subqueries =====

Subquery:1 Hosting operator id = 74 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
* HashAggregate (132)
+- Exchange (131)
   +- * HashAggregate (130)
      +- Union (129)
         :- * Project (118)
         :  +- * BroadcastHashJoin Inner BuildRight (117)
         :     :- * ColumnarToRow (115)
         :     :  +- Scan parquet spark_catalog.default.store_sales (114)
         :     +- ReusedExchange (116)
         :- * Project (123)
         :  +- * BroadcastHashJoin Inner BuildRight (122)
         :     :- * ColumnarToRow (120)
         :     :  +- Scan parquet spark_catalog.default.catalog_sales (119)
         :     +- ReusedExchange (121)
         +- * Project (128)
            +- * BroadcastHashJoin Inner BuildRight (127)
               :- * ColumnarToRow (125)
               :  +- Scan parquet spark_catalog.default.web_sales (124)
               +- ReusedExchange (126)


(114) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#113, ss_list_price#114, ss_sold_date_sk#115]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#115)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(115) ColumnarToRow [codegen id : 2]
Input [3]: [ss_quantity#113, ss_list_price#114, ss_sold_date_sk#115]

(116) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#116]

(117) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_sold_date_sk#115]
Right keys [1]: [d_date_sk#116]
Join type: Inner
Join condition: None

(118) Project [codegen id : 2]
Output [2]: [ss_quantity#113 AS quantity#117, ss_list_price#114 AS list_price#118]
Input [4]: [ss_quantity#113, ss_list_price#114, ss_sold_date_sk#115, d_date_sk#116]

(119) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#119, cs_list_price#120, cs_sold_date_sk#121]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#121)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(120) ColumnarToRow [codegen id : 4]
Input [3]: [cs_quantity#119, cs_list_price#120, cs_sold_date_sk#121]

(121) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#122]

(122) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#121]
Right keys [1]: [d_date_sk#122]
Join type: Inner
Join condition: None

(123) Project [codegen id : 4]
Output [2]: [cs_quantity#119 AS quantity#123, cs_list_price#120 AS list_price#124]
Input [4]: [cs_quantity#119, cs_list_price#120, cs_sold_date_sk#121, d_date_sk#122]

(124) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#125, ws_list_price#126, ws_sold_date_sk#127]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#127)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(125) ColumnarToRow [codegen id : 6]
Input [3]: [ws_quantity#125, ws_list_price#126, ws_sold_date_sk#127]

(126) ReusedExchange [Reuses operator id: 26]
Output [1]: [d_date_sk#128]

(127) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#127]
Right keys [1]: [d_date_sk#128]
Join type: Inner
Join condition: None

(128) Project [codegen id : 6]
Output [2]: [ws_quantity#125 AS quantity#129, ws_list_price#126 AS list_price#130]
Input [4]: [ws_quantity#125, ws_list_price#126, ws_sold_date_sk#127, d_date_sk#128]

(129) Union

(130) HashAggregate [codegen id : 7]
Input [2]: [quantity#117, list_price#118]
Keys: []
Functions [1]: [partial_avg((cast(quantity#117 as decimal(10,0)) * list_price#118))]
Aggregate Attributes [2]: [sum#131, count#132]
Results [2]: [sum#133, count#134]

(131) Exchange
Input [2]: [sum#133, count#134]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(132) HashAggregate [codegen id : 8]
Input [2]: [sum#133, count#134]
Keys: []
Functions [1]: [avg((cast(quantity#117 as decimal(10,0)) * list_price#118))]
Aggregate Attributes [1]: [avg((cast(quantity#117 as decimal(10,0)) * list_price#118))#135]
Results [1]: [avg((cast(quantity#117 as decimal(10,0)) * list_price#118))#135 AS average_sales#136]

Subquery:2 Hosting operator id = 90 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:3 Hosting operator id = 106 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]


