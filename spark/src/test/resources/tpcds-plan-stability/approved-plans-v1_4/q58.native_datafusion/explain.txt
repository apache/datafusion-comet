== Physical Plan ==
* CometColumnarToRow (63)
+- CometTakeOrderedAndProject (62)
   +- CometProject (61)
      +- CometBroadcastHashJoin (60)
         :- CometProject (46)
         :  +- CometBroadcastHashJoin (45)
         :     :- CometFilter (23)
         :     :  +- CometHashAggregate (22)
         :     :     +- CometExchange (21)
         :     :        +- CometHashAggregate (20)
         :     :           +- CometProject (19)
         :     :              +- CometBroadcastHashJoin (18)
         :     :                 :- CometProject (8)
         :     :                 :  +- CometBroadcastHashJoin (7)
         :     :                 :     :- CometFilter (2)
         :     :                 :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
         :     :                 :     +- CometBroadcastExchange (6)
         :     :                 :        +- CometProject (5)
         :     :                 :           +- CometFilter (4)
         :     :                 :              +- CometNativeScan parquet spark_catalog.default.item (3)
         :     :                 +- CometBroadcastExchange (17)
         :     :                    +- CometProject (16)
         :     :                       +- CometBroadcastHashJoin (15)
         :     :                          :- CometFilter (10)
         :     :                          :  +- CometNativeScan parquet spark_catalog.default.date_dim (9)
         :     :                          +- CometBroadcastExchange (14)
         :     :                             +- CometProject (13)
         :     :                                +- CometFilter (12)
         :     :                                   +- CometNativeScan parquet spark_catalog.default.date_dim (11)
         :     +- CometBroadcastExchange (44)
         :        +- CometFilter (43)
         :           +- CometHashAggregate (42)
         :              +- CometExchange (41)
         :                 +- CometHashAggregate (40)
         :                    +- CometProject (39)
         :                       +- CometBroadcastHashJoin (38)
         :                          :- CometProject (28)
         :                          :  +- CometBroadcastHashJoin (27)
         :                          :     :- CometFilter (25)
         :                          :     :  +- CometNativeScan parquet spark_catalog.default.catalog_sales (24)
         :                          :     +- ReusedExchange (26)
         :                          +- CometBroadcastExchange (37)
         :                             +- CometProject (36)
         :                                +- CometBroadcastHashJoin (35)
         :                                   :- CometFilter (30)
         :                                   :  +- CometNativeScan parquet spark_catalog.default.date_dim (29)
         :                                   +- CometBroadcastExchange (34)
         :                                      +- CometProject (33)
         :                                         +- CometFilter (32)
         :                                            +- CometNativeScan parquet spark_catalog.default.date_dim (31)
         +- CometBroadcastExchange (59)
            +- CometFilter (58)
               +- CometHashAggregate (57)
                  +- CometExchange (56)
                     +- CometHashAggregate (55)
                        +- CometProject (54)
                           +- CometBroadcastHashJoin (53)
                              :- CometProject (51)
                              :  +- CometBroadcastHashJoin (50)
                              :     :- CometFilter (48)
                              :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (47)
                              :     +- ReusedExchange (49)
                              +- ReusedExchange (52)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#5, 16, true, false, true)))

(5) CometProject
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: [i_item_sk#4, i_item_id#6], [i_item_sk#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#5, 16, true, false, true) AS i_item_id#6]

(6) CometBroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#6]
Arguments: [i_item_sk#4, i_item_id#6]

(7) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#4, i_item_id#6]
Arguments: [ss_item_sk#1], [i_item_sk#4], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#4, i_item_id#6]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(10) CometFilter
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(11) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(12) CometFilter
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND (d_week_seq#9 = Subquery scalar-subquery#10, [id=#11]))

(13) CometProject
Input [2]: [d_date#8, d_week_seq#9]
Arguments: [d_date#8#12], [d_date#8 AS d_date#8#12]

(14) CometBroadcastExchange
Input [1]: [d_date#8#12]
Arguments: [d_date#8#12]

(15) CometBroadcastHashJoin
Left output [2]: [d_date_sk#7, d_date#8]
Right output [1]: [d_date#8#12]
Arguments: [d_date#8], [d_date#8#12], LeftSemi, BuildRight

(16) CometProject
Input [2]: [d_date_sk#7, d_date#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(18) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#7], Inner, BuildRight

(19) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6, d_date_sk#7]
Arguments: [ss_ext_sales_price#2, i_item_id#6], [ss_ext_sales_price#2, i_item_id#6]

(20) CometHashAggregate
Input [2]: [ss_ext_sales_price#2, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(21) CometExchange
Input [2]: [i_item_id#6, sum#13]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(22) CometHashAggregate
Input [2]: [i_item_id#6, sum#13]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]

(23) CometFilter
Input [2]: [item_id#14, ss_item_rev#15]
Condition : isnotnull(ss_item_rev#15)

(24) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#18)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(25) CometFilter
Input [3]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#16)

(26) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#19, i_item_id#20]

(27) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Right output [2]: [i_item_sk#19, i_item_id#20]
Arguments: [cs_item_sk#16], [i_item_sk#19], Inner, BuildRight

(28) CometProject
Input [5]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_sk#19, i_item_id#20]
Arguments: [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20], [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20]

(29) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#21, d_date#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(30) CometFilter
Input [2]: [d_date_sk#21, d_date#22]
Condition : isnotnull(d_date_sk#21)

(31) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(32) CometFilter
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_week_seq#9) AND (d_week_seq#9 = ReusedSubquery Subquery scalar-subquery#10, [id=#11]))

(33) CometProject
Input [2]: [d_date#8, d_week_seq#9]
Arguments: [d_date#8], [d_date#8]

(34) CometBroadcastExchange
Input [1]: [d_date#8]
Arguments: [d_date#8]

(35) CometBroadcastHashJoin
Left output [2]: [d_date_sk#21, d_date#22]
Right output [1]: [d_date#8]
Arguments: [d_date#22], [d_date#8], LeftSemi, BuildRight

(36) CometProject
Input [2]: [d_date_sk#21, d_date#22]
Arguments: [d_date_sk#21], [d_date_sk#21]

(37) CometBroadcastExchange
Input [1]: [d_date_sk#21]
Arguments: [d_date_sk#21]

(38) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20]
Right output [1]: [d_date_sk#21]
Arguments: [cs_sold_date_sk#18], [d_date_sk#21], Inner, BuildRight

(39) CometProject
Input [4]: [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20, d_date_sk#21]
Arguments: [cs_ext_sales_price#17, i_item_id#20], [cs_ext_sales_price#17, i_item_id#20]

(40) CometHashAggregate
Input [2]: [cs_ext_sales_price#17, i_item_id#20]
Keys [1]: [i_item_id#20]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#17))]

(41) CometExchange
Input [2]: [i_item_id#20, sum#23]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(42) CometHashAggregate
Input [2]: [i_item_id#20, sum#23]
Keys [1]: [i_item_id#20]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#17))]

(43) CometFilter
Input [2]: [item_id#24, cs_item_rev#25]
Condition : isnotnull(cs_item_rev#25)

(44) CometBroadcastExchange
Input [2]: [item_id#24, cs_item_rev#25]
Arguments: [item_id#24, cs_item_rev#25]

(45) CometBroadcastHashJoin
Left output [2]: [item_id#14, ss_item_rev#15]
Right output [2]: [item_id#24, cs_item_rev#25]
Arguments: [item_id#14], [item_id#24], Inner, ((((cast(ss_item_rev#15 as decimal(19,3)) >= (0.9 * cs_item_rev#25)) AND (cast(ss_item_rev#15 as decimal(20,3)) <= (1.1 * cs_item_rev#25))) AND (cast(cs_item_rev#25 as decimal(19,3)) >= (0.9 * ss_item_rev#15))) AND (cast(cs_item_rev#25 as decimal(20,3)) <= (1.1 * ss_item_rev#15))), BuildRight

(46) CometProject
Input [4]: [item_id#14, ss_item_rev#15, item_id#24, cs_item_rev#25]
Arguments: [item_id#14, ss_item_rev#15, cs_item_rev#25], [item_id#14, ss_item_rev#15, cs_item_rev#25]

(47) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#28)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(48) CometFilter
Input [3]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#26)

(49) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#29, i_item_id#30]

(50) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28]
Right output [2]: [i_item_sk#29, i_item_id#30]
Arguments: [ws_item_sk#26], [i_item_sk#29], Inner, BuildRight

(51) CometProject
Input [5]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_sk#29, i_item_id#30]
Arguments: [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#30], [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#30]

(52) ReusedExchange [Reuses operator id: 37]
Output [1]: [d_date_sk#31]

(53) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#30]
Right output [1]: [d_date_sk#31]
Arguments: [ws_sold_date_sk#28], [d_date_sk#31], Inner, BuildRight

(54) CometProject
Input [4]: [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#30, d_date_sk#31]
Arguments: [ws_ext_sales_price#27, i_item_id#30], [ws_ext_sales_price#27, i_item_id#30]

(55) CometHashAggregate
Input [2]: [ws_ext_sales_price#27, i_item_id#30]
Keys [1]: [i_item_id#30]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#27))]

(56) CometExchange
Input [2]: [i_item_id#30, sum#32]
Arguments: hashpartitioning(i_item_id#30, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(57) CometHashAggregate
Input [2]: [i_item_id#30, sum#32]
Keys [1]: [i_item_id#30]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#27))]

(58) CometFilter
Input [2]: [item_id#33, ws_item_rev#34]
Condition : isnotnull(ws_item_rev#34)

(59) CometBroadcastExchange
Input [2]: [item_id#33, ws_item_rev#34]
Arguments: [item_id#33, ws_item_rev#34]

(60) CometBroadcastHashJoin
Left output [3]: [item_id#14, ss_item_rev#15, cs_item_rev#25]
Right output [2]: [item_id#33, ws_item_rev#34]
Arguments: [item_id#14], [item_id#33], Inner, ((((((((cast(ss_item_rev#15 as decimal(19,3)) >= (0.9 * ws_item_rev#34)) AND (cast(ss_item_rev#15 as decimal(20,3)) <= (1.1 * ws_item_rev#34))) AND (cast(cs_item_rev#25 as decimal(19,3)) >= (0.9 * ws_item_rev#34))) AND (cast(cs_item_rev#25 as decimal(20,3)) <= (1.1 * ws_item_rev#34))) AND (cast(ws_item_rev#34 as decimal(19,3)) >= (0.9 * ss_item_rev#15))) AND (cast(ws_item_rev#34 as decimal(20,3)) <= (1.1 * ss_item_rev#15))) AND (cast(ws_item_rev#34 as decimal(19,3)) >= (0.9 * cs_item_rev#25))) AND (cast(ws_item_rev#34 as decimal(20,3)) <= (1.1 * cs_item_rev#25))), BuildRight

(61) CometProject
Input [5]: [item_id#14, ss_item_rev#15, cs_item_rev#25, item_id#33, ws_item_rev#34]
Arguments: [item_id#14, ss_item_rev#15, ss_dev#35, cs_item_rev#25, cs_dev#36, ws_item_rev#34, ws_dev#37, average#38], [item_id#14, ss_item_rev#15, (((ss_item_rev#15 / ((ss_item_rev#15 + cs_item_rev#25) + ws_item_rev#34)) / 3) * 100) AS ss_dev#35, cs_item_rev#25, (((cs_item_rev#25 / ((ss_item_rev#15 + cs_item_rev#25) + ws_item_rev#34)) / 3) * 100) AS cs_dev#36, ws_item_rev#34, (((ws_item_rev#34 / ((ss_item_rev#15 + cs_item_rev#25) + ws_item_rev#34)) / 3) * 100) AS ws_dev#37, (((ss_item_rev#15 + cs_item_rev#25) + ws_item_rev#34) / 3) AS average#38]

(62) CometTakeOrderedAndProject
Input [8]: [item_id#14, ss_item_rev#15, ss_dev#35, cs_item_rev#25, cs_dev#36, ws_item_rev#34, ws_dev#37, average#38]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[item_id#14 ASC NULLS FIRST,ss_item_rev#15 ASC NULLS FIRST], output=[item_id#14,ss_item_rev#15,ss_dev#35,cs_item_rev#25,cs_dev#36,ws_item_rev#34,ws_dev#37,average#38]), [item_id#14, ss_item_rev#15, ss_dev#35, cs_item_rev#25, cs_dev#36, ws_item_rev#34, ws_dev#37, average#38], 100, 0, [item_id#14 ASC NULLS FIRST, ss_item_rev#15 ASC NULLS FIRST], [item_id#14, ss_item_rev#15, ss_dev#35, cs_item_rev#25, cs_dev#36, ws_item_rev#34, ws_dev#37, average#38]

(63) CometColumnarToRow [codegen id : 1]
Input [8]: [item_id#14, ss_item_rev#15, ss_dev#35, cs_item_rev#25, cs_dev#36, ws_item_rev#34, ws_dev#37, average#38]

===== Subqueries =====

Subquery:1 Hosting operator id = 12 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
* CometColumnarToRow (67)
+- CometProject (66)
   +- CometFilter (65)
      +- CometNativeScan parquet spark_catalog.default.date_dim (64)


(64) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#8, d_week_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(65) CometFilter
Input [2]: [d_date#8, d_week_seq#9]
Condition : (isnotnull(d_date#8) AND (d_date#8 = 2000-01-03))

(66) CometProject
Input [2]: [d_date#8, d_week_seq#9]
Arguments: [d_week_seq#9], [d_week_seq#9]

(67) CometColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#9]

Subquery:2 Hosting operator id = 32 Hosting Expression = ReusedSubquery Subquery scalar-subquery#10, [id=#11]


