== Physical Plan ==
TakeOrderedAndProject (42)
+- * Filter (41)
   +- * HashAggregate (40)
      +- * CometColumnarToRow (39)
         +- CometColumnarExchange (38)
            +- * HashAggregate (37)
               +- * Project (36)
                  +- * BroadcastHashJoin Inner BuildRight (35)
                     :- * CometColumnarToRow (19)
                     :  +- CometProject (18)
                     :     +- CometBroadcastHashJoin (17)
                     :        :- CometProject (12)
                     :        :  +- CometBroadcastHashJoin (11)
                     :        :     :- CometProject (7)
                     :        :     :  +- CometBroadcastHashJoin (6)
                     :        :     :     :- CometFilter (2)
                     :        :     :     :  +- CometScan parquet spark_catalog.default.customer_address (1)
                     :        :     :     +- CometBroadcastExchange (5)
                     :        :     :        +- CometFilter (4)
                     :        :     :           +- CometScan parquet spark_catalog.default.customer (3)
                     :        :     +- CometBroadcastExchange (10)
                     :        :        +- CometFilter (9)
                     :        :           +- CometScan parquet spark_catalog.default.store_sales (8)
                     :        +- CometBroadcastExchange (16)
                     :           +- CometProject (15)
                     :              +- CometFilter (14)
                     :                 +- CometScan parquet spark_catalog.default.date_dim (13)
                     +- BroadcastExchange (34)
                        +- * Project (33)
                           +- * BroadcastHashJoin Inner BuildRight (32)
                              :- * CometColumnarToRow (22)
                              :  +- CometFilter (21)
                              :     +- CometScan parquet spark_catalog.default.item (20)
                              +- BroadcastExchange (31)
                                 +- * Filter (30)
                                    +- * HashAggregate (29)
                                       +- * CometColumnarToRow (28)
                                          +- CometColumnarExchange (27)
                                             +- * HashAggregate (26)
                                                +- * CometColumnarToRow (25)
                                                   +- CometFilter (24)
                                                      +- CometScan parquet spark_catalog.default.item (23)


(1) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) CometFilter
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : isnotnull(ca_address_sk#1)

(3) CometScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#3, c_current_addr_sk#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(4) CometFilter
Input [2]: [c_customer_sk#3, c_current_addr_sk#4]
Condition : (isnotnull(c_current_addr_sk#4) AND isnotnull(c_customer_sk#3))

(5) CometBroadcastExchange
Input [2]: [c_customer_sk#3, c_current_addr_sk#4]
Arguments: [c_customer_sk#3, c_current_addr_sk#4]

(6) CometBroadcastHashJoin
Left output [2]: [ca_address_sk#1, ca_state#2]
Right output [2]: [c_customer_sk#3, c_current_addr_sk#4]
Arguments: [ca_address_sk#1], [c_current_addr_sk#4], Inner, BuildRight

(7) CometProject
Input [4]: [ca_address_sk#1, ca_state#2, c_customer_sk#3, c_current_addr_sk#4]
Arguments: [ca_state#2, c_customer_sk#3], [ca_state#2, c_customer_sk#3]

(8) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#5, ss_customer_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>

(9) CometFilter
Input [3]: [ss_item_sk#5, ss_customer_sk#6, ss_sold_date_sk#7]
Condition : (isnotnull(ss_customer_sk#6) AND isnotnull(ss_item_sk#5))

(10) CometBroadcastExchange
Input [3]: [ss_item_sk#5, ss_customer_sk#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#5, ss_customer_sk#6, ss_sold_date_sk#7]

(11) CometBroadcastHashJoin
Left output [2]: [ca_state#2, c_customer_sk#3]
Right output [3]: [ss_item_sk#5, ss_customer_sk#6, ss_sold_date_sk#7]
Arguments: [c_customer_sk#3], [ss_customer_sk#6], Inner, BuildRight

(12) CometProject
Input [5]: [ca_state#2, c_customer_sk#3, ss_item_sk#5, ss_customer_sk#6, ss_sold_date_sk#7]
Arguments: [ca_state#2, ss_item_sk#5, ss_sold_date_sk#7], [ca_state#2, ss_item_sk#5, ss_sold_date_sk#7]

(13) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_month_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), EqualTo(d_month_seq,ScalarSubquery#11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(14) CometFilter
Input [2]: [d_date_sk#9, d_month_seq#10]
Condition : ((isnotnull(d_month_seq#10) AND (d_month_seq#10 = ReusedSubquery Subquery scalar-subquery#11, [id=#12])) AND isnotnull(d_date_sk#9))

(15) CometProject
Input [2]: [d_date_sk#9, d_month_seq#10]
Arguments: [d_date_sk#9], [d_date_sk#9]

(16) CometBroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: [d_date_sk#9]

(17) CometBroadcastHashJoin
Left output [3]: [ca_state#2, ss_item_sk#5, ss_sold_date_sk#7]
Right output [1]: [d_date_sk#9]
Arguments: [ss_sold_date_sk#7], [d_date_sk#9], Inner, BuildRight

(18) CometProject
Input [4]: [ca_state#2, ss_item_sk#5, ss_sold_date_sk#7, d_date_sk#9]
Arguments: [ca_state#2, ss_item_sk#5], [ca_state#2, ss_item_sk#5]

(19) CometColumnarToRow [codegen id : 4]
Input [2]: [ca_state#2, ss_item_sk#5]

(20) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#13, i_current_price#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_category), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(21) CometFilter
Input [3]: [i_item_sk#13, i_current_price#14, i_category#15]
Condition : ((isnotnull(i_current_price#14) AND isnotnull(i_category#15)) AND isnotnull(i_item_sk#13))

(22) CometColumnarToRow [codegen id : 3]
Input [3]: [i_item_sk#13, i_current_price#14, i_category#15]

(23) CometScan parquet spark_catalog.default.item
Output [2]: [i_current_price#16, i_category#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category)]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(24) CometFilter
Input [2]: [i_current_price#16, i_category#17]
Condition : isnotnull(i_category#17)

(25) CometColumnarToRow [codegen id : 1]
Input [2]: [i_current_price#16, i_category#17]

(26) HashAggregate [codegen id : 1]
Input [2]: [i_current_price#16, i_category#17]
Keys [1]: [i_category#17]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#16))]
Aggregate Attributes [2]: [sum#18, count#19]
Results [3]: [i_category#17, sum#20, count#21]

(27) CometColumnarExchange
Input [3]: [i_category#17, sum#20, count#21]
Arguments: hashpartitioning(i_category#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(28) CometColumnarToRow [codegen id : 2]
Input [3]: [i_category#17, sum#20, count#21]

(29) HashAggregate [codegen id : 2]
Input [3]: [i_category#17, sum#20, count#21]
Keys [1]: [i_category#17]
Functions [1]: [avg(UnscaledValue(i_current_price#16))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#16))#22]
Results [2]: [cast((avg(UnscaledValue(i_current_price#16))#22 / 100.0) as decimal(11,6)) AS avg(i_current_price)#23, i_category#17]

(30) Filter [codegen id : 2]
Input [2]: [avg(i_current_price)#23, i_category#17]
Condition : isnotnull(avg(i_current_price)#23)

(31) BroadcastExchange
Input [2]: [avg(i_current_price)#23, i_category#17]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=2]

(32) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [i_category#15]
Right keys [1]: [i_category#17]
Join type: Inner
Join condition: (cast(i_current_price#14 as decimal(14,7)) > (1.2 * avg(i_current_price)#23))

(33) Project [codegen id : 3]
Output [1]: [i_item_sk#13]
Input [5]: [i_item_sk#13, i_current_price#14, i_category#15, avg(i_current_price)#23, i_category#17]

(34) BroadcastExchange
Input [1]: [i_item_sk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#5]
Right keys [1]: [i_item_sk#13]
Join type: Inner
Join condition: None

(36) Project [codegen id : 4]
Output [1]: [ca_state#2]
Input [3]: [ca_state#2, ss_item_sk#5, i_item_sk#13]

(37) HashAggregate [codegen id : 4]
Input [1]: [ca_state#2]
Keys [1]: [ca_state#2]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#24]
Results [2]: [ca_state#2, count#25]

(38) CometColumnarExchange
Input [2]: [ca_state#2, count#25]
Arguments: hashpartitioning(ca_state#2, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(39) CometColumnarToRow [codegen id : 5]
Input [2]: [ca_state#2, count#25]

(40) HashAggregate [codegen id : 5]
Input [2]: [ca_state#2, count#25]
Keys [1]: [ca_state#2]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#26]
Results [2]: [ca_state#2 AS state#27, count(1)#26 AS cnt#28]

(41) Filter [codegen id : 5]
Input [2]: [state#27, cnt#28]
Condition : (cnt#28 >= 10)

(42) TakeOrderedAndProject
Input [2]: [state#27, cnt#28]
Arguments: 100, [cnt#28 ASC NULLS FIRST, state#27 ASC NULLS FIRST], [state#27, cnt#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 8 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (47)
+- * CometColumnarToRow (46)
   +- CometProject (45)
      +- CometFilter (44)
         +- CometScan parquet spark_catalog.default.date_dim (43)


(43) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_month_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), EqualTo(d_month_seq,ScalarSubquery#11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(44) CometFilter
Input [2]: [d_date_sk#9, d_month_seq#10]
Condition : ((isnotnull(d_month_seq#10) AND (d_month_seq#10 = ReusedSubquery Subquery scalar-subquery#11, [id=#12])) AND isnotnull(d_date_sk#9))

(45) CometProject
Input [2]: [d_date_sk#9, d_month_seq#10]
Arguments: [d_date_sk#9], [d_date_sk#9]

(46) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#9]

(47) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

Subquery:2 Hosting operator id = 44 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:3 Hosting operator id = 43 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
* CometColumnarToRow (54)
+- CometHashAggregate (53)
   +- CometExchange (52)
      +- CometHashAggregate (51)
         +- CometProject (50)
            +- CometFilter (49)
               +- CometScan parquet spark_catalog.default.date_dim (48)


(48) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#29, d_year#30, d_moy#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(49) CometFilter
Input [3]: [d_month_seq#29, d_year#30, d_moy#31]
Condition : (((isnotnull(d_year#30) AND isnotnull(d_moy#31)) AND (d_year#30 = 2000)) AND (d_moy#31 = 1))

(50) CometProject
Input [3]: [d_month_seq#29, d_year#30, d_moy#31]
Arguments: [d_month_seq#29], [d_month_seq#29]

(51) CometHashAggregate
Input [1]: [d_month_seq#29]
Keys [1]: [d_month_seq#29]
Functions: []

(52) CometExchange
Input [1]: [d_month_seq#29]
Arguments: hashpartitioning(d_month_seq#29, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(53) CometHashAggregate
Input [1]: [d_month_seq#29]
Keys [1]: [d_month_seq#29]
Functions: []

(54) CometColumnarToRow [codegen id : 1]
Input [1]: [d_month_seq#29]

Subquery:4 Hosting operator id = 14 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:5 Hosting operator id = 13 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]


