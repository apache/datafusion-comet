== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- Window (47)
      +- * CometColumnarToRow (46)
         +- CometSort (45)
            +- CometExchange (44)
               +- CometHashAggregate (43)
                  +- CometColumnarExchange (42)
                     +- * HashAggregate (41)
                        +- Union (40)
                           :- * HashAggregate (25)
                           :  +- * CometColumnarToRow (24)
                           :     +- CometColumnarExchange (23)
                           :        +- * HashAggregate (22)
                           :           +- * CometColumnarToRow (21)
                           :              +- CometProject (20)
                           :                 +- CometBroadcastHashJoin (19)
                           :                    :- CometProject (14)
                           :                    :  +- CometBroadcastHashJoin (13)
                           :                    :     :- CometProject (8)
                           :                    :     :  +- CometBroadcastHashJoin (7)
                           :                    :     :     :- CometFilter (2)
                           :                    :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                           :                    :     :     +- CometBroadcastExchange (6)
                           :                    :     :        +- CometProject (5)
                           :                    :     :           +- CometFilter (4)
                           :                    :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
                           :                    :     +- CometBroadcastExchange (12)
                           :                    :        +- CometProject (11)
                           :                    :           +- CometFilter (10)
                           :                    :              +- CometScan parquet spark_catalog.default.item (9)
                           :                    +- CometBroadcastExchange (18)
                           :                       +- CometProject (17)
                           :                          +- CometFilter (16)
                           :                             +- CometScan parquet spark_catalog.default.store (15)
                           :- * HashAggregate (32)
                           :  +- * CometColumnarToRow (31)
                           :     +- CometColumnarExchange (30)
                           :        +- * HashAggregate (29)
                           :           +- * HashAggregate (28)
                           :              +- * CometColumnarToRow (27)
                           :                 +- ReusedExchange (26)
                           +- * HashAggregate (39)
                              +- * CometColumnarToRow (38)
                                 +- CometColumnarExchange (37)
                                    +- * HashAggregate (36)
                                       +- * HashAggregate (35)
                                          +- * CometColumnarToRow (34)
                                             +- ReusedExchange (33)


(1) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(5) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#5], [d_date_sk#7], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Condition : isnotnull(i_item_sk#9)

(11) CometProject
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Arguments: [i_item_sk#9, i_class#12, i_category#13], [i_item_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#10, 50, true, false, true) AS i_class#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#11, 50, true, false, true) AS i_category#13]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: [i_item_sk#9, i_class#12, i_category#13]

(13) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: [ss_item_sk#1], [i_item_sk#9], Inner, BuildRight

(14) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#9, i_class#12, i_category#13]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]

(15) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#15, 2, true, false, true) = TN) AND isnotnull(s_store_sk#14))

(17) CometProject
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14], [s_store_sk#14]

(18) CometBroadcastExchange
Input [1]: [s_store_sk#14]
Arguments: [s_store_sk#14]

(19) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]
Right output [1]: [s_store_sk#14]
Arguments: [ss_store_sk#2], [s_store_sk#14], Inner, BuildRight

(20) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13, s_store_sk#14]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13], [ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]

(21) CometColumnarToRow [codegen id : 1]
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]

(22) HashAggregate [codegen id : 1]
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#16, sum#17]
Results [4]: [i_category#13, i_class#12, sum#18, sum#19]

(23) CometColumnarExchange
Input [4]: [i_category#13, i_class#12, sum#18, sum#19]
Arguments: hashpartitioning(i_category#13, i_class#12, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(24) CometColumnarToRow [codegen id : 2]
Input [4]: [i_category#13, i_class#12, sum#18, sum#19]

(25) HashAggregate [codegen id : 2]
Input [4]: [i_category#13, i_class#12, sum#18, sum#19]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#20, sum(UnscaledValue(ss_ext_sales_price#3))#21]
Results [6]: [cast((MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#20,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#21,17,2)) as decimal(38,11)) AS gross_margin#22, i_category#13 AS i_category#23, i_class#12 AS i_class#24, 0 AS t_category#25, 0 AS t_class#26, 0 AS lochierarchy#27]

(26) ReusedExchange [Reuses operator id: 23]
Output [4]: [i_category#28, i_class#29, sum#30, sum#31]

(27) CometColumnarToRow [codegen id : 4]
Input [4]: [i_category#28, i_class#29, sum#30, sum#31]

(28) HashAggregate [codegen id : 4]
Input [4]: [i_category#28, i_class#29, sum#30, sum#31]
Keys [2]: [i_category#28, i_class#29]
Functions [2]: [sum(UnscaledValue(ss_net_profit#32)), sum(UnscaledValue(ss_ext_sales_price#33))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#32))#34, sum(UnscaledValue(ss_ext_sales_price#33))#35]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#32))#34,17,2) AS ss_net_profit#36, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#33))#35,17,2) AS ss_ext_sales_price#37, i_category#28]

(29) HashAggregate [codegen id : 4]
Input [3]: [ss_net_profit#36, ss_ext_sales_price#37, i_category#28]
Keys [1]: [i_category#28]
Functions [2]: [partial_sum(ss_net_profit#36), partial_sum(ss_ext_sales_price#37)]
Aggregate Attributes [4]: [sum#38, isEmpty#39, sum#40, isEmpty#41]
Results [5]: [i_category#28, sum#42, isEmpty#43, sum#44, isEmpty#45]

(30) CometColumnarExchange
Input [5]: [i_category#28, sum#42, isEmpty#43, sum#44, isEmpty#45]
Arguments: hashpartitioning(i_category#28, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(31) CometColumnarToRow [codegen id : 5]
Input [5]: [i_category#28, sum#42, isEmpty#43, sum#44, isEmpty#45]

(32) HashAggregate [codegen id : 5]
Input [5]: [i_category#28, sum#42, isEmpty#43, sum#44, isEmpty#45]
Keys [1]: [i_category#28]
Functions [2]: [sum(ss_net_profit#36), sum(ss_ext_sales_price#37)]
Aggregate Attributes [2]: [sum(ss_net_profit#36)#46, sum(ss_ext_sales_price#37)#47]
Results [6]: [(sum(ss_net_profit#36)#46 / sum(ss_ext_sales_price#37)#47) AS gross_margin#48, i_category#28, null AS i_class#49, 0 AS t_category#50, 1 AS t_class#51, 1 AS lochierarchy#52]

(33) ReusedExchange [Reuses operator id: 23]
Output [4]: [i_category#53, i_class#54, sum#55, sum#56]

(34) CometColumnarToRow [codegen id : 7]
Input [4]: [i_category#53, i_class#54, sum#55, sum#56]

(35) HashAggregate [codegen id : 7]
Input [4]: [i_category#53, i_class#54, sum#55, sum#56]
Keys [2]: [i_category#53, i_class#54]
Functions [2]: [sum(UnscaledValue(ss_net_profit#57)), sum(UnscaledValue(ss_ext_sales_price#58))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#57))#34, sum(UnscaledValue(ss_ext_sales_price#58))#35]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#57))#34,17,2) AS ss_net_profit#59, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#58))#35,17,2) AS ss_ext_sales_price#60]

(36) HashAggregate [codegen id : 7]
Input [2]: [ss_net_profit#59, ss_ext_sales_price#60]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#59), partial_sum(ss_ext_sales_price#60)]
Aggregate Attributes [4]: [sum#61, isEmpty#62, sum#63, isEmpty#64]
Results [4]: [sum#65, isEmpty#66, sum#67, isEmpty#68]

(37) CometColumnarExchange
Input [4]: [sum#65, isEmpty#66, sum#67, isEmpty#68]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(38) CometColumnarToRow [codegen id : 8]
Input [4]: [sum#65, isEmpty#66, sum#67, isEmpty#68]

(39) HashAggregate [codegen id : 8]
Input [4]: [sum#65, isEmpty#66, sum#67, isEmpty#68]
Keys: []
Functions [2]: [sum(ss_net_profit#59), sum(ss_ext_sales_price#60)]
Aggregate Attributes [2]: [sum(ss_net_profit#59)#69, sum(ss_ext_sales_price#60)#70]
Results [6]: [(sum(ss_net_profit#59)#69 / sum(ss_ext_sales_price#60)#70) AS gross_margin#71, null AS i_category#72, null AS i_class#73, 1 AS t_category#74, 1 AS t_class#75, 2 AS lochierarchy#76]

(40) Union

(41) HashAggregate [codegen id : 9]
Input [6]: [gross_margin#22, i_category#23, i_class#24, t_category#25, t_class#26, lochierarchy#27]
Keys [6]: [gross_margin#22, i_category#23, i_class#24, t_category#25, t_class#26, lochierarchy#27]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#22, i_category#23, i_class#24, t_category#25, t_class#26, lochierarchy#27]

(42) CometColumnarExchange
Input [6]: [gross_margin#22, i_category#23, i_class#24, t_category#25, t_class#26, lochierarchy#27]
Arguments: hashpartitioning(gross_margin#22, i_category#23, i_class#24, t_category#25, t_class#26, lochierarchy#27, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(43) CometHashAggregate
Input [6]: [gross_margin#22, i_category#23, i_class#24, t_category#25, t_class#26, lochierarchy#27]
Keys [6]: [gross_margin#22, i_category#23, i_class#24, t_category#25, t_class#26, lochierarchy#27]
Functions: []

(44) CometExchange
Input [5]: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, _w0#77]
Arguments: hashpartitioning(lochierarchy#27, _w0#77, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(45) CometSort
Input [5]: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, _w0#77]
Arguments: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, _w0#77], [lochierarchy#27 ASC NULLS FIRST, _w0#77 ASC NULLS FIRST, gross_margin#22 ASC NULLS FIRST]

(46) CometColumnarToRow [codegen id : 10]
Input [5]: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, _w0#77]

(47) Window
Input [5]: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, _w0#77]
Arguments: [rank(gross_margin#22) windowspecdefinition(lochierarchy#27, _w0#77, gross_margin#22 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#78], [lochierarchy#27, _w0#77], [gross_margin#22 ASC NULLS FIRST]

(48) Project [codegen id : 11]
Output [5]: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, rank_within_parent#78]
Input [6]: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, _w0#77, rank_within_parent#78]

(49) TakeOrderedAndProject
Input [5]: [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, rank_within_parent#78]
Arguments: 100, [lochierarchy#27 DESC NULLS LAST, CASE WHEN (lochierarchy#27 = 0) THEN i_category#23 END ASC NULLS FIRST, rank_within_parent#78 ASC NULLS FIRST], [gross_margin#22, i_category#23, i_class#24, lochierarchy#27, rank_within_parent#78]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (54)
+- * CometColumnarToRow (53)
   +- CometProject (52)
      +- CometFilter (51)
         +- CometScan parquet spark_catalog.default.date_dim (50)


(50) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(51) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(52) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(53) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(54) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


