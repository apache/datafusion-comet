== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- Window (46)
      +- * CometColumnarToRow (45)
         +- CometSort (44)
            +- CometExchange (43)
               +- CometHashAggregate (42)
                  +- CometColumnarExchange (41)
                     +- * HashAggregate (40)
                        +- Union (39)
                           :- * HashAggregate (24)
                           :  +- * CometColumnarToRow (23)
                           :     +- CometExchange (22)
                           :        +- CometHashAggregate (21)
                           :           +- CometProject (20)
                           :              +- CometBroadcastHashJoin (19)
                           :                 :- CometProject (14)
                           :                 :  +- CometBroadcastHashJoin (13)
                           :                 :     :- CometProject (8)
                           :                 :     :  +- CometBroadcastHashJoin (7)
                           :                 :     :     :- CometFilter (2)
                           :                 :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
                           :                 :     :     +- CometBroadcastExchange (6)
                           :                 :     :        +- CometProject (5)
                           :                 :     :           +- CometFilter (4)
                           :                 :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
                           :                 :     +- CometBroadcastExchange (12)
                           :                 :        +- CometProject (11)
                           :                 :           +- CometFilter (10)
                           :                 :              +- CometNativeScan parquet spark_catalog.default.item (9)
                           :                 +- CometBroadcastExchange (18)
                           :                    +- CometProject (17)
                           :                       +- CometFilter (16)
                           :                          +- CometNativeScan parquet spark_catalog.default.store (15)
                           :- * HashAggregate (31)
                           :  +- * CometColumnarToRow (30)
                           :     +- CometColumnarExchange (29)
                           :        +- * HashAggregate (28)
                           :           +- * HashAggregate (27)
                           :              +- * CometColumnarToRow (26)
                           :                 +- ReusedExchange (25)
                           +- * HashAggregate (38)
                              +- * CometColumnarToRow (37)
                                 +- CometColumnarExchange (36)
                                    +- * HashAggregate (35)
                                       +- * HashAggregate (34)
                                          +- * CometColumnarToRow (33)
                                             +- ReusedExchange (32)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#5)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#5], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#6]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) CometNativeScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Condition : isnotnull(i_item_sk#8)

(11) CometProject
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Arguments: [i_item_sk#8, i_class#11, i_category#12], [i_item_sk#8, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_class#9, 50)) AS i_class#11, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#10, 50)) AS i_category#12]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#8, i_class#11, i_category#12]
Arguments: [i_item_sk#8, i_class#11, i_category#12]

(13) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#8, i_class#11, i_category#12]
Arguments: [ss_item_sk#1], [i_item_sk#8], Inner, BuildRight

(14) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#8, i_class#11, i_category#12]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]

(15) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#13, s_state#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#13, s_state#14]
Condition : ((isnotnull(s_state#14) AND (static_invoke(CharVarcharCodegenUtils.readSidePadding(s_state#14, 2)) = TN)) AND isnotnull(s_store_sk#13))

(17) CometProject
Input [2]: [s_store_sk#13, s_state#14]
Arguments: [s_store_sk#13], [s_store_sk#13]

(18) CometBroadcastExchange
Input [1]: [s_store_sk#13]
Arguments: [s_store_sk#13]

(19) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]
Right output [1]: [s_store_sk#13]
Arguments: [ss_store_sk#2], [s_store_sk#13], Inner, BuildRight

(20) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12, s_store_sk#13]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12], [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]

(21) CometHashAggregate
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]

(22) CometExchange
Input [4]: [i_category#12, i_class#11, sum#15, sum#16]
Arguments: hashpartitioning(i_category#12, i_class#11, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(23) CometColumnarToRow [codegen id : 1]
Input [4]: [i_category#12, i_class#11, sum#15, sum#16]

(24) HashAggregate [codegen id : 1]
Input [4]: [i_category#12, i_class#11, sum#15, sum#16]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#17, sum(UnscaledValue(ss_ext_sales_price#3))#18]
Results [6]: [cast((MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#17,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#18,17,2)) as decimal(38,11)) AS gross_margin#19, i_category#12 AS i_category#20, i_class#11 AS i_class#21, 0 AS t_category#22, 0 AS t_class#23, 0 AS lochierarchy#24]

(25) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#25, i_class#26, sum#27, sum#28]

(26) CometColumnarToRow [codegen id : 2]
Input [4]: [i_category#25, i_class#26, sum#27, sum#28]

(27) HashAggregate [codegen id : 2]
Input [4]: [i_category#25, i_class#26, sum#27, sum#28]
Keys [2]: [i_category#25, i_class#26]
Functions [2]: [sum(UnscaledValue(ss_net_profit#29)), sum(UnscaledValue(ss_ext_sales_price#30))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#29))#31, sum(UnscaledValue(ss_ext_sales_price#30))#32]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#29))#31,17,2) AS ss_net_profit#33, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#30))#32,17,2) AS ss_ext_sales_price#34, i_category#25]

(28) HashAggregate [codegen id : 2]
Input [3]: [ss_net_profit#33, ss_ext_sales_price#34, i_category#25]
Keys [1]: [i_category#25]
Functions [2]: [partial_sum(ss_net_profit#33), partial_sum(ss_ext_sales_price#34)]
Aggregate Attributes [4]: [sum#35, isEmpty#36, sum#37, isEmpty#38]
Results [5]: [i_category#25, sum#39, isEmpty#40, sum#41, isEmpty#42]

(29) CometColumnarExchange
Input [5]: [i_category#25, sum#39, isEmpty#40, sum#41, isEmpty#42]
Arguments: hashpartitioning(i_category#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(30) CometColumnarToRow [codegen id : 3]
Input [5]: [i_category#25, sum#39, isEmpty#40, sum#41, isEmpty#42]

(31) HashAggregate [codegen id : 3]
Input [5]: [i_category#25, sum#39, isEmpty#40, sum#41, isEmpty#42]
Keys [1]: [i_category#25]
Functions [2]: [sum(ss_net_profit#33), sum(ss_ext_sales_price#34)]
Aggregate Attributes [2]: [sum(ss_net_profit#33)#43, sum(ss_ext_sales_price#34)#44]
Results [6]: [(sum(ss_net_profit#33)#43 / sum(ss_ext_sales_price#34)#44) AS gross_margin#45, i_category#25, null AS i_class#46, 0 AS t_category#47, 1 AS t_class#48, 1 AS lochierarchy#49]

(32) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#50, i_class#51, sum#52, sum#53]

(33) CometColumnarToRow [codegen id : 4]
Input [4]: [i_category#50, i_class#51, sum#52, sum#53]

(34) HashAggregate [codegen id : 4]
Input [4]: [i_category#50, i_class#51, sum#52, sum#53]
Keys [2]: [i_category#50, i_class#51]
Functions [2]: [sum(UnscaledValue(ss_net_profit#54)), sum(UnscaledValue(ss_ext_sales_price#55))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#54))#31, sum(UnscaledValue(ss_ext_sales_price#55))#32]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#54))#31,17,2) AS ss_net_profit#56, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#55))#32,17,2) AS ss_ext_sales_price#57]

(35) HashAggregate [codegen id : 4]
Input [2]: [ss_net_profit#56, ss_ext_sales_price#57]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#56), partial_sum(ss_ext_sales_price#57)]
Aggregate Attributes [4]: [sum#58, isEmpty#59, sum#60, isEmpty#61]
Results [4]: [sum#62, isEmpty#63, sum#64, isEmpty#65]

(36) CometColumnarExchange
Input [4]: [sum#62, isEmpty#63, sum#64, isEmpty#65]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(37) CometColumnarToRow [codegen id : 5]
Input [4]: [sum#62, isEmpty#63, sum#64, isEmpty#65]

(38) HashAggregate [codegen id : 5]
Input [4]: [sum#62, isEmpty#63, sum#64, isEmpty#65]
Keys: []
Functions [2]: [sum(ss_net_profit#56), sum(ss_ext_sales_price#57)]
Aggregate Attributes [2]: [sum(ss_net_profit#56)#66, sum(ss_ext_sales_price#57)#67]
Results [6]: [(sum(ss_net_profit#56)#66 / sum(ss_ext_sales_price#57)#67) AS gross_margin#68, null AS i_category#69, null AS i_class#70, 1 AS t_category#71, 1 AS t_class#72, 2 AS lochierarchy#73]

(39) Union

(40) HashAggregate [codegen id : 6]
Input [6]: [gross_margin#19, i_category#20, i_class#21, t_category#22, t_class#23, lochierarchy#24]
Keys [6]: [gross_margin#19, i_category#20, i_class#21, t_category#22, t_class#23, lochierarchy#24]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#19, i_category#20, i_class#21, t_category#22, t_class#23, lochierarchy#24]

(41) CometColumnarExchange
Input [6]: [gross_margin#19, i_category#20, i_class#21, t_category#22, t_class#23, lochierarchy#24]
Arguments: hashpartitioning(gross_margin#19, i_category#20, i_class#21, t_category#22, t_class#23, lochierarchy#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(42) CometHashAggregate
Input [6]: [gross_margin#19, i_category#20, i_class#21, t_category#22, t_class#23, lochierarchy#24]
Keys [6]: [gross_margin#19, i_category#20, i_class#21, t_category#22, t_class#23, lochierarchy#24]
Functions: []

(43) CometExchange
Input [5]: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, _w0#74]
Arguments: hashpartitioning(lochierarchy#24, _w0#74, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(44) CometSort
Input [5]: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, _w0#74]
Arguments: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, _w0#74], [lochierarchy#24 ASC NULLS FIRST, _w0#74 ASC NULLS FIRST, gross_margin#19 ASC NULLS FIRST]

(45) CometColumnarToRow [codegen id : 7]
Input [5]: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, _w0#74]

(46) Window
Input [5]: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, _w0#74]
Arguments: [rank(gross_margin#19) windowspecdefinition(lochierarchy#24, _w0#74, gross_margin#19 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#75], [lochierarchy#24, _w0#74], [gross_margin#19 ASC NULLS FIRST]

(47) Project [codegen id : 8]
Output [5]: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, rank_within_parent#75]
Input [6]: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, _w0#74, rank_within_parent#75]

(48) TakeOrderedAndProject
Input [5]: [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, rank_within_parent#75]
Arguments: 100, [lochierarchy#24 DESC NULLS LAST, CASE WHEN (lochierarchy#24 = 0) THEN i_category#20 END ASC NULLS FIRST, rank_within_parent#75 ASC NULLS FIRST], [gross_margin#19, i_category#20, i_class#21, lochierarchy#24, rank_within_parent#75]

