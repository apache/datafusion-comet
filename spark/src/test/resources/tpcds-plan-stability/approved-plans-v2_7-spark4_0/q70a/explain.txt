== Physical Plan ==
TakeOrderedAndProject (66)
+- * Project (65)
   +- Window (64)
      +- * CometColumnarToRow (63)
         +- CometSort (62)
            +- CometExchange (61)
               +- CometHashAggregate (60)
                  +- CometColumnarExchange (59)
                     +- * HashAggregate (58)
                        +- Union (57)
                           :- * HashAggregate (42)
                           :  +- * CometColumnarToRow (41)
                           :     +- CometColumnarExchange (40)
                           :        +- * HashAggregate (39)
                           :           +- * Project (38)
                           :              +- * BroadcastHashJoin Inner BuildRight (37)
                           :                 :- * CometColumnarToRow (9)
                           :                 :  +- CometProject (8)
                           :                 :     +- CometBroadcastHashJoin (7)
                           :                 :        :- CometFilter (2)
                           :                 :        :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (1)
                           :                 :        +- CometBroadcastExchange (6)
                           :                 :           +- CometProject (5)
                           :                 :              +- CometFilter (4)
                           :                 :                 +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (3)
                           :                 +- BroadcastExchange (36)
                           :                    +- * Project (35)
                           :                       +- * BroadcastHashJoin LeftSemi BuildRight (34)
                           :                          :- * CometColumnarToRow (12)
                           :                          :  +- CometFilter (11)
                           :                          :     +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store (10)
                           :                          +- BroadcastExchange (33)
                           :                             +- * Project (32)
                           :                                +- * Filter (31)
                           :                                   +- Window (30)
                           :                                      +- WindowGroupLimit (29)
                           :                                         +- * Sort (28)
                           :                                            +- * HashAggregate (27)
                           :                                               +- * CometColumnarToRow (26)
                           :                                                  +- CometExchange (25)
                           :                                                     +- CometHashAggregate (24)
                           :                                                        +- CometProject (23)
                           :                                                           +- CometBroadcastHashJoin (22)
                           :                                                              :- CometProject (20)
                           :                                                              :  +- CometBroadcastHashJoin (19)
                           :                                                              :     :- CometFilter (14)
                           :                                                              :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (13)
                           :                                                              :     +- CometBroadcastExchange (18)
                           :                                                              :        +- CometProject (17)
                           :                                                              :           +- CometFilter (16)
                           :                                                              :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store (15)
                           :                                                              +- ReusedExchange (21)
                           :- * HashAggregate (49)
                           :  +- * CometColumnarToRow (48)
                           :     +- CometColumnarExchange (47)
                           :        +- * HashAggregate (46)
                           :           +- * HashAggregate (45)
                           :              +- * CometColumnarToRow (44)
                           :                 +- ReusedExchange (43)
                           +- * HashAggregate (56)
                              +- * CometColumnarToRow (55)
                                 +- CometColumnarExchange (54)
                                    +- * HashAggregate (53)
                                       +- * HashAggregate (52)
                                          +- * CometColumnarToRow (51)
                                             +- ReusedExchange (50)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) CometColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometScan [native_iceberg_compat] parquet spark_catalog.default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(12) CometColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_store_sk#10)

(15) CometScan [native_iceberg_compat] parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : isnotnull(s_store_sk#14)

(17) CometProject
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14, s_state#16], [s_store_sk#14, static_invoke(CharVarcharCodegenUtils.readSidePadding(s_state#15, 2)) AS s_state#16]

(18) CometBroadcastExchange
Input [2]: [s_store_sk#14, s_state#16]
Arguments: [s_store_sk#14, s_state#16]

(19) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Right output [2]: [s_store_sk#14, s_state#16]
Arguments: [ss_store_sk#10], [s_store_sk#14], Inner, BuildRight

(20) CometProject
Input [5]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12, s_store_sk#14, s_state#16]
Arguments: [ss_net_profit#11, ss_sold_date_sk#12, s_state#16], [ss_net_profit#11, ss_sold_date_sk#12, s_state#16]

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#17]

(22) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#16]
Right output [1]: [d_date_sk#17]
Arguments: [ss_sold_date_sk#12], [d_date_sk#17], Inner, BuildRight

(23) CometProject
Input [4]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#16, d_date_sk#17]
Arguments: [ss_net_profit#11, s_state#16], [ss_net_profit#11, s_state#16]

(24) CometHashAggregate
Input [2]: [ss_net_profit#11, s_state#16]
Keys [1]: [s_state#16]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#11))]

(25) CometExchange
Input [2]: [s_state#16, sum#18]
Arguments: hashpartitioning(s_state#16, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(26) CometColumnarToRow [codegen id : 1]
Input [2]: [s_state#16, sum#18]

(27) HashAggregate [codegen id : 1]
Input [2]: [s_state#16, sum#18]
Keys [1]: [s_state#16]
Functions [1]: [sum(UnscaledValue(ss_net_profit#11))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#11))#19]
Results [3]: [s_state#16, MakeDecimal(sum(UnscaledValue(ss_net_profit#11))#19,17,2) AS _w0#20, s_state#16]

(28) Sort [codegen id : 1]
Input [3]: [s_state#16, _w0#20, s_state#16]
Arguments: [s_state#16 ASC NULLS FIRST, _w0#20 DESC NULLS LAST], false, 0

(29) WindowGroupLimit
Input [3]: [s_state#16, _w0#20, s_state#16]
Arguments: [s_state#16], [_w0#20 DESC NULLS LAST], rank(_w0#20), 5, Final

(30) Window
Input [3]: [s_state#16, _w0#20, s_state#16]
Arguments: [rank(_w0#20) windowspecdefinition(s_state#16, _w0#20 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#21], [s_state#16], [_w0#20 DESC NULLS LAST]

(31) Filter [codegen id : 2]
Input [4]: [s_state#16, _w0#20, s_state#16, ranking#21]
Condition : (ranking#21 <= 5)

(32) Project [codegen id : 2]
Output [1]: [s_state#16]
Input [4]: [s_state#16, _w0#20, s_state#16, ranking#21]

(33) BroadcastExchange
Input [1]: [s_state#16]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(34) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [static_invoke(CharVarcharCodegenUtils.readSidePadding(s_state#9, 2))]
Right keys [1]: [s_state#16]
Join type: LeftSemi
Join condition: None

(35) Project [codegen id : 3]
Output [3]: [s_store_sk#7, s_county#8, static_invoke(CharVarcharCodegenUtils.readSidePadding(s_state#9, 2)) AS s_state#22]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(36) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#8, s_state#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(37) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(38) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_county#8, s_state#22]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#7, s_county#8, s_state#22]

(39) HashAggregate [codegen id : 4]
Input [3]: [ss_net_profit#2, s_county#8, s_state#22]
Keys [2]: [s_state#22, s_county#8]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#23]
Results [3]: [s_state#22, s_county#8, sum#24]

(40) CometColumnarExchange
Input [3]: [s_state#22, s_county#8, sum#24]
Arguments: hashpartitioning(s_state#22, s_county#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(41) CometColumnarToRow [codegen id : 5]
Input [3]: [s_state#22, s_county#8, sum#24]

(42) HashAggregate [codegen id : 5]
Input [3]: [s_state#22, s_county#8, sum#24]
Keys [2]: [s_state#22, s_county#8]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#25]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) as decimal(27,2)) AS total_sum#26, s_state#22 AS s_state#27, s_county#8 AS s_county#28, 0 AS g_state#29, 0 AS g_county#30, 0 AS lochierarchy#31]

(43) ReusedExchange [Reuses operator id: 40]
Output [3]: [s_state#32, s_county#33, sum#34]

(44) CometColumnarToRow [codegen id : 10]
Input [3]: [s_state#32, s_county#33, sum#34]

(45) HashAggregate [codegen id : 10]
Input [3]: [s_state#32, s_county#33, sum#34]
Keys [2]: [s_state#32, s_county#33]
Functions [1]: [sum(UnscaledValue(ss_net_profit#35))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#35))#25]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#35))#25,17,2) AS total_sum#36, s_state#32]

(46) HashAggregate [codegen id : 10]
Input [2]: [total_sum#36, s_state#32]
Keys [1]: [s_state#32]
Functions [1]: [partial_sum(total_sum#36)]
Aggregate Attributes [2]: [sum#37, isEmpty#38]
Results [3]: [s_state#32, sum#39, isEmpty#40]

(47) CometColumnarExchange
Input [3]: [s_state#32, sum#39, isEmpty#40]
Arguments: hashpartitioning(s_state#32, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(48) CometColumnarToRow [codegen id : 11]
Input [3]: [s_state#32, sum#39, isEmpty#40]

(49) HashAggregate [codegen id : 11]
Input [3]: [s_state#32, sum#39, isEmpty#40]
Keys [1]: [s_state#32]
Functions [1]: [sum(total_sum#36)]
Aggregate Attributes [1]: [sum(total_sum#36)#41]
Results [6]: [sum(total_sum#36)#41 AS total_sum#42, s_state#32, null AS s_county#43, 0 AS g_state#44, 1 AS g_county#45, 1 AS lochierarchy#46]

(50) ReusedExchange [Reuses operator id: 40]
Output [3]: [s_state#47, s_county#48, sum#49]

(51) CometColumnarToRow [codegen id : 16]
Input [3]: [s_state#47, s_county#48, sum#49]

(52) HashAggregate [codegen id : 16]
Input [3]: [s_state#47, s_county#48, sum#49]
Keys [2]: [s_state#47, s_county#48]
Functions [1]: [sum(UnscaledValue(ss_net_profit#50))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#50))#25]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#50))#25,17,2) AS total_sum#51]

(53) HashAggregate [codegen id : 16]
Input [1]: [total_sum#51]
Keys: []
Functions [1]: [partial_sum(total_sum#51)]
Aggregate Attributes [2]: [sum#52, isEmpty#53]
Results [2]: [sum#54, isEmpty#55]

(54) CometColumnarExchange
Input [2]: [sum#54, isEmpty#55]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(55) CometColumnarToRow [codegen id : 17]
Input [2]: [sum#54, isEmpty#55]

(56) HashAggregate [codegen id : 17]
Input [2]: [sum#54, isEmpty#55]
Keys: []
Functions [1]: [sum(total_sum#51)]
Aggregate Attributes [1]: [sum(total_sum#51)#56]
Results [6]: [sum(total_sum#51)#56 AS total_sum#57, null AS s_state#58, null AS s_county#59, 1 AS g_state#60, 1 AS g_county#61, 2 AS lochierarchy#62]

(57) Union

(58) HashAggregate [codegen id : 18]
Input [6]: [total_sum#26, s_state#27, s_county#28, g_state#29, g_county#30, lochierarchy#31]
Keys [6]: [total_sum#26, s_state#27, s_county#28, g_state#29, g_county#30, lochierarchy#31]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#26, s_state#27, s_county#28, g_state#29, g_county#30, lochierarchy#31]

(59) CometColumnarExchange
Input [6]: [total_sum#26, s_state#27, s_county#28, g_state#29, g_county#30, lochierarchy#31]
Arguments: hashpartitioning(total_sum#26, s_state#27, s_county#28, g_state#29, g_county#30, lochierarchy#31, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(60) CometHashAggregate
Input [6]: [total_sum#26, s_state#27, s_county#28, g_state#29, g_county#30, lochierarchy#31]
Keys [6]: [total_sum#26, s_state#27, s_county#28, g_state#29, g_county#30, lochierarchy#31]
Functions: []

(61) CometExchange
Input [5]: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, _w0#63]
Arguments: hashpartitioning(lochierarchy#31, _w0#63, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(62) CometSort
Input [5]: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, _w0#63]
Arguments: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, _w0#63], [lochierarchy#31 ASC NULLS FIRST, _w0#63 ASC NULLS FIRST, total_sum#26 DESC NULLS LAST]

(63) CometColumnarToRow [codegen id : 19]
Input [5]: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, _w0#63]

(64) Window
Input [5]: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, _w0#63]
Arguments: [rank(total_sum#26) windowspecdefinition(lochierarchy#31, _w0#63, total_sum#26 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#64], [lochierarchy#31, _w0#63], [total_sum#26 DESC NULLS LAST]

(65) Project [codegen id : 20]
Output [5]: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, rank_within_parent#64]
Input [6]: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, _w0#63, rank_within_parent#64]

(66) TakeOrderedAndProject
Input [5]: [total_sum#26, s_state#27, s_county#28, lochierarchy#31, rank_within_parent#64]
Arguments: 100, [lochierarchy#31 DESC NULLS LAST, CASE WHEN (lochierarchy#31 = 0) THEN s_state#27 END ASC NULLS FIRST, rank_within_parent#64 ASC NULLS FIRST], [total_sum#26, s_state#27, s_county#28, lochierarchy#31, rank_within_parent#64]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (71)
+- * CometColumnarToRow (70)
   +- CometProject (69)
      +- CometFilter (68)
         +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (67)


(67) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(68) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(69) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(70) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(71) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 13 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#4


