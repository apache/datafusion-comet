== Physical Plan ==
TakeOrderedAndProject (70)
+- * Project (69)
   +- Window (68)
      +- * ColumnarToRow (67)
         +- CometSort (66)
            +- CometColumnarExchange (65)
               +- CometHashAggregate (64)
                  +- CometColumnarExchange (63)
                     +- RowToColumnar (62)
                        +- * HashAggregate (61)
                           +- Union (60)
                              :- * HashAggregate (43)
                              :  +- * ColumnarToRow (42)
                              :     +- CometColumnarExchange (41)
                              :        +- RowToColumnar (40)
                              :           +- * HashAggregate (39)
                              :              +- * Project (38)
                              :                 +- * BroadcastHashJoin Inner BuildRight (37)
                              :                    :- * ColumnarToRow (9)
                              :                    :  +- CometProject (8)
                              :                    :     +- CometBroadcastHashJoin (7)
                              :                    :        :- CometFilter (2)
                              :                    :        :  +- CometScan parquet spark_catalog.default.store_sales (1)
                              :                    :        +- CometBroadcastExchange (6)
                              :                    :           +- CometProject (5)
                              :                    :              +- CometFilter (4)
                              :                    :                 +- CometScan parquet spark_catalog.default.date_dim (3)
                              :                    +- BroadcastExchange (36)
                              :                       +- * BroadcastHashJoin LeftSemi BuildRight (35)
                              :                          :- * ColumnarToRow (12)
                              :                          :  +- CometFilter (11)
                              :                          :     +- CometScan parquet spark_catalog.default.store (10)
                              :                          +- BroadcastExchange (34)
                              :                             +- * Project (33)
                              :                                +- * Filter (32)
                              :                                   +- Window (31)
                              :                                      +- WindowGroupLimit (30)
                              :                                         +- * Sort (29)
                              :                                            +- * HashAggregate (28)
                              :                                               +- * ColumnarToRow (27)
                              :                                                  +- CometColumnarExchange (26)
                              :                                                     +- RowToColumnar (25)
                              :                                                        +- * HashAggregate (24)
                              :                                                           +- * ColumnarToRow (23)
                              :                                                              +- CometProject (22)
                              :                                                                 +- CometBroadcastHashJoin (21)
                              :                                                                    :- CometProject (19)
                              :                                                                    :  +- CometBroadcastHashJoin (18)
                              :                                                                    :     :- CometFilter (14)
                              :                                                                    :     :  +- CometScan parquet spark_catalog.default.store_sales (13)
                              :                                                                    :     +- CometBroadcastExchange (17)
                              :                                                                    :        +- CometFilter (16)
                              :                                                                    :           +- CometScan parquet spark_catalog.default.store (15)
                              :                                                                    +- ReusedExchange (20)
                              :- * HashAggregate (51)
                              :  +- * ColumnarToRow (50)
                              :     +- CometColumnarExchange (49)
                              :        +- RowToColumnar (48)
                              :           +- * HashAggregate (47)
                              :              +- * HashAggregate (46)
                              :                 +- * ColumnarToRow (45)
                              :                    +- ReusedExchange (44)
                              +- * HashAggregate (59)
                                 +- * ColumnarToRow (58)
                                    +- CometColumnarExchange (57)
                                       +- RowToColumnar (56)
                                          +- * HashAggregate (55)
                                             +- * HashAggregate (54)
                                                +- * ColumnarToRow (53)
                                                   +- ReusedExchange (52)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) ColumnarToRow [codegen id : 5]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(12) ColumnarToRow [codegen id : 4]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_store_sk#10)

(15) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : isnotnull(s_store_sk#14)

(17) CometBroadcastExchange
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14, s_state#15]

(18) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Right output [2]: [s_store_sk#14, s_state#15]
Arguments: [ss_store_sk#10], [s_store_sk#14], Inner, BuildRight

(19) CometProject
Input [5]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12, s_store_sk#14, s_state#15]
Arguments: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15], [ss_net_profit#11, ss_sold_date_sk#12, s_state#15]

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#16]

(21) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15]
Right output [1]: [d_date_sk#16]
Arguments: [ss_sold_date_sk#12], [d_date_sk#16], Inner, BuildRight

(22) CometProject
Input [4]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15, d_date_sk#16]
Arguments: [ss_net_profit#11, s_state#15], [ss_net_profit#11, s_state#15]

(23) ColumnarToRow [codegen id : 1]
Input [2]: [ss_net_profit#11, s_state#15]

(24) HashAggregate [codegen id : 1]
Input [2]: [ss_net_profit#11, s_state#15]
Keys [1]: [s_state#15]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#11))]
Aggregate Attributes [1]: [sum#17]
Results [2]: [s_state#15, sum#18]

(25) RowToColumnar
Input [2]: [s_state#15, sum#18]

(26) CometColumnarExchange
Input [2]: [s_state#15, sum#18]
Arguments: hashpartitioning(s_state#15, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(27) ColumnarToRow [codegen id : 2]
Input [2]: [s_state#15, sum#18]

(28) HashAggregate [codegen id : 2]
Input [2]: [s_state#15, sum#18]
Keys [1]: [s_state#15]
Functions [1]: [sum(UnscaledValue(ss_net_profit#11))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#11))#19]
Results [3]: [s_state#15, MakeDecimal(sum(UnscaledValue(ss_net_profit#11))#19,17,2) AS _w0#20, s_state#15]

(29) Sort [codegen id : 2]
Input [3]: [s_state#15, _w0#20, s_state#15]
Arguments: [s_state#15 ASC NULLS FIRST, _w0#20 DESC NULLS LAST], false, 0

(30) WindowGroupLimit
Input [3]: [s_state#15, _w0#20, s_state#15]
Arguments: [s_state#15], [_w0#20 DESC NULLS LAST], rank(_w0#20), 5, Final

(31) Window
Input [3]: [s_state#15, _w0#20, s_state#15]
Arguments: [rank(_w0#20) windowspecdefinition(s_state#15, _w0#20 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#21], [s_state#15], [_w0#20 DESC NULLS LAST]

(32) Filter [codegen id : 3]
Input [4]: [s_state#15, _w0#20, s_state#15, ranking#21]
Condition : (ranking#21 <= 5)

(33) Project [codegen id : 3]
Output [1]: [s_state#15]
Input [4]: [s_state#15, _w0#20, s_state#15, ranking#21]

(34) BroadcastExchange
Input [1]: [s_state#15]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(35) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_state#9]
Right keys [1]: [s_state#15]
Join type: LeftSemi
Join condition: None

(36) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(37) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(38) Project [codegen id : 5]
Output [3]: [ss_net_profit#2, s_county#8, s_state#9]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#7, s_county#8, s_state#9]

(39) HashAggregate [codegen id : 5]
Input [3]: [ss_net_profit#2, s_county#8, s_state#9]
Keys [2]: [s_state#9, s_county#8]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#22]
Results [3]: [s_state#9, s_county#8, sum#23]

(40) RowToColumnar
Input [3]: [s_state#9, s_county#8, sum#23]

(41) CometColumnarExchange
Input [3]: [s_state#9, s_county#8, sum#23]
Arguments: hashpartitioning(s_state#9, s_county#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(42) ColumnarToRow [codegen id : 6]
Input [3]: [s_state#9, s_county#8, sum#23]

(43) HashAggregate [codegen id : 6]
Input [3]: [s_state#9, s_county#8, sum#23]
Keys [2]: [s_state#9, s_county#8]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#24]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#24,17,2) as decimal(27,2)) AS total_sum#25, s_state#9, s_county#8, 0 AS g_state#26, 0 AS g_county#27, 0 AS lochierarchy#28]

(44) ReusedExchange [Reuses operator id: 41]
Output [3]: [s_state#29, s_county#30, sum#31]

(45) ColumnarToRow [codegen id : 12]
Input [3]: [s_state#29, s_county#30, sum#31]

(46) HashAggregate [codegen id : 12]
Input [3]: [s_state#29, s_county#30, sum#31]
Keys [2]: [s_state#29, s_county#30]
Functions [1]: [sum(UnscaledValue(ss_net_profit#32))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#32))#24]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#32))#24,17,2) AS total_sum#33, s_state#29]

(47) HashAggregate [codegen id : 12]
Input [2]: [total_sum#33, s_state#29]
Keys [1]: [s_state#29]
Functions [1]: [partial_sum(total_sum#33)]
Aggregate Attributes [2]: [sum#34, isEmpty#35]
Results [3]: [s_state#29, sum#36, isEmpty#37]

(48) RowToColumnar
Input [3]: [s_state#29, sum#36, isEmpty#37]

(49) CometColumnarExchange
Input [3]: [s_state#29, sum#36, isEmpty#37]
Arguments: hashpartitioning(s_state#29, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(50) ColumnarToRow [codegen id : 13]
Input [3]: [s_state#29, sum#36, isEmpty#37]

(51) HashAggregate [codegen id : 13]
Input [3]: [s_state#29, sum#36, isEmpty#37]
Keys [1]: [s_state#29]
Functions [1]: [sum(total_sum#33)]
Aggregate Attributes [1]: [sum(total_sum#33)#38]
Results [6]: [sum(total_sum#33)#38 AS total_sum#39, s_state#29, null AS s_county#40, 0 AS g_state#41, 1 AS g_county#42, 1 AS lochierarchy#43]

(52) ReusedExchange [Reuses operator id: 41]
Output [3]: [s_state#44, s_county#45, sum#46]

(53) ColumnarToRow [codegen id : 19]
Input [3]: [s_state#44, s_county#45, sum#46]

(54) HashAggregate [codegen id : 19]
Input [3]: [s_state#44, s_county#45, sum#46]
Keys [2]: [s_state#44, s_county#45]
Functions [1]: [sum(UnscaledValue(ss_net_profit#47))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#47))#24]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#47))#24,17,2) AS total_sum#48]

(55) HashAggregate [codegen id : 19]
Input [1]: [total_sum#48]
Keys: []
Functions [1]: [partial_sum(total_sum#48)]
Aggregate Attributes [2]: [sum#49, isEmpty#50]
Results [2]: [sum#51, isEmpty#52]

(56) RowToColumnar
Input [2]: [sum#51, isEmpty#52]

(57) CometColumnarExchange
Input [2]: [sum#51, isEmpty#52]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(58) ColumnarToRow [codegen id : 20]
Input [2]: [sum#51, isEmpty#52]

(59) HashAggregate [codegen id : 20]
Input [2]: [sum#51, isEmpty#52]
Keys: []
Functions [1]: [sum(total_sum#48)]
Aggregate Attributes [1]: [sum(total_sum#48)#53]
Results [6]: [sum(total_sum#48)#53 AS total_sum#54, null AS s_state#55, null AS s_county#56, 1 AS g_state#57, 1 AS g_county#58, 2 AS lochierarchy#59]

(60) Union

(61) HashAggregate [codegen id : 21]
Input [6]: [total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28]
Keys [6]: [total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28]

(62) RowToColumnar
Input [6]: [total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28]

(63) CometColumnarExchange
Input [6]: [total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28]
Arguments: hashpartitioning(total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(64) CometHashAggregate
Input [6]: [total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28]
Keys [6]: [total_sum#25, s_state#9, s_county#8, g_state#26, g_county#27, lochierarchy#28]
Functions: []

(65) CometColumnarExchange
Input [5]: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, _w0#60]
Arguments: hashpartitioning(lochierarchy#28, _w0#60, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(66) CometSort
Input [5]: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, _w0#60]
Arguments: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, _w0#60], [lochierarchy#28 ASC NULLS FIRST, _w0#60 ASC NULLS FIRST, total_sum#25 DESC NULLS LAST]

(67) ColumnarToRow [codegen id : 22]
Input [5]: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, _w0#60]

(68) Window
Input [5]: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, _w0#60]
Arguments: [rank(total_sum#25) windowspecdefinition(lochierarchy#28, _w0#60, total_sum#25 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#61], [lochierarchy#28, _w0#60], [total_sum#25 DESC NULLS LAST]

(69) Project [codegen id : 23]
Output [5]: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, rank_within_parent#61]
Input [6]: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, _w0#60, rank_within_parent#61]

(70) TakeOrderedAndProject
Input [5]: [total_sum#25, s_state#9, s_county#8, lochierarchy#28, rank_within_parent#61]
Arguments: 100, [lochierarchy#28 DESC NULLS LAST, CASE WHEN (lochierarchy#28 = 0) THEN s_state#9 END ASC NULLS FIRST, rank_within_parent#61 ASC NULLS FIRST], [total_sum#25, s_state#9, s_county#8, lochierarchy#28, rank_within_parent#61]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (75)
+- * ColumnarToRow (74)
   +- CometProject (73)
      +- CometFilter (72)
         +- CometScan parquet spark_catalog.default.date_dim (71)


(71) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(72) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(73) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(74) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(75) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 13 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#4


