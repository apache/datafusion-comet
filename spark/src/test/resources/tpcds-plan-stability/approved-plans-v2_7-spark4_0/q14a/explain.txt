== Physical Plan ==
TakeOrderedAndProject (125)
+- * HashAggregate (124)
   +- Exchange (123)
      +- * HashAggregate (122)
         +- Union (121)
            :- * HashAggregate (100)
            :  +- Exchange (99)
            :     +- * HashAggregate (98)
            :        +- Union (97)
            :           :- * Filter (66)
            :           :  +- * HashAggregate (65)
            :           :     +- Exchange (64)
            :           :        +- * HashAggregate (63)
            :           :           +- * Project (62)
            :           :              +- * BroadcastHashJoin Inner BuildRight (61)
            :           :                 :- * Project (59)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (58)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
            :           :                 :     :  :- * ColumnarToRow (3)
            :           :                 :     :  :  +- CometFilter (2)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :  +- BroadcastExchange (50)
            :           :                 :     :     +- * Project (49)
            :           :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
            :           :                 :     :           :- * ColumnarToRow (6)
            :           :                 :     :           :  +- CometFilter (5)
            :           :                 :     :           :     +- CometScan parquet spark_catalog.default.item (4)
            :           :                 :     :           +- BroadcastExchange (47)
            :           :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
            :           :                 :     :                 :- * HashAggregate (35)
            :           :                 :     :                 :  +- Exchange (34)
            :           :                 :     :                 :     +- * ColumnarToRow (33)
            :           :                 :     :                 :        +- CometHashAggregate (32)
            :           :                 :     :                 :           +- CometProject (31)
            :           :                 :     :                 :              +- CometBroadcastHashJoin (30)
            :           :                 :     :                 :                 :- CometProject (28)
            :           :                 :     :                 :                 :  +- CometBroadcastHashJoin (27)
            :           :                 :     :                 :                 :     :- CometFilter (8)
            :           :                 :     :                 :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (7)
            :           :                 :     :                 :                 :     +- CometBroadcastExchange (26)
            :           :                 :     :                 :                 :        +- CometBroadcastHashJoin (25)
            :           :                 :     :                 :                 :           :- CometFilter (10)
            :           :                 :     :                 :                 :           :  +- CometScan parquet spark_catalog.default.item (9)
            :           :                 :     :                 :                 :           +- CometBroadcastExchange (24)
            :           :                 :     :                 :                 :              +- CometProject (23)
            :           :                 :     :                 :                 :                 +- CometBroadcastHashJoin (22)
            :           :                 :     :                 :                 :                    :- CometProject (17)
            :           :                 :     :                 :                 :                    :  +- CometBroadcastHashJoin (16)
            :           :                 :     :                 :                 :                    :     :- CometFilter (12)
            :           :                 :     :                 :                 :                    :     :  +- CometScan parquet spark_catalog.default.catalog_sales (11)
            :           :                 :     :                 :                 :                    :     +- CometBroadcastExchange (15)
            :           :                 :     :                 :                 :                    :        +- CometFilter (14)
            :           :                 :     :                 :                 :                    :           +- CometScan parquet spark_catalog.default.item (13)
            :           :                 :     :                 :                 :                    +- CometBroadcastExchange (21)
            :           :                 :     :                 :                 :                       +- CometProject (20)
            :           :                 :     :                 :                 :                          +- CometFilter (19)
            :           :                 :     :                 :                 :                             +- CometScan parquet spark_catalog.default.date_dim (18)
            :           :                 :     :                 :                 +- ReusedExchange (29)
            :           :                 :     :                 +- BroadcastExchange (45)
            :           :                 :     :                    +- * ColumnarToRow (44)
            :           :                 :     :                       +- CometProject (43)
            :           :                 :     :                          +- CometBroadcastHashJoin (42)
            :           :                 :     :                             :- CometProject (40)
            :           :                 :     :                             :  +- CometBroadcastHashJoin (39)
            :           :                 :     :                             :     :- CometFilter (37)
            :           :                 :     :                             :     :  +- CometScan parquet spark_catalog.default.web_sales (36)
            :           :                 :     :                             :     +- ReusedExchange (38)
            :           :                 :     :                             +- ReusedExchange (41)
            :           :                 :     +- BroadcastExchange (57)
            :           :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
            :           :                 :           :- * ColumnarToRow (54)
            :           :                 :           :  +- CometFilter (53)
            :           :                 :           :     +- CometScan parquet spark_catalog.default.item (52)
            :           :                 :           +- ReusedExchange (55)
            :           :                 +- ReusedExchange (60)
            :           :- * Filter (81)
            :           :  +- * HashAggregate (80)
            :           :     +- Exchange (79)
            :           :        +- * HashAggregate (78)
            :           :           +- * Project (77)
            :           :              +- * BroadcastHashJoin Inner BuildRight (76)
            :           :                 :- * Project (74)
            :           :                 :  +- * BroadcastHashJoin Inner BuildRight (73)
            :           :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (71)
            :           :                 :     :  :- * ColumnarToRow (69)
            :           :                 :     :  :  +- CometFilter (68)
            :           :                 :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (67)
            :           :                 :     :  +- ReusedExchange (70)
            :           :                 :     +- ReusedExchange (72)
            :           :                 +- ReusedExchange (75)
            :           +- * Filter (96)
            :              +- * HashAggregate (95)
            :                 +- Exchange (94)
            :                    +- * HashAggregate (93)
            :                       +- * Project (92)
            :                          +- * BroadcastHashJoin Inner BuildRight (91)
            :                             :- * Project (89)
            :                             :  +- * BroadcastHashJoin Inner BuildRight (88)
            :                             :     :- * BroadcastHashJoin LeftSemi BuildRight (86)
            :                             :     :  :- * ColumnarToRow (84)
            :                             :     :  :  +- CometFilter (83)
            :                             :     :  :     +- CometScan parquet spark_catalog.default.web_sales (82)
            :                             :     :  +- ReusedExchange (85)
            :                             :     +- ReusedExchange (87)
            :                             +- ReusedExchange (90)
            :- * HashAggregate (105)
            :  +- Exchange (104)
            :     +- * HashAggregate (103)
            :        +- * HashAggregate (102)
            :           +- ReusedExchange (101)
            :- * HashAggregate (110)
            :  +- Exchange (109)
            :     +- * HashAggregate (108)
            :        +- * HashAggregate (107)
            :           +- ReusedExchange (106)
            :- * HashAggregate (115)
            :  +- Exchange (114)
            :     +- * HashAggregate (113)
            :        +- * HashAggregate (112)
            :           +- ReusedExchange (111)
            +- * HashAggregate (120)
               +- Exchange (119)
                  +- * HashAggregate (118)
                     +- * HashAggregate (117)
                        +- ReusedExchange (116)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 11]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(10) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(11) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(12) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(15) CometBroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(16) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Right output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_item_sk#17], [i_item_sk#20], Inner, BuildRight

(17) CometProject
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23], [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]

(18) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(19) CometFilter
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1999)) AND (d_year#25 <= 2001)) AND isnotnull(d_date_sk#24))

(20) CometProject
Input [2]: [d_date_sk#24, d_year#25]
Arguments: [d_date_sk#24], [d_date_sk#24]

(21) CometBroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: [d_date_sk#24]

(22) CometBroadcastHashJoin
Left output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#18], [d_date_sk#24], Inner, BuildRight

(23) CometProject
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23], [i_brand_id#21, i_class_id#22, i_category_id#23]

(24) CometBroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23]

(25) CometBroadcastHashJoin
Left output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)], [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)], LeftSemi, BuildRight

(26) CometBroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(27) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Right output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_item_sk#10], [i_item_sk#13], Inner, BuildRight

(28) CometProject
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16], [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]

(29) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#26]

(30) CometBroadcastHashJoin
Left output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [1]: [d_date_sk#26]
Arguments: [ss_sold_date_sk#11], [d_date_sk#26], Inner, BuildRight

(31) CometProject
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#26]
Arguments: [brand_id#27, class_id#28, category_id#29], [i_brand_id#14 AS brand_id#27, i_class_id#15 AS class_id#28, i_category_id#16 AS category_id#29]

(32) CometHashAggregate
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []

(33) ColumnarToRow [codegen id : 1]
Input [3]: [brand_id#27, class_id#28, category_id#29]

(34) Exchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: hashpartitioning(brand_id#27, class_id#28, category_id#29, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(35) HashAggregate [codegen id : 3]
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#27, class_id#28, category_id#29]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#31), dynamicpruningexpression(ws_sold_date_sk#31 IN dynamicpruning#32)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) CometFilter
Input [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Condition : isnotnull(ws_item_sk#30)

(38) ReusedExchange [Reuses operator id: 15]
Output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]

(39) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Right output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_item_sk#30], [i_item_sk#33], Inner, BuildRight

(40) CometProject
Input [6]: [ws_item_sk#30, ws_sold_date_sk#31, i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36], [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]

(41) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#37]

(42) CometBroadcastHashJoin
Left output [4]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]
Right output [1]: [d_date_sk#37]
Arguments: [ws_sold_date_sk#31], [d_date_sk#37], Inner, BuildRight

(43) CometProject
Input [5]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36, d_date_sk#37]
Arguments: [i_brand_id#34, i_class_id#35, i_category_id#36], [i_brand_id#34, i_class_id#35, i_category_id#36]

(44) ColumnarToRow [codegen id : 2]
Input [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]

(45) BroadcastExchange
Input [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(46) BroadcastHashJoin [codegen id : 3]
Left keys [6]: [coalesce(brand_id#27, 0), isnull(brand_id#27), coalesce(class_id#28, 0), isnull(class_id#28), coalesce(category_id#29, 0), isnull(category_id#29)]
Right keys [6]: [coalesce(i_brand_id#34, 0), isnull(i_brand_id#34), coalesce(i_class_id#35, 0), isnull(i_class_id#35), coalesce(i_category_id#36, 0), isnull(i_category_id#36)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=3]

(48) BroadcastHashJoin [codegen id : 4]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#27, class_id#28, category_id#29]
Join type: Inner
Join condition: None

(49) Project [codegen id : 4]
Output [1]: [i_item_sk#6 AS ss_item_sk#38]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#27, class_id#28, category_id#29]

(50) BroadcastExchange
Input [1]: [ss_item_sk#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(51) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) CometFilter
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Condition : isnotnull(i_item_sk#39)

(54) ColumnarToRow [codegen id : 9]
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#38]

(56) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_sk#39]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(58) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#39]
Join type: Inner
Join condition: None

(59) Project [codegen id : 11]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(60) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#43]

(61) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#43]
Join type: Inner
Join condition: None

(62) Project [codegen id : 11]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42, d_date_sk#43]

(63) HashAggregate [codegen id : 11]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#44, isEmpty#45, count#46]
Results [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]

(64) Exchange
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]
Arguments: hashpartitioning(i_brand_id#40, i_class_id#41, i_category_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(65) HashAggregate [codegen id : 12]
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#50, count(1)#51]
Results [6]: [store AS channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#50 AS sales#53, count(1)#51 AS number_sales#54]

(66) Filter [codegen id : 12]
Input [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sales#53, number_sales#54]
Condition : (isnotnull(sales#53) AND (cast(sales#53 as decimal(32,6)) > cast(Subquery scalar-subquery#55, [id=#56] as decimal(32,6))))

(67) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#60), dynamicpruningexpression(cs_sold_date_sk#60 IN dynamicpruning#61)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(68) CometFilter
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]
Condition : isnotnull(cs_item_sk#57)

(69) ColumnarToRow [codegen id : 23]
Input [4]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60]

(70) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#62]

(71) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [ss_item_sk#62]
Join type: LeftSemi
Join condition: None

(72) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#63, i_brand_id#64, i_class_id#65, i_category_id#66]

(73) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_item_sk#57]
Right keys [1]: [i_item_sk#63]
Join type: Inner
Join condition: None

(74) Project [codegen id : 23]
Output [6]: [cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_brand_id#64, i_class_id#65, i_category_id#66]
Input [8]: [cs_item_sk#57, cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_item_sk#63, i_brand_id#64, i_class_id#65, i_category_id#66]

(75) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#67]

(76) BroadcastHashJoin [codegen id : 23]
Left keys [1]: [cs_sold_date_sk#60]
Right keys [1]: [d_date_sk#67]
Join type: Inner
Join condition: None

(77) Project [codegen id : 23]
Output [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#64, i_class_id#65, i_category_id#66]
Input [7]: [cs_quantity#58, cs_list_price#59, cs_sold_date_sk#60, i_brand_id#64, i_class_id#65, i_category_id#66, d_date_sk#67]

(78) HashAggregate [codegen id : 23]
Input [5]: [cs_quantity#58, cs_list_price#59, i_brand_id#64, i_class_id#65, i_category_id#66]
Keys [3]: [i_brand_id#64, i_class_id#65, i_category_id#66]
Functions [2]: [partial_sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59)), partial_count(1)]
Aggregate Attributes [3]: [sum#68, isEmpty#69, count#70]
Results [6]: [i_brand_id#64, i_class_id#65, i_category_id#66, sum#71, isEmpty#72, count#73]

(79) Exchange
Input [6]: [i_brand_id#64, i_class_id#65, i_category_id#66, sum#71, isEmpty#72, count#73]
Arguments: hashpartitioning(i_brand_id#64, i_class_id#65, i_category_id#66, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(80) HashAggregate [codegen id : 24]
Input [6]: [i_brand_id#64, i_class_id#65, i_category_id#66, sum#71, isEmpty#72, count#73]
Keys [3]: [i_brand_id#64, i_class_id#65, i_category_id#66]
Functions [2]: [sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59)), count(1)]
Aggregate Attributes [2]: [sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59))#74, count(1)#75]
Results [6]: [catalog AS channel#76, i_brand_id#64, i_class_id#65, i_category_id#66, sum((cast(cs_quantity#58 as decimal(10,0)) * cs_list_price#59))#74 AS sales#77, count(1)#75 AS number_sales#78]

(81) Filter [codegen id : 24]
Input [6]: [channel#76, i_brand_id#64, i_class_id#65, i_category_id#66, sales#77, number_sales#78]
Condition : (isnotnull(sales#77) AND (cast(sales#77 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#55, [id=#56] as decimal(32,6))))

(82) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#79, ws_quantity#80, ws_list_price#81, ws_sold_date_sk#82]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#82), dynamicpruningexpression(ws_sold_date_sk#82 IN dynamicpruning#83)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(83) CometFilter
Input [4]: [ws_item_sk#79, ws_quantity#80, ws_list_price#81, ws_sold_date_sk#82]
Condition : isnotnull(ws_item_sk#79)

(84) ColumnarToRow [codegen id : 35]
Input [4]: [ws_item_sk#79, ws_quantity#80, ws_list_price#81, ws_sold_date_sk#82]

(85) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#84]

(86) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#79]
Right keys [1]: [ss_item_sk#84]
Join type: LeftSemi
Join condition: None

(87) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#85, i_brand_id#86, i_class_id#87, i_category_id#88]

(88) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_item_sk#79]
Right keys [1]: [i_item_sk#85]
Join type: Inner
Join condition: None

(89) Project [codegen id : 35]
Output [6]: [ws_quantity#80, ws_list_price#81, ws_sold_date_sk#82, i_brand_id#86, i_class_id#87, i_category_id#88]
Input [8]: [ws_item_sk#79, ws_quantity#80, ws_list_price#81, ws_sold_date_sk#82, i_item_sk#85, i_brand_id#86, i_class_id#87, i_category_id#88]

(90) ReusedExchange [Reuses operator id: 155]
Output [1]: [d_date_sk#89]

(91) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [ws_sold_date_sk#82]
Right keys [1]: [d_date_sk#89]
Join type: Inner
Join condition: None

(92) Project [codegen id : 35]
Output [5]: [ws_quantity#80, ws_list_price#81, i_brand_id#86, i_class_id#87, i_category_id#88]
Input [7]: [ws_quantity#80, ws_list_price#81, ws_sold_date_sk#82, i_brand_id#86, i_class_id#87, i_category_id#88, d_date_sk#89]

(93) HashAggregate [codegen id : 35]
Input [5]: [ws_quantity#80, ws_list_price#81, i_brand_id#86, i_class_id#87, i_category_id#88]
Keys [3]: [i_brand_id#86, i_class_id#87, i_category_id#88]
Functions [2]: [partial_sum((cast(ws_quantity#80 as decimal(10,0)) * ws_list_price#81)), partial_count(1)]
Aggregate Attributes [3]: [sum#90, isEmpty#91, count#92]
Results [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#93, isEmpty#94, count#95]

(94) Exchange
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#93, isEmpty#94, count#95]
Arguments: hashpartitioning(i_brand_id#86, i_class_id#87, i_category_id#88, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(95) HashAggregate [codegen id : 36]
Input [6]: [i_brand_id#86, i_class_id#87, i_category_id#88, sum#93, isEmpty#94, count#95]
Keys [3]: [i_brand_id#86, i_class_id#87, i_category_id#88]
Functions [2]: [sum((cast(ws_quantity#80 as decimal(10,0)) * ws_list_price#81)), count(1)]
Aggregate Attributes [2]: [sum((cast(ws_quantity#80 as decimal(10,0)) * ws_list_price#81))#96, count(1)#97]
Results [6]: [web AS channel#98, i_brand_id#86, i_class_id#87, i_category_id#88, sum((cast(ws_quantity#80 as decimal(10,0)) * ws_list_price#81))#96 AS sales#99, count(1)#97 AS number_sales#100]

(96) Filter [codegen id : 36]
Input [6]: [channel#98, i_brand_id#86, i_class_id#87, i_category_id#88, sales#99, number_sales#100]
Condition : (isnotnull(sales#99) AND (cast(sales#99 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#55, [id=#56] as decimal(32,6))))

(97) Union

(98) HashAggregate [codegen id : 37]
Input [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sales#53, number_sales#54]
Keys [4]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [partial_sum(sales#53), partial_sum(number_sales#54)]
Aggregate Attributes [3]: [sum#101, isEmpty#102, sum#103]
Results [7]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum#104, isEmpty#105, sum#106]

(99) Exchange
Input [7]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum#104, isEmpty#105, sum#106]
Arguments: hashpartitioning(channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(100) HashAggregate [codegen id : 38]
Input [7]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum#104, isEmpty#105, sum#106]
Keys [4]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [sum(sales#53), sum(number_sales#54)]
Aggregate Attributes [2]: [sum(sales#53)#107, sum(number_sales#54)#108]
Results [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum(sales#53)#107 AS sum_sales#109, sum(number_sales#54)#108 AS number_sales#110]

(101) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#111, i_brand_id#112, i_class_id#113, i_category_id#114, sum#115, isEmpty#116, sum#117]

(102) HashAggregate [codegen id : 76]
Input [7]: [channel#111, i_brand_id#112, i_class_id#113, i_category_id#114, sum#115, isEmpty#116, sum#117]
Keys [4]: [channel#111, i_brand_id#112, i_class_id#113, i_category_id#114]
Functions [2]: [sum(sales#118), sum(number_sales#119)]
Aggregate Attributes [2]: [sum(sales#118)#107, sum(number_sales#119)#108]
Results [5]: [channel#111, i_brand_id#112, i_class_id#113, sum(sales#118)#107 AS sum_sales#120, sum(number_sales#119)#108 AS number_sales#121]

(103) HashAggregate [codegen id : 76]
Input [5]: [channel#111, i_brand_id#112, i_class_id#113, sum_sales#120, number_sales#121]
Keys [3]: [channel#111, i_brand_id#112, i_class_id#113]
Functions [2]: [partial_sum(sum_sales#120), partial_sum(number_sales#121)]
Aggregate Attributes [3]: [sum#122, isEmpty#123, sum#124]
Results [6]: [channel#111, i_brand_id#112, i_class_id#113, sum#125, isEmpty#126, sum#127]

(104) Exchange
Input [6]: [channel#111, i_brand_id#112, i_class_id#113, sum#125, isEmpty#126, sum#127]
Arguments: hashpartitioning(channel#111, i_brand_id#112, i_class_id#113, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(105) HashAggregate [codegen id : 77]
Input [6]: [channel#111, i_brand_id#112, i_class_id#113, sum#125, isEmpty#126, sum#127]
Keys [3]: [channel#111, i_brand_id#112, i_class_id#113]
Functions [2]: [sum(sum_sales#120), sum(number_sales#121)]
Aggregate Attributes [2]: [sum(sum_sales#120)#128, sum(number_sales#121)#129]
Results [6]: [channel#111, i_brand_id#112, i_class_id#113, null AS i_category_id#130, sum(sum_sales#120)#128 AS sum(sum_sales)#131, sum(number_sales#121)#129 AS sum(number_sales)#132]

(106) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#133, i_brand_id#134, i_class_id#135, i_category_id#136, sum#137, isEmpty#138, sum#139]

(107) HashAggregate [codegen id : 115]
Input [7]: [channel#133, i_brand_id#134, i_class_id#135, i_category_id#136, sum#137, isEmpty#138, sum#139]
Keys [4]: [channel#133, i_brand_id#134, i_class_id#135, i_category_id#136]
Functions [2]: [sum(sales#140), sum(number_sales#141)]
Aggregate Attributes [2]: [sum(sales#140)#107, sum(number_sales#141)#108]
Results [4]: [channel#133, i_brand_id#134, sum(sales#140)#107 AS sum_sales#142, sum(number_sales#141)#108 AS number_sales#143]

(108) HashAggregate [codegen id : 115]
Input [4]: [channel#133, i_brand_id#134, sum_sales#142, number_sales#143]
Keys [2]: [channel#133, i_brand_id#134]
Functions [2]: [partial_sum(sum_sales#142), partial_sum(number_sales#143)]
Aggregate Attributes [3]: [sum#144, isEmpty#145, sum#146]
Results [5]: [channel#133, i_brand_id#134, sum#147, isEmpty#148, sum#149]

(109) Exchange
Input [5]: [channel#133, i_brand_id#134, sum#147, isEmpty#148, sum#149]
Arguments: hashpartitioning(channel#133, i_brand_id#134, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(110) HashAggregate [codegen id : 116]
Input [5]: [channel#133, i_brand_id#134, sum#147, isEmpty#148, sum#149]
Keys [2]: [channel#133, i_brand_id#134]
Functions [2]: [sum(sum_sales#142), sum(number_sales#143)]
Aggregate Attributes [2]: [sum(sum_sales#142)#150, sum(number_sales#143)#151]
Results [6]: [channel#133, i_brand_id#134, null AS i_class_id#152, null AS i_category_id#153, sum(sum_sales#142)#150 AS sum(sum_sales)#154, sum(number_sales#143)#151 AS sum(number_sales)#155]

(111) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#156, i_brand_id#157, i_class_id#158, i_category_id#159, sum#160, isEmpty#161, sum#162]

(112) HashAggregate [codegen id : 154]
Input [7]: [channel#156, i_brand_id#157, i_class_id#158, i_category_id#159, sum#160, isEmpty#161, sum#162]
Keys [4]: [channel#156, i_brand_id#157, i_class_id#158, i_category_id#159]
Functions [2]: [sum(sales#163), sum(number_sales#164)]
Aggregate Attributes [2]: [sum(sales#163)#107, sum(number_sales#164)#108]
Results [3]: [channel#156, sum(sales#163)#107 AS sum_sales#165, sum(number_sales#164)#108 AS number_sales#166]

(113) HashAggregate [codegen id : 154]
Input [3]: [channel#156, sum_sales#165, number_sales#166]
Keys [1]: [channel#156]
Functions [2]: [partial_sum(sum_sales#165), partial_sum(number_sales#166)]
Aggregate Attributes [3]: [sum#167, isEmpty#168, sum#169]
Results [4]: [channel#156, sum#170, isEmpty#171, sum#172]

(114) Exchange
Input [4]: [channel#156, sum#170, isEmpty#171, sum#172]
Arguments: hashpartitioning(channel#156, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(115) HashAggregate [codegen id : 155]
Input [4]: [channel#156, sum#170, isEmpty#171, sum#172]
Keys [1]: [channel#156]
Functions [2]: [sum(sum_sales#165), sum(number_sales#166)]
Aggregate Attributes [2]: [sum(sum_sales#165)#173, sum(number_sales#166)#174]
Results [6]: [channel#156, null AS i_brand_id#175, null AS i_class_id#176, null AS i_category_id#177, sum(sum_sales#165)#173 AS sum(sum_sales)#178, sum(number_sales#166)#174 AS sum(number_sales)#179]

(116) ReusedExchange [Reuses operator id: 99]
Output [7]: [channel#180, i_brand_id#181, i_class_id#182, i_category_id#183, sum#184, isEmpty#185, sum#186]

(117) HashAggregate [codegen id : 193]
Input [7]: [channel#180, i_brand_id#181, i_class_id#182, i_category_id#183, sum#184, isEmpty#185, sum#186]
Keys [4]: [channel#180, i_brand_id#181, i_class_id#182, i_category_id#183]
Functions [2]: [sum(sales#187), sum(number_sales#188)]
Aggregate Attributes [2]: [sum(sales#187)#107, sum(number_sales#188)#108]
Results [2]: [sum(sales#187)#107 AS sum_sales#189, sum(number_sales#188)#108 AS number_sales#190]

(118) HashAggregate [codegen id : 193]
Input [2]: [sum_sales#189, number_sales#190]
Keys: []
Functions [2]: [partial_sum(sum_sales#189), partial_sum(number_sales#190)]
Aggregate Attributes [3]: [sum#191, isEmpty#192, sum#193]
Results [3]: [sum#194, isEmpty#195, sum#196]

(119) Exchange
Input [3]: [sum#194, isEmpty#195, sum#196]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=13]

(120) HashAggregate [codegen id : 194]
Input [3]: [sum#194, isEmpty#195, sum#196]
Keys: []
Functions [2]: [sum(sum_sales#189), sum(number_sales#190)]
Aggregate Attributes [2]: [sum(sum_sales#189)#197, sum(number_sales#190)#198]
Results [6]: [null AS channel#199, null AS i_brand_id#200, null AS i_class_id#201, null AS i_category_id#202, sum(sum_sales#189)#197 AS sum(sum_sales)#203, sum(number_sales#190)#198 AS sum(number_sales)#204]

(121) Union

(122) HashAggregate [codegen id : 195]
Input [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]
Keys [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]

(123) Exchange
Input [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]
Arguments: hashpartitioning(channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(124) HashAggregate [codegen id : 196]
Input [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]
Keys [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]
Functions: []
Aggregate Attributes: []
Results [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]

(125) TakeOrderedAndProject
Input [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]
Arguments: 100, [channel#52 ASC NULLS FIRST, i_brand_id#40 ASC NULLS FIRST, i_class_id#41 ASC NULLS FIRST, i_category_id#42 ASC NULLS FIRST], [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum_sales#109, number_sales#110]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#55, [id=#56]
* HashAggregate (145)
+- Exchange (144)
   +- * HashAggregate (143)
      +- * ColumnarToRow (142)
         +- CometUnion (141)
            :- CometProject (129)
            :  +- CometBroadcastHashJoin (128)
            :     :- CometScan parquet spark_catalog.default.store_sales (126)
            :     +- ReusedExchange (127)
            :- CometProject (136)
            :  +- CometBroadcastHashJoin (135)
            :     :- CometScan parquet spark_catalog.default.catalog_sales (130)
            :     +- CometBroadcastExchange (134)
            :        +- CometProject (133)
            :           +- CometFilter (132)
            :              +- CometScan parquet spark_catalog.default.date_dim (131)
            +- CometProject (140)
               +- CometBroadcastHashJoin (139)
                  :- CometScan parquet spark_catalog.default.web_sales (137)
                  +- ReusedExchange (138)


(126) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#205, ss_list_price#206, ss_sold_date_sk#207]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#207), dynamicpruningexpression(ss_sold_date_sk#207 IN dynamicpruning#208)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(127) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#209]

(128) CometBroadcastHashJoin
Left output [3]: [ss_quantity#205, ss_list_price#206, ss_sold_date_sk#207]
Right output [1]: [d_date_sk#209]
Arguments: [ss_sold_date_sk#207], [d_date_sk#209], Inner, BuildRight

(129) CometProject
Input [4]: [ss_quantity#205, ss_list_price#206, ss_sold_date_sk#207, d_date_sk#209]
Arguments: [quantity#210, list_price#211], [ss_quantity#205 AS quantity#210, ss_list_price#206 AS list_price#211]

(130) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#214), dynamicpruningexpression(cs_sold_date_sk#214 IN dynamicpruning#215)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(131) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#216, d_year#217]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(132) CometFilter
Input [2]: [d_date_sk#216, d_year#217]
Condition : (((isnotnull(d_year#217) AND (d_year#217 >= 1998)) AND (d_year#217 <= 2000)) AND isnotnull(d_date_sk#216))

(133) CometProject
Input [2]: [d_date_sk#216, d_year#217]
Arguments: [d_date_sk#216], [d_date_sk#216]

(134) CometBroadcastExchange
Input [1]: [d_date_sk#216]
Arguments: [d_date_sk#216]

(135) CometBroadcastHashJoin
Left output [3]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214]
Right output [1]: [d_date_sk#216]
Arguments: [cs_sold_date_sk#214], [d_date_sk#216], Inner, BuildRight

(136) CometProject
Input [4]: [cs_quantity#212, cs_list_price#213, cs_sold_date_sk#214, d_date_sk#216]
Arguments: [quantity#218, list_price#219], [cs_quantity#212 AS quantity#218, cs_list_price#213 AS list_price#219]

(137) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#220, ws_list_price#221, ws_sold_date_sk#222]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#222), dynamicpruningexpression(ws_sold_date_sk#222 IN dynamicpruning#223)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(138) ReusedExchange [Reuses operator id: 134]
Output [1]: [d_date_sk#224]

(139) CometBroadcastHashJoin
Left output [3]: [ws_quantity#220, ws_list_price#221, ws_sold_date_sk#222]
Right output [1]: [d_date_sk#224]
Arguments: [ws_sold_date_sk#222], [d_date_sk#224], Inner, BuildRight

(140) CometProject
Input [4]: [ws_quantity#220, ws_list_price#221, ws_sold_date_sk#222, d_date_sk#224]
Arguments: [quantity#225, list_price#226], [ws_quantity#220 AS quantity#225, ws_list_price#221 AS list_price#226]

(141) CometUnion
Child 0 Input [2]: [quantity#210, list_price#211]
Child 1 Input [2]: [quantity#218, list_price#219]
Child 2 Input [2]: [quantity#225, list_price#226]

(142) ColumnarToRow [codegen id : 1]
Input [2]: [quantity#210, list_price#211]

(143) HashAggregate [codegen id : 1]
Input [2]: [quantity#210, list_price#211]
Keys: []
Functions [1]: [partial_avg((cast(quantity#210 as decimal(10,0)) * list_price#211))]
Aggregate Attributes [2]: [sum#227, count#228]
Results [2]: [sum#229, count#230]

(144) Exchange
Input [2]: [sum#229, count#230]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=15]

(145) HashAggregate [codegen id : 2]
Input [2]: [sum#229, count#230]
Keys: []
Functions [1]: [avg((cast(quantity#210 as decimal(10,0)) * list_price#211))]
Aggregate Attributes [1]: [avg((cast(quantity#210 as decimal(10,0)) * list_price#211))#231]
Results [1]: [avg((cast(quantity#210 as decimal(10,0)) * list_price#211))#231 AS average_sales#232]

Subquery:2 Hosting operator id = 126 Hosting Expression = ss_sold_date_sk#207 IN dynamicpruning#12

Subquery:3 Hosting operator id = 130 Hosting Expression = cs_sold_date_sk#214 IN dynamicpruning#215
BroadcastExchange (150)
+- * ColumnarToRow (149)
   +- CometProject (148)
      +- CometFilter (147)
         +- CometScan parquet spark_catalog.default.date_dim (146)


(146) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#216, d_year#217]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(147) CometFilter
Input [2]: [d_date_sk#216, d_year#217]
Condition : (((isnotnull(d_year#217) AND (d_year#217 >= 1998)) AND (d_year#217 <= 2000)) AND isnotnull(d_date_sk#216))

(148) CometProject
Input [2]: [d_date_sk#216, d_year#217]
Arguments: [d_date_sk#216], [d_date_sk#216]

(149) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#216]

(150) BroadcastExchange
Input [1]: [d_date_sk#216]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:4 Hosting operator id = 137 Hosting Expression = ws_sold_date_sk#222 IN dynamicpruning#215

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (155)
+- * ColumnarToRow (154)
   +- CometProject (153)
      +- CometFilter (152)
         +- CometScan parquet spark_catalog.default.date_dim (151)


(151) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#43, d_year#233, d_moy#234]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(152) CometFilter
Input [3]: [d_date_sk#43, d_year#233, d_moy#234]
Condition : ((((isnotnull(d_year#233) AND isnotnull(d_moy#234)) AND (d_year#233 = 2000)) AND (d_moy#234 = 11)) AND isnotnull(d_date_sk#43))

(153) CometProject
Input [3]: [d_date_sk#43, d_year#233, d_moy#234]
Arguments: [d_date_sk#43], [d_date_sk#43]

(154) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#43]

(155) BroadcastExchange
Input [1]: [d_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

Subquery:6 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (160)
+- * ColumnarToRow (159)
   +- CometProject (158)
      +- CometFilter (157)
         +- CometScan parquet spark_catalog.default.date_dim (156)


(156) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#235]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(157) CometFilter
Input [2]: [d_date_sk#26, d_year#235]
Condition : (((isnotnull(d_year#235) AND (d_year#235 >= 1999)) AND (d_year#235 <= 2001)) AND isnotnull(d_date_sk#26))

(158) CometProject
Input [2]: [d_date_sk#26, d_year#235]
Arguments: [d_date_sk#26], [d_date_sk#26]

(159) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#26]

(160) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=18]

Subquery:7 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:8 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#31 IN dynamicpruning#12

Subquery:9 Hosting operator id = 81 Hosting Expression = ReusedSubquery Subquery scalar-subquery#55, [id=#56]

Subquery:10 Hosting operator id = 67 Hosting Expression = cs_sold_date_sk#60 IN dynamicpruning#5

Subquery:11 Hosting operator id = 96 Hosting Expression = ReusedSubquery Subquery scalar-subquery#55, [id=#56]

Subquery:12 Hosting operator id = 82 Hosting Expression = ws_sold_date_sk#82 IN dynamicpruning#5


