== Physical Plan ==
* CometColumnarToRow (50)
+- CometSort (49)
   +- CometColumnarExchange (48)
      +- * Filter (47)
         +- * HashAggregate (46)
            +- * CometColumnarToRow (45)
               +- CometColumnarExchange (44)
                  +- * HashAggregate (43)
                     +- * HashAggregate (42)
                        +- * CometColumnarToRow (41)
                           +- CometColumnarExchange (40)
                              +- * HashAggregate (39)
                                 +- * Project (38)
                                    +- * BroadcastHashJoin Inner BuildRight (37)
                                       :- * CometColumnarToRow (31)
                                       :  +- CometProject (30)
                                       :     +- CometBroadcastHashJoin (29)
                                       :        :- CometProject (24)
                                       :        :  +- CometBroadcastHashJoin (23)
                                       :        :     :- CometProject (18)
                                       :        :     :  +- CometBroadcastHashJoin (17)
                                       :        :     :     :- CometProject (12)
                                       :        :     :     :  +- CometSortMergeJoin (11)
                                       :        :     :     :     :- CometSort (5)
                                       :        :     :     :     :  +- CometExchange (4)
                                       :        :     :     :     :     +- CometProject (3)
                                       :        :     :     :     :        +- CometFilter (2)
                                       :        :     :     :     :           +- CometScan parquet spark_catalog.default.store_sales (1)
                                       :        :     :     :     +- CometSort (10)
                                       :        :     :     :        +- CometExchange (9)
                                       :        :     :     :           +- CometProject (8)
                                       :        :     :     :              +- CometFilter (7)
                                       :        :     :     :                 +- CometScan parquet spark_catalog.default.store_returns (6)
                                       :        :     :     +- CometBroadcastExchange (16)
                                       :        :     :        +- CometProject (15)
                                       :        :     :           +- CometFilter (14)
                                       :        :     :              +- CometScan parquet spark_catalog.default.store (13)
                                       :        :     +- CometBroadcastExchange (22)
                                       :        :        +- CometProject (21)
                                       :        :           +- CometFilter (20)
                                       :        :              +- CometScan parquet spark_catalog.default.item (19)
                                       :        +- CometBroadcastExchange (28)
                                       :           +- CometProject (27)
                                       :              +- CometFilter (26)
                                       :                 +- CometScan parquet spark_catalog.default.customer (25)
                                       +- BroadcastExchange (36)
                                          +- * CometColumnarToRow (35)
                                             +- CometProject (34)
                                                +- CometFilter (33)
                                                   +- CometScan parquet spark_catalog.default.customer_address (32)


(1) CometScan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(3) CometProject
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(4) CometExchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(5) CometSort
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST]

(6) CometScan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) CometFilter
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(8) CometProject
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_item_sk#7, sr_ticket_number#8]

(9) CometExchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(10) CometSort
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST]

(11) CometSortMergeJoin
Left output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Right output [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_ticket_number#4, ss_item_sk#1], [sr_ticket_number#8, sr_item_sk#7], Inner

(12) CometProject
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]

(13) CometScan parquet spark_catalog.default.store
Output [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(14) CometFilter
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Condition : (((isnotnull(s_market_id#12) AND (s_market_id#12 = 8)) AND isnotnull(s_store_sk#10)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_zip#14, 10, true, false, true)))

(15) CometProject
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#15, s_zip#16], [s_store_sk#10, s_store_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#13, 2, true, false, true) AS s_state#15, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_zip#14, 10, true, false, true) AS s_zip#16]

(16) CometBroadcastExchange
Input [4]: [s_store_sk#10, s_store_name#11, s_state#15, s_zip#16]
Arguments: [s_store_sk#10, s_store_name#11, s_state#15, s_zip#16]

(17) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Right output [4]: [s_store_sk#10, s_store_name#11, s_state#15, s_zip#16]
Arguments: [ss_store_sk#3], [s_store_sk#10], Inner, BuildRight

(18) CometProject
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#10, s_store_name#11, s_state#15, s_zip#16]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16], [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16]

(19) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(20) CometFilter
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_color#20, 20, true, false, true) = pale                ) AND isnotnull(i_item_sk#17))

(21) CometProject
Input [6]: [i_item_sk#17, i_current_price#18, i_size#19, i_color#20, i_units#21, i_manager_id#22]
Arguments: [i_item_sk#17, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22], [i_item_sk#17, i_current_price#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_size#19, 20, true, false, true) AS i_size#23, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_color#20, 20, true, false, true) AS i_color#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_units#21, 10, true, false, true) AS i_units#25, i_manager_id#22]

(22) CometBroadcastExchange
Input [6]: [i_item_sk#17, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22]
Arguments: [i_item_sk#17, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22]

(23) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16]
Right output [6]: [i_item_sk#17, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22]
Arguments: [ss_item_sk#1], [i_item_sk#17], Inner, BuildRight

(24) CometProject
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_item_sk#17, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22]
Arguments: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22], [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22]

(25) CometScan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29, c_birth_country#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(26) CometFilter
Input [5]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29, c_birth_country#30]
Condition : ((isnotnull(c_customer_sk#26) AND isnotnull(c_current_addr_sk#27)) AND isnotnull(c_birth_country#30))

(27) CometProject
Input [5]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29, c_birth_country#30]
Arguments: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30], [c_customer_sk#26, c_current_addr_sk#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#28, 20, true, false, true) AS c_first_name#31, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#29, 30, true, false, true) AS c_last_name#32, c_birth_country#30]

(28) CometBroadcastExchange
Input [5]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30]
Arguments: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30]

(29) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22]
Right output [5]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30]
Arguments: [ss_customer_sk#2], [c_customer_sk#26], Inner, BuildRight

(30) CometProject
Input [15]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22, c_customer_sk#26, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30]
Arguments: [ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30], [ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30]

(31) CometColumnarToRow [codegen id : 2]
Input [13]: [ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30]

(32) CometScan parquet spark_catalog.default.customer_address
Output [4]: [ca_address_sk#33, ca_state#34, ca_zip#35, ca_country#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(33) CometFilter
Input [4]: [ca_address_sk#33, ca_state#34, ca_zip#35, ca_country#36]
Condition : ((isnotnull(ca_address_sk#33) AND isnotnull(ca_country#36)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_zip#35, 10, true, false, true)))

(34) CometProject
Input [4]: [ca_address_sk#33, ca_state#34, ca_zip#35, ca_country#36]
Arguments: [ca_address_sk#33, ca_state#37, ca_zip#38, ca_country#36], [ca_address_sk#33, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#34, 2, true, false, true) AS ca_state#37, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_zip#35, 10, true, false, true) AS ca_zip#38, ca_country#36]

(35) CometColumnarToRow [codegen id : 1]
Input [4]: [ca_address_sk#33, ca_state#37, ca_zip#38, ca_country#36]

(36) BroadcastExchange
Input [4]: [ca_address_sk#33, ca_state#37, ca_zip#38, ca_country#36]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], upper(input[3, string, true]), input[2, string, true]),false), [plan_id=3]

(37) BroadcastHashJoin [codegen id : 2]
Left keys [3]: [c_current_addr_sk#27, c_birth_country#30, s_zip#16]
Right keys [3]: [ca_address_sk#33, upper(ca_country#36), ca_zip#38]
Join type: Inner
Join condition: None

(38) Project [codegen id : 2]
Output [11]: [ss_net_paid#5, s_store_name#11, s_state#15, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22, c_first_name#31, c_last_name#32, ca_state#37]
Input [17]: [ss_net_paid#5, s_store_name#11, s_state#15, s_zip#16, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22, c_current_addr_sk#27, c_first_name#31, c_last_name#32, c_birth_country#30, ca_address_sk#33, ca_state#37, ca_zip#38, ca_country#36]

(39) HashAggregate [codegen id : 2]
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#15, i_current_price#18, i_size#23, i_color#24, i_units#25, i_manager_id#22, c_first_name#31, c_last_name#32, ca_state#37]
Keys [10]: [c_last_name#32, c_first_name#31, s_store_name#11, ca_state#37, s_state#15, i_color#24, i_current_price#18, i_manager_id#22, i_units#25, i_size#23]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#39]
Results [11]: [c_last_name#32, c_first_name#31, s_store_name#11, ca_state#37, s_state#15, i_color#24, i_current_price#18, i_manager_id#22, i_units#25, i_size#23, sum#40]

(40) CometColumnarExchange
Input [11]: [c_last_name#32, c_first_name#31, s_store_name#11, ca_state#37, s_state#15, i_color#24, i_current_price#18, i_manager_id#22, i_units#25, i_size#23, sum#40]
Arguments: hashpartitioning(c_last_name#32, c_first_name#31, s_store_name#11, ca_state#37, s_state#15, i_color#24, i_current_price#18, i_manager_id#22, i_units#25, i_size#23, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(41) CometColumnarToRow [codegen id : 3]
Input [11]: [c_last_name#32, c_first_name#31, s_store_name#11, ca_state#37, s_state#15, i_color#24, i_current_price#18, i_manager_id#22, i_units#25, i_size#23, sum#40]

(42) HashAggregate [codegen id : 3]
Input [11]: [c_last_name#32, c_first_name#31, s_store_name#11, ca_state#37, s_state#15, i_color#24, i_current_price#18, i_manager_id#22, i_units#25, i_size#23, sum#40]
Keys [10]: [c_last_name#32, c_first_name#31, s_store_name#11, ca_state#37, s_state#15, i_color#24, i_current_price#18, i_manager_id#22, i_units#25, i_size#23]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#41]
Results [4]: [c_last_name#32, c_first_name#31, s_store_name#11, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#41,17,2) AS netpaid#42]

(43) HashAggregate [codegen id : 3]
Input [4]: [c_last_name#32, c_first_name#31, s_store_name#11, netpaid#42]
Keys [3]: [c_last_name#32, c_first_name#31, s_store_name#11]
Functions [1]: [partial_sum(netpaid#42)]
Aggregate Attributes [2]: [sum#43, isEmpty#44]
Results [5]: [c_last_name#32, c_first_name#31, s_store_name#11, sum#45, isEmpty#46]

(44) CometColumnarExchange
Input [5]: [c_last_name#32, c_first_name#31, s_store_name#11, sum#45, isEmpty#46]
Arguments: hashpartitioning(c_last_name#32, c_first_name#31, s_store_name#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(45) CometColumnarToRow [codegen id : 4]
Input [5]: [c_last_name#32, c_first_name#31, s_store_name#11, sum#45, isEmpty#46]

(46) HashAggregate [codegen id : 4]
Input [5]: [c_last_name#32, c_first_name#31, s_store_name#11, sum#45, isEmpty#46]
Keys [3]: [c_last_name#32, c_first_name#31, s_store_name#11]
Functions [1]: [sum(netpaid#42)]
Aggregate Attributes [1]: [sum(netpaid#42)#47]
Results [4]: [c_last_name#32, c_first_name#31, s_store_name#11, sum(netpaid#42)#47 AS paid#48]

(47) Filter [codegen id : 4]
Input [4]: [c_last_name#32, c_first_name#31, s_store_name#11, paid#48]
Condition : (isnotnull(paid#48) AND (cast(paid#48 as decimal(33,8)) > cast(Subquery scalar-subquery#49, [id=#50] as decimal(33,8))))

(48) CometColumnarExchange
Input [4]: [c_last_name#32, c_first_name#31, s_store_name#11, paid#48]
Arguments: rangepartitioning(c_last_name#32 ASC NULLS FIRST, c_first_name#31 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(49) CometSort
Input [4]: [c_last_name#32, c_first_name#31, s_store_name#11, paid#48]
Arguments: [c_last_name#32, c_first_name#31, s_store_name#11, paid#48], [c_last_name#32 ASC NULLS FIRST, c_first_name#31 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST]

(50) CometColumnarToRow [codegen id : 5]
Input [4]: [c_last_name#32, c_first_name#31, s_store_name#11, paid#48]

===== Subqueries =====

Subquery:1 Hosting operator id = 47 Hosting Expression = Subquery scalar-subquery#49, [id=#50]
* HashAggregate (80)
+- * CometColumnarToRow (79)
   +- CometColumnarExchange (78)
      +- * HashAggregate (77)
         +- * HashAggregate (76)
            +- * CometColumnarToRow (75)
               +- CometColumnarExchange (74)
                  +- * HashAggregate (73)
                     +- * Project (72)
                        +- * BroadcastHashJoin Inner BuildRight (71)
                           :- * CometColumnarToRow (69)
                           :  +- CometProject (68)
                           :     +- CometBroadcastHashJoin (67)
                           :        :- CometProject (65)
                           :        :  +- CometBroadcastHashJoin (64)
                           :        :     :- CometProject (59)
                           :        :     :  +- CometBroadcastHashJoin (58)
                           :        :     :     :- CometProject (56)
                           :        :     :     :  +- CometSortMergeJoin (55)
                           :        :     :     :     :- CometSort (52)
                           :        :     :     :     :  +- ReusedExchange (51)
                           :        :     :     :     +- CometSort (54)
                           :        :     :     :        +- ReusedExchange (53)
                           :        :     :     +- ReusedExchange (57)
                           :        :     +- CometBroadcastExchange (63)
                           :        :        +- CometProject (62)
                           :        :           +- CometFilter (61)
                           :        :              +- CometScan parquet spark_catalog.default.item (60)
                           :        +- ReusedExchange (66)
                           +- ReusedExchange (70)


(51) ReusedExchange [Reuses operator id: 4]
Output [5]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55]

(52) CometSort
Input [5]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55]
Arguments: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55], [ss_ticket_number#54 ASC NULLS FIRST, ss_item_sk#51 ASC NULLS FIRST]

(53) ReusedExchange [Reuses operator id: 9]
Output [2]: [sr_item_sk#56, sr_ticket_number#57]

(54) CometSort
Input [2]: [sr_item_sk#56, sr_ticket_number#57]
Arguments: [sr_item_sk#56, sr_ticket_number#57], [sr_ticket_number#57 ASC NULLS FIRST, sr_item_sk#56 ASC NULLS FIRST]

(55) CometSortMergeJoin
Left output [5]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55]
Right output [2]: [sr_item_sk#56, sr_ticket_number#57]
Arguments: [ss_ticket_number#54, ss_item_sk#51], [sr_ticket_number#57, sr_item_sk#56], Inner

(56) CometProject
Input [7]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_ticket_number#54, ss_net_paid#55, sr_item_sk#56, sr_ticket_number#57]
Arguments: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_net_paid#55], [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_net_paid#55]

(57) ReusedExchange [Reuses operator id: 16]
Output [4]: [s_store_sk#58, s_store_name#59, s_state#60, s_zip#61]

(58) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_net_paid#55]
Right output [4]: [s_store_sk#58, s_store_name#59, s_state#60, s_zip#61]
Arguments: [ss_store_sk#53], [s_store_sk#58], Inner, BuildRight

(59) CometProject
Input [8]: [ss_item_sk#51, ss_customer_sk#52, ss_store_sk#53, ss_net_paid#55, s_store_sk#58, s_store_name#59, s_state#60, s_zip#61]
Arguments: [ss_item_sk#51, ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61], [ss_item_sk#51, ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61]

(60) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(61) CometFilter
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Condition : isnotnull(i_item_sk#62)

(62) CometProject
Input [6]: [i_item_sk#62, i_current_price#63, i_size#64, i_color#65, i_units#66, i_manager_id#67]
Arguments: [i_item_sk#62, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67], [i_item_sk#62, i_current_price#63, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_size#64, 20, true, false, true) AS i_size#68, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_color#65, 20, true, false, true) AS i_color#69, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_units#66, 10, true, false, true) AS i_units#70, i_manager_id#67]

(63) CometBroadcastExchange
Input [6]: [i_item_sk#62, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67]
Arguments: [i_item_sk#62, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67]

(64) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#51, ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61]
Right output [6]: [i_item_sk#62, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67]
Arguments: [ss_item_sk#51], [i_item_sk#62], Inner, BuildRight

(65) CometProject
Input [12]: [ss_item_sk#51, ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_item_sk#62, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67]
Arguments: [ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67], [ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67]

(66) ReusedExchange [Reuses operator id: 28]
Output [5]: [c_customer_sk#71, c_current_addr_sk#72, c_first_name#73, c_last_name#74, c_birth_country#75]

(67) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67]
Right output [5]: [c_customer_sk#71, c_current_addr_sk#72, c_first_name#73, c_last_name#74, c_birth_country#75]
Arguments: [ss_customer_sk#52], [c_customer_sk#71], Inner, BuildRight

(68) CometProject
Input [15]: [ss_customer_sk#52, ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67, c_customer_sk#71, c_current_addr_sk#72, c_first_name#73, c_last_name#74, c_birth_country#75]
Arguments: [ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67, c_current_addr_sk#72, c_first_name#73, c_last_name#74, c_birth_country#75], [ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67, c_current_addr_sk#72, c_first_name#73, c_last_name#74, c_birth_country#75]

(69) CometColumnarToRow [codegen id : 2]
Input [13]: [ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67, c_current_addr_sk#72, c_first_name#73, c_last_name#74, c_birth_country#75]

(70) ReusedExchange [Reuses operator id: 36]
Output [4]: [ca_address_sk#76, ca_state#77, ca_zip#78, ca_country#79]

(71) BroadcastHashJoin [codegen id : 2]
Left keys [3]: [c_current_addr_sk#72, c_birth_country#75, s_zip#61]
Right keys [3]: [ca_address_sk#76, upper(ca_country#79), ca_zip#78]
Join type: Inner
Join condition: None

(72) Project [codegen id : 2]
Output [11]: [ss_net_paid#55, s_store_name#59, s_state#60, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67, c_first_name#73, c_last_name#74, ca_state#77]
Input [17]: [ss_net_paid#55, s_store_name#59, s_state#60, s_zip#61, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67, c_current_addr_sk#72, c_first_name#73, c_last_name#74, c_birth_country#75, ca_address_sk#76, ca_state#77, ca_zip#78, ca_country#79]

(73) HashAggregate [codegen id : 2]
Input [11]: [ss_net_paid#55, s_store_name#59, s_state#60, i_current_price#63, i_size#68, i_color#69, i_units#70, i_manager_id#67, c_first_name#73, c_last_name#74, ca_state#77]
Keys [10]: [c_last_name#74, c_first_name#73, s_store_name#59, ca_state#77, s_state#60, i_color#69, i_current_price#63, i_manager_id#67, i_units#70, i_size#68]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#55))]
Aggregate Attributes [1]: [sum#80]
Results [11]: [c_last_name#74, c_first_name#73, s_store_name#59, ca_state#77, s_state#60, i_color#69, i_current_price#63, i_manager_id#67, i_units#70, i_size#68, sum#81]

(74) CometColumnarExchange
Input [11]: [c_last_name#74, c_first_name#73, s_store_name#59, ca_state#77, s_state#60, i_color#69, i_current_price#63, i_manager_id#67, i_units#70, i_size#68, sum#81]
Arguments: hashpartitioning(c_last_name#74, c_first_name#73, s_store_name#59, ca_state#77, s_state#60, i_color#69, i_current_price#63, i_manager_id#67, i_units#70, i_size#68, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(75) CometColumnarToRow [codegen id : 3]
Input [11]: [c_last_name#74, c_first_name#73, s_store_name#59, ca_state#77, s_state#60, i_color#69, i_current_price#63, i_manager_id#67, i_units#70, i_size#68, sum#81]

(76) HashAggregate [codegen id : 3]
Input [11]: [c_last_name#74, c_first_name#73, s_store_name#59, ca_state#77, s_state#60, i_color#69, i_current_price#63, i_manager_id#67, i_units#70, i_size#68, sum#81]
Keys [10]: [c_last_name#74, c_first_name#73, s_store_name#59, ca_state#77, s_state#60, i_color#69, i_current_price#63, i_manager_id#67, i_units#70, i_size#68]
Functions [1]: [sum(UnscaledValue(ss_net_paid#55))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#55))#41]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#55))#41,17,2) AS netpaid#82]

(77) HashAggregate [codegen id : 3]
Input [1]: [netpaid#82]
Keys: []
Functions [1]: [partial_avg(netpaid#82)]
Aggregate Attributes [2]: [sum#83, count#84]
Results [2]: [sum#85, count#86]

(78) CometColumnarExchange
Input [2]: [sum#85, count#86]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(79) CometColumnarToRow [codegen id : 4]
Input [2]: [sum#85, count#86]

(80) HashAggregate [codegen id : 4]
Input [2]: [sum#85, count#86]
Keys: []
Functions [1]: [avg(netpaid#82)]
Aggregate Attributes [1]: [avg(netpaid#82)#87]
Results [1]: [(0.05 * avg(netpaid#82)#87) AS (0.05 * avg(netpaid))#88]


