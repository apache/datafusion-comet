== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- Window (40)
      +- * CometColumnarToRow (39)
         +- CometSort (38)
            +- CometExchange (37)
               +- CometHashAggregate (36)
                  +- CometColumnarExchange (35)
                     +- * HashAggregate (34)
                        +- Union (33)
                           :- * HashAggregate (18)
                           :  +- * CometColumnarToRow (17)
                           :     +- CometExchange (16)
                           :        +- CometHashAggregate (15)
                           :           +- CometProject (14)
                           :              +- CometBroadcastHashJoin (13)
                           :                 :- CometProject (8)
                           :                 :  +- CometBroadcastHashJoin (7)
                           :                 :     :- CometFilter (2)
                           :                 :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (1)
                           :                 :     +- CometBroadcastExchange (6)
                           :                 :        +- CometProject (5)
                           :                 :           +- CometFilter (4)
                           :                 :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
                           :                 +- CometBroadcastExchange (12)
                           :                    +- CometProject (11)
                           :                       +- CometFilter (10)
                           :                          +- CometNativeScan parquet spark_catalog.default.item (9)
                           :- * HashAggregate (25)
                           :  +- * CometColumnarToRow (24)
                           :     +- CometColumnarExchange (23)
                           :        +- * HashAggregate (22)
                           :           +- * HashAggregate (21)
                           :              +- * CometColumnarToRow (20)
                           :                 +- ReusedExchange (19)
                           +- * HashAggregate (32)
                              +- * CometColumnarToRow (31)
                                 +- CometColumnarExchange (30)
                                    +- * HashAggregate (29)
                                       +- * HashAggregate (28)
                                          +- * CometColumnarToRow (27)
                                             +- ReusedExchange (26)


(1) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#3)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1212)) AND (d_month_seq#5 <= 1223)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4], [d_date_sk#4]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: [d_date_sk#4]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Right output [1]: [d_date_sk#4]
Arguments: [ws_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#4]
Arguments: [ws_item_sk#1, ws_net_paid#2], [ws_item_sk#1, ws_net_paid#2]

(9) CometNativeScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#6, i_class#7, i_category#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Condition : isnotnull(i_item_sk#6)

(11) CometProject
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: [i_item_sk#6, i_class#9, i_category#10], [i_item_sk#6, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_class#7, 50)) AS i_class#9, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#8, 50)) AS i_category#10]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#6, i_class#9, i_category#10]
Arguments: [i_item_sk#6, i_class#9, i_category#10]

(13) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#1, ws_net_paid#2]
Right output [3]: [i_item_sk#6, i_class#9, i_category#10]
Arguments: [ws_item_sk#1], [i_item_sk#6], Inner, BuildRight

(14) CometProject
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#6, i_class#9, i_category#10]
Arguments: [ws_net_paid#2, i_class#9, i_category#10], [ws_net_paid#2, i_class#9, i_category#10]

(15) CometHashAggregate
Input [3]: [ws_net_paid#2, i_class#9, i_category#10]
Keys [2]: [i_category#10, i_class#9]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]

(16) CometExchange
Input [3]: [i_category#10, i_class#9, sum#11]
Arguments: hashpartitioning(i_category#10, i_class#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometColumnarToRow [codegen id : 1]
Input [3]: [i_category#10, i_class#9, sum#11]

(18) HashAggregate [codegen id : 1]
Input [3]: [i_category#10, i_class#9, sum#11]
Keys [2]: [i_category#10, i_class#9]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#12]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#12,17,2) as decimal(27,2)) AS total_sum#13, i_category#10 AS i_category#14, i_class#9 AS i_class#15, 0 AS g_category#16, 0 AS g_class#17, 0 AS lochierarchy#18]

(19) ReusedExchange [Reuses operator id: 16]
Output [3]: [i_category#19, i_class#20, sum#21]

(20) CometColumnarToRow [codegen id : 2]
Input [3]: [i_category#19, i_class#20, sum#21]

(21) HashAggregate [codegen id : 2]
Input [3]: [i_category#19, i_class#20, sum#21]
Keys [2]: [i_category#19, i_class#20]
Functions [1]: [sum(UnscaledValue(ws_net_paid#22))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#22))#12]
Results [2]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#22))#12,17,2) AS total_sum#23, i_category#19]

(22) HashAggregate [codegen id : 2]
Input [2]: [total_sum#23, i_category#19]
Keys [1]: [i_category#19]
Functions [1]: [partial_sum(total_sum#23)]
Aggregate Attributes [2]: [sum#24, isEmpty#25]
Results [3]: [i_category#19, sum#26, isEmpty#27]

(23) CometColumnarExchange
Input [3]: [i_category#19, sum#26, isEmpty#27]
Arguments: hashpartitioning(i_category#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(24) CometColumnarToRow [codegen id : 3]
Input [3]: [i_category#19, sum#26, isEmpty#27]

(25) HashAggregate [codegen id : 3]
Input [3]: [i_category#19, sum#26, isEmpty#27]
Keys [1]: [i_category#19]
Functions [1]: [sum(total_sum#23)]
Aggregate Attributes [1]: [sum(total_sum#23)#28]
Results [6]: [sum(total_sum#23)#28 AS total_sum#29, i_category#19, null AS i_class#30, 0 AS g_category#31, 1 AS g_class#32, 1 AS lochierarchy#33]

(26) ReusedExchange [Reuses operator id: 16]
Output [3]: [i_category#34, i_class#35, sum#36]

(27) CometColumnarToRow [codegen id : 4]
Input [3]: [i_category#34, i_class#35, sum#36]

(28) HashAggregate [codegen id : 4]
Input [3]: [i_category#34, i_class#35, sum#36]
Keys [2]: [i_category#34, i_class#35]
Functions [1]: [sum(UnscaledValue(ws_net_paid#37))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#37))#12]
Results [1]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#37))#12,17,2) AS total_sum#38]

(29) HashAggregate [codegen id : 4]
Input [1]: [total_sum#38]
Keys: []
Functions [1]: [partial_sum(total_sum#38)]
Aggregate Attributes [2]: [sum#39, isEmpty#40]
Results [2]: [sum#41, isEmpty#42]

(30) CometColumnarExchange
Input [2]: [sum#41, isEmpty#42]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(31) CometColumnarToRow [codegen id : 5]
Input [2]: [sum#41, isEmpty#42]

(32) HashAggregate [codegen id : 5]
Input [2]: [sum#41, isEmpty#42]
Keys: []
Functions [1]: [sum(total_sum#38)]
Aggregate Attributes [1]: [sum(total_sum#38)#43]
Results [6]: [sum(total_sum#38)#43 AS total_sum#44, null AS i_category#45, null AS i_class#46, 1 AS g_category#47, 1 AS g_class#48, 2 AS lochierarchy#49]

(33) Union

(34) HashAggregate [codegen id : 6]
Input [6]: [total_sum#13, i_category#14, i_class#15, g_category#16, g_class#17, lochierarchy#18]
Keys [6]: [total_sum#13, i_category#14, i_class#15, g_category#16, g_class#17, lochierarchy#18]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#13, i_category#14, i_class#15, g_category#16, g_class#17, lochierarchy#18]

(35) CometColumnarExchange
Input [6]: [total_sum#13, i_category#14, i_class#15, g_category#16, g_class#17, lochierarchy#18]
Arguments: hashpartitioning(total_sum#13, i_category#14, i_class#15, g_category#16, g_class#17, lochierarchy#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(36) CometHashAggregate
Input [6]: [total_sum#13, i_category#14, i_class#15, g_category#16, g_class#17, lochierarchy#18]
Keys [6]: [total_sum#13, i_category#14, i_class#15, g_category#16, g_class#17, lochierarchy#18]
Functions: []

(37) CometExchange
Input [5]: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, _w0#50]
Arguments: hashpartitioning(lochierarchy#18, _w0#50, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(38) CometSort
Input [5]: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, _w0#50]
Arguments: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, _w0#50], [lochierarchy#18 ASC NULLS FIRST, _w0#50 ASC NULLS FIRST, total_sum#13 DESC NULLS LAST]

(39) CometColumnarToRow [codegen id : 7]
Input [5]: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, _w0#50]

(40) Window
Input [5]: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, _w0#50]
Arguments: [rank(total_sum#13) windowspecdefinition(lochierarchy#18, _w0#50, total_sum#13 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#51], [lochierarchy#18, _w0#50], [total_sum#13 DESC NULLS LAST]

(41) Project [codegen id : 8]
Output [5]: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, rank_within_parent#51]
Input [6]: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, _w0#50, rank_within_parent#51]

(42) TakeOrderedAndProject
Input [5]: [total_sum#13, i_category#14, i_class#15, lochierarchy#18, rank_within_parent#51]
Arguments: 100, [lochierarchy#18 DESC NULLS LAST, CASE WHEN (lochierarchy#18 = 0) THEN i_category#14 END ASC NULLS FIRST, rank_within_parent#51 ASC NULLS FIRST], [total_sum#13, i_category#14, i_class#15, lochierarchy#18, rank_within_parent#51]

