== Physical Plan ==
* CometColumnarToRow (124)
+- CometTakeOrderedAndProject (123)
   +- CometHashAggregate (122)
      +- CometColumnarExchange (121)
         +- * HashAggregate (120)
            +- Union (119)
               :- * HashAggregate (104)
               :  +- * CometColumnarToRow (103)
               :     +- CometColumnarExchange (102)
               :        +- * HashAggregate (101)
               :           +- Union (100)
               :              :- * HashAggregate (39)
               :              :  +- * CometColumnarToRow (38)
               :              :     +- CometExchange (37)
               :              :        +- CometHashAggregate (36)
               :              :           +- CometProject (35)
               :              :              +- CometBroadcastHashJoin (34)
               :              :                 :- CometProject (29)
               :              :                 :  +- CometBroadcastHashJoin (28)
               :              :                 :     :- CometProject (23)
               :              :                 :     :  +- CometBroadcastHashJoin (22)
               :              :                 :     :     :- CometProject (17)
               :              :                 :     :     :  +- CometBroadcastHashJoin (16)
               :              :                 :     :     :     :- CometProject (11)
               :              :                 :     :     :     :  +- CometSortMergeJoin (10)
               :              :                 :     :     :     :     :- CometSort (4)
               :              :                 :     :     :     :     :  +- CometExchange (3)
               :              :                 :     :     :     :     :     +- CometFilter (2)
               :              :                 :     :     :     :     :        +- CometNativeScan parquet spark_catalog.default.store_sales (1)
               :              :                 :     :     :     :     +- CometSort (9)
               :              :                 :     :     :     :        +- CometExchange (8)
               :              :                 :     :     :     :           +- CometProject (7)
               :              :                 :     :     :     :              +- CometFilter (6)
               :              :                 :     :     :     :                 +- CometNativeScan parquet spark_catalog.default.store_returns (5)
               :              :                 :     :     :     +- CometBroadcastExchange (15)
               :              :                 :     :     :        +- CometProject (14)
               :              :                 :     :     :           +- CometFilter (13)
               :              :                 :     :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (12)
               :              :                 :     :     +- CometBroadcastExchange (21)
               :              :                 :     :        +- CometProject (20)
               :              :                 :     :           +- CometFilter (19)
               :              :                 :     :              +- CometNativeScan parquet spark_catalog.default.store (18)
               :              :                 :     +- CometBroadcastExchange (27)
               :              :                 :        +- CometProject (26)
               :              :                 :           +- CometFilter (25)
               :              :                 :              +- CometNativeScan parquet spark_catalog.default.item (24)
               :              :                 +- CometBroadcastExchange (33)
               :              :                    +- CometProject (32)
               :              :                       +- CometFilter (31)
               :              :                          +- CometNativeScan parquet spark_catalog.default.promotion (30)
               :              :- * HashAggregate (69)
               :              :  +- * CometColumnarToRow (68)
               :              :     +- CometExchange (67)
               :              :        +- CometHashAggregate (66)
               :              :           +- CometProject (65)
               :              :              +- CometBroadcastHashJoin (64)
               :              :                 :- CometProject (62)
               :              :                 :  +- CometBroadcastHashJoin (61)
               :              :                 :     :- CometProject (59)
               :              :                 :     :  +- CometBroadcastHashJoin (58)
               :              :                 :     :     :- CometProject (53)
               :              :                 :     :     :  +- CometBroadcastHashJoin (52)
               :              :                 :     :     :     :- CometProject (50)
               :              :                 :     :     :     :  +- CometSortMergeJoin (49)
               :              :                 :     :     :     :     :- CometSort (43)
               :              :                 :     :     :     :     :  +- CometExchange (42)
               :              :                 :     :     :     :     :     +- CometFilter (41)
               :              :                 :     :     :     :     :        +- CometNativeScan parquet spark_catalog.default.catalog_sales (40)
               :              :                 :     :     :     :     +- CometSort (48)
               :              :                 :     :     :     :        +- CometExchange (47)
               :              :                 :     :     :     :           +- CometProject (46)
               :              :                 :     :     :     :              +- CometFilter (45)
               :              :                 :     :     :     :                 +- CometNativeScan parquet spark_catalog.default.catalog_returns (44)
               :              :                 :     :     :     +- ReusedExchange (51)
               :              :                 :     :     +- CometBroadcastExchange (57)
               :              :                 :     :        +- CometProject (56)
               :              :                 :     :           +- CometFilter (55)
               :              :                 :     :              +- CometNativeScan parquet spark_catalog.default.catalog_page (54)
               :              :                 :     +- ReusedExchange (60)
               :              :                 +- ReusedExchange (63)
               :              +- * HashAggregate (99)
               :                 +- * CometColumnarToRow (98)
               :                    +- CometExchange (97)
               :                       +- CometHashAggregate (96)
               :                          +- CometProject (95)
               :                             +- CometBroadcastHashJoin (94)
               :                                :- CometProject (92)
               :                                :  +- CometBroadcastHashJoin (91)
               :                                :     :- CometProject (89)
               :                                :     :  +- CometBroadcastHashJoin (88)
               :                                :     :     :- CometProject (83)
               :                                :     :     :  +- CometBroadcastHashJoin (82)
               :                                :     :     :     :- CometProject (80)
               :                                :     :     :     :  +- CometSortMergeJoin (79)
               :                                :     :     :     :     :- CometSort (73)
               :                                :     :     :     :     :  +- CometExchange (72)
               :                                :     :     :     :     :     +- CometFilter (71)
               :                                :     :     :     :     :        +- CometNativeScan parquet spark_catalog.default.web_sales (70)
               :                                :     :     :     :     +- CometSort (78)
               :                                :     :     :     :        +- CometExchange (77)
               :                                :     :     :     :           +- CometProject (76)
               :                                :     :     :     :              +- CometFilter (75)
               :                                :     :     :     :                 +- CometNativeScan parquet spark_catalog.default.web_returns (74)
               :                                :     :     :     +- ReusedExchange (81)
               :                                :     :     +- CometBroadcastExchange (87)
               :                                :     :        +- CometProject (86)
               :                                :     :           +- CometFilter (85)
               :                                :     :              +- CometNativeScan parquet spark_catalog.default.web_site (84)
               :                                :     +- ReusedExchange (90)
               :                                +- ReusedExchange (93)
               :- * HashAggregate (111)
               :  +- * CometColumnarToRow (110)
               :     +- CometColumnarExchange (109)
               :        +- * HashAggregate (108)
               :           +- * HashAggregate (107)
               :              +- * CometColumnarToRow (106)
               :                 +- ReusedExchange (105)
               +- * HashAggregate (118)
                  +- * CometColumnarToRow (117)
                     +- CometColumnarExchange (116)
                        +- * HashAggregate (115)
                           +- * HashAggregate (114)
                              +- * CometColumnarToRow (113)
                                 +- ReusedExchange (112)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7], [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST]

(5) CometNativeScan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) CometFilter
Input [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Condition : (isnotnull(sr_item_sk#8) AND isnotnull(sr_ticket_number#9))

(7) CometProject
Input [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11], [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]

(8) CometExchange
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: hashpartitioning(sr_item_sk#8, sr_ticket_number#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11], [sr_item_sk#8 ASC NULLS FIRST, sr_ticket_number#9 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#8, sr_ticket_number#9], LeftOuter

(11) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11]

(12) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_date#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) CometFilter
Input [2]: [d_date_sk#13, d_date#14]
Condition : (((isnotnull(d_date#14) AND (d_date#14 >= 1998-08-04)) AND (d_date#14 <= 1998-09-03)) AND isnotnull(d_date_sk#13))

(14) CometProject
Input [2]: [d_date_sk#13, d_date#14]
Arguments: [d_date_sk#13], [d_date_sk#13]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: [d_date_sk#13]

(16) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11]
Right output [1]: [d_date_sk#13]
Arguments: [ss_sold_date_sk#7], [d_date_sk#13], Inner, BuildRight

(17) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11, d_date_sk#13]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11]

(18) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_store_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(19) CometFilter
Input [2]: [s_store_sk#15, s_store_id#16]
Condition : isnotnull(s_store_sk#15)

(20) CometProject
Input [2]: [s_store_sk#15, s_store_id#16]
Arguments: [s_store_sk#15, s_store_id#17], [s_store_sk#15, static_invoke(CharVarcharCodegenUtils.readSidePadding(s_store_id#16, 16)) AS s_store_id#17]

(21) CometBroadcastExchange
Input [2]: [s_store_sk#15, s_store_id#17]
Arguments: [s_store_sk#15, s_store_id#17]

(22) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11]
Right output [2]: [s_store_sk#15, s_store_id#17]
Arguments: [ss_store_sk#2], [s_store_sk#15], Inner, BuildRight

(23) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_sk#15, s_store_id#17]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]

(24) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_current_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(25) CometFilter
Input [2]: [i_item_sk#18, i_current_price#19]
Condition : ((isnotnull(i_current_price#19) AND (i_current_price#19 > 50.00)) AND isnotnull(i_item_sk#18))

(26) CometProject
Input [2]: [i_item_sk#18, i_current_price#19]
Arguments: [i_item_sk#18], [i_item_sk#18]

(27) CometBroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: [i_item_sk#18]

(28) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]
Right output [1]: [i_item_sk#18]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(29) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17, i_item_sk#18]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]

(30) CometNativeScan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#20, p_channel_tv#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(31) CometFilter
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Condition : ((isnotnull(p_channel_tv#21) AND (static_invoke(CharVarcharCodegenUtils.readSidePadding(p_channel_tv#21, 1)) = N)) AND isnotnull(p_promo_sk#20))

(32) CometProject
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Arguments: [p_promo_sk#20], [p_promo_sk#20]

(33) CometBroadcastExchange
Input [1]: [p_promo_sk#20]
Arguments: [p_promo_sk#20]

(34) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]
Right output [1]: [p_promo_sk#20]
Arguments: [ss_promo_sk#3], [p_promo_sk#20], Inner, BuildRight

(35) CometProject
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17, p_promo_sk#20]
Arguments: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17], [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]

(36) CometHashAggregate
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]
Keys [1]: [s_store_id#17]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))]

(37) CometExchange
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Arguments: hashpartitioning(s_store_id#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(38) CometColumnarToRow [codegen id : 1]
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]

(39) HashAggregate [codegen id : 1]
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Keys [1]: [s_store_id#17]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#27, sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00))#28, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))#29]
Results [5]: [store channel AS channel#30, concat(store, s_store_id#17) AS id#31, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#27,17,2) AS sales#32, sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00))#28 AS returns#33, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))#29 AS profit#34]

(40) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#41)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(41) CometFilter
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Condition : ((isnotnull(cs_catalog_page_sk#35) AND isnotnull(cs_item_sk#36)) AND isnotnull(cs_promo_sk#37))

(42) CometExchange
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Arguments: hashpartitioning(cs_item_sk#36, cs_order_number#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(43) CometSort
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41], [cs_item_sk#36 ASC NULLS FIRST, cs_order_number#38 ASC NULLS FIRST]

(44) CometNativeScan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45, cr_returned_date_sk#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(45) CometFilter
Input [5]: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45, cr_returned_date_sk#46]
Condition : (isnotnull(cr_item_sk#42) AND isnotnull(cr_order_number#43))

(46) CometProject
Input [5]: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45, cr_returned_date_sk#46]
Arguments: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45], [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45]

(47) CometExchange
Input [4]: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45]
Arguments: hashpartitioning(cr_item_sk#42, cr_order_number#43, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(48) CometSort
Input [4]: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45]
Arguments: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45], [cr_item_sk#42 ASC NULLS FIRST, cr_order_number#43 ASC NULLS FIRST]

(49) CometSortMergeJoin
Left output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Right output [4]: [cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45]
Arguments: [cs_item_sk#36, cs_order_number#38], [cr_item_sk#42, cr_order_number#43], LeftOuter

(50) CometProject
Input [11]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_item_sk#42, cr_order_number#43, cr_return_amount#44, cr_net_loss#45]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#44, cr_net_loss#45], [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#44, cr_net_loss#45]

(51) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#47]

(52) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#44, cr_net_loss#45]
Right output [1]: [d_date_sk#47]
Arguments: [cs_sold_date_sk#41], [d_date_sk#47], Inner, BuildRight

(53) CometProject
Input [9]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#44, cr_net_loss#45, d_date_sk#47]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45], [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45]

(54) CometNativeScan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#48, cp_catalog_page_id#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(55) CometFilter
Input [2]: [cp_catalog_page_sk#48, cp_catalog_page_id#49]
Condition : isnotnull(cp_catalog_page_sk#48)

(56) CometProject
Input [2]: [cp_catalog_page_sk#48, cp_catalog_page_id#49]
Arguments: [cp_catalog_page_sk#48, cp_catalog_page_id#50], [cp_catalog_page_sk#48, static_invoke(CharVarcharCodegenUtils.readSidePadding(cp_catalog_page_id#49, 16)) AS cp_catalog_page_id#50]

(57) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#48, cp_catalog_page_id#50]
Arguments: [cp_catalog_page_sk#48, cp_catalog_page_id#50]

(58) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45]
Right output [2]: [cp_catalog_page_sk#48, cp_catalog_page_id#50]
Arguments: [cs_catalog_page_sk#35], [cp_catalog_page_sk#48], Inner, BuildRight

(59) CometProject
Input [9]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_sk#48, cp_catalog_page_id#50]
Arguments: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50], [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50]

(60) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#51]

(61) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50]
Right output [1]: [i_item_sk#51]
Arguments: [cs_item_sk#36], [i_item_sk#51], Inner, BuildRight

(62) CometProject
Input [8]: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50, i_item_sk#51]
Arguments: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50], [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50]

(63) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#52]

(64) CometBroadcastHashJoin
Left output [6]: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50]
Right output [1]: [p_promo_sk#52]
Arguments: [cs_promo_sk#37], [p_promo_sk#52], Inner, BuildRight

(65) CometProject
Input [7]: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50, p_promo_sk#52]
Arguments: [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50], [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50]

(66) CometHashAggregate
Input [5]: [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#44, cr_net_loss#45, cp_catalog_page_id#50]
Keys [1]: [cp_catalog_page_id#50]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#39)), partial_sum(coalesce(cast(cr_return_amount#44 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#45 as decimal(12,2)), 0.00)))]

(67) CometExchange
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Arguments: hashpartitioning(cp_catalog_page_id#50, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(68) CometColumnarToRow [codegen id : 2]
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]

(69) HashAggregate [codegen id : 2]
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Keys [1]: [cp_catalog_page_id#50]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#39)), sum(coalesce(cast(cr_return_amount#44 as decimal(12,2)), 0.00)), sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#45 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#39))#58, sum(coalesce(cast(cr_return_amount#44 as decimal(12,2)), 0.00))#59, sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#45 as decimal(12,2)), 0.00)))#60]
Results [5]: [catalog channel AS channel#61, concat(catalog_page, cp_catalog_page_id#50) AS id#62, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#39))#58,17,2) AS sales#63, sum(coalesce(cast(cr_return_amount#44 as decimal(12,2)), 0.00))#59 AS returns#64, sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#45 as decimal(12,2)), 0.00)))#60 AS profit#65]

(70) CometNativeScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#72)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(71) CometFilter
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Condition : ((isnotnull(ws_web_site_sk#67) AND isnotnull(ws_item_sk#66)) AND isnotnull(ws_promo_sk#68))

(72) CometExchange
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Arguments: hashpartitioning(ws_item_sk#66, ws_order_number#69, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(73) CometSort
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72], [ws_item_sk#66 ASC NULLS FIRST, ws_order_number#69 ASC NULLS FIRST]

(74) CometNativeScan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76, wr_returned_date_sk#77]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(75) CometFilter
Input [5]: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76, wr_returned_date_sk#77]
Condition : (isnotnull(wr_item_sk#73) AND isnotnull(wr_order_number#74))

(76) CometProject
Input [5]: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76, wr_returned_date_sk#77]
Arguments: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76], [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76]

(77) CometExchange
Input [4]: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76]
Arguments: hashpartitioning(wr_item_sk#73, wr_order_number#74, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(78) CometSort
Input [4]: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76]
Arguments: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76], [wr_item_sk#73 ASC NULLS FIRST, wr_order_number#74 ASC NULLS FIRST]

(79) CometSortMergeJoin
Left output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Right output [4]: [wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76]
Arguments: [ws_item_sk#66, ws_order_number#69], [wr_item_sk#73, wr_order_number#74], LeftOuter

(80) CometProject
Input [11]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_item_sk#73, wr_order_number#74, wr_return_amt#75, wr_net_loss#76]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#75, wr_net_loss#76], [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#75, wr_net_loss#76]

(81) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#78]

(82) CometBroadcastHashJoin
Left output [8]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#75, wr_net_loss#76]
Right output [1]: [d_date_sk#78]
Arguments: [ws_sold_date_sk#72], [d_date_sk#78], Inner, BuildRight

(83) CometProject
Input [9]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#75, wr_net_loss#76, d_date_sk#78]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76], [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76]

(84) CometNativeScan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#79, web_site_id#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(85) CometFilter
Input [2]: [web_site_sk#79, web_site_id#80]
Condition : isnotnull(web_site_sk#79)

(86) CometProject
Input [2]: [web_site_sk#79, web_site_id#80]
Arguments: [web_site_sk#79, web_site_id#81], [web_site_sk#79, static_invoke(CharVarcharCodegenUtils.readSidePadding(web_site_id#80, 16)) AS web_site_id#81]

(87) CometBroadcastExchange
Input [2]: [web_site_sk#79, web_site_id#81]
Arguments: [web_site_sk#79, web_site_id#81]

(88) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76]
Right output [2]: [web_site_sk#79, web_site_id#81]
Arguments: [ws_web_site_sk#67], [web_site_sk#79], Inner, BuildRight

(89) CometProject
Input [9]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_sk#79, web_site_id#81]
Arguments: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81], [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81]

(90) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#82]

(91) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81]
Right output [1]: [i_item_sk#82]
Arguments: [ws_item_sk#66], [i_item_sk#82], Inner, BuildRight

(92) CometProject
Input [8]: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81, i_item_sk#82]
Arguments: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81], [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81]

(93) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#83]

(94) CometBroadcastHashJoin
Left output [6]: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81]
Right output [1]: [p_promo_sk#83]
Arguments: [ws_promo_sk#68], [p_promo_sk#83], Inner, BuildRight

(95) CometProject
Input [7]: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81, p_promo_sk#83]
Arguments: [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81], [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81]

(96) CometHashAggregate
Input [5]: [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#75, wr_net_loss#76, web_site_id#81]
Keys [1]: [web_site_id#81]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#70)), partial_sum(coalesce(cast(wr_return_amt#75 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#76 as decimal(12,2)), 0.00)))]

(97) CometExchange
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]
Arguments: hashpartitioning(web_site_id#81, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(98) CometColumnarToRow [codegen id : 3]
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]

(99) HashAggregate [codegen id : 3]
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]
Keys [1]: [web_site_id#81]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#70)), sum(coalesce(cast(wr_return_amt#75 as decimal(12,2)), 0.00)), sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#76 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#70))#89, sum(coalesce(cast(wr_return_amt#75 as decimal(12,2)), 0.00))#90, sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#76 as decimal(12,2)), 0.00)))#91]
Results [5]: [web channel AS channel#92, concat(web_site, web_site_id#81) AS id#93, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#70))#89,17,2) AS sales#94, sum(coalesce(cast(wr_return_amt#75 as decimal(12,2)), 0.00))#90 AS returns#95, sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#76 as decimal(12,2)), 0.00)))#91 AS profit#96]

(100) Union

(101) HashAggregate [codegen id : 4]
Input [5]: [channel#30, id#31, sales#32, returns#33, profit#34]
Keys [2]: [channel#30, id#31]
Functions [3]: [partial_sum(sales#32), partial_sum(returns#33), partial_sum(profit#34)]
Aggregate Attributes [6]: [sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102]
Results [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(102) CometColumnarExchange
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Arguments: hashpartitioning(channel#30, id#31, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(103) CometColumnarToRow [codegen id : 5]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(104) HashAggregate [codegen id : 5]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [2]: [channel#30, id#31]
Functions [3]: [sum(sales#32), sum(returns#33), sum(profit#34)]
Aggregate Attributes [3]: [sum(sales#32)#109, sum(returns#33)#110, sum(profit#34)#111]
Results [5]: [channel#30, id#31, cast(sum(sales#32)#109 as decimal(37,2)) AS sales#112, cast(sum(returns#33)#110 as decimal(38,2)) AS returns#113, cast(sum(profit#34)#111 as decimal(38,2)) AS profit#114]

(105) ReusedExchange [Reuses operator id: 102]
Output [8]: [channel#115, id#116, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]

(106) CometColumnarToRow [codegen id : 10]
Input [8]: [channel#115, id#116, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]

(107) HashAggregate [codegen id : 10]
Input [8]: [channel#115, id#116, sum#117, isEmpty#118, sum#119, isEmpty#120, sum#121, isEmpty#122]
Keys [2]: [channel#115, id#116]
Functions [3]: [sum(sales#123), sum(returns#124), sum(profit#125)]
Aggregate Attributes [3]: [sum(sales#123)#109, sum(returns#124)#110, sum(profit#125)#111]
Results [4]: [channel#115, sum(sales#123)#109 AS sales#126, sum(returns#124)#110 AS returns#127, sum(profit#125)#111 AS profit#128]

(108) HashAggregate [codegen id : 10]
Input [4]: [channel#115, sales#126, returns#127, profit#128]
Keys [1]: [channel#115]
Functions [3]: [partial_sum(sales#126), partial_sum(returns#127), partial_sum(profit#128)]
Aggregate Attributes [6]: [sum#129, isEmpty#130, sum#131, isEmpty#132, sum#133, isEmpty#134]
Results [7]: [channel#115, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(109) CometColumnarExchange
Input [7]: [channel#115, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Arguments: hashpartitioning(channel#115, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(110) CometColumnarToRow [codegen id : 11]
Input [7]: [channel#115, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(111) HashAggregate [codegen id : 11]
Input [7]: [channel#115, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Keys [1]: [channel#115]
Functions [3]: [sum(sales#126), sum(returns#127), sum(profit#128)]
Aggregate Attributes [3]: [sum(sales#126)#141, sum(returns#127)#142, sum(profit#128)#143]
Results [5]: [channel#115, null AS id#144, sum(sales#126)#141 AS sales#145, sum(returns#127)#142 AS returns#146, sum(profit#128)#143 AS profit#147]

(112) ReusedExchange [Reuses operator id: 102]
Output [8]: [channel#148, id#149, sum#150, isEmpty#151, sum#152, isEmpty#153, sum#154, isEmpty#155]

(113) CometColumnarToRow [codegen id : 16]
Input [8]: [channel#148, id#149, sum#150, isEmpty#151, sum#152, isEmpty#153, sum#154, isEmpty#155]

(114) HashAggregate [codegen id : 16]
Input [8]: [channel#148, id#149, sum#150, isEmpty#151, sum#152, isEmpty#153, sum#154, isEmpty#155]
Keys [2]: [channel#148, id#149]
Functions [3]: [sum(sales#156), sum(returns#157), sum(profit#158)]
Aggregate Attributes [3]: [sum(sales#156)#109, sum(returns#157)#110, sum(profit#158)#111]
Results [3]: [sum(sales#156)#109 AS sales#159, sum(returns#157)#110 AS returns#160, sum(profit#158)#111 AS profit#161]

(115) HashAggregate [codegen id : 16]
Input [3]: [sales#159, returns#160, profit#161]
Keys: []
Functions [3]: [partial_sum(sales#159), partial_sum(returns#160), partial_sum(profit#161)]
Aggregate Attributes [6]: [sum#162, isEmpty#163, sum#164, isEmpty#165, sum#166, isEmpty#167]
Results [6]: [sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]

(116) CometColumnarExchange
Input [6]: [sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(117) CometColumnarToRow [codegen id : 17]
Input [6]: [sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]

(118) HashAggregate [codegen id : 17]
Input [6]: [sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]
Keys: []
Functions [3]: [sum(sales#159), sum(returns#160), sum(profit#161)]
Aggregate Attributes [3]: [sum(sales#159)#174, sum(returns#160)#175, sum(profit#161)#176]
Results [5]: [null AS channel#177, null AS id#178, sum(sales#159)#174 AS sales#179, sum(returns#160)#175 AS returns#180, sum(profit#161)#176 AS profit#181]

(119) Union

(120) HashAggregate [codegen id : 18]
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Keys [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#30, id#31, sales#112, returns#113, profit#114]

(121) CometColumnarExchange
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Arguments: hashpartitioning(channel#30, id#31, sales#112, returns#113, profit#114, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(122) CometHashAggregate
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Keys [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Functions: []

(123) CometTakeOrderedAndProject
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#30 ASC NULLS FIRST,id#31 ASC NULLS FIRST], output=[channel#30,id#31,sales#112,returns#113,profit#114]), [channel#30, id#31, sales#112, returns#113, profit#114], 100, 0, [channel#30 ASC NULLS FIRST, id#31 ASC NULLS FIRST], [channel#30, id#31, sales#112, returns#113, profit#114]

(124) CometColumnarToRow [codegen id : 19]
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]

