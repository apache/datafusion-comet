== Physical Plan ==
TakeOrderedAndProject (84)
+- * BroadcastHashJoin Inner BuildRight (83)
   :- * Filter (66)
   :  +- * HashAggregate (65)
   :     +- Exchange (64)
   :        +- * HashAggregate (63)
   :           +- * Project (62)
   :              +- * BroadcastHashJoin Inner BuildRight (61)
   :                 :- * Project (59)
   :                 :  +- * BroadcastHashJoin Inner BuildRight (58)
   :                 :     :- * BroadcastHashJoin LeftSemi BuildRight (51)
   :                 :     :  :- * ColumnarToRow (3)
   :                 :     :  :  +- CometFilter (2)
   :                 :     :  :     +- CometScan parquet spark_catalog.default.store_sales (1)
   :                 :     :  +- BroadcastExchange (50)
   :                 :     :     +- * Project (49)
   :                 :     :        +- * BroadcastHashJoin Inner BuildRight (48)
   :                 :     :           :- * ColumnarToRow (6)
   :                 :     :           :  +- CometFilter (5)
   :                 :     :           :     +- CometScan parquet spark_catalog.default.item (4)
   :                 :     :           +- BroadcastExchange (47)
   :                 :     :              +- * BroadcastHashJoin LeftSemi BuildRight (46)
   :                 :     :                 :- * HashAggregate (35)
   :                 :     :                 :  +- Exchange (34)
   :                 :     :                 :     +- * ColumnarToRow (33)
   :                 :     :                 :        +- CometHashAggregate (32)
   :                 :     :                 :           +- CometProject (31)
   :                 :     :                 :              +- CometBroadcastHashJoin (30)
   :                 :     :                 :                 :- CometProject (28)
   :                 :     :                 :                 :  +- CometBroadcastHashJoin (27)
   :                 :     :                 :                 :     :- CometFilter (8)
   :                 :     :                 :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (7)
   :                 :     :                 :                 :     +- CometBroadcastExchange (26)
   :                 :     :                 :                 :        +- CometBroadcastHashJoin (25)
   :                 :     :                 :                 :           :- CometFilter (10)
   :                 :     :                 :                 :           :  +- CometScan parquet spark_catalog.default.item (9)
   :                 :     :                 :                 :           +- CometBroadcastExchange (24)
   :                 :     :                 :                 :              +- CometProject (23)
   :                 :     :                 :                 :                 +- CometBroadcastHashJoin (22)
   :                 :     :                 :                 :                    :- CometProject (17)
   :                 :     :                 :                 :                    :  +- CometBroadcastHashJoin (16)
   :                 :     :                 :                 :                    :     :- CometFilter (12)
   :                 :     :                 :                 :                    :     :  +- CometScan parquet spark_catalog.default.catalog_sales (11)
   :                 :     :                 :                 :                    :     +- CometBroadcastExchange (15)
   :                 :     :                 :                 :                    :        +- CometFilter (14)
   :                 :     :                 :                 :                    :           +- CometScan parquet spark_catalog.default.item (13)
   :                 :     :                 :                 :                    +- CometBroadcastExchange (21)
   :                 :     :                 :                 :                       +- CometProject (20)
   :                 :     :                 :                 :                          +- CometFilter (19)
   :                 :     :                 :                 :                             +- CometScan parquet spark_catalog.default.date_dim (18)
   :                 :     :                 :                 +- ReusedExchange (29)
   :                 :     :                 +- BroadcastExchange (45)
   :                 :     :                    +- * ColumnarToRow (44)
   :                 :     :                       +- CometProject (43)
   :                 :     :                          +- CometBroadcastHashJoin (42)
   :                 :     :                             :- CometProject (40)
   :                 :     :                             :  +- CometBroadcastHashJoin (39)
   :                 :     :                             :     :- CometFilter (37)
   :                 :     :                             :     :  +- CometScan parquet spark_catalog.default.web_sales (36)
   :                 :     :                             :     +- ReusedExchange (38)
   :                 :     :                             +- ReusedExchange (41)
   :                 :     +- BroadcastExchange (57)
   :                 :        +- * BroadcastHashJoin LeftSemi BuildRight (56)
   :                 :           :- * ColumnarToRow (54)
   :                 :           :  +- CometFilter (53)
   :                 :           :     +- CometScan parquet spark_catalog.default.item (52)
   :                 :           +- ReusedExchange (55)
   :                 +- ReusedExchange (60)
   +- BroadcastExchange (82)
      +- * Filter (81)
         +- * HashAggregate (80)
            +- Exchange (79)
               +- * HashAggregate (78)
                  +- * Project (77)
                     +- * BroadcastHashJoin Inner BuildRight (76)
                        :- * Project (74)
                        :  +- * BroadcastHashJoin Inner BuildRight (73)
                        :     :- * BroadcastHashJoin LeftSemi BuildRight (71)
                        :     :  :- * ColumnarToRow (69)
                        :     :  :  +- CometFilter (68)
                        :     :  :     +- CometScan parquet spark_catalog.default.store_sales (67)
                        :     :  +- ReusedExchange (70)
                        :     +- ReusedExchange (72)
                        +- ReusedExchange (75)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) ColumnarToRow [codegen id : 11]
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(5) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(6) ColumnarToRow [codegen id : 4]
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]

(7) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(8) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(9) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(10) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(11) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(12) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(13) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(14) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(15) CometBroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(16) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Right output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_item_sk#17], [i_item_sk#20], Inner, BuildRight

(17) CometProject
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23], [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]

(18) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(19) CometFilter
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1998)) AND (d_year#25 <= 2000)) AND isnotnull(d_date_sk#24))

(20) CometProject
Input [2]: [d_date_sk#24, d_year#25]
Arguments: [d_date_sk#24], [d_date_sk#24]

(21) CometBroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: [d_date_sk#24]

(22) CometBroadcastHashJoin
Left output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#18], [d_date_sk#24], Inner, BuildRight

(23) CometProject
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23], [i_brand_id#21, i_class_id#22, i_category_id#23]

(24) CometBroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23]

(25) CometBroadcastHashJoin
Left output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)], [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)], LeftSemi, BuildRight

(26) CometBroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(27) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Right output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_item_sk#10], [i_item_sk#13], Inner, BuildRight

(28) CometProject
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16], [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]

(29) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#26]

(30) CometBroadcastHashJoin
Left output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [1]: [d_date_sk#26]
Arguments: [ss_sold_date_sk#11], [d_date_sk#26], Inner, BuildRight

(31) CometProject
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#26]
Arguments: [brand_id#27, class_id#28, category_id#29], [i_brand_id#14 AS brand_id#27, i_class_id#15 AS class_id#28, i_category_id#16 AS category_id#29]

(32) CometHashAggregate
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []

(33) ColumnarToRow [codegen id : 1]
Input [3]: [brand_id#27, class_id#28, category_id#29]

(34) Exchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: hashpartitioning(brand_id#27, class_id#28, category_id#29, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(35) HashAggregate [codegen id : 3]
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []
Aggregate Attributes: []
Results [3]: [brand_id#27, class_id#28, category_id#29]

(36) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#31), dynamicpruningexpression(ws_sold_date_sk#31 IN dynamicpruning#32)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(37) CometFilter
Input [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Condition : isnotnull(ws_item_sk#30)

(38) ReusedExchange [Reuses operator id: 15]
Output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]

(39) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Right output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_item_sk#30], [i_item_sk#33], Inner, BuildRight

(40) CometProject
Input [6]: [ws_item_sk#30, ws_sold_date_sk#31, i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36], [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]

(41) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#37]

(42) CometBroadcastHashJoin
Left output [4]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]
Right output [1]: [d_date_sk#37]
Arguments: [ws_sold_date_sk#31], [d_date_sk#37], Inner, BuildRight

(43) CometProject
Input [5]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36, d_date_sk#37]
Arguments: [i_brand_id#34, i_class_id#35, i_category_id#36], [i_brand_id#34, i_class_id#35, i_category_id#36]

(44) ColumnarToRow [codegen id : 2]
Input [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]

(45) BroadcastExchange
Input [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: HashedRelationBroadcastMode(List(coalesce(input[0, int, true], 0), isnull(input[0, int, true]), coalesce(input[1, int, true], 0), isnull(input[1, int, true]), coalesce(input[2, int, true], 0), isnull(input[2, int, true])),false), [plan_id=2]

(46) BroadcastHashJoin [codegen id : 3]
Left keys [6]: [coalesce(brand_id#27, 0), isnull(brand_id#27), coalesce(class_id#28, 0), isnull(class_id#28), coalesce(category_id#29, 0), isnull(category_id#29)]
Right keys [6]: [coalesce(i_brand_id#34, 0), isnull(i_brand_id#34), coalesce(i_class_id#35, 0), isnull(i_class_id#35), coalesce(i_category_id#36, 0), isnull(i_category_id#36)]
Join type: LeftSemi
Join condition: None

(47) BroadcastExchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: HashedRelationBroadcastMode(List(input[0, int, true], input[1, int, true], input[2, int, true]),false), [plan_id=3]

(48) BroadcastHashJoin [codegen id : 4]
Left keys [3]: [i_brand_id#7, i_class_id#8, i_category_id#9]
Right keys [3]: [brand_id#27, class_id#28, category_id#29]
Join type: Inner
Join condition: None

(49) Project [codegen id : 4]
Output [1]: [i_item_sk#6 AS ss_item_sk#38]
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#27, class_id#28, category_id#29]

(50) BroadcastExchange
Input [1]: [ss_item_sk#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(51) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(52) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(53) CometFilter
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Condition : (((isnotnull(i_item_sk#39) AND isnotnull(i_brand_id#40)) AND isnotnull(i_class_id#41)) AND isnotnull(i_category_id#42))

(54) ColumnarToRow [codegen id : 9]
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(55) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#38]

(56) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [i_item_sk#39]
Right keys [1]: [ss_item_sk#38]
Join type: LeftSemi
Join condition: None

(57) BroadcastExchange
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(58) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#39]
Join type: Inner
Join condition: None

(59) Project [codegen id : 11]
Output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42]
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(60) ReusedExchange [Reuses operator id: 106]
Output [1]: [d_date_sk#43]

(61) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#4]
Right keys [1]: [d_date_sk#43]
Join type: Inner
Join condition: None

(62) Project [codegen id : 11]
Output [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42, d_date_sk#43]

(63) HashAggregate [codegen id : 11]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#44, isEmpty#45, count#46]
Results [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]

(64) Exchange
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]
Arguments: hashpartitioning(i_brand_id#40, i_class_id#41, i_category_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(65) HashAggregate [codegen id : 24]
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#47, isEmpty#48, count#49]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#50, count(1)#51]
Results [6]: [store AS channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#50 AS sales#53, count(1)#51 AS number_sales#54]

(66) Filter [codegen id : 24]
Input [6]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sales#53, number_sales#54]
Condition : (isnotnull(sales#53) AND (cast(sales#53 as decimal(32,6)) > cast(Subquery scalar-subquery#55, [id=#56] as decimal(32,6))))

(67) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#57, ss_quantity#58, ss_list_price#59, ss_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#60), dynamicpruningexpression(ss_sold_date_sk#60 IN dynamicpruning#61)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(68) CometFilter
Input [4]: [ss_item_sk#57, ss_quantity#58, ss_list_price#59, ss_sold_date_sk#60]
Condition : isnotnull(ss_item_sk#57)

(69) ColumnarToRow [codegen id : 22]
Input [4]: [ss_item_sk#57, ss_quantity#58, ss_list_price#59, ss_sold_date_sk#60]

(70) ReusedExchange [Reuses operator id: 50]
Output [1]: [ss_item_sk#62]

(71) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ss_item_sk#57]
Right keys [1]: [ss_item_sk#62]
Join type: LeftSemi
Join condition: None

(72) ReusedExchange [Reuses operator id: 57]
Output [4]: [i_item_sk#63, i_brand_id#64, i_class_id#65, i_category_id#66]

(73) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ss_item_sk#57]
Right keys [1]: [i_item_sk#63]
Join type: Inner
Join condition: None

(74) Project [codegen id : 22]
Output [6]: [ss_quantity#58, ss_list_price#59, ss_sold_date_sk#60, i_brand_id#64, i_class_id#65, i_category_id#66]
Input [8]: [ss_item_sk#57, ss_quantity#58, ss_list_price#59, ss_sold_date_sk#60, i_item_sk#63, i_brand_id#64, i_class_id#65, i_category_id#66]

(75) ReusedExchange [Reuses operator id: 120]
Output [1]: [d_date_sk#67]

(76) BroadcastHashJoin [codegen id : 22]
Left keys [1]: [ss_sold_date_sk#60]
Right keys [1]: [d_date_sk#67]
Join type: Inner
Join condition: None

(77) Project [codegen id : 22]
Output [5]: [ss_quantity#58, ss_list_price#59, i_brand_id#64, i_class_id#65, i_category_id#66]
Input [7]: [ss_quantity#58, ss_list_price#59, ss_sold_date_sk#60, i_brand_id#64, i_class_id#65, i_category_id#66, d_date_sk#67]

(78) HashAggregate [codegen id : 22]
Input [5]: [ss_quantity#58, ss_list_price#59, i_brand_id#64, i_class_id#65, i_category_id#66]
Keys [3]: [i_brand_id#64, i_class_id#65, i_category_id#66]
Functions [2]: [partial_sum((cast(ss_quantity#58 as decimal(10,0)) * ss_list_price#59)), partial_count(1)]
Aggregate Attributes [3]: [sum#68, isEmpty#69, count#70]
Results [6]: [i_brand_id#64, i_class_id#65, i_category_id#66, sum#71, isEmpty#72, count#73]

(79) Exchange
Input [6]: [i_brand_id#64, i_class_id#65, i_category_id#66, sum#71, isEmpty#72, count#73]
Arguments: hashpartitioning(i_brand_id#64, i_class_id#65, i_category_id#66, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(80) HashAggregate [codegen id : 23]
Input [6]: [i_brand_id#64, i_class_id#65, i_category_id#66, sum#71, isEmpty#72, count#73]
Keys [3]: [i_brand_id#64, i_class_id#65, i_category_id#66]
Functions [2]: [sum((cast(ss_quantity#58 as decimal(10,0)) * ss_list_price#59)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#58 as decimal(10,0)) * ss_list_price#59))#74, count(1)#75]
Results [6]: [store AS channel#76, i_brand_id#64, i_class_id#65, i_category_id#66, sum((cast(ss_quantity#58 as decimal(10,0)) * ss_list_price#59))#74 AS sales#77, count(1)#75 AS number_sales#78]

(81) Filter [codegen id : 23]
Input [6]: [channel#76, i_brand_id#64, i_class_id#65, i_category_id#66, sales#77, number_sales#78]
Condition : (isnotnull(sales#77) AND (cast(sales#77 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#55, [id=#56] as decimal(32,6))))

(82) BroadcastExchange
Input [6]: [channel#76, i_brand_id#64, i_class_id#65, i_category_id#66, sales#77, number_sales#78]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=8]

(83) BroadcastHashJoin [codegen id : 24]
Left keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Right keys [3]: [i_brand_id#64, i_class_id#65, i_category_id#66]
Join type: Inner
Join condition: None

(84) TakeOrderedAndProject
Input [12]: [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sales#53, number_sales#54, channel#76, i_brand_id#64, i_class_id#65, i_category_id#66, sales#77, number_sales#78]
Arguments: 100, [i_brand_id#40 ASC NULLS FIRST, i_class_id#41 ASC NULLS FIRST, i_category_id#42 ASC NULLS FIRST], [channel#52, i_brand_id#40, i_class_id#41, i_category_id#42, sales#53, number_sales#54, channel#76, i_brand_id#64, i_class_id#65, i_category_id#66, sales#77, number_sales#78]

===== Subqueries =====

Subquery:1 Hosting operator id = 66 Hosting Expression = Subquery scalar-subquery#55, [id=#56]
* HashAggregate (101)
+- Exchange (100)
   +- * HashAggregate (99)
      +- * ColumnarToRow (98)
         +- CometUnion (97)
            :- CometProject (88)
            :  +- CometBroadcastHashJoin (87)
            :     :- CometScan parquet spark_catalog.default.store_sales (85)
            :     +- ReusedExchange (86)
            :- CometProject (92)
            :  +- CometBroadcastHashJoin (91)
            :     :- CometScan parquet spark_catalog.default.catalog_sales (89)
            :     +- ReusedExchange (90)
            +- CometProject (96)
               +- CometBroadcastHashJoin (95)
                  :- CometScan parquet spark_catalog.default.web_sales (93)
                  +- ReusedExchange (94)


(85) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#79, ss_list_price#80, ss_sold_date_sk#81]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#81), dynamicpruningexpression(ss_sold_date_sk#81 IN dynamicpruning#82)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(86) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#83]

(87) CometBroadcastHashJoin
Left output [3]: [ss_quantity#79, ss_list_price#80, ss_sold_date_sk#81]
Right output [1]: [d_date_sk#83]
Arguments: [ss_sold_date_sk#81], [d_date_sk#83], Inner, BuildRight

(88) CometProject
Input [4]: [ss_quantity#79, ss_list_price#80, ss_sold_date_sk#81, d_date_sk#83]
Arguments: [quantity#84, list_price#85], [ss_quantity#79 AS quantity#84, ss_list_price#80 AS list_price#85]

(89) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#86, cs_list_price#87, cs_sold_date_sk#88]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#88), dynamicpruningexpression(cs_sold_date_sk#88 IN dynamicpruning#89)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(90) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#90]

(91) CometBroadcastHashJoin
Left output [3]: [cs_quantity#86, cs_list_price#87, cs_sold_date_sk#88]
Right output [1]: [d_date_sk#90]
Arguments: [cs_sold_date_sk#88], [d_date_sk#90], Inner, BuildRight

(92) CometProject
Input [4]: [cs_quantity#86, cs_list_price#87, cs_sold_date_sk#88, d_date_sk#90]
Arguments: [quantity#91, list_price#92], [cs_quantity#86 AS quantity#91, cs_list_price#87 AS list_price#92]

(93) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#95), dynamicpruningexpression(ws_sold_date_sk#95 IN dynamicpruning#96)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(94) ReusedExchange [Reuses operator id: 21]
Output [1]: [d_date_sk#97]

(95) CometBroadcastHashJoin
Left output [3]: [ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95]
Right output [1]: [d_date_sk#97]
Arguments: [ws_sold_date_sk#95], [d_date_sk#97], Inner, BuildRight

(96) CometProject
Input [4]: [ws_quantity#93, ws_list_price#94, ws_sold_date_sk#95, d_date_sk#97]
Arguments: [quantity#98, list_price#99], [ws_quantity#93 AS quantity#98, ws_list_price#94 AS list_price#99]

(97) CometUnion
Child 0 Input [2]: [quantity#84, list_price#85]
Child 1 Input [2]: [quantity#91, list_price#92]
Child 2 Input [2]: [quantity#98, list_price#99]

(98) ColumnarToRow [codegen id : 1]
Input [2]: [quantity#84, list_price#85]

(99) HashAggregate [codegen id : 1]
Input [2]: [quantity#84, list_price#85]
Keys: []
Functions [1]: [partial_avg((cast(quantity#84 as decimal(10,0)) * list_price#85))]
Aggregate Attributes [2]: [sum#100, count#101]
Results [2]: [sum#102, count#103]

(100) Exchange
Input [2]: [sum#102, count#103]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(101) HashAggregate [codegen id : 2]
Input [2]: [sum#102, count#103]
Keys: []
Functions [1]: [avg((cast(quantity#84 as decimal(10,0)) * list_price#85))]
Aggregate Attributes [1]: [avg((cast(quantity#84 as decimal(10,0)) * list_price#85))#104]
Results [1]: [avg((cast(quantity#84 as decimal(10,0)) * list_price#85))#104 AS average_sales#105]

Subquery:2 Hosting operator id = 85 Hosting Expression = ss_sold_date_sk#81 IN dynamicpruning#12

Subquery:3 Hosting operator id = 89 Hosting Expression = cs_sold_date_sk#88 IN dynamicpruning#12

Subquery:4 Hosting operator id = 93 Hosting Expression = ws_sold_date_sk#95 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (106)
+- * ColumnarToRow (105)
   +- CometProject (104)
      +- CometFilter (103)
         +- CometScan parquet spark_catalog.default.date_dim (102)


(102) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#43, d_week_seq#106]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#107), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(103) CometFilter
Input [2]: [d_date_sk#43, d_week_seq#106]
Condition : ((isnotnull(d_week_seq#106) AND (d_week_seq#106 = ReusedSubquery Subquery scalar-subquery#107, [id=#108])) AND isnotnull(d_date_sk#43))

(104) CometProject
Input [2]: [d_date_sk#43, d_week_seq#106]
Arguments: [d_date_sk#43], [d_date_sk#43]

(105) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#43]

(106) BroadcastExchange
Input [1]: [d_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]

Subquery:6 Hosting operator id = 103 Hosting Expression = ReusedSubquery Subquery scalar-subquery#107, [id=#108]

Subquery:7 Hosting operator id = 102 Hosting Expression = Subquery scalar-subquery#107, [id=#108]
* ColumnarToRow (110)
+- CometProject (109)
   +- CometFilter (108)
      +- CometScan parquet spark_catalog.default.date_dim (107)


(107) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#109, d_year#110, d_moy#111, d_dom#112]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(108) CometFilter
Input [4]: [d_week_seq#109, d_year#110, d_moy#111, d_dom#112]
Condition : (((((isnotnull(d_year#110) AND isnotnull(d_moy#111)) AND isnotnull(d_dom#112)) AND (d_year#110 = 1999)) AND (d_moy#111 = 12)) AND (d_dom#112 = 16))

(109) CometProject
Input [4]: [d_week_seq#109, d_year#110, d_moy#111, d_dom#112]
Arguments: [d_week_seq#109], [d_week_seq#109]

(110) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#109]

Subquery:8 Hosting operator id = 7 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (115)
+- * ColumnarToRow (114)
   +- CometProject (113)
      +- CometFilter (112)
         +- CometScan parquet spark_catalog.default.date_dim (111)


(111) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#113]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1998), LessThanOrEqual(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(112) CometFilter
Input [2]: [d_date_sk#26, d_year#113]
Condition : (((isnotnull(d_year#113) AND (d_year#113 >= 1998)) AND (d_year#113 <= 2000)) AND isnotnull(d_date_sk#26))

(113) CometProject
Input [2]: [d_date_sk#26, d_year#113]
Arguments: [d_date_sk#26], [d_date_sk#26]

(114) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#26]

(115) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:9 Hosting operator id = 11 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:10 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#31 IN dynamicpruning#12

Subquery:11 Hosting operator id = 81 Hosting Expression = ReusedSubquery Subquery scalar-subquery#55, [id=#56]

Subquery:12 Hosting operator id = 67 Hosting Expression = ss_sold_date_sk#60 IN dynamicpruning#61
BroadcastExchange (120)
+- * ColumnarToRow (119)
   +- CometProject (118)
      +- CometFilter (117)
         +- CometScan parquet spark_catalog.default.date_dim (116)


(116) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#67, d_week_seq#114]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#115), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(117) CometFilter
Input [2]: [d_date_sk#67, d_week_seq#114]
Condition : ((isnotnull(d_week_seq#114) AND (d_week_seq#114 = ReusedSubquery Subquery scalar-subquery#115, [id=#116])) AND isnotnull(d_date_sk#67))

(118) CometProject
Input [2]: [d_date_sk#67, d_week_seq#114]
Arguments: [d_date_sk#67], [d_date_sk#67]

(119) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#67]

(120) BroadcastExchange
Input [1]: [d_date_sk#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:13 Hosting operator id = 117 Hosting Expression = ReusedSubquery Subquery scalar-subquery#115, [id=#116]

Subquery:14 Hosting operator id = 116 Hosting Expression = Subquery scalar-subquery#115, [id=#116]
* ColumnarToRow (124)
+- CometProject (123)
   +- CometFilter (122)
      +- CometScan parquet spark_catalog.default.date_dim (121)


(121) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1998), EqualTo(d_moy,12), EqualTo(d_dom,16)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(122) CometFilter
Input [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Condition : (((((isnotnull(d_year#118) AND isnotnull(d_moy#119)) AND isnotnull(d_dom#120)) AND (d_year#118 = 1998)) AND (d_moy#119 = 12)) AND (d_dom#120 = 16))

(123) CometProject
Input [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Arguments: [d_week_seq#117], [d_week_seq#117]

(124) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#117]


