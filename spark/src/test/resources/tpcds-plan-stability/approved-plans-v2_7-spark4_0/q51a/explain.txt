== Physical Plan ==
TakeOrderedAndProject (88)
+- * Filter (87)
   +- * HashAggregate (86)
      +- * HashAggregate (85)
         +- * Project (84)
            +- * BroadcastHashJoin Inner BuildRight (83)
               :- Window (76)
               :  +- * ColumnarToRow (75)
               :     +- CometSort (74)
               :        +- CometColumnarExchange (73)
               :           +- CometProject (72)
               :              +- CometFilter (71)
               :                 +- CometSortMergeJoin (70)
               :                    :- CometSort (36)
               :                    :  +- CometColumnarExchange (35)
               :                    :     +- RowToColumnar (34)
               :                    :        +- * HashAggregate (33)
               :                    :           +- * ColumnarToRow (32)
               :                    :              +- CometColumnarExchange (31)
               :                    :                 +- RowToColumnar (30)
               :                    :                    +- * HashAggregate (29)
               :                    :                       +- * Project (28)
               :                    :                          +- * BroadcastHashJoin Inner BuildRight (27)
               :                    :                             :- * Project (20)
               :                    :                             :  +- Window (19)
               :                    :                             :     +- * ColumnarToRow (18)
               :                    :                             :        +- CometSort (17)
               :                    :                             :           +- CometColumnarExchange (16)
               :                    :                             :              +- RowToColumnar (15)
               :                    :                             :                 +- * HashAggregate (14)
               :                    :                             :                    +- * ColumnarToRow (13)
               :                    :                             :                       +- CometColumnarExchange (12)
               :                    :                             :                          +- RowToColumnar (11)
               :                    :                             :                             +- * HashAggregate (10)
               :                    :                             :                                +- * ColumnarToRow (9)
               :                    :                             :                                   +- CometProject (8)
               :                    :                             :                                      +- CometBroadcastHashJoin (7)
               :                    :                             :                                         :- CometFilter (2)
               :                    :                             :                                         :  +- CometScan parquet spark_catalog.default.web_sales (1)
               :                    :                             :                                         +- CometBroadcastExchange (6)
               :                    :                             :                                            +- CometProject (5)
               :                    :                             :                                               +- CometFilter (4)
               :                    :                             :                                                  +- CometScan parquet spark_catalog.default.date_dim (3)
               :                    :                             +- BroadcastExchange (26)
               :                    :                                +- * Project (25)
               :                    :                                   +- Window (24)
               :                    :                                      +- * ColumnarToRow (23)
               :                    :                                         +- CometSort (22)
               :                    :                                            +- ReusedExchange (21)
               :                    +- CometSort (69)
               :                       +- CometColumnarExchange (68)
               :                          +- RowToColumnar (67)
               :                             +- * HashAggregate (66)
               :                                +- * ColumnarToRow (65)
               :                                   +- CometColumnarExchange (64)
               :                                      +- RowToColumnar (63)
               :                                         +- * HashAggregate (62)
               :                                            +- * Project (61)
               :                                               +- * BroadcastHashJoin Inner BuildRight (60)
               :                                                  :- * Project (53)
               :                                                  :  +- Window (52)
               :                                                  :     +- * ColumnarToRow (51)
               :                                                  :        +- CometSort (50)
               :                                                  :           +- CometColumnarExchange (49)
               :                                                  :              +- RowToColumnar (48)
               :                                                  :                 +- * HashAggregate (47)
               :                                                  :                    +- * ColumnarToRow (46)
               :                                                  :                       +- CometColumnarExchange (45)
               :                                                  :                          +- RowToColumnar (44)
               :                                                  :                             +- * HashAggregate (43)
               :                                                  :                                +- * ColumnarToRow (42)
               :                                                  :                                   +- CometProject (41)
               :                                                  :                                      +- CometBroadcastHashJoin (40)
               :                                                  :                                         :- CometFilter (38)
               :                                                  :                                         :  +- CometScan parquet spark_catalog.default.store_sales (37)
               :                                                  :                                         +- ReusedExchange (39)
               :                                                  +- BroadcastExchange (59)
               :                                                     +- * Project (58)
               :                                                        +- Window (57)
               :                                                           +- * ColumnarToRow (56)
               :                                                              +- CometSort (55)
               :                                                                 +- ReusedExchange (54)
               +- BroadcastExchange (82)
                  +- * Project (81)
                     +- Window (80)
                        +- * ColumnarToRow (79)
                           +- CometSort (78)
                              +- ReusedExchange (77)


(1) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(4) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: [d_date_sk#5, d_date#6]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Right output [2]: [d_date_sk#5, d_date#6]
Arguments: [ws_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]
Arguments: [ws_item_sk#1, ws_sales_price#2, d_date#6], [ws_item_sk#1, ws_sales_price#2, d_date#6]

(9) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]

(10) HashAggregate [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [ws_item_sk#1, d_date#6, sum#9]

(11) RowToColumnar
Input [3]: [ws_item_sk#1, d_date#6, sum#9]

(12) CometColumnarExchange
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(13) ColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, d_date#6, sum#9]

(14) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#10]
Results [4]: [ws_item_sk#1 AS item_sk#11, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#10,17,2) AS sumws#12, ws_item_sk#1]

(15) RowToColumnar
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]

(16) CometColumnarExchange
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(17) CometSort
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(18) ColumnarToRow [codegen id : 3]
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]

(19) Window
Input [4]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#13], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(20) Project [codegen id : 8]
Output [4]: [item_sk#11, d_date#6, sumws#12, rk#13]
Input [5]: [item_sk#11, d_date#6, sumws#12, ws_item_sk#1, rk#13]

(21) ReusedExchange [Reuses operator id: 16]
Output [4]: [item_sk#14, d_date#15, sumws#16, ws_item_sk#17]

(22) CometSort
Input [4]: [item_sk#14, d_date#15, sumws#16, ws_item_sk#17]
Arguments: [item_sk#14, d_date#15, sumws#16, ws_item_sk#17], [ws_item_sk#17 ASC NULLS FIRST, d_date#15 ASC NULLS FIRST]

(23) ColumnarToRow [codegen id : 6]
Input [4]: [item_sk#14, d_date#15, sumws#16, ws_item_sk#17]

(24) Window
Input [4]: [item_sk#14, d_date#15, sumws#16, ws_item_sk#17]
Arguments: [row_number() windowspecdefinition(ws_item_sk#17, d_date#15 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#18], [ws_item_sk#17], [d_date#15 ASC NULLS FIRST]

(25) Project [codegen id : 7]
Output [3]: [item_sk#14, sumws#16, rk#18]
Input [5]: [item_sk#14, d_date#15, sumws#16, ws_item_sk#17, rk#18]

(26) BroadcastExchange
Input [3]: [item_sk#14, sumws#16, rk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(27) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [item_sk#11]
Right keys [1]: [item_sk#14]
Join type: Inner
Join condition: (rk#13 >= rk#18)

(28) Project [codegen id : 8]
Output [4]: [item_sk#11, d_date#6, sumws#12, sumws#16]
Input [7]: [item_sk#11, d_date#6, sumws#12, rk#13, item_sk#14, sumws#16, rk#18]

(29) HashAggregate [codegen id : 8]
Input [4]: [item_sk#11, d_date#6, sumws#12, sumws#16]
Keys [3]: [item_sk#11, d_date#6, sumws#12]
Functions [1]: [partial_sum(sumws#16)]
Aggregate Attributes [2]: [sum#19, isEmpty#20]
Results [5]: [item_sk#11, d_date#6, sumws#12, sum#21, isEmpty#22]

(30) RowToColumnar
Input [5]: [item_sk#11, d_date#6, sumws#12, sum#21, isEmpty#22]

(31) CometColumnarExchange
Input [5]: [item_sk#11, d_date#6, sumws#12, sum#21, isEmpty#22]
Arguments: hashpartitioning(item_sk#11, d_date#6, sumws#12, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(32) ColumnarToRow [codegen id : 9]
Input [5]: [item_sk#11, d_date#6, sumws#12, sum#21, isEmpty#22]

(33) HashAggregate [codegen id : 9]
Input [5]: [item_sk#11, d_date#6, sumws#12, sum#21, isEmpty#22]
Keys [3]: [item_sk#11, d_date#6, sumws#12]
Functions [1]: [sum(sumws#16)]
Aggregate Attributes [1]: [sum(sumws#16)#23]
Results [3]: [item_sk#11, d_date#6, sum(sumws#16)#23 AS cume_sales#24]

(34) RowToColumnar
Input [3]: [item_sk#11, d_date#6, cume_sales#24]

(35) CometColumnarExchange
Input [3]: [item_sk#11, d_date#6, cume_sales#24]
Arguments: hashpartitioning(item_sk#11, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(36) CometSort
Input [3]: [item_sk#11, d_date#6, cume_sales#24]
Arguments: [item_sk#11, d_date#6, cume_sales#24], [item_sk#11 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(37) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#25, ss_sales_price#26, ss_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#27), dynamicpruningexpression(ss_sold_date_sk#27 IN dynamicpruning#28)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(38) CometFilter
Input [3]: [ss_item_sk#25, ss_sales_price#26, ss_sold_date_sk#27]
Condition : isnotnull(ss_item_sk#25)

(39) ReusedExchange [Reuses operator id: 6]
Output [2]: [d_date_sk#29, d_date#30]

(40) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#25, ss_sales_price#26, ss_sold_date_sk#27]
Right output [2]: [d_date_sk#29, d_date#30]
Arguments: [ss_sold_date_sk#27], [d_date_sk#29], Inner, BuildRight

(41) CometProject
Input [5]: [ss_item_sk#25, ss_sales_price#26, ss_sold_date_sk#27, d_date_sk#29, d_date#30]
Arguments: [ss_item_sk#25, ss_sales_price#26, d_date#30], [ss_item_sk#25, ss_sales_price#26, d_date#30]

(42) ColumnarToRow [codegen id : 10]
Input [3]: [ss_item_sk#25, ss_sales_price#26, d_date#30]

(43) HashAggregate [codegen id : 10]
Input [3]: [ss_item_sk#25, ss_sales_price#26, d_date#30]
Keys [2]: [ss_item_sk#25, d_date#30]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#26))]
Aggregate Attributes [1]: [sum#31]
Results [3]: [ss_item_sk#25, d_date#30, sum#32]

(44) RowToColumnar
Input [3]: [ss_item_sk#25, d_date#30, sum#32]

(45) CometColumnarExchange
Input [3]: [ss_item_sk#25, d_date#30, sum#32]
Arguments: hashpartitioning(ss_item_sk#25, d_date#30, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(46) ColumnarToRow [codegen id : 11]
Input [3]: [ss_item_sk#25, d_date#30, sum#32]

(47) HashAggregate [codegen id : 11]
Input [3]: [ss_item_sk#25, d_date#30, sum#32]
Keys [2]: [ss_item_sk#25, d_date#30]
Functions [1]: [sum(UnscaledValue(ss_sales_price#26))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#26))#33]
Results [4]: [ss_item_sk#25 AS item_sk#34, d_date#30, MakeDecimal(sum(UnscaledValue(ss_sales_price#26))#33,17,2) AS sumss#35, ss_item_sk#25]

(48) RowToColumnar
Input [4]: [item_sk#34, d_date#30, sumss#35, ss_item_sk#25]

(49) CometColumnarExchange
Input [4]: [item_sk#34, d_date#30, sumss#35, ss_item_sk#25]
Arguments: hashpartitioning(ss_item_sk#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(50) CometSort
Input [4]: [item_sk#34, d_date#30, sumss#35, ss_item_sk#25]
Arguments: [item_sk#34, d_date#30, sumss#35, ss_item_sk#25], [ss_item_sk#25 ASC NULLS FIRST, d_date#30 ASC NULLS FIRST]

(51) ColumnarToRow [codegen id : 12]
Input [4]: [item_sk#34, d_date#30, sumss#35, ss_item_sk#25]

(52) Window
Input [4]: [item_sk#34, d_date#30, sumss#35, ss_item_sk#25]
Arguments: [row_number() windowspecdefinition(ss_item_sk#25, d_date#30 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#36], [ss_item_sk#25], [d_date#30 ASC NULLS FIRST]

(53) Project [codegen id : 17]
Output [4]: [item_sk#34, d_date#30, sumss#35, rk#36]
Input [5]: [item_sk#34, d_date#30, sumss#35, ss_item_sk#25, rk#36]

(54) ReusedExchange [Reuses operator id: 49]
Output [4]: [item_sk#37, d_date#38, sumss#39, ss_item_sk#40]

(55) CometSort
Input [4]: [item_sk#37, d_date#38, sumss#39, ss_item_sk#40]
Arguments: [item_sk#37, d_date#38, sumss#39, ss_item_sk#40], [ss_item_sk#40 ASC NULLS FIRST, d_date#38 ASC NULLS FIRST]

(56) ColumnarToRow [codegen id : 15]
Input [4]: [item_sk#37, d_date#38, sumss#39, ss_item_sk#40]

(57) Window
Input [4]: [item_sk#37, d_date#38, sumss#39, ss_item_sk#40]
Arguments: [row_number() windowspecdefinition(ss_item_sk#40, d_date#38 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#41], [ss_item_sk#40], [d_date#38 ASC NULLS FIRST]

(58) Project [codegen id : 16]
Output [3]: [item_sk#37, sumss#39, rk#41]
Input [5]: [item_sk#37, d_date#38, sumss#39, ss_item_sk#40, rk#41]

(59) BroadcastExchange
Input [3]: [item_sk#37, sumss#39, rk#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(60) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [item_sk#34]
Right keys [1]: [item_sk#37]
Join type: Inner
Join condition: (rk#36 >= rk#41)

(61) Project [codegen id : 17]
Output [4]: [item_sk#34, d_date#30, sumss#35, sumss#39]
Input [7]: [item_sk#34, d_date#30, sumss#35, rk#36, item_sk#37, sumss#39, rk#41]

(62) HashAggregate [codegen id : 17]
Input [4]: [item_sk#34, d_date#30, sumss#35, sumss#39]
Keys [3]: [item_sk#34, d_date#30, sumss#35]
Functions [1]: [partial_sum(sumss#39)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [5]: [item_sk#34, d_date#30, sumss#35, sum#44, isEmpty#45]

(63) RowToColumnar
Input [5]: [item_sk#34, d_date#30, sumss#35, sum#44, isEmpty#45]

(64) CometColumnarExchange
Input [5]: [item_sk#34, d_date#30, sumss#35, sum#44, isEmpty#45]
Arguments: hashpartitioning(item_sk#34, d_date#30, sumss#35, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(65) ColumnarToRow [codegen id : 18]
Input [5]: [item_sk#34, d_date#30, sumss#35, sum#44, isEmpty#45]

(66) HashAggregate [codegen id : 18]
Input [5]: [item_sk#34, d_date#30, sumss#35, sum#44, isEmpty#45]
Keys [3]: [item_sk#34, d_date#30, sumss#35]
Functions [1]: [sum(sumss#39)]
Aggregate Attributes [1]: [sum(sumss#39)#46]
Results [3]: [item_sk#34, d_date#30, sum(sumss#39)#46 AS cume_sales#47]

(67) RowToColumnar
Input [3]: [item_sk#34, d_date#30, cume_sales#47]

(68) CometColumnarExchange
Input [3]: [item_sk#34, d_date#30, cume_sales#47]
Arguments: hashpartitioning(item_sk#34, d_date#30, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(69) CometSort
Input [3]: [item_sk#34, d_date#30, cume_sales#47]
Arguments: [item_sk#34, d_date#30, cume_sales#47], [item_sk#34 ASC NULLS FIRST, d_date#30 ASC NULLS FIRST]

(70) CometSortMergeJoin
Left output [3]: [item_sk#11, d_date#6, cume_sales#24]
Right output [3]: [item_sk#34, d_date#30, cume_sales#47]
Arguments: [item_sk#11, d_date#6], [item_sk#34, d_date#30], FullOuter

(71) CometFilter
Input [6]: [item_sk#11, d_date#6, cume_sales#24, item_sk#34, d_date#30, cume_sales#47]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#34 END)

(72) CometProject
Input [6]: [item_sk#11, d_date#6, cume_sales#24, item_sk#34, d_date#30, cume_sales#47]
Arguments: [item_sk#48, d_date#49, web_sales#50, store_sales#51], [CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#34 END AS item_sk#48, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#30 END AS d_date#49, cume_sales#24 AS web_sales#50, cume_sales#47 AS store_sales#51]

(73) CometColumnarExchange
Input [4]: [item_sk#48, d_date#49, web_sales#50, store_sales#51]
Arguments: hashpartitioning(item_sk#48, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(74) CometSort
Input [4]: [item_sk#48, d_date#49, web_sales#50, store_sales#51]
Arguments: [item_sk#48, d_date#49, web_sales#50, store_sales#51], [item_sk#48 ASC NULLS FIRST, d_date#49 ASC NULLS FIRST]

(75) ColumnarToRow [codegen id : 19]
Input [4]: [item_sk#48, d_date#49, web_sales#50, store_sales#51]

(76) Window
Input [4]: [item_sk#48, d_date#49, web_sales#50, store_sales#51]
Arguments: [row_number() windowspecdefinition(item_sk#48, d_date#49 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#52], [item_sk#48], [d_date#49 ASC NULLS FIRST]

(77) ReusedExchange [Reuses operator id: 73]
Output [4]: [item_sk#53, d_date#54, web_sales#55, store_sales#56]

(78) CometSort
Input [4]: [item_sk#53, d_date#54, web_sales#55, store_sales#56]
Arguments: [item_sk#53, d_date#54, web_sales#55, store_sales#56], [item_sk#53 ASC NULLS FIRST, d_date#54 ASC NULLS FIRST]

(79) ColumnarToRow [codegen id : 38]
Input [4]: [item_sk#53, d_date#54, web_sales#55, store_sales#56]

(80) Window
Input [4]: [item_sk#53, d_date#54, web_sales#55, store_sales#56]
Arguments: [row_number() windowspecdefinition(item_sk#53, d_date#54 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#57], [item_sk#53], [d_date#54 ASC NULLS FIRST]

(81) Project [codegen id : 39]
Output [4]: [item_sk#53, web_sales#55, store_sales#56, rk#57]
Input [5]: [item_sk#53, d_date#54, web_sales#55, store_sales#56, rk#57]

(82) BroadcastExchange
Input [4]: [item_sk#53, web_sales#55, store_sales#56, rk#57]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

(83) BroadcastHashJoin [codegen id : 40]
Left keys [1]: [item_sk#48]
Right keys [1]: [item_sk#53]
Join type: Inner
Join condition: (rk#52 >= rk#57)

(84) Project [codegen id : 40]
Output [6]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, web_sales#55, store_sales#56]
Input [9]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, rk#52, item_sk#53, web_sales#55, store_sales#56, rk#57]

(85) HashAggregate [codegen id : 40]
Input [6]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, web_sales#55, store_sales#56]
Keys [4]: [item_sk#48, d_date#49, web_sales#50, store_sales#51]
Functions [2]: [partial_max(web_sales#55), partial_max(store_sales#56)]
Aggregate Attributes [2]: [max#58, max#59]
Results [6]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, max#60, max#61]

(86) HashAggregate [codegen id : 40]
Input [6]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, max#60, max#61]
Keys [4]: [item_sk#48, d_date#49, web_sales#50, store_sales#51]
Functions [2]: [max(web_sales#55), max(store_sales#56)]
Aggregate Attributes [2]: [max(web_sales#55)#62, max(store_sales#56)#63]
Results [6]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, max(web_sales#55)#62 AS web_cumulative#64, max(store_sales#56)#63 AS store_cumulative#65]

(87) Filter [codegen id : 40]
Input [6]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, web_cumulative#64, store_cumulative#65]
Condition : ((isnotnull(web_cumulative#64) AND isnotnull(store_cumulative#65)) AND (web_cumulative#64 > store_cumulative#65))

(88) TakeOrderedAndProject
Input [6]: [item_sk#48, d_date#49, web_sales#50, store_sales#51, web_cumulative#64, store_cumulative#65]
Arguments: 100, [item_sk#48 ASC NULLS FIRST, d_date#49 ASC NULLS FIRST], [item_sk#48, d_date#49, web_sales#50, store_sales#51, web_cumulative#64, store_cumulative#65]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (93)
+- * ColumnarToRow (92)
   +- CometProject (91)
      +- CometFilter (90)
         +- CometScan parquet spark_catalog.default.date_dim (89)


(89) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(90) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#5))

(91) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(92) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#6]

(93) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 37 Hosting Expression = ss_sold_date_sk#27 IN dynamicpruning#4


