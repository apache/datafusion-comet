== Physical Plan ==
TakeOrderedAndProject (51)
+- * Project (50)
   +- * BroadcastHashJoin Inner BuildRight (49)
      :- * Project (42)
      :  +- * BroadcastHashJoin Inner BuildRight (41)
      :     :- * Project (31)
      :     :  +- * Filter (30)
      :     :     +- Window (29)
      :     :        +- * Filter (28)
      :     :           +- Window (27)
      :     :              +- * CometColumnarToRow (26)
      :     :                 +- CometSort (25)
      :     :                    +- CometColumnarExchange (24)
      :     :                       +- * HashAggregate (23)
      :     :                          +- * CometColumnarToRow (22)
      :     :                             +- CometColumnarExchange (21)
      :     :                                +- * HashAggregate (20)
      :     :                                   +- * CometColumnarToRow (19)
      :     :                                      +- CometProject (18)
      :     :                                         +- CometBroadcastHashJoin (17)
      :     :                                            :- CometProject (13)
      :     :                                            :  +- CometBroadcastHashJoin (12)
      :     :                                            :     :- CometProject (8)
      :     :                                            :     :  +- CometBroadcastHashJoin (7)
      :     :                                            :     :     :- CometProject (3)
      :     :                                            :     :     :  +- CometFilter (2)
      :     :                                            :     :     :     +- CometScan parquet spark_catalog.default.item (1)
      :     :                                            :     :     +- CometBroadcastExchange (6)
      :     :                                            :     :        +- CometFilter (5)
      :     :                                            :     :           +- CometScan parquet spark_catalog.default.catalog_sales (4)
      :     :                                            :     +- CometBroadcastExchange (11)
      :     :                                            :        +- CometFilter (10)
      :     :                                            :           +- CometScan parquet spark_catalog.default.date_dim (9)
      :     :                                            +- CometBroadcastExchange (16)
      :     :                                               +- CometFilter (15)
      :     :                                                  +- CometScan parquet spark_catalog.default.call_center (14)
      :     +- BroadcastExchange (40)
      :        +- * Project (39)
      :           +- Window (38)
      :              +- * CometColumnarToRow (37)
      :                 +- CometSort (36)
      :                    +- CometColumnarExchange (35)
      :                       +- * HashAggregate (34)
      :                          +- * CometColumnarToRow (33)
      :                             +- ReusedExchange (32)
      +- BroadcastExchange (48)
         +- * Project (47)
            +- Window (46)
               +- * CometColumnarToRow (45)
                  +- CometSort (44)
                     +- ReusedExchange (43)


(1) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) CometFilter
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#3, 50, true, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_brand#2, 50, true, false, true)))

(3) CometProject
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Arguments: [i_item_sk#1, i_brand#4, i_category#5], [i_item_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_brand#2, 50, true, false, true) AS i_brand#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#3, 50, true, false, true) AS i_category#5]

(4) CometScan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Condition : (isnotnull(cs_item_sk#7) AND isnotnull(cs_call_center_sk#6))

(6) CometBroadcastExchange
Input [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Arguments: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]

(7) CometBroadcastHashJoin
Left output [3]: [i_item_sk#1, i_brand#4, i_category#5]
Right output [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Arguments: [i_item_sk#1], [cs_item_sk#7], Inner, BuildRight

(8) CometProject
Input [7]: [i_item_sk#1, i_brand#4, i_category#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Arguments: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9], [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9]

(9) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) CometFilter
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((d_year#12 = 1999) OR ((d_year#12 = 1998) AND (d_moy#13 = 12))) OR ((d_year#12 = 2000) AND (d_moy#13 = 1))) AND isnotnull(d_date_sk#11))

(11) CometBroadcastExchange
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Arguments: [d_date_sk#11, d_year#12, d_moy#13]

(12) CometBroadcastHashJoin
Left output [5]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9]
Right output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Arguments: [cs_sold_date_sk#9], [d_date_sk#11], Inner, BuildRight

(13) CometProject
Input [8]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9, d_date_sk#11, d_year#12, d_moy#13]
Arguments: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#12, d_moy#13], [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#12, d_moy#13]

(14) CometScan parquet spark_catalog.default.call_center
Output [2]: [cc_call_center_sk#14, cc_name#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(15) CometFilter
Input [2]: [cc_call_center_sk#14, cc_name#15]
Condition : (isnotnull(cc_call_center_sk#14) AND isnotnull(cc_name#15))

(16) CometBroadcastExchange
Input [2]: [cc_call_center_sk#14, cc_name#15]
Arguments: [cc_call_center_sk#14, cc_name#15]

(17) CometBroadcastHashJoin
Left output [6]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#12, d_moy#13]
Right output [2]: [cc_call_center_sk#14, cc_name#15]
Arguments: [cs_call_center_sk#6], [cc_call_center_sk#14], Inner, BuildRight

(18) CometProject
Input [8]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#12, d_moy#13, cc_call_center_sk#14, cc_name#15]
Arguments: [i_brand#4, i_category#5, cs_sales_price#8, d_year#12, d_moy#13, cc_name#15], [i_brand#4, i_category#5, cs_sales_price#8, d_year#12, d_moy#13, cc_name#15]

(19) CometColumnarToRow [codegen id : 1]
Input [6]: [i_brand#4, i_category#5, cs_sales_price#8, d_year#12, d_moy#13, cc_name#15]

(20) HashAggregate [codegen id : 1]
Input [6]: [i_brand#4, i_category#5, cs_sales_price#8, d_year#12, d_moy#13, cc_name#15]
Keys [5]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#8))]
Aggregate Attributes [1]: [sum#16]
Results [6]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum#17]

(21) CometColumnarExchange
Input [6]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum#17]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(22) CometColumnarToRow [codegen id : 2]
Input [6]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum#17]

(23) HashAggregate [codegen id : 2]
Input [6]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum#17]
Keys [5]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13]
Functions [1]: [sum(UnscaledValue(cs_sales_price#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#8))#18]
Results [7]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, MakeDecimal(sum(UnscaledValue(cs_sales_price#8))#18,17,2) AS sum_sales#19, MakeDecimal(sum(UnscaledValue(cs_sales_price#8))#18,17,2) AS _w0#20]

(24) CometColumnarExchange
Input [7]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#15, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(25) CometSort
Input [7]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20]
Arguments: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20], [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, cc_name#15 ASC NULLS FIRST, d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST]

(26) CometColumnarToRow [codegen id : 3]
Input [7]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20]

(27) Window
Input [7]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20]
Arguments: [rank(d_year#12, d_moy#13) windowspecdefinition(i_category#5, i_brand#4, cc_name#15, d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#21], [i_category#5, i_brand#4, cc_name#15], [d_year#12 ASC NULLS FIRST, d_moy#13 ASC NULLS FIRST]

(28) Filter [codegen id : 4]
Input [8]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20, rn#21]
Condition : (isnotnull(d_year#12) AND (d_year#12 = 1999))

(29) Window
Input [8]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20, rn#21]
Arguments: [avg(_w0#20) windowspecdefinition(i_category#5, i_brand#4, cc_name#15, d_year#12, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#22], [i_category#5, i_brand#4, cc_name#15, d_year#12]

(30) Filter [codegen id : 13]
Input [9]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20, rn#21, avg_monthly_sales#22]
Condition : ((isnotnull(avg_monthly_sales#22) AND (avg_monthly_sales#22 > 0.000000)) AND CASE WHEN (avg_monthly_sales#22 > 0.000000) THEN ((abs((sum_sales#19 - avg_monthly_sales#22)) / avg_monthly_sales#22) > 0.1000000000000000) END)

(31) Project [codegen id : 13]
Output [8]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, avg_monthly_sales#22, rn#21]
Input [9]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, _w0#20, rn#21, avg_monthly_sales#22]

(32) ReusedExchange [Reuses operator id: 21]
Output [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum#28]

(33) CometColumnarToRow [codegen id : 6]
Input [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum#28]

(34) HashAggregate [codegen id : 6]
Input [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum#28]
Keys [5]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27]
Functions [1]: [sum(UnscaledValue(cs_sales_price#29))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#29))#18]
Results [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, MakeDecimal(sum(UnscaledValue(cs_sales_price#29))#18,17,2) AS sum_sales#30]

(35) CometColumnarExchange
Input [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum_sales#30]
Arguments: hashpartitioning(i_category#23, i_brand#24, cc_name#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(36) CometSort
Input [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum_sales#30]
Arguments: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum_sales#30], [i_category#23 ASC NULLS FIRST, i_brand#24 ASC NULLS FIRST, cc_name#25 ASC NULLS FIRST, d_year#26 ASC NULLS FIRST, d_moy#27 ASC NULLS FIRST]

(37) CometColumnarToRow [codegen id : 7]
Input [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum_sales#30]

(38) Window
Input [6]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum_sales#30]
Arguments: [rank(d_year#26, d_moy#27) windowspecdefinition(i_category#23, i_brand#24, cc_name#25, d_year#26 ASC NULLS FIRST, d_moy#27 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#31], [i_category#23, i_brand#24, cc_name#25], [d_year#26 ASC NULLS FIRST, d_moy#27 ASC NULLS FIRST]

(39) Project [codegen id : 8]
Output [5]: [i_category#23, i_brand#24, cc_name#25, sum_sales#30, rn#31]
Input [7]: [i_category#23, i_brand#24, cc_name#25, d_year#26, d_moy#27, sum_sales#30, rn#31]

(40) BroadcastExchange
Input [5]: [i_category#23, i_brand#24, cc_name#25, sum_sales#30, rn#31]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] + 1)),false), [plan_id=4]

(41) BroadcastHashJoin [codegen id : 13]
Left keys [4]: [i_category#5, i_brand#4, cc_name#15, rn#21]
Right keys [4]: [i_category#23, i_brand#24, cc_name#25, (rn#31 + 1)]
Join type: Inner
Join condition: None

(42) Project [codegen id : 13]
Output [9]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, avg_monthly_sales#22, rn#21, sum_sales#30]
Input [13]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, avg_monthly_sales#22, rn#21, i_category#23, i_brand#24, cc_name#25, sum_sales#30, rn#31]

(43) ReusedExchange [Reuses operator id: 35]
Output [6]: [i_category#32, i_brand#33, cc_name#34, d_year#35, d_moy#36, sum_sales#37]

(44) CometSort
Input [6]: [i_category#32, i_brand#33, cc_name#34, d_year#35, d_moy#36, sum_sales#37]
Arguments: [i_category#32, i_brand#33, cc_name#34, d_year#35, d_moy#36, sum_sales#37], [i_category#32 ASC NULLS FIRST, i_brand#33 ASC NULLS FIRST, cc_name#34 ASC NULLS FIRST, d_year#35 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST]

(45) CometColumnarToRow [codegen id : 11]
Input [6]: [i_category#32, i_brand#33, cc_name#34, d_year#35, d_moy#36, sum_sales#37]

(46) Window
Input [6]: [i_category#32, i_brand#33, cc_name#34, d_year#35, d_moy#36, sum_sales#37]
Arguments: [rank(d_year#35, d_moy#36) windowspecdefinition(i_category#32, i_brand#33, cc_name#34, d_year#35 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#38], [i_category#32, i_brand#33, cc_name#34], [d_year#35 ASC NULLS FIRST, d_moy#36 ASC NULLS FIRST]

(47) Project [codegen id : 12]
Output [5]: [i_category#32, i_brand#33, cc_name#34, sum_sales#37, rn#38]
Input [7]: [i_category#32, i_brand#33, cc_name#34, d_year#35, d_moy#36, sum_sales#37, rn#38]

(48) BroadcastExchange
Input [5]: [i_category#32, i_brand#33, cc_name#34, sum_sales#37, rn#38]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] - 1)),false), [plan_id=5]

(49) BroadcastHashJoin [codegen id : 13]
Left keys [4]: [i_category#5, i_brand#4, cc_name#15, rn#21]
Right keys [4]: [i_category#32, i_brand#33, cc_name#34, (rn#38 - 1)]
Join type: Inner
Join condition: None

(50) Project [codegen id : 13]
Output [8]: [i_category#5, i_brand#4, d_year#12, d_moy#13, avg_monthly_sales#22, sum_sales#19, sum_sales#30 AS psum#39, sum_sales#37 AS nsum#40]
Input [14]: [i_category#5, i_brand#4, cc_name#15, d_year#12, d_moy#13, sum_sales#19, avg_monthly_sales#22, rn#21, sum_sales#30, i_category#32, i_brand#33, cc_name#34, sum_sales#37, rn#38]

(51) TakeOrderedAndProject
Input [8]: [i_category#5, i_brand#4, d_year#12, d_moy#13, avg_monthly_sales#22, sum_sales#19, psum#39, nsum#40]
Arguments: 100, [(sum_sales#19 - avg_monthly_sales#22) ASC NULLS FIRST, d_year#12 ASC NULLS FIRST], [i_category#5, i_brand#4, d_year#12, d_moy#13, avg_monthly_sales#22, sum_sales#19, psum#39, nsum#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (55)
+- * CometColumnarToRow (54)
   +- CometFilter (53)
      +- CometScan parquet spark_catalog.default.date_dim (52)


(52) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_moy#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(53) CometFilter
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Condition : ((((d_year#12 = 1999) OR ((d_year#12 = 1998) AND (d_moy#13 = 12))) OR ((d_year#12 = 2000) AND (d_moy#13 = 1))) AND isnotnull(d_date_sk#11))

(54) CometColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]

(55) BroadcastExchange
Input [3]: [d_date_sk#11, d_year#12, d_moy#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]


