== Physical Plan ==
TakeOrderedAndProject (71)
+- * Project (70)
   +- * BroadcastHashJoin Inner BuildRight (69)
      :- * Project (54)
      :  +- * BroadcastHashJoin Inner BuildRight (53)
      :     :- * BroadcastHashJoin Inner BuildRight (35)
      :     :  :- * Filter (18)
      :     :  :  +- * HashAggregate (17)
      :     :  :     +- * CometColumnarToRow (16)
      :     :  :        +- CometExchange (15)
      :     :  :           +- CometHashAggregate (14)
      :     :  :              +- CometProject (13)
      :     :  :                 +- CometBroadcastHashJoin (12)
      :     :  :                    :- CometProject (8)
      :     :  :                    :  +- CometBroadcastHashJoin (7)
      :     :  :                    :     :- CometProject (3)
      :     :  :                    :     :  +- CometFilter (2)
      :     :  :                    :     :     +- CometNativeScan parquet spark_catalog.default.customer (1)
      :     :  :                    :     +- CometBroadcastExchange (6)
      :     :  :                    :        +- CometFilter (5)
      :     :  :                    :           +- CometNativeScan parquet spark_catalog.default.store_sales (4)
      :     :  :                    +- CometBroadcastExchange (11)
      :     :  :                       +- CometFilter (10)
      :     :  :                          +- CometNativeScan parquet spark_catalog.default.date_dim (9)
      :     :  +- BroadcastExchange (34)
      :     :     +- * HashAggregate (33)
      :     :        +- * CometColumnarToRow (32)
      :     :           +- CometExchange (31)
      :     :              +- CometHashAggregate (30)
      :     :                 +- CometProject (29)
      :     :                    +- CometBroadcastHashJoin (28)
      :     :                       :- CometProject (24)
      :     :                       :  +- CometBroadcastHashJoin (23)
      :     :                       :     :- CometProject (21)
      :     :                       :     :  +- CometFilter (20)
      :     :                       :     :     +- CometNativeScan parquet spark_catalog.default.customer (19)
      :     :                       :     +- ReusedExchange (22)
      :     :                       +- CometBroadcastExchange (27)
      :     :                          +- CometFilter (26)
      :     :                             +- CometNativeScan parquet spark_catalog.default.date_dim (25)
      :     +- BroadcastExchange (52)
      :        +- * Filter (51)
      :           +- * HashAggregate (50)
      :              +- * CometColumnarToRow (49)
      :                 +- CometExchange (48)
      :                    +- CometHashAggregate (47)
      :                       +- CometProject (46)
      :                          +- CometBroadcastHashJoin (45)
      :                             :- CometProject (43)
      :                             :  +- CometBroadcastHashJoin (42)
      :                             :     :- CometProject (38)
      :                             :     :  +- CometFilter (37)
      :                             :     :     +- CometNativeScan parquet spark_catalog.default.customer (36)
      :                             :     +- CometBroadcastExchange (41)
      :                             :        +- CometFilter (40)
      :                             :           +- CometNativeScan parquet spark_catalog.default.web_sales (39)
      :                             +- ReusedExchange (44)
      +- BroadcastExchange (68)
         +- * HashAggregate (67)
            +- * CometColumnarToRow (66)
               +- CometExchange (65)
                  +- CometHashAggregate (64)
                     +- CometProject (63)
                        +- CometBroadcastHashJoin (62)
                           :- CometProject (60)
                           :  +- CometBroadcastHashJoin (59)
                           :     :- CometProject (57)
                           :     :  +- CometFilter (56)
                           :     :     +- CometNativeScan parquet spark_catalog.default.customer (55)
                           :     +- ReusedExchange (58)
                           +- ReusedExchange (61)


(1) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) CometFilter
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#2, 16))))

(3) CometProject
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1, c_customer_id#5, c_first_name#6, c_last_name#7], [c_customer_sk#1, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#2, 16)) AS c_customer_id#5, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#3, 20)) AS c_first_name#6, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#4, 30)) AS c_last_name#7]

(4) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#10)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(5) CometFilter
Input [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Condition : isnotnull(ss_customer_sk#8)

(6) CometBroadcastExchange
Input [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Arguments: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]

(7) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#1, c_customer_id#5, c_first_name#6, c_last_name#7]
Right output [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Arguments: [c_customer_sk#1], [ss_customer_sk#8], Inner, BuildRight

(8) CometProject
Input [7]: [c_customer_sk#1, c_customer_id#5, c_first_name#6, c_last_name#7, ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Arguments: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10], [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 = 2001)) AND d_year#12 IN (2001,2002)) AND isnotnull(d_date_sk#11))

(11) CometBroadcastExchange
Input [2]: [d_date_sk#11, d_year#12]
Arguments: [d_date_sk#11, d_year#12]

(12) CometBroadcastHashJoin
Left output [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10]
Right output [2]: [d_date_sk#11, d_year#12]
Arguments: [ss_sold_date_sk#10], [d_date_sk#11], Inner, BuildRight

(13) CometProject
Input [7]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10, d_date_sk#11, d_year#12]
Arguments: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, d_year#12], [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, d_year#12]

(14) CometHashAggregate
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, d_year#12]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#9))]

(15) CometExchange
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12, sum#13]
Arguments: hashpartitioning(c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(16) CometColumnarToRow [codegen id : 4]
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12, sum#13]

(17) HashAggregate [codegen id : 4]
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12, sum#13]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12]
Functions [1]: [sum(UnscaledValue(ss_net_paid#9))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#9))#14]
Results [2]: [c_customer_id#5 AS customer_id#15, MakeDecimal(sum(UnscaledValue(ss_net_paid#9))#14,17,2) AS year_total#16]

(18) Filter [codegen id : 4]
Input [2]: [customer_id#15, year_total#16]
Condition : (isnotnull(year_total#16) AND (year_total#16 > 0.00))

(19) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#17, c_customer_id#18, c_first_name#19, c_last_name#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(20) CometFilter
Input [4]: [c_customer_sk#17, c_customer_id#18, c_first_name#19, c_last_name#20]
Condition : (isnotnull(c_customer_sk#17) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#18, 16))))

(21) CometProject
Input [4]: [c_customer_sk#17, c_customer_id#18, c_first_name#19, c_last_name#20]
Arguments: [c_customer_sk#17, c_customer_id#21, c_first_name#22, c_last_name#23], [c_customer_sk#17, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#18, 16)) AS c_customer_id#21, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#19, 20)) AS c_first_name#22, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#20, 30)) AS c_last_name#23]

(22) ReusedExchange [Reuses operator id: 6]
Output [3]: [ss_customer_sk#24, ss_net_paid#25, ss_sold_date_sk#26]

(23) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#17, c_customer_id#21, c_first_name#22, c_last_name#23]
Right output [3]: [ss_customer_sk#24, ss_net_paid#25, ss_sold_date_sk#26]
Arguments: [c_customer_sk#17], [ss_customer_sk#24], Inner, BuildRight

(24) CometProject
Input [7]: [c_customer_sk#17, c_customer_id#21, c_first_name#22, c_last_name#23, ss_customer_sk#24, ss_net_paid#25, ss_sold_date_sk#26]
Arguments: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#25, ss_sold_date_sk#26], [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#25, ss_sold_date_sk#26]

(25) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#27, d_year#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(26) CometFilter
Input [2]: [d_date_sk#27, d_year#28]
Condition : (((isnotnull(d_year#28) AND (d_year#28 = 2002)) AND d_year#28 IN (2001,2002)) AND isnotnull(d_date_sk#27))

(27) CometBroadcastExchange
Input [2]: [d_date_sk#27, d_year#28]
Arguments: [d_date_sk#27, d_year#28]

(28) CometBroadcastHashJoin
Left output [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#25, ss_sold_date_sk#26]
Right output [2]: [d_date_sk#27, d_year#28]
Arguments: [ss_sold_date_sk#26], [d_date_sk#27], Inner, BuildRight

(29) CometProject
Input [7]: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#25, ss_sold_date_sk#26, d_date_sk#27, d_year#28]
Arguments: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#25, d_year#28], [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#25, d_year#28]

(30) CometHashAggregate
Input [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, ss_net_paid#25, d_year#28]
Keys [4]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#28]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#25))]

(31) CometExchange
Input [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#28, sum#29]
Arguments: hashpartitioning(c_customer_id#21, c_first_name#22, c_last_name#23, d_year#28, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(32) CometColumnarToRow [codegen id : 1]
Input [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#28, sum#29]

(33) HashAggregate [codegen id : 1]
Input [5]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#28, sum#29]
Keys [4]: [c_customer_id#21, c_first_name#22, c_last_name#23, d_year#28]
Functions [1]: [sum(UnscaledValue(ss_net_paid#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#25))#14]
Results [4]: [c_customer_id#21 AS customer_id#30, c_first_name#22 AS customer_first_name#31, c_last_name#23 AS customer_last_name#32, MakeDecimal(sum(UnscaledValue(ss_net_paid#25))#14,17,2) AS year_total#33]

(34) BroadcastExchange
Input [4]: [customer_id#30, customer_first_name#31, customer_last_name#32, year_total#33]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_id#15]
Right keys [1]: [customer_id#30]
Join type: Inner
Join condition: None

(36) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#34, c_customer_id#35, c_first_name#36, c_last_name#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(37) CometFilter
Input [4]: [c_customer_sk#34, c_customer_id#35, c_first_name#36, c_last_name#37]
Condition : (isnotnull(c_customer_sk#34) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#35, 16))))

(38) CometProject
Input [4]: [c_customer_sk#34, c_customer_id#35, c_first_name#36, c_last_name#37]
Arguments: [c_customer_sk#34, c_customer_id#38, c_first_name#39, c_last_name#40], [c_customer_sk#34, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#35, 16)) AS c_customer_id#38, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#36, 20)) AS c_first_name#39, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#37, 30)) AS c_last_name#40]

(39) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#43)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(40) CometFilter
Input [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Condition : isnotnull(ws_bill_customer_sk#41)

(41) CometBroadcastExchange
Input [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Arguments: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]

(42) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#34, c_customer_id#38, c_first_name#39, c_last_name#40]
Right output [3]: [ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Arguments: [c_customer_sk#34], [ws_bill_customer_sk#41], Inner, BuildRight

(43) CometProject
Input [7]: [c_customer_sk#34, c_customer_id#38, c_first_name#39, c_last_name#40, ws_bill_customer_sk#41, ws_net_paid#42, ws_sold_date_sk#43]
Arguments: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, ws_sold_date_sk#43], [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, ws_sold_date_sk#43]

(44) ReusedExchange [Reuses operator id: 11]
Output [2]: [d_date_sk#44, d_year#45]

(45) CometBroadcastHashJoin
Left output [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, ws_sold_date_sk#43]
Right output [2]: [d_date_sk#44, d_year#45]
Arguments: [ws_sold_date_sk#43], [d_date_sk#44], Inner, BuildRight

(46) CometProject
Input [7]: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, ws_sold_date_sk#43, d_date_sk#44, d_year#45]
Arguments: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, d_year#45], [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, d_year#45]

(47) CometHashAggregate
Input [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, ws_net_paid#42, d_year#45]
Keys [4]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#45]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#42))]

(48) CometExchange
Input [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#45, sum#46]
Arguments: hashpartitioning(c_customer_id#38, c_first_name#39, c_last_name#40, d_year#45, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(49) CometColumnarToRow [codegen id : 2]
Input [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#45, sum#46]

(50) HashAggregate [codegen id : 2]
Input [5]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#45, sum#46]
Keys [4]: [c_customer_id#38, c_first_name#39, c_last_name#40, d_year#45]
Functions [1]: [sum(UnscaledValue(ws_net_paid#42))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#42))#47]
Results [2]: [c_customer_id#38 AS customer_id#48, MakeDecimal(sum(UnscaledValue(ws_net_paid#42))#47,17,2) AS year_total#49]

(51) Filter [codegen id : 2]
Input [2]: [customer_id#48, year_total#49]
Condition : (isnotnull(year_total#49) AND (year_total#49 > 0.00))

(52) BroadcastExchange
Input [2]: [customer_id#48, year_total#49]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(53) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_id#15]
Right keys [1]: [customer_id#48]
Join type: Inner
Join condition: None

(54) Project [codegen id : 4]
Output [7]: [customer_id#15, year_total#16, customer_id#30, customer_first_name#31, customer_last_name#32, year_total#33, year_total#49]
Input [8]: [customer_id#15, year_total#16, customer_id#30, customer_first_name#31, customer_last_name#32, year_total#33, customer_id#48, year_total#49]

(55) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#50, c_customer_id#51, c_first_name#52, c_last_name#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(56) CometFilter
Input [4]: [c_customer_sk#50, c_customer_id#51, c_first_name#52, c_last_name#53]
Condition : (isnotnull(c_customer_sk#50) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#51, 16))))

(57) CometProject
Input [4]: [c_customer_sk#50, c_customer_id#51, c_first_name#52, c_last_name#53]
Arguments: [c_customer_sk#50, c_customer_id#54, c_first_name#55, c_last_name#56], [c_customer_sk#50, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#51, 16)) AS c_customer_id#54, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#52, 20)) AS c_first_name#55, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#53, 30)) AS c_last_name#56]

(58) ReusedExchange [Reuses operator id: 41]
Output [3]: [ws_bill_customer_sk#57, ws_net_paid#58, ws_sold_date_sk#59]

(59) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#50, c_customer_id#54, c_first_name#55, c_last_name#56]
Right output [3]: [ws_bill_customer_sk#57, ws_net_paid#58, ws_sold_date_sk#59]
Arguments: [c_customer_sk#50], [ws_bill_customer_sk#57], Inner, BuildRight

(60) CometProject
Input [7]: [c_customer_sk#50, c_customer_id#54, c_first_name#55, c_last_name#56, ws_bill_customer_sk#57, ws_net_paid#58, ws_sold_date_sk#59]
Arguments: [c_customer_id#54, c_first_name#55, c_last_name#56, ws_net_paid#58, ws_sold_date_sk#59], [c_customer_id#54, c_first_name#55, c_last_name#56, ws_net_paid#58, ws_sold_date_sk#59]

(61) ReusedExchange [Reuses operator id: 27]
Output [2]: [d_date_sk#60, d_year#61]

(62) CometBroadcastHashJoin
Left output [5]: [c_customer_id#54, c_first_name#55, c_last_name#56, ws_net_paid#58, ws_sold_date_sk#59]
Right output [2]: [d_date_sk#60, d_year#61]
Arguments: [ws_sold_date_sk#59], [d_date_sk#60], Inner, BuildRight

(63) CometProject
Input [7]: [c_customer_id#54, c_first_name#55, c_last_name#56, ws_net_paid#58, ws_sold_date_sk#59, d_date_sk#60, d_year#61]
Arguments: [c_customer_id#54, c_first_name#55, c_last_name#56, ws_net_paid#58, d_year#61], [c_customer_id#54, c_first_name#55, c_last_name#56, ws_net_paid#58, d_year#61]

(64) CometHashAggregate
Input [5]: [c_customer_id#54, c_first_name#55, c_last_name#56, ws_net_paid#58, d_year#61]
Keys [4]: [c_customer_id#54, c_first_name#55, c_last_name#56, d_year#61]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#58))]

(65) CometExchange
Input [5]: [c_customer_id#54, c_first_name#55, c_last_name#56, d_year#61, sum#62]
Arguments: hashpartitioning(c_customer_id#54, c_first_name#55, c_last_name#56, d_year#61, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(66) CometColumnarToRow [codegen id : 3]
Input [5]: [c_customer_id#54, c_first_name#55, c_last_name#56, d_year#61, sum#62]

(67) HashAggregate [codegen id : 3]
Input [5]: [c_customer_id#54, c_first_name#55, c_last_name#56, d_year#61, sum#62]
Keys [4]: [c_customer_id#54, c_first_name#55, c_last_name#56, d_year#61]
Functions [1]: [sum(UnscaledValue(ws_net_paid#58))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#58))#47]
Results [2]: [c_customer_id#54 AS customer_id#63, MakeDecimal(sum(UnscaledValue(ws_net_paid#58))#47,17,2) AS year_total#64]

(68) BroadcastExchange
Input [2]: [customer_id#63, year_total#64]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=7]

(69) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_id#15]
Right keys [1]: [customer_id#63]
Join type: Inner
Join condition: (CASE WHEN (year_total#49 > 0.00) THEN (year_total#64 / year_total#49) END > CASE WHEN (year_total#16 > 0.00) THEN (year_total#33 / year_total#16) END)

(70) Project [codegen id : 4]
Output [3]: [customer_id#30, customer_first_name#31, customer_last_name#32]
Input [9]: [customer_id#15, year_total#16, customer_id#30, customer_first_name#31, customer_last_name#32, year_total#33, year_total#49, customer_id#63, year_total#64]

(71) TakeOrderedAndProject
Input [3]: [customer_id#30, customer_first_name#31, customer_last_name#32]
Arguments: 100, [customer_first_name#31 ASC NULLS FIRST, customer_id#30 ASC NULLS FIRST, customer_last_name#32 ASC NULLS FIRST], [customer_id#30, customer_first_name#31, customer_last_name#32]

