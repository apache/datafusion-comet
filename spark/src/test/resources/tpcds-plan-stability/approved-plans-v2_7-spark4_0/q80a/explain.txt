== Physical Plan ==
* CometColumnarToRow (127)
+- CometTakeOrderedAndProject (126)
   +- CometHashAggregate (125)
      +- CometColumnarExchange (124)
         +- * HashAggregate (123)
            +- Union (122)
               :- * HashAggregate (107)
               :  +- * CometColumnarToRow (106)
               :     +- CometColumnarExchange (105)
               :        +- * HashAggregate (104)
               :           +- Union (103)
               :              :- * HashAggregate (40)
               :              :  +- * CometColumnarToRow (39)
               :              :     +- CometColumnarExchange (38)
               :              :        +- * HashAggregate (37)
               :              :           +- * CometColumnarToRow (36)
               :              :              +- CometProject (35)
               :              :                 +- CometBroadcastHashJoin (34)
               :              :                    :- CometProject (29)
               :              :                    :  +- CometBroadcastHashJoin (28)
               :              :                    :     :- CometProject (23)
               :              :                    :     :  +- CometBroadcastHashJoin (22)
               :              :                    :     :     :- CometProject (17)
               :              :                    :     :     :  +- CometBroadcastHashJoin (16)
               :              :                    :     :     :     :- CometProject (11)
               :              :                    :     :     :     :  +- CometSortMergeJoin (10)
               :              :                    :     :     :     :     :- CometSort (4)
               :              :                    :     :     :     :     :  +- CometExchange (3)
               :              :                    :     :     :     :     :     +- CometFilter (2)
               :              :                    :     :     :     :     :        +- CometScan parquet spark_catalog.default.store_sales (1)
               :              :                    :     :     :     :     +- CometSort (9)
               :              :                    :     :     :     :        +- CometExchange (8)
               :              :                    :     :     :     :           +- CometProject (7)
               :              :                    :     :     :     :              +- CometFilter (6)
               :              :                    :     :     :     :                 +- CometScan parquet spark_catalog.default.store_returns (5)
               :              :                    :     :     :     +- CometBroadcastExchange (15)
               :              :                    :     :     :        +- CometProject (14)
               :              :                    :     :     :           +- CometFilter (13)
               :              :                    :     :     :              +- CometScan parquet spark_catalog.default.date_dim (12)
               :              :                    :     :     +- CometBroadcastExchange (21)
               :              :                    :     :        +- CometProject (20)
               :              :                    :     :           +- CometFilter (19)
               :              :                    :     :              +- CometScan parquet spark_catalog.default.store (18)
               :              :                    :     +- CometBroadcastExchange (27)
               :              :                    :        +- CometProject (26)
               :              :                    :           +- CometFilter (25)
               :              :                    :              +- CometScan parquet spark_catalog.default.item (24)
               :              :                    +- CometBroadcastExchange (33)
               :              :                       +- CometProject (32)
               :              :                          +- CometFilter (31)
               :              :                             +- CometScan parquet spark_catalog.default.promotion (30)
               :              :- * HashAggregate (71)
               :              :  +- * CometColumnarToRow (70)
               :              :     +- CometColumnarExchange (69)
               :              :        +- * HashAggregate (68)
               :              :           +- * CometColumnarToRow (67)
               :              :              +- CometProject (66)
               :              :                 +- CometBroadcastHashJoin (65)
               :              :                    :- CometProject (63)
               :              :                    :  +- CometBroadcastHashJoin (62)
               :              :                    :     :- CometProject (60)
               :              :                    :     :  +- CometBroadcastHashJoin (59)
               :              :                    :     :     :- CometProject (54)
               :              :                    :     :     :  +- CometBroadcastHashJoin (53)
               :              :                    :     :     :     :- CometProject (51)
               :              :                    :     :     :     :  +- CometSortMergeJoin (50)
               :              :                    :     :     :     :     :- CometSort (44)
               :              :                    :     :     :     :     :  +- CometExchange (43)
               :              :                    :     :     :     :     :     +- CometFilter (42)
               :              :                    :     :     :     :     :        +- CometScan parquet spark_catalog.default.catalog_sales (41)
               :              :                    :     :     :     :     +- CometSort (49)
               :              :                    :     :     :     :        +- CometExchange (48)
               :              :                    :     :     :     :           +- CometProject (47)
               :              :                    :     :     :     :              +- CometFilter (46)
               :              :                    :     :     :     :                 +- CometScan parquet spark_catalog.default.catalog_returns (45)
               :              :                    :     :     :     +- ReusedExchange (52)
               :              :                    :     :     +- CometBroadcastExchange (58)
               :              :                    :     :        +- CometProject (57)
               :              :                    :     :           +- CometFilter (56)
               :              :                    :     :              +- CometScan parquet spark_catalog.default.catalog_page (55)
               :              :                    :     +- ReusedExchange (61)
               :              :                    +- ReusedExchange (64)
               :              +- * HashAggregate (102)
               :                 +- * CometColumnarToRow (101)
               :                    +- CometColumnarExchange (100)
               :                       +- * HashAggregate (99)
               :                          +- * CometColumnarToRow (98)
               :                             +- CometProject (97)
               :                                +- CometBroadcastHashJoin (96)
               :                                   :- CometProject (94)
               :                                   :  +- CometBroadcastHashJoin (93)
               :                                   :     :- CometProject (91)
               :                                   :     :  +- CometBroadcastHashJoin (90)
               :                                   :     :     :- CometProject (85)
               :                                   :     :     :  +- CometBroadcastHashJoin (84)
               :                                   :     :     :     :- CometProject (82)
               :                                   :     :     :     :  +- CometSortMergeJoin (81)
               :                                   :     :     :     :     :- CometSort (75)
               :                                   :     :     :     :     :  +- CometExchange (74)
               :                                   :     :     :     :     :     +- CometFilter (73)
               :                                   :     :     :     :     :        +- CometScan parquet spark_catalog.default.web_sales (72)
               :                                   :     :     :     :     +- CometSort (80)
               :                                   :     :     :     :        +- CometExchange (79)
               :                                   :     :     :     :           +- CometProject (78)
               :                                   :     :     :     :              +- CometFilter (77)
               :                                   :     :     :     :                 +- CometScan parquet spark_catalog.default.web_returns (76)
               :                                   :     :     :     +- ReusedExchange (83)
               :                                   :     :     +- CometBroadcastExchange (89)
               :                                   :     :        +- CometProject (88)
               :                                   :     :           +- CometFilter (87)
               :                                   :     :              +- CometScan parquet spark_catalog.default.web_site (86)
               :                                   :     +- ReusedExchange (92)
               :                                   +- ReusedExchange (95)
               :- * HashAggregate (114)
               :  +- * CometColumnarToRow (113)
               :     +- CometColumnarExchange (112)
               :        +- * HashAggregate (111)
               :           +- * HashAggregate (110)
               :              +- * CometColumnarToRow (109)
               :                 +- ReusedExchange (108)
               +- * HashAggregate (121)
                  +- * CometColumnarToRow (120)
                     +- CometColumnarExchange (119)
                        +- * HashAggregate (118)
                           +- * HashAggregate (117)
                              +- * CometColumnarToRow (116)
                                 +- ReusedExchange (115)


(1) CometScan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7], [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST]

(5) CometScan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) CometFilter
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Condition : (isnotnull(sr_item_sk#9) AND isnotnull(sr_ticket_number#10))

(7) CometProject
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]

(8) CometExchange
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: hashpartitioning(sr_item_sk#9, sr_ticket_number#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#10 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#9, sr_ticket_number#10], LeftOuter

(11) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]

(12) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(14) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(16) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#7], [d_date_sk#14], Inner, BuildRight

(17) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]

(18) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_store_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(19) CometFilter
Input [2]: [s_store_sk#16, s_store_id#17]
Condition : isnotnull(s_store_sk#16)

(20) CometProject
Input [2]: [s_store_sk#16, s_store_id#17]
Arguments: [s_store_sk#16, s_store_id#18], [s_store_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#17, 16, true, false, true) AS s_store_id#18]

(21) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_store_id#18]
Arguments: [s_store_sk#16, s_store_id#18]

(22) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]
Right output [2]: [s_store_sk#16, s_store_id#18]
Arguments: [ss_store_sk#2], [s_store_sk#16], Inner, BuildRight

(23) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_sk#16, s_store_id#18]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]

(24) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#19, i_current_price#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(25) CometFilter
Input [2]: [i_item_sk#19, i_current_price#20]
Condition : ((isnotnull(i_current_price#20) AND (i_current_price#20 > 50.00)) AND isnotnull(i_item_sk#19))

(26) CometProject
Input [2]: [i_item_sk#19, i_current_price#20]
Arguments: [i_item_sk#19], [i_item_sk#19]

(27) CometBroadcastExchange
Input [1]: [i_item_sk#19]
Arguments: [i_item_sk#19]

(28) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]
Right output [1]: [i_item_sk#19]
Arguments: [ss_item_sk#1], [i_item_sk#19], Inner, BuildRight

(29) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18, i_item_sk#19]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]

(30) CometScan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#21, p_channel_tv#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(31) CometFilter
Input [2]: [p_promo_sk#21, p_channel_tv#22]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, p_channel_tv#22, 1, true, false, true) = N) AND isnotnull(p_promo_sk#21))

(32) CometProject
Input [2]: [p_promo_sk#21, p_channel_tv#22]
Arguments: [p_promo_sk#21], [p_promo_sk#21]

(33) CometBroadcastExchange
Input [1]: [p_promo_sk#21]
Arguments: [p_promo_sk#21]

(34) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]
Right output [1]: [p_promo_sk#21]
Arguments: [ss_promo_sk#3], [p_promo_sk#21], Inner, BuildRight

(35) CometProject
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18, p_promo_sk#21]
Arguments: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18], [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]

(36) CometColumnarToRow [codegen id : 1]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]

(37) HashAggregate [codegen id : 1]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]
Keys [1]: [s_store_id#18]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]
Results [6]: [s_store_id#18, sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]

(38) CometColumnarExchange
Input [6]: [s_store_id#18, sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]
Arguments: hashpartitioning(s_store_id#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(39) CometColumnarToRow [codegen id : 2]
Input [6]: [s_store_id#18, sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]

(40) HashAggregate [codegen id : 2]
Input [6]: [s_store_id#18, sum#28, sum#29, isEmpty#30, sum#31, isEmpty#32]
Keys [1]: [s_store_id#18]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#33, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#34, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#35]
Results [5]: [store channel AS channel#36, concat(store, s_store_id#18) AS id#37, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#33,17,2) AS sales#38, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#34 AS returns#39, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#35 AS profit#40]

(41) CometScan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#47), dynamicpruningexpression(cs_sold_date_sk#47 IN dynamicpruning#48)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(42) CometFilter
Input [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Condition : ((isnotnull(cs_catalog_page_sk#41) AND isnotnull(cs_item_sk#42)) AND isnotnull(cs_promo_sk#43))

(43) CometExchange
Input [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Arguments: hashpartitioning(cs_item_sk#42, cs_order_number#44, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(44) CometSort
Input [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Arguments: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47], [cs_item_sk#42 ASC NULLS FIRST, cs_order_number#44 ASC NULLS FIRST]

(45) CometScan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52, cr_returned_date_sk#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(46) CometFilter
Input [5]: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52, cr_returned_date_sk#53]
Condition : (isnotnull(cr_item_sk#49) AND isnotnull(cr_order_number#50))

(47) CometProject
Input [5]: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52, cr_returned_date_sk#53]
Arguments: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52], [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52]

(48) CometExchange
Input [4]: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52]
Arguments: hashpartitioning(cr_item_sk#49, cr_order_number#50, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(49) CometSort
Input [4]: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52]
Arguments: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52], [cr_item_sk#49 ASC NULLS FIRST, cr_order_number#50 ASC NULLS FIRST]

(50) CometSortMergeJoin
Left output [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47]
Right output [4]: [cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52]
Arguments: [cs_item_sk#42, cs_order_number#44], [cr_item_sk#49, cr_order_number#50], LeftOuter

(51) CometProject
Input [11]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_order_number#44, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_item_sk#49, cr_order_number#50, cr_return_amount#51, cr_net_loss#52]
Arguments: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#51, cr_net_loss#52], [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#51, cr_net_loss#52]

(52) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#54]

(53) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#51, cr_net_loss#52]
Right output [1]: [d_date_sk#54]
Arguments: [cs_sold_date_sk#47], [d_date_sk#54], Inner, BuildRight

(54) CometProject
Input [9]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cs_sold_date_sk#47, cr_return_amount#51, cr_net_loss#52, d_date_sk#54]
Arguments: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52], [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52]

(55) CometScan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#55, cp_catalog_page_id#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(56) CometFilter
Input [2]: [cp_catalog_page_sk#55, cp_catalog_page_id#56]
Condition : isnotnull(cp_catalog_page_sk#55)

(57) CometProject
Input [2]: [cp_catalog_page_sk#55, cp_catalog_page_id#56]
Arguments: [cp_catalog_page_sk#55, cp_catalog_page_id#57], [cp_catalog_page_sk#55, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cp_catalog_page_id#56, 16, true, false, true) AS cp_catalog_page_id#57]

(58) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#55, cp_catalog_page_id#57]
Arguments: [cp_catalog_page_sk#55, cp_catalog_page_id#57]

(59) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52]
Right output [2]: [cp_catalog_page_sk#55, cp_catalog_page_id#57]
Arguments: [cs_catalog_page_sk#41], [cp_catalog_page_sk#55], Inner, BuildRight

(60) CometProject
Input [9]: [cs_catalog_page_sk#41, cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_sk#55, cp_catalog_page_id#57]
Arguments: [cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57], [cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57]

(61) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#58]

(62) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57]
Right output [1]: [i_item_sk#58]
Arguments: [cs_item_sk#42], [i_item_sk#58], Inner, BuildRight

(63) CometProject
Input [8]: [cs_item_sk#42, cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57, i_item_sk#58]
Arguments: [cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57], [cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57]

(64) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#59]

(65) CometBroadcastHashJoin
Left output [6]: [cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57]
Right output [1]: [p_promo_sk#59]
Arguments: [cs_promo_sk#43], [p_promo_sk#59], Inner, BuildRight

(66) CometProject
Input [7]: [cs_promo_sk#43, cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57, p_promo_sk#59]
Arguments: [cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57], [cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57]

(67) CometColumnarToRow [codegen id : 3]
Input [5]: [cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57]

(68) HashAggregate [codegen id : 3]
Input [5]: [cs_ext_sales_price#45, cs_net_profit#46, cr_return_amount#51, cr_net_loss#52, cp_catalog_page_id#57]
Keys [1]: [cp_catalog_page_id#57]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#45)), partial_sum(coalesce(cast(cr_return_amount#51 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#52 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#60, sum#61, isEmpty#62, sum#63, isEmpty#64]
Results [6]: [cp_catalog_page_id#57, sum#65, sum#66, isEmpty#67, sum#68, isEmpty#69]

(69) CometColumnarExchange
Input [6]: [cp_catalog_page_id#57, sum#65, sum#66, isEmpty#67, sum#68, isEmpty#69]
Arguments: hashpartitioning(cp_catalog_page_id#57, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(70) CometColumnarToRow [codegen id : 4]
Input [6]: [cp_catalog_page_id#57, sum#65, sum#66, isEmpty#67, sum#68, isEmpty#69]

(71) HashAggregate [codegen id : 4]
Input [6]: [cp_catalog_page_id#57, sum#65, sum#66, isEmpty#67, sum#68, isEmpty#69]
Keys [1]: [cp_catalog_page_id#57]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#45)), sum(coalesce(cast(cr_return_amount#51 as decimal(12,2)), 0.00)), sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#52 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#45))#70, sum(coalesce(cast(cr_return_amount#51 as decimal(12,2)), 0.00))#71, sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#52 as decimal(12,2)), 0.00)))#72]
Results [5]: [catalog channel AS channel#73, concat(catalog_page, cp_catalog_page_id#57) AS id#74, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#45))#70,17,2) AS sales#75, sum(coalesce(cast(cr_return_amount#51 as decimal(12,2)), 0.00))#71 AS returns#76, sum((cs_net_profit#46 - coalesce(cast(cr_net_loss#52 as decimal(12,2)), 0.00)))#72 AS profit#77]

(72) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_order_number#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#84), dynamicpruningexpression(ws_sold_date_sk#84 IN dynamicpruning#85)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(73) CometFilter
Input [7]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_order_number#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]
Condition : ((isnotnull(ws_web_site_sk#79) AND isnotnull(ws_item_sk#78)) AND isnotnull(ws_promo_sk#80))

(74) CometExchange
Input [7]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_order_number#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]
Arguments: hashpartitioning(ws_item_sk#78, ws_order_number#81, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(75) CometSort
Input [7]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_order_number#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]
Arguments: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_order_number#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84], [ws_item_sk#78 ASC NULLS FIRST, ws_order_number#81 ASC NULLS FIRST]

(76) CometScan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(77) CometFilter
Input [5]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Condition : (isnotnull(wr_item_sk#86) AND isnotnull(wr_order_number#87))

(78) CometProject
Input [5]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89, wr_returned_date_sk#90]
Arguments: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89], [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89]

(79) CometExchange
Input [4]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89]
Arguments: hashpartitioning(wr_item_sk#86, wr_order_number#87, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(80) CometSort
Input [4]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89]
Arguments: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89], [wr_item_sk#86 ASC NULLS FIRST, wr_order_number#87 ASC NULLS FIRST]

(81) CometSortMergeJoin
Left output [7]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_order_number#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84]
Right output [4]: [wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89]
Arguments: [ws_item_sk#78, ws_order_number#81], [wr_item_sk#86, wr_order_number#87], LeftOuter

(82) CometProject
Input [11]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_order_number#81, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84, wr_item_sk#86, wr_order_number#87, wr_return_amt#88, wr_net_loss#89]
Arguments: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84, wr_return_amt#88, wr_net_loss#89], [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84, wr_return_amt#88, wr_net_loss#89]

(83) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#91]

(84) CometBroadcastHashJoin
Left output [8]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84, wr_return_amt#88, wr_net_loss#89]
Right output [1]: [d_date_sk#91]
Arguments: [ws_sold_date_sk#84], [d_date_sk#91], Inner, BuildRight

(85) CometProject
Input [9]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, ws_sold_date_sk#84, wr_return_amt#88, wr_net_loss#89, d_date_sk#91]
Arguments: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89], [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89]

(86) CometScan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#92, web_site_id#93]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(87) CometFilter
Input [2]: [web_site_sk#92, web_site_id#93]
Condition : isnotnull(web_site_sk#92)

(88) CometProject
Input [2]: [web_site_sk#92, web_site_id#93]
Arguments: [web_site_sk#92, web_site_id#94], [web_site_sk#92, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, web_site_id#93, 16, true, false, true) AS web_site_id#94]

(89) CometBroadcastExchange
Input [2]: [web_site_sk#92, web_site_id#94]
Arguments: [web_site_sk#92, web_site_id#94]

(90) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89]
Right output [2]: [web_site_sk#92, web_site_id#94]
Arguments: [ws_web_site_sk#79], [web_site_sk#92], Inner, BuildRight

(91) CometProject
Input [9]: [ws_item_sk#78, ws_web_site_sk#79, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_sk#92, web_site_id#94]
Arguments: [ws_item_sk#78, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94], [ws_item_sk#78, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94]

(92) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#95]

(93) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#78, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94]
Right output [1]: [i_item_sk#95]
Arguments: [ws_item_sk#78], [i_item_sk#95], Inner, BuildRight

(94) CometProject
Input [8]: [ws_item_sk#78, ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94, i_item_sk#95]
Arguments: [ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94], [ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94]

(95) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#96]

(96) CometBroadcastHashJoin
Left output [6]: [ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94]
Right output [1]: [p_promo_sk#96]
Arguments: [ws_promo_sk#80], [p_promo_sk#96], Inner, BuildRight

(97) CometProject
Input [7]: [ws_promo_sk#80, ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94, p_promo_sk#96]
Arguments: [ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94], [ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94]

(98) CometColumnarToRow [codegen id : 5]
Input [5]: [ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94]

(99) HashAggregate [codegen id : 5]
Input [5]: [ws_ext_sales_price#82, ws_net_profit#83, wr_return_amt#88, wr_net_loss#89, web_site_id#94]
Keys [1]: [web_site_id#94]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#82)), partial_sum(coalesce(cast(wr_return_amt#88 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#83 - coalesce(cast(wr_net_loss#89 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#97, sum#98, isEmpty#99, sum#100, isEmpty#101]
Results [6]: [web_site_id#94, sum#102, sum#103, isEmpty#104, sum#105, isEmpty#106]

(100) CometColumnarExchange
Input [6]: [web_site_id#94, sum#102, sum#103, isEmpty#104, sum#105, isEmpty#106]
Arguments: hashpartitioning(web_site_id#94, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(101) CometColumnarToRow [codegen id : 6]
Input [6]: [web_site_id#94, sum#102, sum#103, isEmpty#104, sum#105, isEmpty#106]

(102) HashAggregate [codegen id : 6]
Input [6]: [web_site_id#94, sum#102, sum#103, isEmpty#104, sum#105, isEmpty#106]
Keys [1]: [web_site_id#94]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#82)), sum(coalesce(cast(wr_return_amt#88 as decimal(12,2)), 0.00)), sum((ws_net_profit#83 - coalesce(cast(wr_net_loss#89 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#82))#107, sum(coalesce(cast(wr_return_amt#88 as decimal(12,2)), 0.00))#108, sum((ws_net_profit#83 - coalesce(cast(wr_net_loss#89 as decimal(12,2)), 0.00)))#109]
Results [5]: [web channel AS channel#110, concat(web_site, web_site_id#94) AS id#111, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#82))#107,17,2) AS sales#112, sum(coalesce(cast(wr_return_amt#88 as decimal(12,2)), 0.00))#108 AS returns#113, sum((ws_net_profit#83 - coalesce(cast(wr_net_loss#89 as decimal(12,2)), 0.00)))#109 AS profit#114]

(103) Union

(104) HashAggregate [codegen id : 7]
Input [5]: [channel#36, id#37, sales#38, returns#39, profit#40]
Keys [2]: [channel#36, id#37]
Functions [3]: [partial_sum(sales#38), partial_sum(returns#39), partial_sum(profit#40)]
Aggregate Attributes [6]: [sum#115, isEmpty#116, sum#117, isEmpty#118, sum#119, isEmpty#120]
Results [8]: [channel#36, id#37, sum#121, isEmpty#122, sum#123, isEmpty#124, sum#125, isEmpty#126]

(105) CometColumnarExchange
Input [8]: [channel#36, id#37, sum#121, isEmpty#122, sum#123, isEmpty#124, sum#125, isEmpty#126]
Arguments: hashpartitioning(channel#36, id#37, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(106) CometColumnarToRow [codegen id : 8]
Input [8]: [channel#36, id#37, sum#121, isEmpty#122, sum#123, isEmpty#124, sum#125, isEmpty#126]

(107) HashAggregate [codegen id : 8]
Input [8]: [channel#36, id#37, sum#121, isEmpty#122, sum#123, isEmpty#124, sum#125, isEmpty#126]
Keys [2]: [channel#36, id#37]
Functions [3]: [sum(sales#38), sum(returns#39), sum(profit#40)]
Aggregate Attributes [3]: [sum(sales#38)#127, sum(returns#39)#128, sum(profit#40)#129]
Results [5]: [channel#36, id#37, cast(sum(sales#38)#127 as decimal(37,2)) AS sales#130, cast(sum(returns#39)#128 as decimal(38,2)) AS returns#131, cast(sum(profit#40)#129 as decimal(38,2)) AS profit#132]

(108) ReusedExchange [Reuses operator id: 105]
Output [8]: [channel#133, id#134, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(109) CometColumnarToRow [codegen id : 16]
Input [8]: [channel#133, id#134, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]

(110) HashAggregate [codegen id : 16]
Input [8]: [channel#133, id#134, sum#135, isEmpty#136, sum#137, isEmpty#138, sum#139, isEmpty#140]
Keys [2]: [channel#133, id#134]
Functions [3]: [sum(sales#141), sum(returns#142), sum(profit#143)]
Aggregate Attributes [3]: [sum(sales#141)#127, sum(returns#142)#128, sum(profit#143)#129]
Results [4]: [channel#133, sum(sales#141)#127 AS sales#144, sum(returns#142)#128 AS returns#145, sum(profit#143)#129 AS profit#146]

(111) HashAggregate [codegen id : 16]
Input [4]: [channel#133, sales#144, returns#145, profit#146]
Keys [1]: [channel#133]
Functions [3]: [partial_sum(sales#144), partial_sum(returns#145), partial_sum(profit#146)]
Aggregate Attributes [6]: [sum#147, isEmpty#148, sum#149, isEmpty#150, sum#151, isEmpty#152]
Results [7]: [channel#133, sum#153, isEmpty#154, sum#155, isEmpty#156, sum#157, isEmpty#158]

(112) CometColumnarExchange
Input [7]: [channel#133, sum#153, isEmpty#154, sum#155, isEmpty#156, sum#157, isEmpty#158]
Arguments: hashpartitioning(channel#133, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(113) CometColumnarToRow [codegen id : 17]
Input [7]: [channel#133, sum#153, isEmpty#154, sum#155, isEmpty#156, sum#157, isEmpty#158]

(114) HashAggregate [codegen id : 17]
Input [7]: [channel#133, sum#153, isEmpty#154, sum#155, isEmpty#156, sum#157, isEmpty#158]
Keys [1]: [channel#133]
Functions [3]: [sum(sales#144), sum(returns#145), sum(profit#146)]
Aggregate Attributes [3]: [sum(sales#144)#159, sum(returns#145)#160, sum(profit#146)#161]
Results [5]: [channel#133, null AS id#162, sum(sales#144)#159 AS sales#163, sum(returns#145)#160 AS returns#164, sum(profit#146)#161 AS profit#165]

(115) ReusedExchange [Reuses operator id: 105]
Output [8]: [channel#166, id#167, sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]

(116) CometColumnarToRow [codegen id : 25]
Input [8]: [channel#166, id#167, sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]

(117) HashAggregate [codegen id : 25]
Input [8]: [channel#166, id#167, sum#168, isEmpty#169, sum#170, isEmpty#171, sum#172, isEmpty#173]
Keys [2]: [channel#166, id#167]
Functions [3]: [sum(sales#174), sum(returns#175), sum(profit#176)]
Aggregate Attributes [3]: [sum(sales#174)#127, sum(returns#175)#128, sum(profit#176)#129]
Results [3]: [sum(sales#174)#127 AS sales#177, sum(returns#175)#128 AS returns#178, sum(profit#176)#129 AS profit#179]

(118) HashAggregate [codegen id : 25]
Input [3]: [sales#177, returns#178, profit#179]
Keys: []
Functions [3]: [partial_sum(sales#177), partial_sum(returns#178), partial_sum(profit#179)]
Aggregate Attributes [6]: [sum#180, isEmpty#181, sum#182, isEmpty#183, sum#184, isEmpty#185]
Results [6]: [sum#186, isEmpty#187, sum#188, isEmpty#189, sum#190, isEmpty#191]

(119) CometColumnarExchange
Input [6]: [sum#186, isEmpty#187, sum#188, isEmpty#189, sum#190, isEmpty#191]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(120) CometColumnarToRow [codegen id : 26]
Input [6]: [sum#186, isEmpty#187, sum#188, isEmpty#189, sum#190, isEmpty#191]

(121) HashAggregate [codegen id : 26]
Input [6]: [sum#186, isEmpty#187, sum#188, isEmpty#189, sum#190, isEmpty#191]
Keys: []
Functions [3]: [sum(sales#177), sum(returns#178), sum(profit#179)]
Aggregate Attributes [3]: [sum(sales#177)#192, sum(returns#178)#193, sum(profit#179)#194]
Results [5]: [null AS channel#195, null AS id#196, sum(sales#177)#192 AS sales#197, sum(returns#178)#193 AS returns#198, sum(profit#179)#194 AS profit#199]

(122) Union

(123) HashAggregate [codegen id : 27]
Input [5]: [channel#36, id#37, sales#130, returns#131, profit#132]
Keys [5]: [channel#36, id#37, sales#130, returns#131, profit#132]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#36, id#37, sales#130, returns#131, profit#132]

(124) CometColumnarExchange
Input [5]: [channel#36, id#37, sales#130, returns#131, profit#132]
Arguments: hashpartitioning(channel#36, id#37, sales#130, returns#131, profit#132, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(125) CometHashAggregate
Input [5]: [channel#36, id#37, sales#130, returns#131, profit#132]
Keys [5]: [channel#36, id#37, sales#130, returns#131, profit#132]
Functions: []

(126) CometTakeOrderedAndProject
Input [5]: [channel#36, id#37, sales#130, returns#131, profit#132]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#36 ASC NULLS FIRST,id#37 ASC NULLS FIRST], output=[channel#36,id#37,sales#130,returns#131,profit#132]), [channel#36, id#37, sales#130, returns#131, profit#132], 100, [channel#36 ASC NULLS FIRST, id#37 ASC NULLS FIRST], [channel#36, id#37, sales#130, returns#131, profit#132]

(127) CometColumnarToRow [codegen id : 28]
Input [5]: [channel#36, id#37, sales#130, returns#131, profit#132]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (132)
+- * CometColumnarToRow (131)
   +- CometProject (130)
      +- CometFilter (129)
         +- CometScan parquet spark_catalog.default.date_dim (128)


(128) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(129) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(130) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(131) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(132) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 41 Hosting Expression = cs_sold_date_sk#47 IN dynamicpruning#8

Subquery:3 Hosting operator id = 72 Hosting Expression = ws_sold_date_sk#84 IN dynamicpruning#8


