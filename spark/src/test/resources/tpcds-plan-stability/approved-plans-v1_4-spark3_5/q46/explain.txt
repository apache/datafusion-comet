== Physical Plan ==
* ColumnarToRow (38)
+- CometTakeOrderedAndProject (37)
   +- CometProject (36)
      +- CometBroadcastHashJoin (35)
         :- CometProject (33)
         :  +- CometBroadcastHashJoin (32)
         :     :- CometHashAggregate (28)
         :     :  +- CometExchange (27)
         :     :     +- CometHashAggregate (26)
         :     :        +- CometProject (25)
         :     :           +- CometBroadcastHashJoin (24)
         :     :              :- CometProject (20)
         :     :              :  +- CometBroadcastHashJoin (19)
         :     :              :     :- CometProject (14)
         :     :              :     :  +- CometBroadcastHashJoin (13)
         :     :              :     :     :- CometProject (8)
         :     :              :     :     :  +- CometBroadcastHashJoin (7)
         :     :              :     :     :     :- CometFilter (2)
         :     :              :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :              :     :     :     +- CometBroadcastExchange (6)
         :     :              :     :     :        +- CometProject (5)
         :     :              :     :     :           +- CometFilter (4)
         :     :              :     :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
         :     :              :     :     +- CometBroadcastExchange (12)
         :     :              :     :        +- CometProject (11)
         :     :              :     :           +- CometFilter (10)
         :     :              :     :              +- CometScan parquet spark_catalog.default.store (9)
         :     :              :     +- CometBroadcastExchange (18)
         :     :              :        +- CometProject (17)
         :     :              :           +- CometFilter (16)
         :     :              :              +- CometScan parquet spark_catalog.default.household_demographics (15)
         :     :              +- CometBroadcastExchange (23)
         :     :                 +- CometFilter (22)
         :     :                    +- CometScan parquet spark_catalog.default.customer_address (21)
         :     +- CometBroadcastExchange (31)
         :        +- CometFilter (30)
         :           +- CometScan parquet spark_catalog.default.customer (29)
         +- ReusedExchange (34)


(1) CometScan parquet spark_catalog.default.store_sales
Output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_customer_sk#1))

(3) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_dow#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(4) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Condition : ((d_dow#12 IN (6,0) AND d_year#11 IN (1999,2000,2001)) AND isnotnull(d_date_sk#10))

(5) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: [d_date_sk#10]

(7) CometBroadcastHashJoin
Left output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#10]
Arguments: [ss_sold_date_sk#8], [d_date_sk#10], Inner, BuildRight

(8) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8, d_date_sk#10]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(9) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#13, s_city#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(10) CometFilter
Input [2]: [s_store_sk#13, s_city#14]
Condition : (s_city#14 IN (Fairview,Midway) AND isnotnull(s_store_sk#13))

(11) CometProject
Input [2]: [s_store_sk#13, s_city#14]
Arguments: [s_store_sk#13], [s_store_sk#13]

(12) CometBroadcastExchange
Input [1]: [s_store_sk#13]
Arguments: [s_store_sk#13]

(13) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [1]: [s_store_sk#13]
Arguments: [ss_store_sk#4], [s_store_sk#13], Inner, BuildRight

(14) CometProject
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_store_sk#13]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(15) CometScan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(16) CometFilter
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Condition : (((hd_dep_count#16 = 4) OR (hd_vehicle_count#17 = 3)) AND isnotnull(hd_demo_sk#15))

(17) CometProject
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Arguments: [hd_demo_sk#15], [hd_demo_sk#15]

(18) CometBroadcastExchange
Input [1]: [hd_demo_sk#15]
Arguments: [hd_demo_sk#15]

(19) CometBroadcastHashJoin
Left output [6]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [1]: [hd_demo_sk#15]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#15], Inner, BuildRight

(20) CometProject
Input [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, hd_demo_sk#15]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(21) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#18, ca_city#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(22) CometFilter
Input [2]: [ca_address_sk#18, ca_city#19]
Condition : (isnotnull(ca_address_sk#18) AND isnotnull(ca_city#19))

(23) CometBroadcastExchange
Input [2]: [ca_address_sk#18, ca_city#19]
Arguments: [ca_address_sk#18, ca_city#19]

(24) CometBroadcastHashJoin
Left output [5]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [2]: [ca_address_sk#18, ca_city#19]
Arguments: [ss_addr_sk#3], [ca_address_sk#18], Inner, BuildRight

(25) CometProject
Input [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_address_sk#18, ca_city#19]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_city#19], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_city#19]

(26) CometHashAggregate
Input [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_city#19]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#19]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#6)), partial_sum(UnscaledValue(ss_net_profit#7))]

(27) CometExchange
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#19, sum#20, sum#21]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#19, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(28) CometHashAggregate
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#19, sum#20, sum#21]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#19]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#6)), sum(UnscaledValue(ss_net_profit#7))]

(29) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#22, c_current_addr_sk#23, c_first_name#24, c_last_name#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(30) CometFilter
Input [4]: [c_customer_sk#22, c_current_addr_sk#23, c_first_name#24, c_last_name#25]
Condition : (isnotnull(c_customer_sk#22) AND isnotnull(c_current_addr_sk#23))

(31) CometBroadcastExchange
Input [4]: [c_customer_sk#22, c_current_addr_sk#23, c_first_name#24, c_last_name#25]
Arguments: [c_customer_sk#22, c_current_addr_sk#23, c_first_name#24, c_last_name#25]

(32) CometBroadcastHashJoin
Left output [5]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#26, amt#27, profit#28]
Right output [4]: [c_customer_sk#22, c_current_addr_sk#23, c_first_name#24, c_last_name#25]
Arguments: [ss_customer_sk#1], [c_customer_sk#22], Inner, BuildRight

(33) CometProject
Input [9]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#26, amt#27, profit#28, c_customer_sk#22, c_current_addr_sk#23, c_first_name#24, c_last_name#25]
Arguments: [ss_ticket_number#5, bought_city#26, amt#27, profit#28, c_current_addr_sk#23, c_first_name#24, c_last_name#25], [ss_ticket_number#5, bought_city#26, amt#27, profit#28, c_current_addr_sk#23, c_first_name#24, c_last_name#25]

(34) ReusedExchange [Reuses operator id: 23]
Output [2]: [ca_address_sk#29, ca_city#30]

(35) CometBroadcastHashJoin
Left output [7]: [ss_ticket_number#5, bought_city#26, amt#27, profit#28, c_current_addr_sk#23, c_first_name#24, c_last_name#25]
Right output [2]: [ca_address_sk#29, ca_city#30]
Arguments: [c_current_addr_sk#23], [ca_address_sk#29], Inner, NOT (ca_city#30 = bought_city#26), BuildRight

(36) CometProject
Input [9]: [ss_ticket_number#5, bought_city#26, amt#27, profit#28, c_current_addr_sk#23, c_first_name#24, c_last_name#25, ca_address_sk#29, ca_city#30]
Arguments: [c_last_name#25, c_first_name#24, ca_city#30, bought_city#26, ss_ticket_number#5, amt#27, profit#28], [c_last_name#25, c_first_name#24, ca_city#30, bought_city#26, ss_ticket_number#5, amt#27, profit#28]

(37) CometTakeOrderedAndProject
Input [7]: [c_last_name#25, c_first_name#24, ca_city#30, bought_city#26, ss_ticket_number#5, amt#27, profit#28]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_last_name#25 ASC NULLS FIRST,c_first_name#24 ASC NULLS FIRST,ca_city#30 ASC NULLS FIRST,bought_city#26 ASC NULLS FIRST,ss_ticket_number#5 ASC NULLS FIRST], output=[c_last_name#25,c_first_name#24,ca_city#30,bought_city#26,ss_ticket_number#5,amt#27,profit#28]), [c_last_name#25, c_first_name#24, ca_city#30, bought_city#26, ss_ticket_number#5, amt#27, profit#28], 100, [c_last_name#25 ASC NULLS FIRST, c_first_name#24 ASC NULLS FIRST, ca_city#30 ASC NULLS FIRST, bought_city#26 ASC NULLS FIRST, ss_ticket_number#5 ASC NULLS FIRST], [c_last_name#25, c_first_name#24, ca_city#30, bought_city#26, ss_ticket_number#5, amt#27, profit#28]

(38) ColumnarToRow [codegen id : 1]
Input [7]: [c_last_name#25, c_first_name#24, ca_city#30, bought_city#26, ss_ticket_number#5, amt#27, profit#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (43)
+- * ColumnarToRow (42)
   +- CometProject (41)
      +- CometFilter (40)
         +- CometScan parquet spark_catalog.default.date_dim (39)


(39) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_dow#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(40) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Condition : ((d_dow#12 IN (6,0) AND d_year#11 IN (1999,2000,2001)) AND isnotnull(d_date_sk#10))

(41) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(42) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#10]

(43) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]


