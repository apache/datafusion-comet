== Physical Plan ==
TakeOrderedAndProject (24)
+- * Project (23)
   +- Window (22)
      +- * CometColumnarToRow (21)
         +- CometSort (20)
            +- CometExchange (19)
               +- CometHashAggregate (18)
                  +- CometExchange (17)
                     +- CometHashAggregate (16)
                        +- CometExpand (15)
                           +- CometProject (14)
                              +- CometBroadcastHashJoin (13)
                                 :- CometProject (8)
                                 :  +- CometBroadcastHashJoin (7)
                                 :     :- CometFilter (2)
                                 :     :  +- CometScan parquet spark_catalog.default.web_sales (1)
                                 :     +- CometBroadcastExchange (6)
                                 :        +- CometProject (5)
                                 :           +- CometFilter (4)
                                 :              +- CometScan parquet spark_catalog.default.date_dim (3)
                                 +- CometBroadcastExchange (12)
                                    +- CometProject (11)
                                       +- CometFilter (10)
                                          +- CometScan parquet spark_catalog.default.item (9)


(1) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Right output [1]: [d_date_sk#5]
Arguments: [ws_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#5]
Arguments: [ws_item_sk#1, ws_net_paid#2], [ws_item_sk#1, ws_net_paid#2]

(9) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#7, i_class#8, i_category#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#7, i_class#8, i_category#9]
Condition : isnotnull(i_item_sk#7)

(11) CometProject
Input [3]: [i_item_sk#7, i_class#8, i_category#9]
Arguments: [i_item_sk#7, i_class#10, i_category#11], [i_item_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#8, 50, true, false, true) AS i_class#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#9, 50, true, false, true) AS i_category#11]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#7, i_class#10, i_category#11]
Arguments: [i_item_sk#7, i_class#10, i_category#11]

(13) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#1, ws_net_paid#2]
Right output [3]: [i_item_sk#7, i_class#10, i_category#11]
Arguments: [ws_item_sk#1], [i_item_sk#7], Inner, BuildRight

(14) CometProject
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#7, i_class#10, i_category#11]
Arguments: [ws_net_paid#2, i_category#11, i_class#10], [ws_net_paid#2, i_category#11, i_class#10]

(15) CometExpand
Input [3]: [ws_net_paid#2, i_category#11, i_class#10]
Arguments: [[ws_net_paid#2, i_category#11, i_class#10, 0], [ws_net_paid#2, i_category#11, null, 1], [ws_net_paid#2, null, null, 3]], [ws_net_paid#2, i_category#12, i_class#13, spark_grouping_id#14]

(16) CometHashAggregate
Input [4]: [ws_net_paid#2, i_category#12, i_class#13, spark_grouping_id#14]
Keys [3]: [i_category#12, i_class#13, spark_grouping_id#14]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]

(17) CometExchange
Input [4]: [i_category#12, i_class#13, spark_grouping_id#14, sum#15]
Arguments: hashpartitioning(i_category#12, i_class#13, spark_grouping_id#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(18) CometHashAggregate
Input [4]: [i_category#12, i_class#13, spark_grouping_id#14, sum#15]
Keys [3]: [i_category#12, i_class#13, spark_grouping_id#14]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]

(19) CometExchange
Input [7]: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, _w0#18, _w1#19, _w2#20]
Arguments: hashpartitioning(_w1#19, _w2#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(20) CometSort
Input [7]: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, _w0#18, _w1#19, _w2#20]
Arguments: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, _w0#18, _w1#19, _w2#20], [_w1#19 ASC NULLS FIRST, _w2#20 ASC NULLS FIRST, _w0#18 DESC NULLS LAST]

(21) CometColumnarToRow [codegen id : 1]
Input [7]: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, _w0#18, _w1#19, _w2#20]

(22) Window
Input [7]: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, _w0#18, _w1#19, _w2#20]
Arguments: [rank(_w0#18) windowspecdefinition(_w1#19, _w2#20, _w0#18 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#21], [_w1#19, _w2#20], [_w0#18 DESC NULLS LAST]

(23) Project [codegen id : 2]
Output [5]: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, rank_within_parent#21]
Input [8]: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, _w0#18, _w1#19, _w2#20, rank_within_parent#21]

(24) TakeOrderedAndProject
Input [5]: [total_sum#16, i_category#12, i_class#13, lochierarchy#17, rank_within_parent#21]
Arguments: 100, [lochierarchy#17 DESC NULLS LAST, CASE WHEN (lochierarchy#17 = 0) THEN i_category#12 END ASC NULLS FIRST, rank_within_parent#21 ASC NULLS FIRST], [total_sum#16, i_category#12, i_class#13, lochierarchy#17, rank_within_parent#21]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (29)
+- * CometColumnarToRow (28)
   +- CometProject (27)
      +- CometFilter (26)
         +- CometScan parquet spark_catalog.default.date_dim (25)


(25) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(26) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#5))

(27) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(28) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(29) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]


