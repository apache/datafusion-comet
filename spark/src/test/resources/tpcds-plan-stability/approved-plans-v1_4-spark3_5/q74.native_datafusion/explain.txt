== Physical Plan ==
* CometColumnarToRow (68)
+- CometTakeOrderedAndProject (67)
   +- CometProject (66)
      +- CometBroadcastHashJoin (65)
         :- CometProject (51)
         :  +- CometBroadcastHashJoin (50)
         :     :- CometBroadcastHashJoin (33)
         :     :  :- CometFilter (17)
         :     :  :  +- CometHashAggregate (16)
         :     :  :     +- CometExchange (15)
         :     :  :        +- CometHashAggregate (14)
         :     :  :           +- CometProject (13)
         :     :  :              +- CometBroadcastHashJoin (12)
         :     :  :                 :- CometProject (8)
         :     :  :                 :  +- CometBroadcastHashJoin (7)
         :     :  :                 :     :- CometProject (3)
         :     :  :                 :     :  +- CometFilter (2)
         :     :  :                 :     :     +- CometNativeScan parquet spark_catalog.default.customer (1)
         :     :  :                 :     +- CometBroadcastExchange (6)
         :     :  :                 :        +- CometFilter (5)
         :     :  :                 :           +- CometNativeScan parquet spark_catalog.default.store_sales (4)
         :     :  :                 +- CometBroadcastExchange (11)
         :     :  :                    +- CometFilter (10)
         :     :  :                       +- CometNativeScan parquet spark_catalog.default.date_dim (9)
         :     :  +- CometBroadcastExchange (32)
         :     :     +- CometHashAggregate (31)
         :     :        +- CometExchange (30)
         :     :           +- CometHashAggregate (29)
         :     :              +- CometProject (28)
         :     :                 +- CometBroadcastHashJoin (27)
         :     :                    :- CometProject (23)
         :     :                    :  +- CometBroadcastHashJoin (22)
         :     :                    :     :- CometProject (20)
         :     :                    :     :  +- CometFilter (19)
         :     :                    :     :     +- CometNativeScan parquet spark_catalog.default.customer (18)
         :     :                    :     +- ReusedExchange (21)
         :     :                    +- CometBroadcastExchange (26)
         :     :                       +- CometFilter (25)
         :     :                          +- CometNativeScan parquet spark_catalog.default.date_dim (24)
         :     +- CometBroadcastExchange (49)
         :        +- CometFilter (48)
         :           +- CometHashAggregate (47)
         :              +- CometExchange (46)
         :                 +- CometHashAggregate (45)
         :                    +- CometProject (44)
         :                       +- CometBroadcastHashJoin (43)
         :                          :- CometProject (41)
         :                          :  +- CometBroadcastHashJoin (40)
         :                          :     :- CometProject (36)
         :                          :     :  +- CometFilter (35)
         :                          :     :     +- CometNativeScan parquet spark_catalog.default.customer (34)
         :                          :     +- CometBroadcastExchange (39)
         :                          :        +- CometFilter (38)
         :                          :           +- CometNativeScan parquet spark_catalog.default.web_sales (37)
         :                          +- ReusedExchange (42)
         +- CometBroadcastExchange (64)
            +- CometHashAggregate (63)
               +- CometExchange (62)
                  +- CometHashAggregate (61)
                     +- CometProject (60)
                        +- CometBroadcastHashJoin (59)
                           :- CometProject (57)
                           :  +- CometBroadcastHashJoin (56)
                           :     :- CometProject (54)
                           :     :  +- CometFilter (53)
                           :     :     +- CometNativeScan parquet spark_catalog.default.customer (52)
                           :     +- ReusedExchange (55)
                           +- ReusedExchange (58)


(1) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) CometFilter
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#2, 16, true, false, true)))

(3) CometProject
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Arguments: [c_customer_sk#1, c_customer_id#5, c_first_name#6, c_last_name#7], [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#2, 16, true, false, true) AS c_customer_id#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#3, 20, true, false, true) AS c_first_name#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#4, 30, true, false, true) AS c_last_name#7]

(4) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#10)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(5) CometFilter
Input [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Condition : isnotnull(ss_customer_sk#8)

(6) CometBroadcastExchange
Input [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Arguments: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]

(7) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#1, c_customer_id#5, c_first_name#6, c_last_name#7]
Right output [3]: [ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Arguments: [c_customer_sk#1], [ss_customer_sk#8], Inner, BuildRight

(8) CometProject
Input [7]: [c_customer_sk#1, c_customer_id#5, c_first_name#6, c_last_name#7, ss_customer_sk#8, ss_net_paid#9, ss_sold_date_sk#10]
Arguments: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10], [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_year#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#11, d_year#12]
Condition : (((isnotnull(d_year#12) AND (d_year#12 = 2001)) AND d_year#12 IN (2001,2002)) AND isnotnull(d_date_sk#11))

(11) CometBroadcastExchange
Input [2]: [d_date_sk#11, d_year#12]
Arguments: [d_date_sk#11, d_year#12]

(12) CometBroadcastHashJoin
Left output [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10]
Right output [2]: [d_date_sk#11, d_year#12]
Arguments: [ss_sold_date_sk#10], [d_date_sk#11], Inner, BuildRight

(13) CometProject
Input [7]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, ss_sold_date_sk#10, d_date_sk#11, d_year#12]
Arguments: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, d_year#12], [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, d_year#12]

(14) CometHashAggregate
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#9, d_year#12]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#9))]

(15) CometExchange
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12, sum#13]
Arguments: hashpartitioning(c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(16) CometHashAggregate
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12, sum#13]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#12]
Functions [1]: [sum(UnscaledValue(ss_net_paid#9))]

(17) CometFilter
Input [2]: [customer_id#14, year_total#15]
Condition : (isnotnull(year_total#15) AND (year_total#15 > 0.00))

(18) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#16, c_customer_id#17, c_first_name#18, c_last_name#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(19) CometFilter
Input [4]: [c_customer_sk#16, c_customer_id#17, c_first_name#18, c_last_name#19]
Condition : (isnotnull(c_customer_sk#16) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#17, 16, true, false, true)))

(20) CometProject
Input [4]: [c_customer_sk#16, c_customer_id#17, c_first_name#18, c_last_name#19]
Arguments: [c_customer_sk#16, c_customer_id#5, c_first_name#6, c_last_name#7], [c_customer_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#17, 16, true, false, true) AS c_customer_id#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#18, 20, true, false, true) AS c_first_name#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#19, 30, true, false, true) AS c_last_name#7]

(21) ReusedExchange [Reuses operator id: 6]
Output [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]

(22) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#16, c_customer_id#5, c_first_name#6, c_last_name#7]
Right output [3]: [ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]
Arguments: [c_customer_sk#16], [ss_customer_sk#20], Inner, BuildRight

(23) CometProject
Input [7]: [c_customer_sk#16, c_customer_id#5, c_first_name#6, c_last_name#7, ss_customer_sk#20, ss_net_paid#21, ss_sold_date_sk#22]
Arguments: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#21, ss_sold_date_sk#22], [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#21, ss_sold_date_sk#22]

(24) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#23, d_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(25) CometFilter
Input [2]: [d_date_sk#23, d_year#24]
Condition : (((isnotnull(d_year#24) AND (d_year#24 = 2002)) AND d_year#24 IN (2001,2002)) AND isnotnull(d_date_sk#23))

(26) CometBroadcastExchange
Input [2]: [d_date_sk#23, d_year#24]
Arguments: [d_date_sk#23, d_year#24]

(27) CometBroadcastHashJoin
Left output [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#21, ss_sold_date_sk#22]
Right output [2]: [d_date_sk#23, d_year#24]
Arguments: [ss_sold_date_sk#22], [d_date_sk#23], Inner, BuildRight

(28) CometProject
Input [7]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#21, ss_sold_date_sk#22, d_date_sk#23, d_year#24]
Arguments: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#21, d_year#24], [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#21, d_year#24]

(29) CometHashAggregate
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, ss_net_paid#21, d_year#24]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#24]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#21))]

(30) CometExchange
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#24, sum#25]
Arguments: hashpartitioning(c_customer_id#5, c_first_name#6, c_last_name#7, d_year#24, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(31) CometHashAggregate
Input [5]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#24, sum#25]
Keys [4]: [c_customer_id#5, c_first_name#6, c_last_name#7, d_year#24]
Functions [1]: [sum(UnscaledValue(ss_net_paid#21))]

(32) CometBroadcastExchange
Input [4]: [customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29]
Arguments: [customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29]

(33) CometBroadcastHashJoin
Left output [2]: [customer_id#14, year_total#15]
Right output [4]: [customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29]
Arguments: [customer_id#14], [customer_id#26], Inner, BuildRight

(34) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#30, c_customer_id#31, c_first_name#32, c_last_name#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(35) CometFilter
Input [4]: [c_customer_sk#30, c_customer_id#31, c_first_name#32, c_last_name#33]
Condition : (isnotnull(c_customer_sk#30) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#31, 16, true, false, true)))

(36) CometProject
Input [4]: [c_customer_sk#30, c_customer_id#31, c_first_name#32, c_last_name#33]
Arguments: [c_customer_sk#30, c_customer_id#34, c_first_name#35, c_last_name#36], [c_customer_sk#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#31, 16, true, false, true) AS c_customer_id#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#32, 20, true, false, true) AS c_first_name#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#33, 30, true, false, true) AS c_last_name#36]

(37) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#37, ws_net_paid#38, ws_sold_date_sk#39]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#39)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(38) CometFilter
Input [3]: [ws_bill_customer_sk#37, ws_net_paid#38, ws_sold_date_sk#39]
Condition : isnotnull(ws_bill_customer_sk#37)

(39) CometBroadcastExchange
Input [3]: [ws_bill_customer_sk#37, ws_net_paid#38, ws_sold_date_sk#39]
Arguments: [ws_bill_customer_sk#37, ws_net_paid#38, ws_sold_date_sk#39]

(40) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#30, c_customer_id#34, c_first_name#35, c_last_name#36]
Right output [3]: [ws_bill_customer_sk#37, ws_net_paid#38, ws_sold_date_sk#39]
Arguments: [c_customer_sk#30], [ws_bill_customer_sk#37], Inner, BuildRight

(41) CometProject
Input [7]: [c_customer_sk#30, c_customer_id#34, c_first_name#35, c_last_name#36, ws_bill_customer_sk#37, ws_net_paid#38, ws_sold_date_sk#39]
Arguments: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#38, ws_sold_date_sk#39], [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#38, ws_sold_date_sk#39]

(42) ReusedExchange [Reuses operator id: 11]
Output [2]: [d_date_sk#40, d_year#41]

(43) CometBroadcastHashJoin
Left output [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#38, ws_sold_date_sk#39]
Right output [2]: [d_date_sk#40, d_year#41]
Arguments: [ws_sold_date_sk#39], [d_date_sk#40], Inner, BuildRight

(44) CometProject
Input [7]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#38, ws_sold_date_sk#39, d_date_sk#40, d_year#41]
Arguments: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#38, d_year#41], [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#38, d_year#41]

(45) CometHashAggregate
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#38, d_year#41]
Keys [4]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#41]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#38))]

(46) CometExchange
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#41, sum#42]
Arguments: hashpartitioning(c_customer_id#34, c_first_name#35, c_last_name#36, d_year#41, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(47) CometHashAggregate
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#41, sum#42]
Keys [4]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#41]
Functions [1]: [sum(UnscaledValue(ws_net_paid#38))]

(48) CometFilter
Input [2]: [customer_id#43, year_total#44]
Condition : (isnotnull(year_total#44) AND (year_total#44 > 0.00))

(49) CometBroadcastExchange
Input [2]: [customer_id#43, year_total#44]
Arguments: [customer_id#43, year_total#44]

(50) CometBroadcastHashJoin
Left output [6]: [customer_id#14, year_total#15, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29]
Right output [2]: [customer_id#43, year_total#44]
Arguments: [customer_id#14], [customer_id#43], Inner, BuildRight

(51) CometProject
Input [8]: [customer_id#14, year_total#15, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, customer_id#43, year_total#44]
Arguments: [customer_id#14, year_total#15, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, year_total#44], [customer_id#14, year_total#15, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, year_total#44]

(52) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#45, c_customer_id#46, c_first_name#47, c_last_name#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(53) CometFilter
Input [4]: [c_customer_sk#45, c_customer_id#46, c_first_name#47, c_last_name#48]
Condition : (isnotnull(c_customer_sk#45) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#46, 16, true, false, true)))

(54) CometProject
Input [4]: [c_customer_sk#45, c_customer_id#46, c_first_name#47, c_last_name#48]
Arguments: [c_customer_sk#45, c_customer_id#34, c_first_name#35, c_last_name#36], [c_customer_sk#45, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#46, 16, true, false, true) AS c_customer_id#34, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#47, 20, true, false, true) AS c_first_name#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#48, 30, true, false, true) AS c_last_name#36]

(55) ReusedExchange [Reuses operator id: 39]
Output [3]: [ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]

(56) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#45, c_customer_id#34, c_first_name#35, c_last_name#36]
Right output [3]: [ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]
Arguments: [c_customer_sk#45], [ws_bill_customer_sk#49], Inner, BuildRight

(57) CometProject
Input [7]: [c_customer_sk#45, c_customer_id#34, c_first_name#35, c_last_name#36, ws_bill_customer_sk#49, ws_net_paid#50, ws_sold_date_sk#51]
Arguments: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#50, ws_sold_date_sk#51], [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#50, ws_sold_date_sk#51]

(58) ReusedExchange [Reuses operator id: 26]
Output [2]: [d_date_sk#52, d_year#53]

(59) CometBroadcastHashJoin
Left output [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#50, ws_sold_date_sk#51]
Right output [2]: [d_date_sk#52, d_year#53]
Arguments: [ws_sold_date_sk#51], [d_date_sk#52], Inner, BuildRight

(60) CometProject
Input [7]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#50, ws_sold_date_sk#51, d_date_sk#52, d_year#53]
Arguments: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#50, d_year#53], [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#50, d_year#53]

(61) CometHashAggregate
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, ws_net_paid#50, d_year#53]
Keys [4]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#53]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#50))]

(62) CometExchange
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#53, sum#54]
Arguments: hashpartitioning(c_customer_id#34, c_first_name#35, c_last_name#36, d_year#53, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(63) CometHashAggregate
Input [5]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#53, sum#54]
Keys [4]: [c_customer_id#34, c_first_name#35, c_last_name#36, d_year#53]
Functions [1]: [sum(UnscaledValue(ws_net_paid#50))]

(64) CometBroadcastExchange
Input [2]: [customer_id#55, year_total#56]
Arguments: [customer_id#55, year_total#56]

(65) CometBroadcastHashJoin
Left output [7]: [customer_id#14, year_total#15, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, year_total#44]
Right output [2]: [customer_id#55, year_total#56]
Arguments: [customer_id#14], [customer_id#55], Inner, (CASE WHEN (year_total#44 > 0.00) THEN (year_total#56 / year_total#44) END > CASE WHEN (year_total#15 > 0.00) THEN (year_total#29 / year_total#15) END), BuildRight

(66) CometProject
Input [9]: [customer_id#14, year_total#15, customer_id#26, customer_first_name#27, customer_last_name#28, year_total#29, year_total#44, customer_id#55, year_total#56]
Arguments: [customer_id#26, customer_first_name#27, customer_last_name#28], [customer_id#26, customer_first_name#27, customer_last_name#28]

(67) CometTakeOrderedAndProject
Input [3]: [customer_id#26, customer_first_name#27, customer_last_name#28]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[customer_id#26 ASC NULLS FIRST,customer_id#26 ASC NULLS FIRST,customer_id#26 ASC NULLS FIRST], output=[customer_id#26,customer_first_name#27,customer_last_name#28]), [customer_id#26, customer_first_name#27, customer_last_name#28], 100, 0, [customer_id#26 ASC NULLS FIRST, customer_id#26 ASC NULLS FIRST, customer_id#26 ASC NULLS FIRST], [customer_id#26, customer_first_name#27, customer_last_name#28]

(68) CometColumnarToRow [codegen id : 1]
Input [3]: [customer_id#26, customer_first_name#27, customer_last_name#28]

