== Physical Plan ==
* CometColumnarToRow (40)
+- CometTakeOrderedAndProject (39)
   +- CometProject (38)
      +- CometBroadcastHashJoin (37)
         :- CometProject (23)
         :  +- CometBroadcastHashJoin (22)
         :     :- CometProject (17)
         :     :  +- CometBroadcastHashJoin (16)
         :     :     :- CometFilter (2)
         :     :     :  +- CometNativeScan parquet spark_catalog.default.store (1)
         :     :     +- CometBroadcastExchange (15)
         :     :        +- CometFilter (14)
         :     :           +- CometHashAggregate (13)
         :     :              +- CometExchange (12)
         :     :                 +- CometHashAggregate (11)
         :     :                    +- CometProject (10)
         :     :                       +- CometBroadcastHashJoin (9)
         :     :                          :- CometFilter (4)
         :     :                          :  +- CometNativeScan parquet spark_catalog.default.store_sales (3)
         :     :                          +- CometBroadcastExchange (8)
         :     :                             +- CometProject (7)
         :     :                                +- CometFilter (6)
         :     :                                   +- CometNativeScan parquet spark_catalog.default.date_dim (5)
         :     +- CometBroadcastExchange (21)
         :        +- CometProject (20)
         :           +- CometFilter (19)
         :              +- CometNativeScan parquet spark_catalog.default.item (18)
         +- CometBroadcastExchange (36)
            +- CometFilter (35)
               +- CometHashAggregate (34)
                  +- CometExchange (33)
                     +- CometHashAggregate (32)
                        +- CometHashAggregate (31)
                           +- CometExchange (30)
                              +- CometHashAggregate (29)
                                 +- CometProject (28)
                                    +- CometBroadcastHashJoin (27)
                                       :- CometFilter (25)
                                       :  +- CometNativeScan parquet spark_catalog.default.store_sales (24)
                                       +- ReusedExchange (26)


(1) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) CometFilter
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(4) CometFilter
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(5) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_month_seq#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(6) CometFilter
Input [2]: [d_date_sk#7, d_month_seq#8]
Condition : (((isnotnull(d_month_seq#8) AND (d_month_seq#8 >= 1176)) AND (d_month_seq#8 <= 1187)) AND isnotnull(d_date_sk#7))

(7) CometProject
Input [2]: [d_date_sk#7, d_month_seq#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(8) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(9) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#6], [d_date_sk#7], Inner, BuildRight

(10) CometProject
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#7]
Arguments: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5], [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]

(11) CometHashAggregate
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]

(12) CometExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#9]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(13) CometHashAggregate
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#9]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]

(14) CometFilter
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#10]
Condition : isnotnull(revenue#10)

(15) CometBroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#10]
Arguments: [ss_store_sk#4, ss_item_sk#3, revenue#10]

(16) CometBroadcastHashJoin
Left output [2]: [s_store_sk#1, s_store_name#2]
Right output [3]: [ss_store_sk#4, ss_item_sk#3, revenue#10]
Arguments: [s_store_sk#1], [ss_store_sk#4], Inner, BuildRight

(17) CometProject
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10]
Arguments: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10], [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10]

(18) CometNativeScan parquet spark_catalog.default.item
Output [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(19) CometFilter
Input [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Condition : isnotnull(i_item_sk#11)

(20) CometProject
Input [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Arguments: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16], [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_brand#15, 50, true, false, true) AS i_brand#16]

(21) CometBroadcastExchange
Input [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16]
Arguments: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16]

(22) CometBroadcastHashJoin
Left output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10]
Right output [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16]
Arguments: [ss_item_sk#3], [i_item_sk#11], Inner, BuildRight

(23) CometProject
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10, i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16]
Arguments: [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16], [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16]

(24) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#20)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(25) CometFilter
Input [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Condition : isnotnull(ss_store_sk#18)

(26) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#21]

(27) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Right output [1]: [d_date_sk#21]
Arguments: [ss_sold_date_sk#20], [d_date_sk#21], Inner, BuildRight

(28) CometProject
Input [5]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20, d_date_sk#21]
Arguments: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19], [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19]

(29) CometHashAggregate
Input [3]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19]
Keys [2]: [ss_store_sk#18, ss_item_sk#17]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#19))]

(30) CometExchange
Input [3]: [ss_store_sk#18, ss_item_sk#17, sum#22]
Arguments: hashpartitioning(ss_store_sk#18, ss_item_sk#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(31) CometHashAggregate
Input [3]: [ss_store_sk#18, ss_item_sk#17, sum#22]
Keys [2]: [ss_store_sk#18, ss_item_sk#17]
Functions [1]: [sum(UnscaledValue(ss_sales_price#19))]

(32) CometHashAggregate
Input [2]: [ss_store_sk#18, revenue#23]
Keys [1]: [ss_store_sk#18]
Functions [1]: [partial_avg(revenue#23)]

(33) CometExchange
Input [3]: [ss_store_sk#18, sum#24, count#25]
Arguments: hashpartitioning(ss_store_sk#18, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(34) CometHashAggregate
Input [3]: [ss_store_sk#18, sum#24, count#25]
Keys [1]: [ss_store_sk#18]
Functions [1]: [avg(revenue#23)]

(35) CometFilter
Input [2]: [ss_store_sk#18, ave#26]
Condition : isnotnull(ave#26)

(36) CometBroadcastExchange
Input [2]: [ss_store_sk#18, ave#26]
Arguments: [ss_store_sk#18, ave#26]

(37) CometBroadcastHashJoin
Left output [7]: [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16]
Right output [2]: [ss_store_sk#18, ave#26]
Arguments: [ss_store_sk#4], [ss_store_sk#18], Inner, (cast(revenue#10 as decimal(23,7)) <= (0.1 * ave#26)), BuildRight

(38) CometProject
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#16, ss_store_sk#18, ave#26]
Arguments: [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#16], [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#16]

(39) CometTakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#16]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[s_store_name#2 ASC NULLS FIRST,i_item_desc#12 ASC NULLS FIRST], output=[s_store_name#2,i_item_desc#12,revenue#10,i_current_price#13,i_wholesale_cost#14,i_brand#16]), [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#16], 100, 0, [s_store_name#2 ASC NULLS FIRST, i_item_desc#12 ASC NULLS FIRST], [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#16]

(40) CometColumnarToRow [codegen id : 1]
Input [6]: [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#16]

