== Physical Plan ==
* ColumnarToRow (39)
+- CometTakeOrderedAndProject (38)
   +- CometProject (37)
      +- CometBroadcastHashJoin (36)
         :- CometProject (22)
         :  +- CometBroadcastHashJoin (21)
         :     :- CometProject (17)
         :     :  +- CometBroadcastHashJoin (16)
         :     :     :- CometFilter (2)
         :     :     :  +- CometNativeScan: `spark_catalog`.`default`.`store` (1)
         :     :     +- CometBroadcastExchange (15)
         :     :        +- CometFilter (14)
         :     :           +- CometHashAggregate (13)
         :     :              +- CometExchange (12)
         :     :                 +- CometHashAggregate (11)
         :     :                    +- CometProject (10)
         :     :                       +- CometBroadcastHashJoin (9)
         :     :                          :- CometFilter (4)
         :     :                          :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (3)
         :     :                          +- CometBroadcastExchange (8)
         :     :                             +- CometProject (7)
         :     :                                +- CometFilter (6)
         :     :                                   +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (5)
         :     +- CometBroadcastExchange (20)
         :        +- CometFilter (19)
         :           +- CometNativeScan: `spark_catalog`.`default`.`item` (18)
         +- CometBroadcastExchange (35)
            +- CometFilter (34)
               +- CometHashAggregate (33)
                  +- CometExchange (32)
                     +- CometHashAggregate (31)
                        +- CometHashAggregate (30)
                           +- CometExchange (29)
                              +- CometHashAggregate (28)
                                 +- CometProject (27)
                                    +- CometBroadcastHashJoin (26)
                                       :- CometFilter (24)
                                       :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (23)
                                       +- ReusedExchange (25)


(1) CometNativeScan: `spark_catalog`.`default`.`store`
Output [2]: [s_store_sk#1, s_store_name#2]
Arguments: [s_store_sk#1, s_store_name#2]

(2) CometFilter
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]

(4) CometFilter
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(5) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#7, d_month_seq#8]
Arguments: [d_date_sk#7, d_month_seq#8]

(6) CometFilter
Input [2]: [d_date_sk#7, d_month_seq#8]
Condition : (((isnotnull(d_month_seq#8) AND (d_month_seq#8 >= 1176)) AND (d_month_seq#8 <= 1187)) AND isnotnull(d_date_sk#7))

(7) CometProject
Input [2]: [d_date_sk#7, d_month_seq#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(8) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(9) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#6], [d_date_sk#7], Inner, BuildRight

(10) CometProject
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#7]
Arguments: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5], [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]

(11) CometHashAggregate
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]

(12) CometExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#9]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(13) CometHashAggregate
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#9]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]

(14) CometFilter
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#10]
Condition : isnotnull(revenue#10)

(15) CometBroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#10]
Arguments: [ss_store_sk#4, ss_item_sk#3, revenue#10]

(16) CometBroadcastHashJoin
Left output [2]: [s_store_sk#1, s_store_name#2]
Right output [3]: [ss_store_sk#4, ss_item_sk#3, revenue#10]
Arguments: [s_store_sk#1], [ss_store_sk#4], Inner, BuildRight

(17) CometProject
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10]
Arguments: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10], [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10]

(18) CometNativeScan: `spark_catalog`.`default`.`item`
Output [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Arguments: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]

(19) CometFilter
Input [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Condition : isnotnull(i_item_sk#11)

(20) CometBroadcastExchange
Input [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Arguments: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]

(21) CometBroadcastHashJoin
Left output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10]
Right output [5]: [i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Arguments: [ss_item_sk#3], [i_item_sk#11], Inner, BuildRight

(22) CometProject
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#10, i_item_sk#11, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Arguments: [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15], [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]

(23) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [4]: [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18, ss_sold_date_sk#19]
Arguments: [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18, ss_sold_date_sk#19]

(24) CometFilter
Input [4]: [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18, ss_sold_date_sk#19]
Condition : isnotnull(ss_store_sk#17)

(25) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#20]

(26) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18, ss_sold_date_sk#19]
Right output [1]: [d_date_sk#20]
Arguments: [ss_sold_date_sk#19], [d_date_sk#20], Inner, BuildRight

(27) CometProject
Input [5]: [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18, ss_sold_date_sk#19, d_date_sk#20]
Arguments: [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18], [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18]

(28) CometHashAggregate
Input [3]: [ss_item_sk#16, ss_store_sk#17, ss_sales_price#18]
Keys [2]: [ss_store_sk#17, ss_item_sk#16]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#18))]

(29) CometExchange
Input [3]: [ss_store_sk#17, ss_item_sk#16, sum#21]
Arguments: hashpartitioning(ss_store_sk#17, ss_item_sk#16, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(30) CometHashAggregate
Input [3]: [ss_store_sk#17, ss_item_sk#16, sum#21]
Keys [2]: [ss_store_sk#17, ss_item_sk#16]
Functions [1]: [sum(UnscaledValue(ss_sales_price#18))]

(31) CometHashAggregate
Input [2]: [ss_store_sk#17, revenue#22]
Keys [1]: [ss_store_sk#17]
Functions [1]: [partial_avg(revenue#22)]

(32) CometExchange
Input [3]: [ss_store_sk#17, sum#23, count#24]
Arguments: hashpartitioning(ss_store_sk#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(33) CometHashAggregate
Input [3]: [ss_store_sk#17, sum#23, count#24]
Keys [1]: [ss_store_sk#17]
Functions [1]: [avg(revenue#22)]

(34) CometFilter
Input [2]: [ss_store_sk#17, ave#25]
Condition : isnotnull(ave#25)

(35) CometBroadcastExchange
Input [2]: [ss_store_sk#17, ave#25]
Arguments: [ss_store_sk#17, ave#25]

(36) CometBroadcastHashJoin
Left output [7]: [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Right output [2]: [ss_store_sk#17, ave#25]
Arguments: [ss_store_sk#4], [ss_store_sk#17], Inner, (cast(revenue#10 as decimal(23,7)) <= (0.1 * ave#25)), BuildRight

(37) CometProject
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#10, i_item_desc#12, i_current_price#13, i_wholesale_cost#14, i_brand#15, ss_store_sk#17, ave#25]
Arguments: [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#15], [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#15]

(38) CometTakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#15]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[s_store_name#2 ASC NULLS FIRST,i_item_desc#12 ASC NULLS FIRST], output=[s_store_name#2,i_item_desc#12,revenue#10,i_current_price#13,i_wholesale_cost#14,i_brand#15]), [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#15], 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#12 ASC NULLS FIRST], [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#15]

(39) ColumnarToRow [codegen id : 1]
Input [6]: [s_store_name#2, i_item_desc#12, revenue#10, i_current_price#13, i_wholesale_cost#14, i_brand#15]

