== Physical Plan ==
TakeOrderedAndProject (49)
+- * Project (48)
   +- Window (47)
      +- * CometColumnarToRow (46)
         +- CometSort (45)
            +- CometColumnarExchange (44)
               +- * HashAggregate (43)
                  +- * CometColumnarToRow (42)
                     +- CometColumnarExchange (41)
                        +- * HashAggregate (40)
                           +- * Expand (39)
                              +- * Project (38)
                                 +- * BroadcastHashJoin Inner BuildRight (37)
                                    :- * CometColumnarToRow (9)
                                    :  +- CometProject (8)
                                    :     +- CometBroadcastHashJoin (7)
                                    :        :- CometFilter (2)
                                    :        :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
                                    :        +- CometBroadcastExchange (6)
                                    :           +- CometProject (5)
                                    :              +- CometFilter (4)
                                    :                 +- CometNativeScan parquet spark_catalog.default.date_dim (3)
                                    +- BroadcastExchange (36)
                                       +- * Project (35)
                                          +- * BroadcastHashJoin LeftSemi BuildRight (34)
                                             :- * CometColumnarToRow (12)
                                             :  +- CometFilter (11)
                                             :     +- CometNativeScan parquet spark_catalog.default.store (10)
                                             +- BroadcastExchange (33)
                                                +- * Project (32)
                                                   +- * Filter (31)
                                                      +- Window (30)
                                                         +- WindowGroupLimit (29)
                                                            +- * CometColumnarToRow (28)
                                                               +- CometSort (27)
                                                                  +- CometHashAggregate (26)
                                                                     +- CometExchange (25)
                                                                        +- CometHashAggregate (24)
                                                                           +- CometProject (23)
                                                                              +- CometBroadcastHashJoin (22)
                                                                                 :- CometProject (20)
                                                                                 :  +- CometBroadcastHashJoin (19)
                                                                                 :     :- CometFilter (14)
                                                                                 :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (13)
                                                                                 :     +- CometBroadcastExchange (18)
                                                                                 :        +- CometProject (17)
                                                                                 :           +- CometFilter (16)
                                                                                 :              +- CometNativeScan parquet spark_catalog.default.store (15)
                                                                                 +- ReusedExchange (21)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4], [d_date_sk#4]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: [d_date_sk#4]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#4]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#4]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) CometColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometNativeScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(12) CometColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(13) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#11)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_store_sk#9)

(15) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#12, s_state#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#12, s_state#13]
Condition : isnotnull(s_store_sk#12)

(17) CometProject
Input [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12, s_state#14], [s_store_sk#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#13, 2, true, false, true) AS s_state#14]

(18) CometBroadcastExchange
Input [2]: [s_store_sk#12, s_state#14]
Arguments: [s_store_sk#12, s_state#14]

(19) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Right output [2]: [s_store_sk#12, s_state#14]
Arguments: [ss_store_sk#9], [s_store_sk#12], Inner, BuildRight

(20) CometProject
Input [5]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11, s_store_sk#12, s_state#14]
Arguments: [ss_net_profit#10, ss_sold_date_sk#11, s_state#14], [ss_net_profit#10, ss_sold_date_sk#11, s_state#14]

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#15]

(22) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#14]
Right output [1]: [d_date_sk#15]
Arguments: [ss_sold_date_sk#11], [d_date_sk#15], Inner, BuildRight

(23) CometProject
Input [4]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#14, d_date_sk#15]
Arguments: [ss_net_profit#10, s_state#14], [ss_net_profit#10, s_state#14]

(24) CometHashAggregate
Input [2]: [ss_net_profit#10, s_state#14]
Keys [1]: [s_state#14]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]

(25) CometExchange
Input [2]: [s_state#14, sum#16]
Arguments: hashpartitioning(s_state#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(26) CometHashAggregate
Input [2]: [s_state#14, sum#16]
Keys [1]: [s_state#14]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]

(27) CometSort
Input [3]: [s_state#14, _w0#17, s_state#14]
Arguments: [s_state#14, _w0#17, s_state#14], [s_state#14 ASC NULLS FIRST, _w0#17 DESC NULLS LAST]

(28) CometColumnarToRow [codegen id : 1]
Input [3]: [s_state#14, _w0#17, s_state#14]

(29) WindowGroupLimit
Input [3]: [s_state#14, _w0#17, s_state#14]
Arguments: [s_state#14], [_w0#17 DESC NULLS LAST], rank(_w0#17), 5, Final

(30) Window
Input [3]: [s_state#14, _w0#17, s_state#14]
Arguments: [rank(_w0#17) windowspecdefinition(s_state#14, _w0#17 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#18], [s_state#14], [_w0#17 DESC NULLS LAST]

(31) Filter [codegen id : 2]
Input [4]: [s_state#14, _w0#17, s_state#14, ranking#18]
Condition : (ranking#18 <= 5)

(32) Project [codegen id : 2]
Output [1]: [s_state#14]
Input [4]: [s_state#14, _w0#17, s_state#14, ranking#18]

(33) BroadcastExchange
Input [1]: [s_state#14]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(34) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#8, 2, true, false, true)]
Right keys [1]: [s_state#14]
Join type: LeftSemi
Join condition: None

(35) Project [codegen id : 3]
Output [3]: [s_store_sk#6, s_county#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#8, 2, true, false, true) AS s_state#19]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(36) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(37) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join type: Inner
Join condition: None

(38) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_state#19, s_county#7]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#19]

(39) Expand [codegen id : 4]
Input [3]: [ss_net_profit#2, s_state#19, s_county#7]
Arguments: [[ss_net_profit#2, s_state#19, s_county#7, 0], [ss_net_profit#2, s_state#19, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]

(40) HashAggregate [codegen id : 4]
Input [4]: [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#23]
Results [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]

(41) CometColumnarExchange
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Arguments: hashpartitioning(s_state#20, s_county#21, spark_grouping_id#22, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(42) CometColumnarToRow [codegen id : 5]
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]

(43) HashAggregate [codegen id : 5]
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#25]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS total_sum#26, s_state#20, s_county#21, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS lochierarchy#27, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS _w0#28, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS _w1#29, CASE WHEN (cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint) = 0) THEN s_state#20 END AS _w2#30]

(44) CometColumnarExchange
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: hashpartitioning(_w1#29, _w2#30, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(45) CometSort
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30], [_w1#29 ASC NULLS FIRST, _w2#30 ASC NULLS FIRST, _w0#28 DESC NULLS LAST]

(46) CometColumnarToRow [codegen id : 6]
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]

(47) Window
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [rank(_w0#28) windowspecdefinition(_w1#29, _w2#30, _w0#28 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#31], [_w1#29, _w2#30], [_w0#28 DESC NULLS LAST]

(48) Project [codegen id : 7]
Output [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Input [8]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30, rank_within_parent#31]

(49) TakeOrderedAndProject
Input [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Arguments: 100, [lochierarchy#27 DESC NULLS LAST, CASE WHEN (lochierarchy#27 = 0) THEN s_state#20 END ASC NULLS FIRST, rank_within_parent#31 ASC NULLS FIRST], [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]

