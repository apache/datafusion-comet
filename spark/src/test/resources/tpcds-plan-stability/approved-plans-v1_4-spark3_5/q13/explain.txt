== Physical Plan ==
* HashAggregate (34)
+- * CometColumnarToRow (33)
   +- CometColumnarExchange (32)
      +- * HashAggregate (31)
         +- * Project (30)
            +- * BroadcastHashJoin Inner BuildRight (29)
               :- * Project (24)
               :  +- * BroadcastHashJoin Inner BuildRight (23)
               :     :- * Project (18)
               :     :  +- * BroadcastHashJoin Inner BuildRight (17)
               :     :     :- * Project (15)
               :     :     :  +- * BroadcastHashJoin Inner BuildRight (14)
               :     :     :     :- * CometColumnarToRow (8)
               :     :     :     :  +- CometProject (7)
               :     :     :     :     +- CometBroadcastHashJoin (6)
               :     :     :     :        :- CometFilter (2)
               :     :     :     :        :  +- CometScan parquet spark_catalog.default.store_sales (1)
               :     :     :     :        +- CometBroadcastExchange (5)
               :     :     :     :           +- CometFilter (4)
               :     :     :     :              +- CometScan parquet spark_catalog.default.store (3)
               :     :     :     +- BroadcastExchange (13)
               :     :     :        +- * Project (12)
               :     :     :           +- * Filter (11)
               :     :     :              +- * CometColumnarToRow (10)
               :     :     :                 +- CometScan parquet spark_catalog.default.customer_address (9)
               :     :     +- ReusedExchange (16)
               :     +- BroadcastExchange (22)
               :        +- * Filter (21)
               :           +- * CometColumnarToRow (20)
               :              +- CometScan parquet spark_catalog.default.customer_demographics (19)
               +- BroadcastExchange (28)
                  +- * CometColumnarToRow (27)
                     +- CometFilter (26)
                        +- CometScan parquet spark_catalog.default.household_demographics (25)


(1) CometScan parquet spark_catalog.default.store_sales
Output [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#10), dynamicpruningexpression(ss_sold_date_sk#10 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_hdemo_sk), Or(Or(And(GreaterThanOrEqual(ss_net_profit,100.00),LessThanOrEqual(ss_net_profit,200.00)),And(GreaterThanOrEqual(ss_net_profit,150.00),LessThanOrEqual(ss_net_profit,300.00))),And(GreaterThanOrEqual(ss_net_profit,50.00),LessThanOrEqual(ss_net_profit,250.00))), Or(Or(And(GreaterThanOrEqual(ss_sales_price,100.00),LessThanOrEqual(ss_sales_price,150.00)),And(GreaterThanOrEqual(ss_sales_price,50.00),LessThanOrEqual(ss_sales_price,100.00))),And(GreaterThanOrEqual(ss_sales_price,150.00),LessThanOrEqual(ss_sales_price,200.00)))]
ReadSchema: struct<ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Condition : (((((isnotnull(ss_store_sk#4) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_cdemo_sk#1)) AND isnotnull(ss_hdemo_sk#2)) AND ((((ss_net_profit#9 >= 100.00) AND (ss_net_profit#9 <= 200.00)) OR ((ss_net_profit#9 >= 150.00) AND (ss_net_profit#9 <= 300.00))) OR ((ss_net_profit#9 >= 50.00) AND (ss_net_profit#9 <= 250.00)))) AND ((((ss_sales_price#6 >= 100.00) AND (ss_sales_price#6 <= 150.00)) OR ((ss_sales_price#6 >= 50.00) AND (ss_sales_price#6 <= 100.00))) OR ((ss_sales_price#6 >= 150.00) AND (ss_sales_price#6 <= 200.00))))

(3) CometScan parquet spark_catalog.default.store
Output [1]: [s_store_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(4) CometFilter
Input [1]: [s_store_sk#12]
Condition : isnotnull(s_store_sk#12)

(5) CometBroadcastExchange
Input [1]: [s_store_sk#12]
Arguments: [s_store_sk#12]

(6) CometBroadcastHashJoin
Left output [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Right output [1]: [s_store_sk#12]
Arguments: [ss_store_sk#4], [s_store_sk#12], Inner, BuildRight

(7) CometProject
Input [11]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, s_store_sk#12]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10], [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]

(8) CometColumnarToRow [codegen id : 5]
Input [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]

(9) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#13, ca_state#14, ca_country#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(10) CometColumnarToRow [codegen id : 1]
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]

(11) Filter [codegen id : 1]
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]
Condition : (((isnotnull(ca_country#15) AND (ca_country#15 = United States)) AND isnotnull(ca_address_sk#13)) AND ((rpad(ca_state#14, 2,  ) IN (TX,OH) OR rpad(ca_state#14, 2,  ) IN (OR,NM,KY)) OR rpad(ca_state#14, 2,  ) IN (VA,TX,MS)))

(12) Project [codegen id : 1]
Output [2]: [ca_address_sk#13, ca_state#14]
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]

(13) BroadcastExchange
Input [2]: [ca_address_sk#13, ca_state#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_addr_sk#3]
Right keys [1]: [ca_address_sk#13]
Join type: Inner
Join condition: ((((rpad(ca_state#14, 2,  ) IN (TX,OH) AND (ss_net_profit#9 >= 100.00)) AND (ss_net_profit#9 <= 200.00)) OR ((rpad(ca_state#14, 2,  ) IN (OR,NM,KY) AND (ss_net_profit#9 >= 150.00)) AND (ss_net_profit#9 <= 300.00))) OR ((rpad(ca_state#14, 2,  ) IN (VA,TX,MS) AND (ss_net_profit#9 >= 50.00)) AND (ss_net_profit#9 <= 250.00)))

(15) Project [codegen id : 5]
Output [7]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10]
Input [11]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, ca_address_sk#13, ca_state#14]

(16) ReusedExchange [Reuses operator id: 39]
Output [1]: [d_date_sk#16]

(17) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#10]
Right keys [1]: [d_date_sk#16]
Join type: Inner
Join condition: None

(18) Project [codegen id : 5]
Output [6]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Input [8]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10, d_date_sk#16]

(19) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(20) CometColumnarToRow [codegen id : 3]
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(21) Filter [codegen id : 3]
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Condition : (isnotnull(cd_demo_sk#17) AND ((((rpad(cd_marital_status#18, 1,  ) = M) AND (rpad(cd_education_status#19, 20,  ) = Advanced Degree     )) OR ((rpad(cd_marital_status#18, 1,  ) = S) AND (rpad(cd_education_status#19, 20,  ) = College             ))) OR ((rpad(cd_marital_status#18, 1,  ) = W) AND (rpad(cd_education_status#19, 20,  ) = 2 yr Degree         ))))

(22) BroadcastExchange
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(23) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#1]
Right keys [1]: [cd_demo_sk#17]
Join type: Inner
Join condition: ((((((rpad(cd_marital_status#18, 1,  ) = M) AND (rpad(cd_education_status#19, 20,  ) = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) OR ((((rpad(cd_marital_status#18, 1,  ) = S) AND (rpad(cd_education_status#19, 20,  ) = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00))) OR ((((rpad(cd_marital_status#18, 1,  ) = W) AND (rpad(cd_education_status#19, 20,  ) = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00)))

(24) Project [codegen id : 5]
Output [7]: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#18, cd_education_status#19]
Input [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(25) CometScan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#20, hd_dep_count#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), Or(EqualTo(hd_dep_count,3),EqualTo(hd_dep_count,1))]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>

(26) CometFilter
Input [2]: [hd_demo_sk#20, hd_dep_count#21]
Condition : (isnotnull(hd_demo_sk#20) AND ((hd_dep_count#21 = 3) OR (hd_dep_count#21 = 1)))

(27) CometColumnarToRow [codegen id : 4]
Input [2]: [hd_demo_sk#20, hd_dep_count#21]

(28) BroadcastExchange
Input [2]: [hd_demo_sk#20, hd_dep_count#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#20]
Join type: Inner
Join condition: (((((((rpad(cd_marital_status#18, 1,  ) = M) AND (rpad(cd_education_status#19, 20,  ) = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) AND (hd_dep_count#21 = 3)) OR (((((rpad(cd_marital_status#18, 1,  ) = S) AND (rpad(cd_education_status#19, 20,  ) = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00)) AND (hd_dep_count#21 = 1))) OR (((((rpad(cd_marital_status#18, 1,  ) = W) AND (rpad(cd_education_status#19, 20,  ) = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00)) AND (hd_dep_count#21 = 1)))

(30) Project [codegen id : 5]
Output [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Input [9]: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#18, cd_education_status#19, hd_demo_sk#20, hd_dep_count#21]

(31) HashAggregate [codegen id : 5]
Input [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Keys: []
Functions [4]: [partial_avg(ss_quantity#5), partial_avg(UnscaledValue(ss_ext_sales_price#7)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#8)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [7]: [sum#22, count#23, sum#24, count#25, sum#26, count#27, sum#28]
Results [7]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35]

(32) CometColumnarExchange
Input [7]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(33) CometColumnarToRow [codegen id : 6]
Input [7]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35]

(34) HashAggregate [codegen id : 6]
Input [7]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35]
Keys: []
Functions [4]: [avg(ss_quantity#5), avg(UnscaledValue(ss_ext_sales_price#7)), avg(UnscaledValue(ss_ext_wholesale_cost#8)), sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [4]: [avg(ss_quantity#5)#36, avg(UnscaledValue(ss_ext_sales_price#7))#37, avg(UnscaledValue(ss_ext_wholesale_cost#8))#38, sum(UnscaledValue(ss_ext_wholesale_cost#8))#39]
Results [4]: [avg(ss_quantity#5)#36 AS avg(ss_quantity)#40, cast((avg(UnscaledValue(ss_ext_sales_price#7))#37 / 100.0) as decimal(11,6)) AS avg(ss_ext_sales_price)#41, cast((avg(UnscaledValue(ss_ext_wholesale_cost#8))#38 / 100.0) as decimal(11,6)) AS avg(ss_ext_wholesale_cost)#42, MakeDecimal(sum(UnscaledValue(ss_ext_wholesale_cost#8))#39,17,2) AS sum(ss_ext_wholesale_cost)#43]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#10 IN dynamicpruning#11
BroadcastExchange (39)
+- * CometColumnarToRow (38)
   +- CometProject (37)
      +- CometFilter (36)
         +- CometScan parquet spark_catalog.default.date_dim (35)


(35) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(36) CometFilter
Input [2]: [d_date_sk#16, d_year#44]
Condition : ((isnotnull(d_year#44) AND (d_year#44 = 2001)) AND isnotnull(d_date_sk#16))

(37) CometProject
Input [2]: [d_date_sk#16, d_year#44]
Arguments: [d_date_sk#16], [d_date_sk#16]

(38) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#16]

(39) BroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


