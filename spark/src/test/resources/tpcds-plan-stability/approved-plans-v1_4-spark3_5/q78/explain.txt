== Physical Plan ==
TakeOrderedAndProject (58)
+- * Project (57)
   +- * ColumnarToRow (56)
      +- CometHashJoin (55)
         :- CometProject (37)
         :  +- CometHashJoin (36)
         :     :- CometHashAggregate (18)
         :     :  +- CometExchange (17)
         :     :     +- CometHashAggregate (16)
         :     :        +- CometProject (15)
         :     :           +- CometBroadcastHashJoin (14)
         :     :              :- CometProject (10)
         :     :              :  +- CometFilter (9)
         :     :              :     +- CometHashJoin (8)
         :     :              :        :- CometExchange (3)
         :     :              :        :  +- CometFilter (2)
         :     :              :        :     +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :              :        +- CometExchange (7)
         :     :              :           +- CometProject (6)
         :     :              :              +- CometFilter (5)
         :     :              :                 +- CometScan parquet spark_catalog.default.store_returns (4)
         :     :              +- CometBroadcastExchange (13)
         :     :                 +- CometFilter (12)
         :     :                    +- CometScan parquet spark_catalog.default.date_dim (11)
         :     +- CometFilter (35)
         :        +- CometHashAggregate (34)
         :           +- CometExchange (33)
         :              +- CometHashAggregate (32)
         :                 +- CometProject (31)
         :                    +- CometBroadcastHashJoin (30)
         :                       :- CometProject (28)
         :                       :  +- CometFilter (27)
         :                       :     +- CometHashJoin (26)
         :                       :        :- CometExchange (21)
         :                       :        :  +- CometFilter (20)
         :                       :        :     +- CometScan parquet spark_catalog.default.web_sales (19)
         :                       :        +- CometExchange (25)
         :                       :           +- CometProject (24)
         :                       :              +- CometFilter (23)
         :                       :                 +- CometScan parquet spark_catalog.default.web_returns (22)
         :                       +- ReusedExchange (29)
         +- CometFilter (54)
            +- CometHashAggregate (53)
               +- CometExchange (52)
                  +- CometHashAggregate (51)
                     +- CometProject (50)
                        +- CometBroadcastHashJoin (49)
                           :- CometProject (47)
                           :  +- CometFilter (46)
                           :     +- CometHashJoin (45)
                           :        :- CometExchange (40)
                           :        :  +- CometFilter (39)
                           :        :     +- CometScan parquet spark_catalog.default.catalog_sales (38)
                           :        +- CometExchange (44)
                           :           +- CometProject (43)
                           :              +- CometFilter (42)
                           :                 +- CometScan parquet spark_catalog.default.catalog_returns (41)
                           +- ReusedExchange (48)


(1) CometScan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_ticket_number:int,ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_sales_price:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_customer_sk#2))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_ticket_number#3, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometScan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#9, sr_ticket_number#10, sr_returned_date_sk#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(5) CometFilter
Input [3]: [sr_item_sk#9, sr_ticket_number#10, sr_returned_date_sk#11]
Condition : (isnotnull(sr_ticket_number#10) AND isnotnull(sr_item_sk#9))

(6) CometProject
Input [3]: [sr_item_sk#9, sr_ticket_number#10, sr_returned_date_sk#11]
Arguments: [sr_item_sk#9, sr_ticket_number#10], [sr_item_sk#9, sr_ticket_number#10]

(7) CometExchange
Input [2]: [sr_item_sk#9, sr_ticket_number#10]
Arguments: hashpartitioning(sr_ticket_number#10, sr_item_sk#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(8) CometHashJoin
Left output [7]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Right output [2]: [sr_item_sk#9, sr_ticket_number#10]
Arguments: [ss_ticket_number#3, ss_item_sk#1], [sr_ticket_number#10, sr_item_sk#9], LeftOuter, BuildRight

(9) CometFilter
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10]
Condition : isnull(sr_ticket_number#10)

(10) CometProject
Input [9]: [ss_item_sk#1, ss_customer_sk#2, ss_ticket_number#3, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7], [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]

(11) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(12) CometFilter
Input [2]: [d_date_sk#12, d_year#13]
Condition : ((isnotnull(d_year#13) AND (d_year#13 = 2000)) AND isnotnull(d_date_sk#12))

(13) CometBroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: [d_date_sk#12, d_year#13]

(14) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7]
Right output [2]: [d_date_sk#12, d_year#13]
Arguments: [ss_sold_date_sk#7], [d_date_sk#12], Inner, BuildRight

(15) CometProject
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, ss_sold_date_sk#7, d_date_sk#12, d_year#13]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#13], [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#13]

(16) CometHashAggregate
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_quantity#4, ss_wholesale_cost#5, ss_sales_price#6, d_year#13]
Keys [3]: [d_year#13, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [partial_sum(ss_quantity#4), partial_sum(UnscaledValue(ss_wholesale_cost#5)), partial_sum(UnscaledValue(ss_sales_price#6))]

(17) CometExchange
Input [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#14, sum#15, sum#16]
Arguments: hashpartitioning(d_year#13, ss_item_sk#1, ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(18) CometHashAggregate
Input [6]: [d_year#13, ss_item_sk#1, ss_customer_sk#2, sum#14, sum#15, sum#16]
Keys [3]: [d_year#13, ss_item_sk#1, ss_customer_sk#2]
Functions [3]: [sum(ss_quantity#4), sum(UnscaledValue(ss_wholesale_cost#5)), sum(UnscaledValue(ss_sales_price#6))]

(19) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_order_number#19, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#23), dynamicpruningexpression(ws_sold_date_sk#23 IN dynamicpruning#24)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_order_number:int,ws_quantity:int,ws_wholesale_cost:decimal(7,2),ws_sales_price:decimal(7,2)>

(20) CometFilter
Input [7]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_order_number#19, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23]
Condition : (isnotnull(ws_item_sk#17) AND isnotnull(ws_bill_customer_sk#18))

(21) CometExchange
Input [7]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_order_number#19, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23]
Arguments: hashpartitioning(ws_order_number#19, ws_item_sk#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(22) CometScan parquet spark_catalog.default.web_returns
Output [3]: [wr_item_sk#25, wr_order_number#26, wr_returned_date_sk#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_order_number), IsNotNull(wr_item_sk)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int>

(23) CometFilter
Input [3]: [wr_item_sk#25, wr_order_number#26, wr_returned_date_sk#27]
Condition : (isnotnull(wr_order_number#26) AND isnotnull(wr_item_sk#25))

(24) CometProject
Input [3]: [wr_item_sk#25, wr_order_number#26, wr_returned_date_sk#27]
Arguments: [wr_item_sk#25, wr_order_number#26], [wr_item_sk#25, wr_order_number#26]

(25) CometExchange
Input [2]: [wr_item_sk#25, wr_order_number#26]
Arguments: hashpartitioning(wr_order_number#26, wr_item_sk#25, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(26) CometHashJoin
Left output [7]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_order_number#19, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23]
Right output [2]: [wr_item_sk#25, wr_order_number#26]
Arguments: [ws_order_number#19, ws_item_sk#17], [wr_order_number#26, wr_item_sk#25], LeftOuter, BuildRight

(27) CometFilter
Input [9]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_order_number#19, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23, wr_item_sk#25, wr_order_number#26]
Condition : isnull(wr_order_number#26)

(28) CometProject
Input [9]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_order_number#19, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23, wr_item_sk#25, wr_order_number#26]
Arguments: [ws_item_sk#17, ws_bill_customer_sk#18, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23], [ws_item_sk#17, ws_bill_customer_sk#18, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23]

(29) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#28, d_year#29]

(30) CometBroadcastHashJoin
Left output [6]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23]
Right output [2]: [d_date_sk#28, d_year#29]
Arguments: [ws_sold_date_sk#23], [d_date_sk#28], Inner, BuildRight

(31) CometProject
Input [8]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, ws_sold_date_sk#23, d_date_sk#28, d_year#29]
Arguments: [ws_item_sk#17, ws_bill_customer_sk#18, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, d_year#29], [ws_item_sk#17, ws_bill_customer_sk#18, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, d_year#29]

(32) CometHashAggregate
Input [6]: [ws_item_sk#17, ws_bill_customer_sk#18, ws_quantity#20, ws_wholesale_cost#21, ws_sales_price#22, d_year#29]
Keys [3]: [d_year#29, ws_item_sk#17, ws_bill_customer_sk#18]
Functions [3]: [partial_sum(ws_quantity#20), partial_sum(UnscaledValue(ws_wholesale_cost#21)), partial_sum(UnscaledValue(ws_sales_price#22))]

(33) CometExchange
Input [6]: [d_year#29, ws_item_sk#17, ws_bill_customer_sk#18, sum#30, sum#31, sum#32]
Arguments: hashpartitioning(d_year#29, ws_item_sk#17, ws_bill_customer_sk#18, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(34) CometHashAggregate
Input [6]: [d_year#29, ws_item_sk#17, ws_bill_customer_sk#18, sum#30, sum#31, sum#32]
Keys [3]: [d_year#29, ws_item_sk#17, ws_bill_customer_sk#18]
Functions [3]: [sum(ws_quantity#20), sum(UnscaledValue(ws_wholesale_cost#21)), sum(UnscaledValue(ws_sales_price#22))]

(35) CometFilter
Input [6]: [ws_sold_year#33, ws_item_sk#17, ws_customer_sk#34, ws_qty#35, ws_wc#36, ws_sp#37]
Condition : (coalesce(ws_qty#35, 0) > 0)

(36) CometHashJoin
Left output [6]: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2, ss_qty#39, ss_wc#40, ss_sp#41]
Right output [6]: [ws_sold_year#33, ws_item_sk#17, ws_customer_sk#34, ws_qty#35, ws_wc#36, ws_sp#37]
Arguments: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2], [ws_sold_year#33, ws_item_sk#17, ws_customer_sk#34], Inner, BuildRight

(37) CometProject
Input [12]: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2, ss_qty#39, ss_wc#40, ss_sp#41, ws_sold_year#33, ws_item_sk#17, ws_customer_sk#34, ws_qty#35, ws_wc#36, ws_sp#37]
Arguments: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2, ss_qty#39, ss_wc#40, ss_sp#41, ws_qty#35, ws_wc#36, ws_sp#37], [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2, ss_qty#39, ss_wc#40, ss_sp#41, ws_qty#35, ws_wc#36, ws_sp#37]

(38) CometScan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_order_number#44, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#48), dynamicpruningexpression(cs_sold_date_sk#48 IN dynamicpruning#49)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_order_number:int,cs_quantity:int,cs_wholesale_cost:decimal(7,2),cs_sales_price:decimal(7,2)>

(39) CometFilter
Input [7]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_order_number#44, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48]
Condition : (isnotnull(cs_item_sk#43) AND isnotnull(cs_bill_customer_sk#42))

(40) CometExchange
Input [7]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_order_number#44, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48]
Arguments: hashpartitioning(cs_order_number#44, cs_item_sk#43, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(41) CometScan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_item_sk#50, cr_order_number#51, cr_returned_date_sk#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int>

(42) CometFilter
Input [3]: [cr_item_sk#50, cr_order_number#51, cr_returned_date_sk#52]
Condition : (isnotnull(cr_order_number#51) AND isnotnull(cr_item_sk#50))

(43) CometProject
Input [3]: [cr_item_sk#50, cr_order_number#51, cr_returned_date_sk#52]
Arguments: [cr_item_sk#50, cr_order_number#51], [cr_item_sk#50, cr_order_number#51]

(44) CometExchange
Input [2]: [cr_item_sk#50, cr_order_number#51]
Arguments: hashpartitioning(cr_order_number#51, cr_item_sk#50, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(45) CometHashJoin
Left output [7]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_order_number#44, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48]
Right output [2]: [cr_item_sk#50, cr_order_number#51]
Arguments: [cs_order_number#44, cs_item_sk#43], [cr_order_number#51, cr_item_sk#50], LeftOuter, BuildRight

(46) CometFilter
Input [9]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_order_number#44, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48, cr_item_sk#50, cr_order_number#51]
Condition : isnull(cr_order_number#51)

(47) CometProject
Input [9]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_order_number#44, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48, cr_item_sk#50, cr_order_number#51]
Arguments: [cs_bill_customer_sk#42, cs_item_sk#43, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48], [cs_bill_customer_sk#42, cs_item_sk#43, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48]

(48) ReusedExchange [Reuses operator id: 13]
Output [2]: [d_date_sk#53, d_year#54]

(49) CometBroadcastHashJoin
Left output [6]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48]
Right output [2]: [d_date_sk#53, d_year#54]
Arguments: [cs_sold_date_sk#48], [d_date_sk#53], Inner, BuildRight

(50) CometProject
Input [8]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, cs_sold_date_sk#48, d_date_sk#53, d_year#54]
Arguments: [cs_bill_customer_sk#42, cs_item_sk#43, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, d_year#54], [cs_bill_customer_sk#42, cs_item_sk#43, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, d_year#54]

(51) CometHashAggregate
Input [6]: [cs_bill_customer_sk#42, cs_item_sk#43, cs_quantity#45, cs_wholesale_cost#46, cs_sales_price#47, d_year#54]
Keys [3]: [d_year#54, cs_item_sk#43, cs_bill_customer_sk#42]
Functions [3]: [partial_sum(cs_quantity#45), partial_sum(UnscaledValue(cs_wholesale_cost#46)), partial_sum(UnscaledValue(cs_sales_price#47))]

(52) CometExchange
Input [6]: [d_year#54, cs_item_sk#43, cs_bill_customer_sk#42, sum#55, sum#56, sum#57]
Arguments: hashpartitioning(d_year#54, cs_item_sk#43, cs_bill_customer_sk#42, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(53) CometHashAggregate
Input [6]: [d_year#54, cs_item_sk#43, cs_bill_customer_sk#42, sum#55, sum#56, sum#57]
Keys [3]: [d_year#54, cs_item_sk#43, cs_bill_customer_sk#42]
Functions [3]: [sum(cs_quantity#45), sum(UnscaledValue(cs_wholesale_cost#46)), sum(UnscaledValue(cs_sales_price#47))]

(54) CometFilter
Input [6]: [cs_sold_year#58, cs_item_sk#43, cs_customer_sk#59, cs_qty#60, cs_wc#61, cs_sp#62]
Condition : (coalesce(cs_qty#60, 0) > 0)

(55) CometHashJoin
Left output [9]: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2, ss_qty#39, ss_wc#40, ss_sp#41, ws_qty#35, ws_wc#36, ws_sp#37]
Right output [6]: [cs_sold_year#58, cs_item_sk#43, cs_customer_sk#59, cs_qty#60, cs_wc#61, cs_sp#62]
Arguments: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2], [cs_sold_year#58, cs_item_sk#43, cs_customer_sk#59], Inner, BuildRight

(56) ColumnarToRow [codegen id : 1]
Input [15]: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2, ss_qty#39, ss_wc#40, ss_sp#41, ws_qty#35, ws_wc#36, ws_sp#37, cs_sold_year#58, cs_item_sk#43, cs_customer_sk#59, cs_qty#60, cs_wc#61, cs_sp#62]

(57) Project [codegen id : 1]
Output [12]: [round((cast(ss_qty#39 as double) / knownfloatingpointnormalized(normalizenanandzero(cast(coalesce((ws_qty#35 + cs_qty#60), 1) as double)))), 2) AS ratio#63, ss_qty#39 AS store_qty#64, ss_wc#40 AS store_wholesale_cost#65, ss_sp#41 AS store_sales_price#66, (coalesce(ws_qty#35, 0) + coalesce(cs_qty#60, 0)) AS other_chan_qty#67, (coalesce(ws_wc#36, 0.00) + coalesce(cs_wc#61, 0.00)) AS other_chan_wholesale_cost#68, (coalesce(ws_sp#37, 0.00) + coalesce(cs_sp#62, 0.00)) AS other_chan_sales_price#69, ss_qty#39, ss_wc#40, ss_sp#41, ws_qty#35, cs_qty#60]
Input [15]: [ss_sold_year#38, ss_item_sk#1, ss_customer_sk#2, ss_qty#39, ss_wc#40, ss_sp#41, ws_qty#35, ws_wc#36, ws_sp#37, cs_sold_year#58, cs_item_sk#43, cs_customer_sk#59, cs_qty#60, cs_wc#61, cs_sp#62]

(58) TakeOrderedAndProject
Input [12]: [ratio#63, store_qty#64, store_wholesale_cost#65, store_sales_price#66, other_chan_qty#67, other_chan_wholesale_cost#68, other_chan_sales_price#69, ss_qty#39, ss_wc#40, ss_sp#41, ws_qty#35, cs_qty#60]
Arguments: 100, [ratio#63 ASC NULLS FIRST, ss_qty#39 DESC NULLS LAST, ss_wc#40 DESC NULLS LAST, ss_sp#41 DESC NULLS LAST, other_chan_qty#67 ASC NULLS FIRST, other_chan_wholesale_cost#68 ASC NULLS FIRST, other_chan_sales_price#69 ASC NULLS FIRST, round((cast(ss_qty#39 as double) / cast(coalesce((ws_qty#35 + cs_qty#60), 1) as double)), 2) ASC NULLS FIRST], [ratio#63, store_qty#64, store_wholesale_cost#65, store_sales_price#66, other_chan_qty#67, other_chan_wholesale_cost#68, other_chan_sales_price#69]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (62)
+- * ColumnarToRow (61)
   +- CometFilter (60)
      +- CometScan parquet spark_catalog.default.date_dim (59)


(59) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#12, d_year#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(60) CometFilter
Input [2]: [d_date_sk#12, d_year#13]
Condition : ((isnotnull(d_year#13) AND (d_year#13 = 2000)) AND isnotnull(d_date_sk#12))

(61) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#12, d_year#13]

(62) BroadcastExchange
Input [2]: [d_date_sk#12, d_year#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=10]

Subquery:2 Hosting operator id = 19 Hosting Expression = ws_sold_date_sk#23 IN dynamicpruning#8

Subquery:3 Hosting operator id = 38 Hosting Expression = cs_sold_date_sk#48 IN dynamicpruning#8


