== Physical Plan ==
* ColumnarToRow (39)
+- CometTakeOrderedAndProject (38)
   +- CometProject (37)
      +- CometBroadcastHashJoin (36)
         :- CometProject (22)
         :  +- CometBroadcastHashJoin (21)
         :     :- CometProject (17)
         :     :  +- CometBroadcastHashJoin (16)
         :     :     :- CometFilter (2)
         :     :     :  +- CometScan parquet spark_catalog.default.store (1)
         :     :     +- CometBroadcastExchange (15)
         :     :        +- CometFilter (14)
         :     :           +- CometHashAggregate (13)
         :     :              +- CometExchange (12)
         :     :                 +- CometHashAggregate (11)
         :     :                    +- CometProject (10)
         :     :                       +- CometBroadcastHashJoin (9)
         :     :                          :- CometFilter (4)
         :     :                          :  +- CometScan parquet spark_catalog.default.store_sales (3)
         :     :                          +- CometBroadcastExchange (8)
         :     :                             +- CometProject (7)
         :     :                                +- CometFilter (6)
         :     :                                   +- CometScan parquet spark_catalog.default.date_dim (5)
         :     +- CometBroadcastExchange (20)
         :        +- CometFilter (19)
         :           +- CometScan parquet spark_catalog.default.item (18)
         +- CometBroadcastExchange (35)
            +- CometFilter (34)
               +- CometHashAggregate (33)
                  +- CometExchange (32)
                     +- CometHashAggregate (31)
                        +- CometHashAggregate (30)
                           +- CometExchange (29)
                              +- CometHashAggregate (28)
                                 +- CometProject (27)
                                    +- CometBroadcastHashJoin (26)
                                       :- CometFilter (24)
                                       :  +- CometScan parquet spark_catalog.default.store_sales (23)
                                       +- ReusedExchange (25)


(1) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) CometFilter
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(4) CometFilter
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(5) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(6) CometFilter
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1176)) AND (d_month_seq#9 <= 1187)) AND isnotnull(d_date_sk#8))

(7) CometProject
Input [2]: [d_date_sk#8, d_month_seq#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(8) CometBroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: [d_date_sk#8]

(9) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [d_date_sk#8]
Arguments: [ss_sold_date_sk#6], [d_date_sk#8], Inner, BuildRight

(10) CometProject
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#8]
Arguments: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5], [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]

(11) CometHashAggregate
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]

(12) CometExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(13) CometHashAggregate
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#10]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]

(14) CometFilter
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]
Condition : isnotnull(revenue#11)

(15) CometBroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]
Arguments: [ss_store_sk#4, ss_item_sk#3, revenue#11]

(16) CometBroadcastHashJoin
Left output [2]: [s_store_sk#1, s_store_name#2]
Right output [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]
Arguments: [s_store_sk#1], [ss_store_sk#4], Inner, BuildRight

(17) CometProject
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11]
Arguments: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11], [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11]

(18) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(19) CometFilter
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Condition : isnotnull(i_item_sk#12)

(20) CometBroadcastExchange
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(21) CometBroadcastHashJoin
Left output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11]
Right output [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: [ss_item_sk#3], [i_item_sk#12], Inner, BuildRight

(22) CometProject
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11, i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16], [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(23) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#20), dynamicpruningexpression(ss_sold_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(24) CometFilter
Input [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Condition : isnotnull(ss_store_sk#18)

(25) ReusedExchange [Reuses operator id: 8]
Output [1]: [d_date_sk#22]

(26) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20]
Right output [1]: [d_date_sk#22]
Arguments: [ss_sold_date_sk#20], [d_date_sk#22], Inner, BuildRight

(27) CometProject
Input [5]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19, ss_sold_date_sk#20, d_date_sk#22]
Arguments: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19], [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19]

(28) CometHashAggregate
Input [3]: [ss_item_sk#17, ss_store_sk#18, ss_sales_price#19]
Keys [2]: [ss_store_sk#18, ss_item_sk#17]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#19))]

(29) CometExchange
Input [3]: [ss_store_sk#18, ss_item_sk#17, sum#23]
Arguments: hashpartitioning(ss_store_sk#18, ss_item_sk#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(30) CometHashAggregate
Input [3]: [ss_store_sk#18, ss_item_sk#17, sum#23]
Keys [2]: [ss_store_sk#18, ss_item_sk#17]
Functions [1]: [sum(UnscaledValue(ss_sales_price#19))]

(31) CometHashAggregate
Input [2]: [ss_store_sk#18, revenue#24]
Keys [1]: [ss_store_sk#18]
Functions [1]: [partial_avg(revenue#24)]

(32) CometExchange
Input [3]: [ss_store_sk#18, sum#25, count#26]
Arguments: hashpartitioning(ss_store_sk#18, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(33) CometHashAggregate
Input [3]: [ss_store_sk#18, sum#25, count#26]
Keys [1]: [ss_store_sk#18]
Functions [1]: [avg(revenue#24)]

(34) CometFilter
Input [2]: [ss_store_sk#18, ave#27]
Condition : isnotnull(ave#27)

(35) CometBroadcastExchange
Input [2]: [ss_store_sk#18, ave#27]
Arguments: [ss_store_sk#18, ave#27]

(36) CometBroadcastHashJoin
Left output [7]: [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Right output [2]: [ss_store_sk#18, ave#27]
Arguments: [ss_store_sk#4], [ss_store_sk#18], Inner, (cast(revenue#11 as decimal(23,7)) <= (0.1 * ave#27)), BuildRight

(37) CometProject
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16, ss_store_sk#18, ave#27]
Arguments: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16], [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(38) CometTakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[s_store_name#2 ASC NULLS FIRST,i_item_desc#13 ASC NULLS FIRST], output=[s_store_name#2,i_item_desc#13,revenue#11,i_current_price#14,i_wholesale_cost#15,i_brand#16]), [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16], 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#13 ASC NULLS FIRST], [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]

(39) ColumnarToRow [codegen id : 1]
Input [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#16]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (44)
+- * ColumnarToRow (43)
   +- CometProject (42)
      +- CometFilter (41)
         +- CometScan parquet spark_catalog.default.date_dim (40)


(40) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(41) CometFilter
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1176)) AND (d_month_seq#9 <= 1187)) AND isnotnull(d_date_sk#8))

(42) CometProject
Input [2]: [d_date_sk#8, d_month_seq#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(43) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#8]

(44) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 23 Hosting Expression = ss_sold_date_sk#20 IN dynamicpruning#7


