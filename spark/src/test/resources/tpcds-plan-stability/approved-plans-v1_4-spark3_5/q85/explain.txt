== Physical Plan ==
TakeOrderedAndProject (47)
+- * HashAggregate (46)
   +- * CometColumnarToRow (45)
      +- CometColumnarExchange (44)
         +- * HashAggregate (43)
            +- * Project (42)
               +- * BroadcastHashJoin Inner BuildRight (41)
                  :- * Project (36)
                  :  +- * BroadcastHashJoin Inner BuildRight (35)
                  :     :- * Project (33)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (32)
                  :     :     :- * Project (26)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (25)
                  :     :     :     :- * Project (20)
                  :     :     :     :  +- * BroadcastHashJoin Inner BuildRight (19)
                  :     :     :     :     :- * CometColumnarToRow (14)
                  :     :     :     :     :  +- CometProject (13)
                  :     :     :     :     :     +- CometBroadcastHashJoin (12)
                  :     :     :     :     :        :- CometProject (8)
                  :     :     :     :     :        :  +- CometBroadcastHashJoin (7)
                  :     :     :     :     :        :     :- CometBroadcastExchange (3)
                  :     :     :     :     :        :     :  +- CometFilter (2)
                  :     :     :     :     :        :     :     +- CometScan parquet spark_catalog.default.web_sales (1)
                  :     :     :     :     :        :     +- CometProject (6)
                  :     :     :     :     :        :        +- CometFilter (5)
                  :     :     :     :     :        :           +- CometScan parquet spark_catalog.default.web_returns (4)
                  :     :     :     :     :        +- CometBroadcastExchange (11)
                  :     :     :     :     :           +- CometFilter (10)
                  :     :     :     :     :              +- CometScan parquet spark_catalog.default.web_page (9)
                  :     :     :     :     +- BroadcastExchange (18)
                  :     :     :     :        +- * Filter (17)
                  :     :     :     :           +- * CometColumnarToRow (16)
                  :     :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (15)
                  :     :     :     +- BroadcastExchange (24)
                  :     :     :        +- * CometColumnarToRow (23)
                  :     :     :           +- CometFilter (22)
                  :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (21)
                  :     :     +- BroadcastExchange (31)
                  :     :        +- * Project (30)
                  :     :           +- * Filter (29)
                  :     :              +- * CometColumnarToRow (28)
                  :     :                 +- CometScan parquet spark_catalog.default.customer_address (27)
                  :     +- ReusedExchange (34)
                  +- BroadcastExchange (40)
                     +- * CometColumnarToRow (39)
                        +- CometFilter (38)
                           +- CometScan parquet spark_catalog.default.reason (37)


(1) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((((isnotnull(ws_item_sk#1) AND isnotnull(ws_order_number#3)) AND isnotnull(ws_web_page_sk#2)) AND ((((ws_sales_price#5 >= 100.00) AND (ws_sales_price#5 <= 150.00)) OR ((ws_sales_price#5 >= 50.00) AND (ws_sales_price#5 <= 100.00))) OR ((ws_sales_price#5 >= 150.00) AND (ws_sales_price#5 <= 200.00)))) AND ((((ws_net_profit#6 >= 100.00) AND (ws_net_profit#6 <= 200.00)) OR ((ws_net_profit#6 >= 150.00) AND (ws_net_profit#6 <= 300.00))) OR ((ws_net_profit#6 >= 50.00) AND (ws_net_profit#6 <= 250.00))))

(3) CometBroadcastExchange
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]

(4) CometScan parquet spark_catalog.default.web_returns
Output [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:int,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(5) CometFilter
Input [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Condition : (((((isnotnull(wr_item_sk#9) AND isnotnull(wr_order_number#14)) AND isnotnull(wr_refunded_cdemo_sk#10)) AND isnotnull(wr_returning_cdemo_sk#12)) AND isnotnull(wr_refunded_addr_sk#11)) AND isnotnull(wr_reason_sk#13))

(6) CometProject
Input [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Arguments: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16], [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]

(7) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Right output [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: [ws_item_sk#1, ws_order_number#3], [wr_item_sk#9, wr_order_number#14], Inner, BuildLeft

(8) CometProject
Input [15]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(9) CometScan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(10) CometFilter
Input [1]: [wp_web_page_sk#18]
Condition : isnotnull(wp_web_page_sk#18)

(11) CometBroadcastExchange
Input [1]: [wp_web_page_sk#18]
Arguments: [wp_web_page_sk#18]

(12) CometBroadcastHashJoin
Left output [11]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Right output [1]: [wp_web_page_sk#18]
Arguments: [ws_web_page_sk#2], [wp_web_page_sk#18], Inner, BuildRight

(13) CometProject
Input [12]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, wp_web_page_sk#18]
Arguments: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(14) CometColumnarToRow [codegen id : 6]
Input [10]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(15) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(16) CometColumnarToRow [codegen id : 1]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(17) Filter [codegen id : 1]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Condition : (((isnotnull(cd_demo_sk#19) AND isnotnull(cd_marital_status#20)) AND isnotnull(cd_education_status#21)) AND ((((rpad(cd_marital_status#20, 1,  ) = M) AND (rpad(cd_education_status#21, 20,  ) = Advanced Degree     )) OR ((rpad(cd_marital_status#20, 1,  ) = S) AND (rpad(cd_education_status#21, 20,  ) = College             ))) OR ((rpad(cd_marital_status#20, 1,  ) = W) AND (rpad(cd_education_status#21, 20,  ) = 2 yr Degree         ))))

(18) BroadcastExchange
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(19) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_refunded_cdemo_sk#10]
Right keys [1]: [cd_demo_sk#19]
Join type: Inner
Join condition: ((((((rpad(cd_marital_status#20, 1,  ) = M) AND (rpad(cd_education_status#21, 20,  ) = Advanced Degree     )) AND (ws_sales_price#5 >= 100.00)) AND (ws_sales_price#5 <= 150.00)) OR ((((rpad(cd_marital_status#20, 1,  ) = S) AND (rpad(cd_education_status#21, 20,  ) = College             )) AND (ws_sales_price#5 >= 50.00)) AND (ws_sales_price#5 <= 100.00))) OR ((((rpad(cd_marital_status#20, 1,  ) = W) AND (rpad(cd_education_status#21, 20,  ) = 2 yr Degree         )) AND (ws_sales_price#5 >= 150.00)) AND (ws_sales_price#5 <= 200.00)))

(20) Project [codegen id : 6]
Output [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#20, cd_education_status#21]
Input [13]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(21) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(22) CometFilter
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Condition : ((isnotnull(cd_demo_sk#22) AND isnotnull(cd_marital_status#23)) AND isnotnull(cd_education_status#24))

(23) CometColumnarToRow [codegen id : 2]
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(24) BroadcastExchange
Input [3]: [cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], rpad(input[1, string, false], 1,  ), rpad(input[2, string, false], 20,  )),false), [plan_id=2]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [3]: [wr_returning_cdemo_sk#12, rpad(cd_marital_status#20, 1,  ), rpad(cd_education_status#21, 20,  )]
Right keys [3]: [cd_demo_sk#22, rpad(cd_marital_status#23, 1,  ), rpad(cd_education_status#24, 20,  )]
Join type: Inner
Join condition: None

(26) Project [codegen id : 6]
Output [7]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [13]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#20, cd_education_status#21, cd_demo_sk#22, cd_marital_status#23, cd_education_status#24]

(27) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#25, ca_state#26, ca_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(28) CometColumnarToRow [codegen id : 3]
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]

(29) Filter [codegen id : 3]
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]
Condition : (((isnotnull(ca_country#27) AND (ca_country#27 = United States)) AND isnotnull(ca_address_sk#25)) AND ((rpad(ca_state#26, 2,  ) IN (IN,OH,NJ) OR rpad(ca_state#26, 2,  ) IN (WI,CT,KY)) OR rpad(ca_state#26, 2,  ) IN (LA,IA,AR)))

(30) Project [codegen id : 3]
Output [2]: [ca_address_sk#25, ca_state#26]
Input [3]: [ca_address_sk#25, ca_state#26, ca_country#27]

(31) BroadcastExchange
Input [2]: [ca_address_sk#25, ca_state#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(32) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_refunded_addr_sk#11]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: ((((rpad(ca_state#26, 2,  ) IN (IN,OH,NJ) AND (ws_net_profit#6 >= 100.00)) AND (ws_net_profit#6 <= 200.00)) OR ((rpad(ca_state#26, 2,  ) IN (WI,CT,KY) AND (ws_net_profit#6 >= 150.00)) AND (ws_net_profit#6 <= 300.00))) OR ((rpad(ca_state#26, 2,  ) IN (LA,IA,AR) AND (ws_net_profit#6 >= 50.00)) AND (ws_net_profit#6 <= 250.00)))

(33) Project [codegen id : 6]
Output [5]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [9]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, ca_address_sk#25, ca_state#26]

(34) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#28]

(35) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#28]
Join type: Inner
Join condition: None

(36) Project [codegen id : 6]
Output [4]: [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Input [6]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, d_date_sk#28]

(37) CometScan parquet spark_catalog.default.reason
Output [2]: [r_reason_sk#29, r_reason_desc#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(38) CometFilter
Input [2]: [r_reason_sk#29, r_reason_desc#30]
Condition : isnotnull(r_reason_sk#29)

(39) CometColumnarToRow [codegen id : 5]
Input [2]: [r_reason_sk#29, r_reason_desc#30]

(40) BroadcastExchange
Input [2]: [r_reason_sk#29, r_reason_desc#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(41) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [wr_reason_sk#13]
Right keys [1]: [r_reason_sk#29]
Join type: Inner
Join condition: None

(42) Project [codegen id : 6]
Output [4]: [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#30]
Input [6]: [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, r_reason_sk#29, r_reason_desc#30]

(43) HashAggregate [codegen id : 6]
Input [4]: [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#30]
Keys [1]: [r_reason_desc#30]
Functions [3]: [partial_avg(ws_quantity#4), partial_avg(UnscaledValue(wr_refunded_cash#16)), partial_avg(UnscaledValue(wr_fee#15))]
Aggregate Attributes [6]: [sum#31, count#32, sum#33, count#34, sum#35, count#36]
Results [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]

(44) CometColumnarExchange
Input [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Arguments: hashpartitioning(r_reason_desc#30, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(45) CometColumnarToRow [codegen id : 7]
Input [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]

(46) HashAggregate [codegen id : 7]
Input [7]: [r_reason_desc#30, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Keys [1]: [r_reason_desc#30]
Functions [3]: [avg(ws_quantity#4), avg(UnscaledValue(wr_refunded_cash#16)), avg(UnscaledValue(wr_fee#15))]
Aggregate Attributes [3]: [avg(ws_quantity#4)#43, avg(UnscaledValue(wr_refunded_cash#16))#44, avg(UnscaledValue(wr_fee#15))#45]
Results [4]: [substr(r_reason_desc#30, 1, 20) AS substr(r_reason_desc, 1, 20)#46, avg(ws_quantity#4)#43 AS avg(ws_quantity)#47, cast((avg(UnscaledValue(wr_refunded_cash#16))#44 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#48, cast((avg(UnscaledValue(wr_fee#15))#45 / 100.0) as decimal(11,6)) AS avg(wr_fee)#49]

(47) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#46, avg(ws_quantity)#47, avg(wr_refunded_cash)#48, avg(wr_fee)#49]
Arguments: 100, [substr(r_reason_desc, 1, 20)#46 ASC NULLS FIRST, avg(ws_quantity)#47 ASC NULLS FIRST, avg(wr_refunded_cash)#48 ASC NULLS FIRST, avg(wr_fee)#49 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#46, avg(ws_quantity)#47, avg(wr_refunded_cash)#48, avg(wr_fee)#49]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (52)
+- * CometColumnarToRow (51)
   +- CometProject (50)
      +- CometFilter (49)
         +- CometScan parquet spark_catalog.default.date_dim (48)


(48) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#28, d_year#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(49) CometFilter
Input [2]: [d_date_sk#28, d_year#50]
Condition : ((isnotnull(d_year#50) AND (d_year#50 = 2000)) AND isnotnull(d_date_sk#28))

(50) CometProject
Input [2]: [d_date_sk#28, d_year#50]
Arguments: [d_date_sk#28], [d_date_sk#28]

(51) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#28]

(52) BroadcastExchange
Input [1]: [d_date_sk#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


