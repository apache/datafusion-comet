== Physical Plan ==
* ColumnarToRow (41)
+- CometSort (40)
   +- CometColumnarExchange (39)
      +- CometHashAggregate (38)
         +- CometExchange (37)
            +- CometHashAggregate (36)
               +- CometProject (35)
                  +- CometBroadcastHashJoin (34)
                     :- CometProject (29)
                     :  +- CometBroadcastHashJoin (28)
                     :     :- CometProject (24)
                     :     :  +- CometBroadcastHashJoin (23)
                     :     :     :- CometProject (18)
                     :     :     :  +- CometBroadcastHashJoin (17)
                     :     :     :     :- CometProject (13)
                     :     :     :     :  +- CometBroadcastHashJoin (12)
                     :     :     :     :     :- CometProject (7)
                     :     :     :     :     :  +- CometBroadcastHashJoin (6)
                     :     :     :     :     :     :- CometFilter (2)
                     :     :     :     :     :     :  +- CometScan parquet spark_catalog.default.call_center (1)
                     :     :     :     :     :     +- CometBroadcastExchange (5)
                     :     :     :     :     :        +- CometFilter (4)
                     :     :     :     :     :           +- CometScan parquet spark_catalog.default.catalog_returns (3)
                     :     :     :     :     +- CometBroadcastExchange (11)
                     :     :     :     :        +- CometProject (10)
                     :     :     :     :           +- CometFilter (9)
                     :     :     :     :              +- CometScan parquet spark_catalog.default.date_dim (8)
                     :     :     :     +- CometBroadcastExchange (16)
                     :     :     :        +- CometFilter (15)
                     :     :     :           +- CometScan parquet spark_catalog.default.customer (14)
                     :     :     +- CometBroadcastExchange (22)
                     :     :        +- CometProject (21)
                     :     :           +- CometFilter (20)
                     :     :              +- CometScan parquet spark_catalog.default.customer_address (19)
                     :     +- CometBroadcastExchange (27)
                     :        +- CometFilter (26)
                     :           +- CometScan parquet spark_catalog.default.customer_demographics (25)
                     +- CometBroadcastExchange (33)
                        +- CometProject (32)
                           +- CometFilter (31)
                              +- CometScan parquet spark_catalog.default.household_demographics (30)


(1) CometScan parquet spark_catalog.default.call_center
Output [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_name:string,cc_manager:string>

(2) CometFilter
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Condition : isnotnull(cc_call_center_sk#1)

(3) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#8)]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_call_center_sk:int,cr_net_loss:decimal(7,2)>

(4) CometFilter
Input [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Condition : (isnotnull(cr_call_center_sk#6) AND isnotnull(cr_returning_customer_sk#5))

(5) CometBroadcastExchange
Input [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Arguments: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]

(6) CometBroadcastHashJoin
Left output [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Right output [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Arguments: [cc_call_center_sk#1], [cr_call_center_sk#6], Inner, BuildRight

(7) CometProject
Input [8]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8]

(8) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_moy#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(9) CometFilter
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Condition : ((((isnotnull(d_year#10) AND isnotnull(d_moy#11)) AND (d_year#10 = 1998)) AND (d_moy#11 = 11)) AND isnotnull(d_date_sk#9))

(10) CometProject
Input [3]: [d_date_sk#9, d_year#10, d_moy#11]
Arguments: [d_date_sk#9], [d_date_sk#9]

(11) CometBroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: [d_date_sk#9]

(12) CometBroadcastHashJoin
Left output [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8]
Right output [1]: [d_date_sk#9]
Arguments: [cr_returned_date_sk#8], [d_date_sk#9], Inner, BuildRight

(13) CometProject
Input [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8, d_date_sk#9]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7]

(14) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#12, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int>

(15) CometFilter
Input [4]: [c_customer_sk#12, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]
Condition : (((isnotnull(c_customer_sk#12) AND isnotnull(c_current_addr_sk#15)) AND isnotnull(c_current_cdemo_sk#13)) AND isnotnull(c_current_hdemo_sk#14))

(16) CometBroadcastExchange
Input [4]: [c_customer_sk#12, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]
Arguments: [c_customer_sk#12, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]

(17) CometBroadcastHashJoin
Left output [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7]
Right output [4]: [c_customer_sk#12, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]
Arguments: [cr_returning_customer_sk#5], [c_customer_sk#12], Inner, BuildRight

(18) CometProject
Input [9]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, c_customer_sk#12, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]

(19) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#16, ca_gmt_offset#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(20) CometFilter
Input [2]: [ca_address_sk#16, ca_gmt_offset#17]
Condition : ((isnotnull(ca_gmt_offset#17) AND (ca_gmt_offset#17 = -7.00)) AND isnotnull(ca_address_sk#16))

(21) CometProject
Input [2]: [ca_address_sk#16, ca_gmt_offset#17]
Arguments: [ca_address_sk#16], [ca_address_sk#16]

(22) CometBroadcastExchange
Input [1]: [ca_address_sk#16]
Arguments: [ca_address_sk#16]

(23) CometBroadcastHashJoin
Left output [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15]
Right output [1]: [ca_address_sk#16]
Arguments: [c_current_addr_sk#15], [ca_address_sk#16], Inner, BuildRight

(24) CometProject
Input [8]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14, c_current_addr_sk#15, ca_address_sk#16]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14]

(25) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#18, cd_marital_status#19, cd_education_status#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Unknown             )),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,Advanced Degree     ))), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(26) CometFilter
Input [3]: [cd_demo_sk#18, cd_marital_status#19, cd_education_status#20]
Condition : ((((cd_marital_status#19 = M) AND (cd_education_status#20 = Unknown             )) OR ((cd_marital_status#19 = W) AND (cd_education_status#20 = Advanced Degree     ))) AND isnotnull(cd_demo_sk#18))

(27) CometBroadcastExchange
Input [3]: [cd_demo_sk#18, cd_marital_status#19, cd_education_status#20]
Arguments: [cd_demo_sk#18, cd_marital_status#19, cd_education_status#20]

(28) CometBroadcastHashJoin
Left output [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14]
Right output [3]: [cd_demo_sk#18, cd_marital_status#19, cd_education_status#20]
Arguments: [c_current_cdemo_sk#13], [cd_demo_sk#18], Inner, BuildRight

(29) CometProject
Input [9]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#13, c_current_hdemo_sk#14, cd_demo_sk#18, cd_marital_status#19, cd_education_status#20]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_hdemo_sk#14, cd_marital_status#19, cd_education_status#20], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_hdemo_sk#14, cd_marital_status#19, cd_education_status#20]

(30) CometScan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#21, hd_buy_potential#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), StringStartsWith(hd_buy_potential,Unknown), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(31) CometFilter
Input [2]: [hd_demo_sk#21, hd_buy_potential#22]
Condition : ((isnotnull(hd_buy_potential#22) AND StartsWith(hd_buy_potential#22, Unknown)) AND isnotnull(hd_demo_sk#21))

(32) CometProject
Input [2]: [hd_demo_sk#21, hd_buy_potential#22]
Arguments: [hd_demo_sk#21], [hd_demo_sk#21]

(33) CometBroadcastExchange
Input [1]: [hd_demo_sk#21]
Arguments: [hd_demo_sk#21]

(34) CometBroadcastHashJoin
Left output [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_hdemo_sk#14, cd_marital_status#19, cd_education_status#20]
Right output [1]: [hd_demo_sk#21]
Arguments: [c_current_hdemo_sk#14], [hd_demo_sk#21], Inner, BuildRight

(35) CometProject
Input [8]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_hdemo_sk#14, cd_marital_status#19, cd_education_status#20, hd_demo_sk#21]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, cd_marital_status#19, cd_education_status#20], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, cd_marital_status#19, cd_education_status#20]

(36) CometHashAggregate
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, cd_marital_status#19, cd_education_status#20]
Keys [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#19, cd_education_status#20]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#7))]

(37) CometExchange
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#19, cd_education_status#20, sum#23]
Arguments: hashpartitioning(cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#19, cd_education_status#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(38) CometHashAggregate
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#19, cd_education_status#20, sum#23]
Keys [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#19, cd_education_status#20]
Functions [1]: [sum(UnscaledValue(cr_net_loss#7))]

(39) CometColumnarExchange
Input [4]: [Call_Center#24, Call_Center_Name#25, Manager#26, Returns_Loss#27]
Arguments: rangepartitioning(Returns_Loss#27 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(40) CometSort
Input [4]: [Call_Center#24, Call_Center_Name#25, Manager#26, Returns_Loss#27]
Arguments: [Call_Center#24, Call_Center_Name#25, Manager#26, Returns_Loss#27], [Returns_Loss#27 DESC NULLS LAST]

(41) ColumnarToRow [codegen id : 1]
Input [4]: [Call_Center#24, Call_Center_Name#25, Manager#26, Returns_Loss#27]

