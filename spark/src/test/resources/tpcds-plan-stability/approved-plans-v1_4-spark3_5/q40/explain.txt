== Physical Plan ==
* ColumnarToRow (30)
+- CometTakeOrderedAndProject (29)
   +- CometHashAggregate (28)
      +- CometExchange (27)
         +- CometHashAggregate (26)
            +- CometProject (25)
               +- CometBroadcastHashJoin (24)
                  :- CometProject (20)
                  :  +- CometBroadcastHashJoin (19)
                  :     :- CometProject (14)
                  :     :  +- CometBroadcastHashJoin (13)
                  :     :     :- CometProject (9)
                  :     :     :  +- CometHashJoin (8)
                  :     :     :     :- CometExchange (3)
                  :     :     :     :  +- CometFilter (2)
                  :     :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (1)
                  :     :     :     +- CometExchange (7)
                  :     :     :        +- CometProject (6)
                  :     :     :           +- CometFilter (5)
                  :     :     :              +- CometScan parquet spark_catalog.default.catalog_returns (4)
                  :     :     +- CometBroadcastExchange (12)
                  :     :        +- CometFilter (11)
                  :     :           +- CometScan parquet spark_catalog.default.warehouse (10)
                  :     +- CometBroadcastExchange (18)
                  :        +- CometProject (17)
                  :           +- CometFilter (16)
                  :              +- CometScan parquet spark_catalog.default.item (15)
                  +- CometBroadcastExchange (23)
                     +- CometFilter (22)
                        +- CometScan parquet spark_catalog.default.date_dim (21)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:int,cs_sales_price:decimal(7,2)>

(2) CometFilter
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_warehouse_sk#1) AND isnotnull(cs_item_sk#2))

(3) CometExchange
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_order_number#3, cs_item_sk#2, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2)>

(5) CometFilter
Input [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Condition : (isnotnull(cr_order_number#8) AND isnotnull(cr_item_sk#7))

(6) CometProject
Input [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Arguments: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9], [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]

(7) CometExchange
Input [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: hashpartitioning(cr_order_number#8, cr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(8) CometHashJoin
Left output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Right output [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cs_order_number#3, cs_item_sk#2], [cr_order_number#8, cr_item_sk#7], LeftOuter, BuildRight

(9) CometProject
Input [8]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5, cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9], [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9]

(10) CometScan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#11, w_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_state:string>

(11) CometFilter
Input [2]: [w_warehouse_sk#11, w_state#12]
Condition : isnotnull(w_warehouse_sk#11)

(12) CometBroadcastExchange
Input [2]: [w_warehouse_sk#11, w_state#12]
Arguments: [w_warehouse_sk#11, w_state#12]

(13) CometBroadcastHashJoin
Left output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9]
Right output [2]: [w_warehouse_sk#11, w_state#12]
Arguments: [cs_warehouse_sk#1], [w_warehouse_sk#11], Inner, BuildRight

(14) CometProject
Input [7]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_warehouse_sk#11, w_state#12]
Arguments: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12], [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12]

(15) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_price,1.49), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>

(16) CometFilter
Input [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Condition : (((isnotnull(i_current_price#15) AND (i_current_price#15 >= 0.99)) AND (i_current_price#15 <= 1.49)) AND isnotnull(i_item_sk#13))

(17) CometProject
Input [3]: [i_item_sk#13, i_item_id#14, i_current_price#15]
Arguments: [i_item_sk#13, i_item_id#14], [i_item_sk#13, i_item_id#14]

(18) CometBroadcastExchange
Input [2]: [i_item_sk#13, i_item_id#14]
Arguments: [i_item_sk#13, i_item_id#14]

(19) CometBroadcastHashJoin
Left output [5]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12]
Right output [2]: [i_item_sk#13, i_item_id#14]
Arguments: [cs_item_sk#2], [i_item_sk#13], Inner, BuildRight

(20) CometProject
Input [7]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_sk#13, i_item_id#14]
Arguments: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_id#14], [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_id#14]

(21) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(22) CometFilter
Input [2]: [d_date_sk#16, d_date#17]
Condition : (((isnotnull(d_date#17) AND (d_date#17 >= 2000-02-10)) AND (d_date#17 <= 2000-04-10)) AND isnotnull(d_date_sk#16))

(23) CometBroadcastExchange
Input [2]: [d_date_sk#16, d_date#17]
Arguments: [d_date_sk#16, d_date#17]

(24) CometBroadcastHashJoin
Left output [5]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_id#14]
Right output [2]: [d_date_sk#16, d_date#17]
Arguments: [cs_sold_date_sk#5], [d_date_sk#16], Inner, BuildRight

(25) CometProject
Input [7]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#12, i_item_id#14, d_date_sk#16, d_date#17]
Arguments: [cs_sales_price#4, cr_refunded_cash#9, w_state#12, i_item_id#14, d_date#17], [cs_sales_price#4, cr_refunded_cash#9, w_state#12, i_item_id#14, d_date#17]

(26) CometHashAggregate
Input [5]: [cs_sales_price#4, cr_refunded_cash#9, w_state#12, i_item_id#14, d_date#17]
Keys [2]: [w_state#12, i_item_id#14]
Functions [2]: [partial_sum(CASE WHEN (d_date#17 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#17 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)]

(27) CometExchange
Input [6]: [w_state#12, i_item_id#14, sum#18, isEmpty#19, sum#20, isEmpty#21]
Arguments: hashpartitioning(w_state#12, i_item_id#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(28) CometHashAggregate
Input [6]: [w_state#12, i_item_id#14, sum#18, isEmpty#19, sum#20, isEmpty#21]
Keys [2]: [w_state#12, i_item_id#14]
Functions [2]: [sum(CASE WHEN (d_date#17 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END), sum(CASE WHEN (d_date#17 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)]

(29) CometTakeOrderedAndProject
Input [4]: [w_state#12, i_item_id#14, sales_before#22, sales_after#23]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[w_state#12 ASC NULLS FIRST,i_item_id#14 ASC NULLS FIRST], output=[w_state#12,i_item_id#14,sales_before#22,sales_after#23]), [w_state#12, i_item_id#14, sales_before#22, sales_after#23], 100, [w_state#12 ASC NULLS FIRST, i_item_id#14 ASC NULLS FIRST], [w_state#12, i_item_id#14, sales_before#22, sales_after#23]

(30) ColumnarToRow [codegen id : 1]
Input [4]: [w_state#12, i_item_id#14, sales_before#22, sales_after#23]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (34)
+- * ColumnarToRow (33)
   +- CometFilter (32)
      +- CometScan parquet spark_catalog.default.date_dim (31)


(31) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#16, d_date#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(32) CometFilter
Input [2]: [d_date_sk#16, d_date#17]
Condition : (((isnotnull(d_date#17) AND (d_date#17 >= 2000-02-10)) AND (d_date#17 <= 2000-04-10)) AND isnotnull(d_date_sk#16))

(33) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#16, d_date#17]

(34) BroadcastExchange
Input [2]: [d_date_sk#16, d_date#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]


