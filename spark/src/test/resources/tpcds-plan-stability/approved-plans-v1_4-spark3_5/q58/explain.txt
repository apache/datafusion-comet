== Physical Plan ==
* CometColumnarToRow (52)
+- CometTakeOrderedAndProject (51)
   +- CometProject (50)
      +- CometBroadcastHashJoin (49)
         :- CometProject (35)
         :  +- CometBroadcastHashJoin (34)
         :     :- CometFilter (20)
         :     :  +- CometHashAggregate (19)
         :     :     +- CometExchange (18)
         :     :        +- CometHashAggregate (17)
         :     :           +- CometProject (16)
         :     :              +- CometBroadcastHashJoin (15)
         :     :                 :- CometProject (8)
         :     :                 :  +- CometBroadcastHashJoin (7)
         :     :                 :     :- CometFilter (2)
         :     :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :                 :     +- CometBroadcastExchange (6)
         :     :                 :        +- CometProject (5)
         :     :                 :           +- CometFilter (4)
         :     :                 :              +- CometScan parquet spark_catalog.default.item (3)
         :     :                 +- CometBroadcastExchange (14)
         :     :                    +- CometProject (13)
         :     :                       +- CometBroadcastHashJoin (12)
         :     :                          :- CometFilter (10)
         :     :                          :  +- CometScan parquet spark_catalog.default.date_dim (9)
         :     :                          +- ReusedExchange (11)
         :     +- CometBroadcastExchange (33)
         :        +- CometFilter (32)
         :           +- CometHashAggregate (31)
         :              +- CometExchange (30)
         :                 +- CometHashAggregate (29)
         :                    +- CometProject (28)
         :                       +- CometBroadcastHashJoin (27)
         :                          :- CometProject (25)
         :                          :  +- CometBroadcastHashJoin (24)
         :                          :     :- CometFilter (22)
         :                          :     :  +- CometScan parquet spark_catalog.default.catalog_sales (21)
         :                          :     +- ReusedExchange (23)
         :                          +- ReusedExchange (26)
         +- CometBroadcastExchange (48)
            +- CometFilter (47)
               +- CometHashAggregate (46)
                  +- CometExchange (45)
                     +- CometHashAggregate (44)
                        +- CometProject (43)
                           +- CometBroadcastHashJoin (42)
                              :- CometProject (40)
                              :  +- CometBroadcastHashJoin (39)
                              :     :- CometFilter (37)
                              :     :  +- CometScan parquet spark_catalog.default.web_sales (36)
                              :     +- ReusedExchange (38)
                              +- ReusedExchange (41)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#6, 16, true, false, true)))

(5) CometProject
Input [2]: [i_item_sk#5, i_item_id#6]
Arguments: [i_item_sk#5, i_item_id#7], [i_item_sk#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#6, 16, true, false, true) AS i_item_id#7]

(6) CometBroadcastExchange
Input [2]: [i_item_sk#5, i_item_id#7]
Arguments: [i_item_sk#5, i_item_id#7]

(7) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#5, i_item_id#7]
Arguments: [ss_item_sk#1], [i_item_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#5, i_item_id#7]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7]

(9) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(10) CometFilter
Input [2]: [d_date_sk#8, d_date#9]
Condition : isnotnull(d_date_sk#8)

(11) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date#10]

(12) CometBroadcastHashJoin
Left output [2]: [d_date_sk#8, d_date#9]
Right output [1]: [d_date#10]
Arguments: [d_date#9], [d_date#10], LeftSemi, BuildRight

(13) CometProject
Input [2]: [d_date_sk#8, d_date#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(14) CometBroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: [d_date_sk#8]

(15) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7]
Right output [1]: [d_date_sk#8]
Arguments: [ss_sold_date_sk#3], [d_date_sk#8], Inner, BuildRight

(16) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7, d_date_sk#8]
Arguments: [ss_ext_sales_price#2, i_item_id#7], [ss_ext_sales_price#2, i_item_id#7]

(17) CometHashAggregate
Input [2]: [ss_ext_sales_price#2, i_item_id#7]
Keys [1]: [i_item_id#7]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(18) CometExchange
Input [2]: [i_item_id#7, sum#11]
Arguments: hashpartitioning(i_item_id#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(19) CometHashAggregate
Input [2]: [i_item_id#7, sum#11]
Keys [1]: [i_item_id#7]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]

(20) CometFilter
Input [2]: [item_id#12, ss_item_rev#13]
Condition : isnotnull(ss_item_rev#13)

(21) CometScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#16), dynamicpruningexpression(cs_sold_date_sk#16 IN dynamicpruning#17)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(22) CometFilter
Input [3]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16]
Condition : isnotnull(cs_item_sk#14)

(23) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#18, i_item_id#19]

(24) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16]
Right output [2]: [i_item_sk#18, i_item_id#19]
Arguments: [cs_item_sk#14], [i_item_sk#18], Inner, BuildRight

(25) CometProject
Input [5]: [cs_item_sk#14, cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_sk#18, i_item_id#19]
Arguments: [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19], [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19]

(26) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#20]

(27) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19]
Right output [1]: [d_date_sk#20]
Arguments: [cs_sold_date_sk#16], [d_date_sk#20], Inner, BuildRight

(28) CometProject
Input [4]: [cs_ext_sales_price#15, cs_sold_date_sk#16, i_item_id#19, d_date_sk#20]
Arguments: [cs_ext_sales_price#15, i_item_id#19], [cs_ext_sales_price#15, i_item_id#19]

(29) CometHashAggregate
Input [2]: [cs_ext_sales_price#15, i_item_id#19]
Keys [1]: [i_item_id#19]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#15))]

(30) CometExchange
Input [2]: [i_item_id#19, sum#21]
Arguments: hashpartitioning(i_item_id#19, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(31) CometHashAggregate
Input [2]: [i_item_id#19, sum#21]
Keys [1]: [i_item_id#19]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#15))]

(32) CometFilter
Input [2]: [item_id#22, cs_item_rev#23]
Condition : isnotnull(cs_item_rev#23)

(33) CometBroadcastExchange
Input [2]: [item_id#22, cs_item_rev#23]
Arguments: [item_id#22, cs_item_rev#23]

(34) CometBroadcastHashJoin
Left output [2]: [item_id#12, ss_item_rev#13]
Right output [2]: [item_id#22, cs_item_rev#23]
Arguments: [item_id#12], [item_id#22], Inner, ((((cast(ss_item_rev#13 as decimal(19,3)) >= (0.9 * cs_item_rev#23)) AND (cast(ss_item_rev#13 as decimal(20,3)) <= (1.1 * cs_item_rev#23))) AND (cast(cs_item_rev#23 as decimal(19,3)) >= (0.9 * ss_item_rev#13))) AND (cast(cs_item_rev#23 as decimal(20,3)) <= (1.1 * ss_item_rev#13))), BuildRight

(35) CometProject
Input [4]: [item_id#12, ss_item_rev#13, item_id#22, cs_item_rev#23]
Arguments: [item_id#12, ss_item_rev#13, cs_item_rev#23], [item_id#12, ss_item_rev#13, cs_item_rev#23]

(36) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#26), dynamicpruningexpression(ws_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(37) CometFilter
Input [3]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26]
Condition : isnotnull(ws_item_sk#24)

(38) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#28, i_item_id#29]

(39) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26]
Right output [2]: [i_item_sk#28, i_item_id#29]
Arguments: [ws_item_sk#24], [i_item_sk#28], Inner, BuildRight

(40) CometProject
Input [5]: [ws_item_sk#24, ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_sk#28, i_item_id#29]
Arguments: [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#29], [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#29]

(41) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#30]

(42) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#29]
Right output [1]: [d_date_sk#30]
Arguments: [ws_sold_date_sk#26], [d_date_sk#30], Inner, BuildRight

(43) CometProject
Input [4]: [ws_ext_sales_price#25, ws_sold_date_sk#26, i_item_id#29, d_date_sk#30]
Arguments: [ws_ext_sales_price#25, i_item_id#29], [ws_ext_sales_price#25, i_item_id#29]

(44) CometHashAggregate
Input [2]: [ws_ext_sales_price#25, i_item_id#29]
Keys [1]: [i_item_id#29]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#25))]

(45) CometExchange
Input [2]: [i_item_id#29, sum#31]
Arguments: hashpartitioning(i_item_id#29, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(46) CometHashAggregate
Input [2]: [i_item_id#29, sum#31]
Keys [1]: [i_item_id#29]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#25))]

(47) CometFilter
Input [2]: [item_id#32, ws_item_rev#33]
Condition : isnotnull(ws_item_rev#33)

(48) CometBroadcastExchange
Input [2]: [item_id#32, ws_item_rev#33]
Arguments: [item_id#32, ws_item_rev#33]

(49) CometBroadcastHashJoin
Left output [3]: [item_id#12, ss_item_rev#13, cs_item_rev#23]
Right output [2]: [item_id#32, ws_item_rev#33]
Arguments: [item_id#12], [item_id#32], Inner, ((((((((cast(ss_item_rev#13 as decimal(19,3)) >= (0.9 * ws_item_rev#33)) AND (cast(ss_item_rev#13 as decimal(20,3)) <= (1.1 * ws_item_rev#33))) AND (cast(cs_item_rev#23 as decimal(19,3)) >= (0.9 * ws_item_rev#33))) AND (cast(cs_item_rev#23 as decimal(20,3)) <= (1.1 * ws_item_rev#33))) AND (cast(ws_item_rev#33 as decimal(19,3)) >= (0.9 * ss_item_rev#13))) AND (cast(ws_item_rev#33 as decimal(20,3)) <= (1.1 * ss_item_rev#13))) AND (cast(ws_item_rev#33 as decimal(19,3)) >= (0.9 * cs_item_rev#23))) AND (cast(ws_item_rev#33 as decimal(20,3)) <= (1.1 * cs_item_rev#23))), BuildRight

(50) CometProject
Input [5]: [item_id#12, ss_item_rev#13, cs_item_rev#23, item_id#32, ws_item_rev#33]
Arguments: [item_id#12, ss_item_rev#13, ss_dev#34, cs_item_rev#23, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37], [item_id#12, ss_item_rev#13, (((ss_item_rev#13 / ((ss_item_rev#13 + cs_item_rev#23) + ws_item_rev#33)) / 3) * 100) AS ss_dev#34, cs_item_rev#23, (((cs_item_rev#23 / ((ss_item_rev#13 + cs_item_rev#23) + ws_item_rev#33)) / 3) * 100) AS cs_dev#35, ws_item_rev#33, (((ws_item_rev#33 / ((ss_item_rev#13 + cs_item_rev#23) + ws_item_rev#33)) / 3) * 100) AS ws_dev#36, (((ss_item_rev#13 + cs_item_rev#23) + ws_item_rev#33) / 3) AS average#37]

(51) CometTakeOrderedAndProject
Input [8]: [item_id#12, ss_item_rev#13, ss_dev#34, cs_item_rev#23, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[item_id#12 ASC NULLS FIRST,ss_item_rev#13 ASC NULLS FIRST], output=[item_id#12,ss_item_rev#13,ss_dev#34,cs_item_rev#23,cs_dev#35,ws_item_rev#33,ws_dev#36,average#37]), [item_id#12, ss_item_rev#13, ss_dev#34, cs_item_rev#23, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37], 100, [item_id#12 ASC NULLS FIRST, ss_item_rev#13 ASC NULLS FIRST], [item_id#12, ss_item_rev#13, ss_dev#34, cs_item_rev#23, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]

(52) CometColumnarToRow [codegen id : 1]
Input [8]: [item_id#12, ss_item_rev#13, ss_dev#34, cs_item_rev#23, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (62)
+- * CometColumnarToRow (61)
   +- CometProject (60)
      +- CometBroadcastHashJoin (59)
         :- CometFilter (54)
         :  +- CometScan parquet spark_catalog.default.date_dim (53)
         +- CometBroadcastExchange (58)
            +- CometProject (57)
               +- CometFilter (56)
                  +- CometScan parquet spark_catalog.default.date_dim (55)


(53) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(54) CometFilter
Input [2]: [d_date_sk#8, d_date#9]
Condition : isnotnull(d_date_sk#8)

(55) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#10, d_week_seq#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(56) CometFilter
Input [2]: [d_date#10, d_week_seq#38]
Condition : (isnotnull(d_week_seq#38) AND (d_week_seq#38 = Subquery scalar-subquery#39, [id=#40]))

(57) CometProject
Input [2]: [d_date#10, d_week_seq#38]
Arguments: [d_date#10], [d_date#10]

(58) CometBroadcastExchange
Input [1]: [d_date#10]
Arguments: [d_date#10]

(59) CometBroadcastHashJoin
Left output [2]: [d_date_sk#8, d_date#9]
Right output [1]: [d_date#10]
Arguments: [d_date#9], [d_date#10], LeftSemi, BuildRight

(60) CometProject
Input [2]: [d_date_sk#8, d_date#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(61) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#8]

(62) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 56 Hosting Expression = Subquery scalar-subquery#39, [id=#40]
* CometColumnarToRow (66)
+- CometProject (65)
   +- CometFilter (64)
      +- CometScan parquet spark_catalog.default.date_dim (63)


(63) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#41, d_week_seq#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(64) CometFilter
Input [2]: [d_date#41, d_week_seq#42]
Condition : (isnotnull(d_date#41) AND (d_date#41 = 2000-01-03))

(65) CometProject
Input [2]: [d_date#41, d_week_seq#42]
Arguments: [d_week_seq#42], [d_week_seq#42]

(66) CometColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#42]

Subquery:3 Hosting operator id = 21 Hosting Expression = cs_sold_date_sk#16 IN dynamicpruning#4

Subquery:4 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#26 IN dynamicpruning#4


