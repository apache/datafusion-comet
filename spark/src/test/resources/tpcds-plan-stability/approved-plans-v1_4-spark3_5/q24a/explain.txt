== Physical Plan ==
* ColumnarToRow (41)
+- CometFilter (40)
   +- CometHashAggregate (39)
      +- CometColumnarExchange (38)
         +- CometHashAggregate (37)
            +- CometHashAggregate (36)
               +- CometColumnarExchange (35)
                  +- CometHashAggregate (34)
                     +- CometProject (33)
                        +- CometBroadcastHashJoin (32)
                           :- CometProject (28)
                           :  +- CometBroadcastHashJoin (27)
                           :     :- CometProject (23)
                           :     :  +- CometBroadcastHashJoin (22)
                           :     :     :- CometProject (18)
                           :     :     :  +- CometBroadcastHashJoin (17)
                           :     :     :     :- CometProject (12)
                           :     :     :     :  +- CometSortMergeJoin (11)
                           :     :     :     :     :- CometSort (5)
                           :     :     :     :     :  +- CometColumnarExchange (4)
                           :     :     :     :     :     +- CometProject (3)
                           :     :     :     :     :        +- CometFilter (2)
                           :     :     :     :     :           +- CometScan parquet spark_catalog.default.store_sales (1)
                           :     :     :     :     +- CometSort (10)
                           :     :     :     :        +- CometColumnarExchange (9)
                           :     :     :     :           +- CometProject (8)
                           :     :     :     :              +- CometFilter (7)
                           :     :     :     :                 +- CometScan parquet spark_catalog.default.store_returns (6)
                           :     :     :     +- CometBroadcastExchange (16)
                           :     :     :        +- CometProject (15)
                           :     :     :           +- CometFilter (14)
                           :     :     :              +- CometScan parquet spark_catalog.default.store (13)
                           :     :     +- CometBroadcastExchange (21)
                           :     :        +- CometFilter (20)
                           :     :           +- CometScan parquet spark_catalog.default.item (19)
                           :     +- CometBroadcastExchange (26)
                           :        +- CometFilter (25)
                           :           +- CometScan parquet spark_catalog.default.customer (24)
                           +- CometBroadcastExchange (31)
                              +- CometFilter (30)
                                 +- CometScan parquet spark_catalog.default.customer_address (29)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(3) CometProject
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(4) CometColumnarExchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(5) CometSort
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST]

(6) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) CometFilter
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(8) CometProject
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_item_sk#7, sr_ticket_number#8]

(9) CometColumnarExchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(10) CometSort
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST]

(11) CometSortMergeJoin
Left output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Right output [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_ticket_number#4, ss_item_sk#1], [sr_ticket_number#8, sr_item_sk#7], Inner

(12) CometProject
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]

(13) Scan parquet spark_catalog.default.store
Output [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(14) CometFilter
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Condition : (((isnotnull(s_market_id#12) AND (s_market_id#12 = 8)) AND isnotnull(s_store_sk#10)) AND isnotnull(s_zip#14))

(15) CometProject
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14], [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(16) CometBroadcastExchange
Input [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(17) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Right output [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_store_sk#3], [s_store_sk#10], Inner, BuildRight

(18) CometProject
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14], [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]

(19) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(20) CometFilter
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Condition : ((isnotnull(i_color#18) AND (i_color#18 = pale                )) AND isnotnull(i_item_sk#15))

(21) CometBroadcastExchange
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(22) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Right output [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [ss_item_sk#1], [i_item_sk#15], Inner, BuildRight

(23) CometProject
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20], [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(24) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(25) CometFilter
Input [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Condition : (isnotnull(c_customer_sk#21) AND isnotnull(c_birth_country#24))

(26) CometBroadcastExchange
Input [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Arguments: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]

(27) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Right output [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Arguments: [ss_customer_sk#2], [c_customer_sk#21], Inner, BuildRight

(28) CometProject
Input [14]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Arguments: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24], [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24]

(29) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_state#25, ca_zip#26, ca_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(30) CometFilter
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Condition : (isnotnull(ca_country#27) AND isnotnull(ca_zip#26))

(31) CometBroadcastExchange
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Arguments: [ca_state#25, ca_zip#26, ca_country#27]

(32) CometBroadcastHashJoin
Left output [12]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24]
Right output [3]: [ca_state#25, ca_zip#26, ca_country#27]
Arguments: [c_birth_country#24, s_zip#14], [upper(ca_country#27), ca_zip#26], Inner, BuildRight

(33) CometProject
Input [15]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24, ca_state#25, ca_zip#26, ca_country#27]
Arguments: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, ca_state#25], [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, ca_state#25]

(34) CometHashAggregate
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, ca_state#25]
Keys [10]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]

(35) CometColumnarExchange
Input [11]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#28]
Arguments: hashpartitioning(c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(36) CometHashAggregate
Input [11]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#28]
Keys [10]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]

(37) CometHashAggregate
Input [4]: [c_last_name#23, c_first_name#22, s_store_name#11, netpaid#29]
Keys [3]: [c_last_name#23, c_first_name#22, s_store_name#11]
Functions [1]: [partial_sum(netpaid#29)]

(38) CometColumnarExchange
Input [5]: [c_last_name#23, c_first_name#22, s_store_name#11, sum#30, isEmpty#31]
Arguments: hashpartitioning(c_last_name#23, c_first_name#22, s_store_name#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(39) CometHashAggregate
Input [5]: [c_last_name#23, c_first_name#22, s_store_name#11, sum#30, isEmpty#31]
Keys [3]: [c_last_name#23, c_first_name#22, s_store_name#11]
Functions [1]: [sum(netpaid#29)]

(40) CometFilter
Input [4]: [c_last_name#23, c_first_name#22, s_store_name#11, paid#32]
Condition : (isnotnull(paid#32) AND (cast(paid#32 as decimal(33,8)) > cast(Subquery scalar-subquery#33, [id=#34] as decimal(33,8))))

(41) ColumnarToRow [codegen id : 1]
Input [4]: [c_last_name#23, c_first_name#22, s_store_name#11, paid#32]

===== Subqueries =====

Subquery:1 Hosting operator id = 40 Hosting Expression = Subquery scalar-subquery#33, [id=#34]
* ColumnarToRow (68)
+- CometHashAggregate (67)
   +- CometColumnarExchange (66)
      +- CometHashAggregate (65)
         +- CometHashAggregate (64)
            +- CometColumnarExchange (63)
               +- CometHashAggregate (62)
                  +- CometProject (61)
                     +- CometBroadcastHashJoin (60)
                        :- CometProject (58)
                        :  +- CometBroadcastHashJoin (57)
                        :     :- CometProject (55)
                        :     :  +- CometBroadcastHashJoin (54)
                        :     :     :- CometProject (50)
                        :     :     :  +- CometBroadcastHashJoin (49)
                        :     :     :     :- CometProject (47)
                        :     :     :     :  +- CometSortMergeJoin (46)
                        :     :     :     :     :- CometSort (43)
                        :     :     :     :     :  +- ReusedExchange (42)
                        :     :     :     :     +- CometSort (45)
                        :     :     :     :        +- ReusedExchange (44)
                        :     :     :     +- ReusedExchange (48)
                        :     :     +- CometBroadcastExchange (53)
                        :     :        +- CometFilter (52)
                        :     :           +- CometScan parquet spark_catalog.default.item (51)
                        :     +- ReusedExchange (56)
                        +- ReusedExchange (59)


(42) ReusedExchange [Reuses operator id: 4]
Output [5]: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_ticket_number#38, ss_net_paid#39]

(43) CometSort
Input [5]: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_ticket_number#38, ss_net_paid#39]
Arguments: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_ticket_number#38, ss_net_paid#39], [ss_ticket_number#38 ASC NULLS FIRST, ss_item_sk#35 ASC NULLS FIRST]

(44) ReusedExchange [Reuses operator id: 9]
Output [2]: [sr_item_sk#40, sr_ticket_number#41]

(45) CometSort
Input [2]: [sr_item_sk#40, sr_ticket_number#41]
Arguments: [sr_item_sk#40, sr_ticket_number#41], [sr_ticket_number#41 ASC NULLS FIRST, sr_item_sk#40 ASC NULLS FIRST]

(46) CometSortMergeJoin
Left output [5]: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_ticket_number#38, ss_net_paid#39]
Right output [2]: [sr_item_sk#40, sr_ticket_number#41]
Arguments: [ss_ticket_number#38, ss_item_sk#35], [sr_ticket_number#41, sr_item_sk#40], Inner

(47) CometProject
Input [7]: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_ticket_number#38, ss_net_paid#39, sr_item_sk#40, sr_ticket_number#41]
Arguments: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_net_paid#39], [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_net_paid#39]

(48) ReusedExchange [Reuses operator id: 16]
Output [4]: [s_store_sk#42, s_store_name#43, s_state#44, s_zip#45]

(49) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_net_paid#39]
Right output [4]: [s_store_sk#42, s_store_name#43, s_state#44, s_zip#45]
Arguments: [ss_store_sk#37], [s_store_sk#42], Inner, BuildRight

(50) CometProject
Input [8]: [ss_item_sk#35, ss_customer_sk#36, ss_store_sk#37, ss_net_paid#39, s_store_sk#42, s_store_name#43, s_state#44, s_zip#45]
Arguments: [ss_item_sk#35, ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45], [ss_item_sk#35, ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45]

(51) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#46, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(52) CometFilter
Input [6]: [i_item_sk#46, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]
Condition : isnotnull(i_item_sk#46)

(53) CometBroadcastExchange
Input [6]: [i_item_sk#46, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]
Arguments: [i_item_sk#46, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]

(54) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#35, ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45]
Right output [6]: [i_item_sk#46, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]
Arguments: [ss_item_sk#35], [i_item_sk#46], Inner, BuildRight

(55) CometProject
Input [12]: [ss_item_sk#35, ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_item_sk#46, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]
Arguments: [ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51], [ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]

(56) ReusedExchange [Reuses operator id: 26]
Output [4]: [c_customer_sk#52, c_first_name#53, c_last_name#54, c_birth_country#55]

(57) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51]
Right output [4]: [c_customer_sk#52, c_first_name#53, c_last_name#54, c_birth_country#55]
Arguments: [ss_customer_sk#36], [c_customer_sk#52], Inner, BuildRight

(58) CometProject
Input [14]: [ss_customer_sk#36, ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_customer_sk#52, c_first_name#53, c_last_name#54, c_birth_country#55]
Arguments: [ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_first_name#53, c_last_name#54, c_birth_country#55], [ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_first_name#53, c_last_name#54, c_birth_country#55]

(59) ReusedExchange [Reuses operator id: 31]
Output [3]: [ca_state#56, ca_zip#57, ca_country#58]

(60) CometBroadcastHashJoin
Left output [12]: [ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_first_name#53, c_last_name#54, c_birth_country#55]
Right output [3]: [ca_state#56, ca_zip#57, ca_country#58]
Arguments: [c_birth_country#55, s_zip#45], [upper(ca_country#58), ca_zip#57], Inner, BuildRight

(61) CometProject
Input [15]: [ss_net_paid#39, s_store_name#43, s_state#44, s_zip#45, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_first_name#53, c_last_name#54, c_birth_country#55, ca_state#56, ca_zip#57, ca_country#58]
Arguments: [ss_net_paid#39, s_store_name#43, s_state#44, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_first_name#53, c_last_name#54, ca_state#56], [ss_net_paid#39, s_store_name#43, s_state#44, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_first_name#53, c_last_name#54, ca_state#56]

(62) CometHashAggregate
Input [11]: [ss_net_paid#39, s_store_name#43, s_state#44, i_current_price#47, i_size#48, i_color#49, i_units#50, i_manager_id#51, c_first_name#53, c_last_name#54, ca_state#56]
Keys [10]: [c_last_name#54, c_first_name#53, s_store_name#43, ca_state#56, s_state#44, i_color#49, i_current_price#47, i_manager_id#51, i_units#50, i_size#48]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#39))]

(63) CometColumnarExchange
Input [11]: [c_last_name#54, c_first_name#53, s_store_name#43, ca_state#56, s_state#44, i_color#49, i_current_price#47, i_manager_id#51, i_units#50, i_size#48, sum#59]
Arguments: hashpartitioning(c_last_name#54, c_first_name#53, s_store_name#43, ca_state#56, s_state#44, i_color#49, i_current_price#47, i_manager_id#51, i_units#50, i_size#48, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(64) CometHashAggregate
Input [11]: [c_last_name#54, c_first_name#53, s_store_name#43, ca_state#56, s_state#44, i_color#49, i_current_price#47, i_manager_id#51, i_units#50, i_size#48, sum#59]
Keys [10]: [c_last_name#54, c_first_name#53, s_store_name#43, ca_state#56, s_state#44, i_color#49, i_current_price#47, i_manager_id#51, i_units#50, i_size#48]
Functions [1]: [sum(UnscaledValue(ss_net_paid#39))]

(65) CometHashAggregate
Input [1]: [netpaid#60]
Keys: []
Functions [1]: [partial_avg(netpaid#60)]

(66) CometColumnarExchange
Input [2]: [sum#61, count#62]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(67) CometHashAggregate
Input [2]: [sum#61, count#62]
Keys: []
Functions [1]: [avg(netpaid#60)]

(68) ColumnarToRow [codegen id : 1]
Input [1]: [(0.05 * avg(netpaid))#63]


