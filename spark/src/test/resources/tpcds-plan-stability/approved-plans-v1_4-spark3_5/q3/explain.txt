== Physical Plan ==
TakeOrderedAndProject (19)
+- * HashAggregate (18)
   +- Exchange (17)
      +- * ColumnarToRow (16)
         +- CometHashAggregate (15)
            +- CometProject (14)
               +- CometBroadcastHashJoin (13)
                  :- CometProject (8)
                  :  +- CometBroadcastHashJoin (7)
                  :     :- CometProject (3)
                  :     :  +- CometFilter (2)
                  :     :     +- CometScan parquet spark_catalog.default.date_dim (1)
                  :     +- CometBroadcastExchange (6)
                  :        +- CometFilter (5)
                  :           +- CometScan parquet spark_catalog.default.store_sales (4)
                  +- CometBroadcastExchange (12)
                     +- CometProject (11)
                        +- CometFilter (10)
                           +- CometScan parquet spark_catalog.default.item (9)


(1) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) CometFilter
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((isnotnull(d_moy#3) AND (d_moy#3 = 11)) AND isnotnull(d_date_sk#1))

(3) CometProject
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Arguments: [d_date_sk#1, d_year#2], [d_date_sk#1, d_year#2]

(4) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(5) CometFilter
Input [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Condition : isnotnull(ss_item_sk#4)

(6) CometBroadcastExchange
Input [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]

(7) CometBroadcastHashJoin
Left output [2]: [d_date_sk#1, d_year#2]
Right output [3]: [ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Arguments: [d_date_sk#1], [ss_sold_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [d_date_sk#1, d_year#2, ss_item_sk#4, ss_ext_sales_price#5, ss_sold_date_sk#6]
Arguments: [d_year#2, ss_item_sk#4, ss_ext_sales_price#5], [d_year#2, ss_item_sk#4, ss_ext_sales_price#5]

(9) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manufact_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,128), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int>

(10) CometFilter
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manufact_id#10]
Condition : ((isnotnull(i_manufact_id#10) AND (i_manufact_id#10 = 128)) AND isnotnull(i_item_sk#7))

(11) CometProject
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manufact_id#10]
Arguments: [i_item_sk#7, i_brand_id#8, i_brand#9], [i_item_sk#7, i_brand_id#8, i_brand#9]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Arguments: [i_item_sk#7, i_brand_id#8, i_brand#9]

(13) CometBroadcastHashJoin
Left output [3]: [d_year#2, ss_item_sk#4, ss_ext_sales_price#5]
Right output [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Arguments: [ss_item_sk#4], [i_item_sk#7], Inner, BuildRight

(14) CometProject
Input [6]: [d_year#2, ss_item_sk#4, ss_ext_sales_price#5, i_item_sk#7, i_brand_id#8, i_brand#9]
Arguments: [d_year#2, ss_ext_sales_price#5, i_brand_id#8, i_brand#9], [d_year#2, ss_ext_sales_price#5, i_brand_id#8, i_brand#9]

(15) CometHashAggregate
Input [4]: [d_year#2, ss_ext_sales_price#5, i_brand_id#8, i_brand#9]
Keys [3]: [d_year#2, i_brand#9, i_brand_id#8]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#5))]

(16) ColumnarToRow [codegen id : 1]
Input [4]: [d_year#2, i_brand#9, i_brand_id#8, sum#11]

(17) Exchange
Input [4]: [d_year#2, i_brand#9, i_brand_id#8, sum#11]
Arguments: hashpartitioning(d_year#2, i_brand#9, i_brand_id#8, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(18) HashAggregate [codegen id : 2]
Input [4]: [d_year#2, i_brand#9, i_brand_id#8, sum#11]
Keys [3]: [d_year#2, i_brand#9, i_brand_id#8]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#5))#12]
Results [4]: [d_year#2, i_brand_id#8 AS brand_id#13, i_brand#9 AS brand#14, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#12,17,2) AS sum_agg#15]

(19) TakeOrderedAndProject
Input [4]: [d_year#2, brand_id#13, brand#14, sum_agg#15]
Arguments: 100, [d_year#2 ASC NULLS FIRST, sum_agg#15 DESC NULLS LAST, brand_id#13 ASC NULLS FIRST], [d_year#2, brand_id#13, brand#14, sum_agg#15]

