== Physical Plan ==
* CometColumnarToRow (103)
+- CometTakeOrderedAndProject (102)
   +- CometHashAggregate (101)
      +- CometExchange (100)
         +- CometHashAggregate (99)
            +- CometExpand (98)
               +- CometUnion (97)
                  :- CometHashAggregate (38)
                  :  +- CometExchange (37)
                  :     +- CometHashAggregate (36)
                  :        +- CometProject (35)
                  :           +- CometBroadcastHashJoin (34)
                  :              :- CometProject (29)
                  :              :  +- CometBroadcastHashJoin (28)
                  :              :     :- CometProject (23)
                  :              :     :  +- CometBroadcastHashJoin (22)
                  :              :     :     :- CometProject (17)
                  :              :     :     :  +- CometBroadcastHashJoin (16)
                  :              :     :     :     :- CometProject (11)
                  :              :     :     :     :  +- CometSortMergeJoin (10)
                  :              :     :     :     :     :- CometSort (4)
                  :              :     :     :     :     :  +- CometExchange (3)
                  :              :     :     :     :     :     +- CometFilter (2)
                  :              :     :     :     :     :        +- CometNativeScan parquet spark_catalog.default.store_sales (1)
                  :              :     :     :     :     +- CometSort (9)
                  :              :     :     :     :        +- CometExchange (8)
                  :              :     :     :     :           +- CometProject (7)
                  :              :     :     :     :              +- CometFilter (6)
                  :              :     :     :     :                 +- CometNativeScan parquet spark_catalog.default.store_returns (5)
                  :              :     :     :     +- CometBroadcastExchange (15)
                  :              :     :     :        +- CometProject (14)
                  :              :     :     :           +- CometFilter (13)
                  :              :     :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (12)
                  :              :     :     +- CometBroadcastExchange (21)
                  :              :     :        +- CometProject (20)
                  :              :     :           +- CometFilter (19)
                  :              :     :              +- CometNativeScan parquet spark_catalog.default.store (18)
                  :              :     +- CometBroadcastExchange (27)
                  :              :        +- CometProject (26)
                  :              :           +- CometFilter (25)
                  :              :              +- CometNativeScan parquet spark_catalog.default.item (24)
                  :              +- CometBroadcastExchange (33)
                  :                 +- CometProject (32)
                  :                    +- CometFilter (31)
                  :                       +- CometNativeScan parquet spark_catalog.default.promotion (30)
                  :- CometHashAggregate (67)
                  :  +- CometExchange (66)
                  :     +- CometHashAggregate (65)
                  :        +- CometProject (64)
                  :           +- CometBroadcastHashJoin (63)
                  :              :- CometProject (61)
                  :              :  +- CometBroadcastHashJoin (60)
                  :              :     :- CometProject (58)
                  :              :     :  +- CometBroadcastHashJoin (57)
                  :              :     :     :- CometProject (52)
                  :              :     :     :  +- CometBroadcastHashJoin (51)
                  :              :     :     :     :- CometProject (49)
                  :              :     :     :     :  +- CometSortMergeJoin (48)
                  :              :     :     :     :     :- CometSort (42)
                  :              :     :     :     :     :  +- CometExchange (41)
                  :              :     :     :     :     :     +- CometFilter (40)
                  :              :     :     :     :     :        +- CometNativeScan parquet spark_catalog.default.catalog_sales (39)
                  :              :     :     :     :     +- CometSort (47)
                  :              :     :     :     :        +- CometExchange (46)
                  :              :     :     :     :           +- CometProject (45)
                  :              :     :     :     :              +- CometFilter (44)
                  :              :     :     :     :                 +- CometNativeScan parquet spark_catalog.default.catalog_returns (43)
                  :              :     :     :     +- ReusedExchange (50)
                  :              :     :     +- CometBroadcastExchange (56)
                  :              :     :        +- CometProject (55)
                  :              :     :           +- CometFilter (54)
                  :              :     :              +- CometNativeScan parquet spark_catalog.default.catalog_page (53)
                  :              :     +- ReusedExchange (59)
                  :              +- ReusedExchange (62)
                  +- CometHashAggregate (96)
                     +- CometExchange (95)
                        +- CometHashAggregate (94)
                           +- CometProject (93)
                              +- CometBroadcastHashJoin (92)
                                 :- CometProject (90)
                                 :  +- CometBroadcastHashJoin (89)
                                 :     :- CometProject (87)
                                 :     :  +- CometBroadcastHashJoin (86)
                                 :     :     :- CometProject (81)
                                 :     :     :  +- CometBroadcastHashJoin (80)
                                 :     :     :     :- CometProject (78)
                                 :     :     :     :  +- CometSortMergeJoin (77)
                                 :     :     :     :     :- CometSort (71)
                                 :     :     :     :     :  +- CometExchange (70)
                                 :     :     :     :     :     +- CometFilter (69)
                                 :     :     :     :     :        +- CometNativeScan parquet spark_catalog.default.web_sales (68)
                                 :     :     :     :     +- CometSort (76)
                                 :     :     :     :        +- CometExchange (75)
                                 :     :     :     :           +- CometProject (74)
                                 :     :     :     :              +- CometFilter (73)
                                 :     :     :     :                 +- CometNativeScan parquet spark_catalog.default.web_returns (72)
                                 :     :     :     +- ReusedExchange (79)
                                 :     :     +- CometBroadcastExchange (85)
                                 :     :        +- CometProject (84)
                                 :     :           +- CometFilter (83)
                                 :     :              +- CometNativeScan parquet spark_catalog.default.web_site (82)
                                 :     +- ReusedExchange (88)
                                 +- ReusedExchange (91)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7], [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST]

(5) CometNativeScan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) CometFilter
Input [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Condition : (isnotnull(sr_item_sk#8) AND isnotnull(sr_ticket_number#9))

(7) CometProject
Input [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11], [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]

(8) CometExchange
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: hashpartitioning(sr_item_sk#8, sr_ticket_number#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11], [sr_item_sk#8 ASC NULLS FIRST, sr_ticket_number#9 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#8, sr_ticket_number#9], LeftOuter

(11) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11]

(12) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_date#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-22), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) CometFilter
Input [2]: [d_date_sk#13, d_date#14]
Condition : (((isnotnull(d_date#14) AND (d_date#14 >= 2000-08-23)) AND (d_date#14 <= 2000-09-22)) AND isnotnull(d_date_sk#13))

(14) CometProject
Input [2]: [d_date_sk#13, d_date#14]
Arguments: [d_date_sk#13], [d_date_sk#13]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: [d_date_sk#13]

(16) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11]
Right output [1]: [d_date_sk#13]
Arguments: [ss_sold_date_sk#7], [d_date_sk#13], Inner, BuildRight

(17) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11, d_date_sk#13]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11]

(18) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_store_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(19) CometFilter
Input [2]: [s_store_sk#15, s_store_id#16]
Condition : isnotnull(s_store_sk#15)

(20) CometProject
Input [2]: [s_store_sk#15, s_store_id#16]
Arguments: [s_store_sk#15, s_store_id#17], [s_store_sk#15, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#16, 16, true, false, true) AS s_store_id#17]

(21) CometBroadcastExchange
Input [2]: [s_store_sk#15, s_store_id#17]
Arguments: [s_store_sk#15, s_store_id#17]

(22) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11]
Right output [2]: [s_store_sk#15, s_store_id#17]
Arguments: [ss_store_sk#2], [s_store_sk#15], Inner, BuildRight

(23) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_sk#15, s_store_id#17]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]

(24) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_current_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(25) CometFilter
Input [2]: [i_item_sk#18, i_current_price#19]
Condition : ((isnotnull(i_current_price#19) AND (i_current_price#19 > 50.00)) AND isnotnull(i_item_sk#18))

(26) CometProject
Input [2]: [i_item_sk#18, i_current_price#19]
Arguments: [i_item_sk#18], [i_item_sk#18]

(27) CometBroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: [i_item_sk#18]

(28) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]
Right output [1]: [i_item_sk#18]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(29) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17, i_item_sk#18]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]

(30) CometNativeScan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#20, p_channel_tv#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(31) CometFilter
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, p_channel_tv#21, 1, true, false, true) = N) AND isnotnull(p_promo_sk#20))

(32) CometProject
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Arguments: [p_promo_sk#20], [p_promo_sk#20]

(33) CometBroadcastExchange
Input [1]: [p_promo_sk#20]
Arguments: [p_promo_sk#20]

(34) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]
Right output [1]: [p_promo_sk#20]
Arguments: [ss_promo_sk#3], [p_promo_sk#20], Inner, BuildRight

(35) CometProject
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17, p_promo_sk#20]
Arguments: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17], [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]

(36) CometHashAggregate
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#17]
Keys [1]: [s_store_id#17]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))]

(37) CometExchange
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Arguments: hashpartitioning(s_store_id#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(38) CometHashAggregate
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Keys [1]: [s_store_id#17]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))]

(39) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#33)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(40) CometFilter
Input [7]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33]
Condition : ((isnotnull(cs_catalog_page_sk#27) AND isnotnull(cs_item_sk#28)) AND isnotnull(cs_promo_sk#29))

(41) CometExchange
Input [7]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33]
Arguments: hashpartitioning(cs_item_sk#28, cs_order_number#30, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(42) CometSort
Input [7]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33]
Arguments: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33], [cs_item_sk#28 ASC NULLS FIRST, cs_order_number#30 ASC NULLS FIRST]

(43) CometNativeScan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37, cr_returned_date_sk#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(44) CometFilter
Input [5]: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37, cr_returned_date_sk#38]
Condition : (isnotnull(cr_item_sk#34) AND isnotnull(cr_order_number#35))

(45) CometProject
Input [5]: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37, cr_returned_date_sk#38]
Arguments: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37], [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37]

(46) CometExchange
Input [4]: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37]
Arguments: hashpartitioning(cr_item_sk#34, cr_order_number#35, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(47) CometSort
Input [4]: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37]
Arguments: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37], [cr_item_sk#34 ASC NULLS FIRST, cr_order_number#35 ASC NULLS FIRST]

(48) CometSortMergeJoin
Left output [7]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33]
Right output [4]: [cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37]
Arguments: [cs_item_sk#28, cs_order_number#30], [cr_item_sk#34, cr_order_number#35], LeftOuter

(49) CometProject
Input [11]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_order_number#30, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33, cr_item_sk#34, cr_order_number#35, cr_return_amount#36, cr_net_loss#37]
Arguments: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33, cr_return_amount#36, cr_net_loss#37], [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33, cr_return_amount#36, cr_net_loss#37]

(50) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#39]

(51) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33, cr_return_amount#36, cr_net_loss#37]
Right output [1]: [d_date_sk#39]
Arguments: [cs_sold_date_sk#33], [d_date_sk#39], Inner, BuildRight

(52) CometProject
Input [9]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cs_sold_date_sk#33, cr_return_amount#36, cr_net_loss#37, d_date_sk#39]
Arguments: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37], [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37]

(53) CometNativeScan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#40, cp_catalog_page_id#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(54) CometFilter
Input [2]: [cp_catalog_page_sk#40, cp_catalog_page_id#41]
Condition : isnotnull(cp_catalog_page_sk#40)

(55) CometProject
Input [2]: [cp_catalog_page_sk#40, cp_catalog_page_id#41]
Arguments: [cp_catalog_page_sk#40, cp_catalog_page_id#42], [cp_catalog_page_sk#40, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cp_catalog_page_id#41, 16, true, false, true) AS cp_catalog_page_id#42]

(56) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#40, cp_catalog_page_id#42]
Arguments: [cp_catalog_page_sk#40, cp_catalog_page_id#42]

(57) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37]
Right output [2]: [cp_catalog_page_sk#40, cp_catalog_page_id#42]
Arguments: [cs_catalog_page_sk#27], [cp_catalog_page_sk#40], Inner, BuildRight

(58) CometProject
Input [9]: [cs_catalog_page_sk#27, cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_sk#40, cp_catalog_page_id#42]
Arguments: [cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42], [cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42]

(59) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#43]

(60) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42]
Right output [1]: [i_item_sk#43]
Arguments: [cs_item_sk#28], [i_item_sk#43], Inner, BuildRight

(61) CometProject
Input [8]: [cs_item_sk#28, cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42, i_item_sk#43]
Arguments: [cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42], [cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42]

(62) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#44]

(63) CometBroadcastHashJoin
Left output [6]: [cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42]
Right output [1]: [p_promo_sk#44]
Arguments: [cs_promo_sk#29], [p_promo_sk#44], Inner, BuildRight

(64) CometProject
Input [7]: [cs_promo_sk#29, cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42, p_promo_sk#44]
Arguments: [cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42], [cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42]

(65) CometHashAggregate
Input [5]: [cs_ext_sales_price#31, cs_net_profit#32, cr_return_amount#36, cr_net_loss#37, cp_catalog_page_id#42]
Keys [1]: [cp_catalog_page_id#42]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#31)), partial_sum(coalesce(cast(cr_return_amount#36 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#32 - coalesce(cast(cr_net_loss#37 as decimal(12,2)), 0.00)))]

(66) CometExchange
Input [6]: [cp_catalog_page_id#42, sum#45, sum#46, isEmpty#47, sum#48, isEmpty#49]
Arguments: hashpartitioning(cp_catalog_page_id#42, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(67) CometHashAggregate
Input [6]: [cp_catalog_page_id#42, sum#45, sum#46, isEmpty#47, sum#48, isEmpty#49]
Keys [1]: [cp_catalog_page_id#42]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#31)), sum(coalesce(cast(cr_return_amount#36 as decimal(12,2)), 0.00)), sum((cs_net_profit#32 - coalesce(cast(cr_net_loss#37 as decimal(12,2)), 0.00)))]

(68) CometNativeScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_order_number#53, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#56)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(69) CometFilter
Input [7]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_order_number#53, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56]
Condition : ((isnotnull(ws_web_site_sk#51) AND isnotnull(ws_item_sk#50)) AND isnotnull(ws_promo_sk#52))

(70) CometExchange
Input [7]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_order_number#53, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56]
Arguments: hashpartitioning(ws_item_sk#50, ws_order_number#53, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(71) CometSort
Input [7]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_order_number#53, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56]
Arguments: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_order_number#53, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56], [ws_item_sk#50 ASC NULLS FIRST, ws_order_number#53 ASC NULLS FIRST]

(72) CometNativeScan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60, wr_returned_date_sk#61]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(73) CometFilter
Input [5]: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60, wr_returned_date_sk#61]
Condition : (isnotnull(wr_item_sk#57) AND isnotnull(wr_order_number#58))

(74) CometProject
Input [5]: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60, wr_returned_date_sk#61]
Arguments: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60], [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60]

(75) CometExchange
Input [4]: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60]
Arguments: hashpartitioning(wr_item_sk#57, wr_order_number#58, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(76) CometSort
Input [4]: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60]
Arguments: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60], [wr_item_sk#57 ASC NULLS FIRST, wr_order_number#58 ASC NULLS FIRST]

(77) CometSortMergeJoin
Left output [7]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_order_number#53, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56]
Right output [4]: [wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60]
Arguments: [ws_item_sk#50, ws_order_number#53], [wr_item_sk#57, wr_order_number#58], LeftOuter

(78) CometProject
Input [11]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_order_number#53, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56, wr_item_sk#57, wr_order_number#58, wr_return_amt#59, wr_net_loss#60]
Arguments: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56, wr_return_amt#59, wr_net_loss#60], [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56, wr_return_amt#59, wr_net_loss#60]

(79) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#62]

(80) CometBroadcastHashJoin
Left output [8]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56, wr_return_amt#59, wr_net_loss#60]
Right output [1]: [d_date_sk#62]
Arguments: [ws_sold_date_sk#56], [d_date_sk#62], Inner, BuildRight

(81) CometProject
Input [9]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, ws_sold_date_sk#56, wr_return_amt#59, wr_net_loss#60, d_date_sk#62]
Arguments: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60], [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60]

(82) CometNativeScan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#63, web_site_id#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(83) CometFilter
Input [2]: [web_site_sk#63, web_site_id#64]
Condition : isnotnull(web_site_sk#63)

(84) CometProject
Input [2]: [web_site_sk#63, web_site_id#64]
Arguments: [web_site_sk#63, web_site_id#65], [web_site_sk#63, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, web_site_id#64, 16, true, false, true) AS web_site_id#65]

(85) CometBroadcastExchange
Input [2]: [web_site_sk#63, web_site_id#65]
Arguments: [web_site_sk#63, web_site_id#65]

(86) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60]
Right output [2]: [web_site_sk#63, web_site_id#65]
Arguments: [ws_web_site_sk#51], [web_site_sk#63], Inner, BuildRight

(87) CometProject
Input [9]: [ws_item_sk#50, ws_web_site_sk#51, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_sk#63, web_site_id#65]
Arguments: [ws_item_sk#50, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65], [ws_item_sk#50, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65]

(88) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#66]

(89) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#50, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65]
Right output [1]: [i_item_sk#66]
Arguments: [ws_item_sk#50], [i_item_sk#66], Inner, BuildRight

(90) CometProject
Input [8]: [ws_item_sk#50, ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65, i_item_sk#66]
Arguments: [ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65], [ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65]

(91) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#67]

(92) CometBroadcastHashJoin
Left output [6]: [ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65]
Right output [1]: [p_promo_sk#67]
Arguments: [ws_promo_sk#52], [p_promo_sk#67], Inner, BuildRight

(93) CometProject
Input [7]: [ws_promo_sk#52, ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65, p_promo_sk#67]
Arguments: [ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65], [ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65]

(94) CometHashAggregate
Input [5]: [ws_ext_sales_price#54, ws_net_profit#55, wr_return_amt#59, wr_net_loss#60, web_site_id#65]
Keys [1]: [web_site_id#65]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#54)), partial_sum(coalesce(cast(wr_return_amt#59 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#55 - coalesce(cast(wr_net_loss#60 as decimal(12,2)), 0.00)))]

(95) CometExchange
Input [6]: [web_site_id#65, sum#68, sum#69, isEmpty#70, sum#71, isEmpty#72]
Arguments: hashpartitioning(web_site_id#65, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(96) CometHashAggregate
Input [6]: [web_site_id#65, sum#68, sum#69, isEmpty#70, sum#71, isEmpty#72]
Keys [1]: [web_site_id#65]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#54)), sum(coalesce(cast(wr_return_amt#59 as decimal(12,2)), 0.00)), sum((ws_net_profit#55 - coalesce(cast(wr_net_loss#60 as decimal(12,2)), 0.00)))]

(97) CometUnion
Child 0 Input [5]: [sales#73, returns#74, profit#75, channel#76, id#77]
Child 1 Input [5]: [sales#78, returns#79, profit#80, channel#81, id#82]
Child 2 Input [5]: [sales#83, returns#84, profit#85, channel#86, id#87]

(98) CometExpand
Input [5]: [sales#73, returns#74, profit#75, channel#76, id#77]
Arguments: [[sales#73, returns#74, profit#75, channel#76, id#77, 0], [sales#73, returns#74, profit#75, channel#76, null, 1], [sales#73, returns#74, profit#75, null, null, 3]], [sales#73, returns#74, profit#75, channel#88, id#89, spark_grouping_id#90]

(99) CometHashAggregate
Input [6]: [sales#73, returns#74, profit#75, channel#88, id#89, spark_grouping_id#90]
Keys [3]: [channel#88, id#89, spark_grouping_id#90]
Functions [3]: [partial_sum(sales#73), partial_sum(returns#74), partial_sum(profit#75)]

(100) CometExchange
Input [9]: [channel#88, id#89, spark_grouping_id#90, sum#91, isEmpty#92, sum#93, isEmpty#94, sum#95, isEmpty#96]
Arguments: hashpartitioning(channel#88, id#89, spark_grouping_id#90, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=10]

(101) CometHashAggregate
Input [9]: [channel#88, id#89, spark_grouping_id#90, sum#91, isEmpty#92, sum#93, isEmpty#94, sum#95, isEmpty#96]
Keys [3]: [channel#88, id#89, spark_grouping_id#90]
Functions [3]: [sum(sales#73), sum(returns#74), sum(profit#75)]

(102) CometTakeOrderedAndProject
Input [5]: [channel#88, id#89, sales#97, returns#98, profit#99]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#88 ASC NULLS FIRST,id#89 ASC NULLS FIRST], output=[channel#88,id#89,sales#97,returns#98,profit#99]), [channel#88, id#89, sales#97, returns#98, profit#99], 100, 0, [channel#88 ASC NULLS FIRST, id#89 ASC NULLS FIRST], [channel#88, id#89, sales#97, returns#98, profit#99]

(103) CometColumnarToRow [codegen id : 1]
Input [5]: [channel#88, id#89, sales#97, returns#98, profit#99]

