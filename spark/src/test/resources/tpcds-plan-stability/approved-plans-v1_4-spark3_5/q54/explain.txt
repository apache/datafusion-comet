== Physical Plan ==
TakeOrderedAndProject (56)
+- * HashAggregate (55)
   +- * CometColumnarToRow (54)
      +- CometColumnarExchange (53)
         +- * HashAggregate (52)
            +- * HashAggregate (51)
               +- * CometColumnarToRow (50)
                  +- CometColumnarExchange (49)
                     +- * HashAggregate (48)
                        +- * Project (47)
                           +- * BroadcastHashJoin Inner BuildRight (46)
                              :- * Project (44)
                              :  +- * BroadcastHashJoin Inner BuildRight (43)
                              :     :- * CometColumnarToRow (38)
                              :     :  +- CometProject (37)
                              :     :     +- CometBroadcastHashJoin (36)
                              :     :        :- CometProject (32)
                              :     :        :  +- CometBroadcastHashJoin (31)
                              :     :        :     :- CometHashAggregate (27)
                              :     :        :     :  +- CometColumnarExchange (26)
                              :     :        :     :     +- * HashAggregate (25)
                              :     :        :     :        +- * Project (24)
                              :     :        :     :           +- * BroadcastHashJoin Inner BuildRight (23)
                              :     :        :     :              :- * Project (18)
                              :     :        :     :              :  +- * BroadcastHashJoin Inner BuildRight (17)
                              :     :        :     :              :     :- * Project (15)
                              :     :        :     :              :     :  +- * BroadcastHashJoin Inner BuildRight (14)
                              :     :        :     :              :     :     :- * CometColumnarToRow (8)
                              :     :        :     :              :     :     :  +- CometUnion (7)
                              :     :        :     :              :     :     :     :- CometProject (3)
                              :     :        :     :              :     :     :     :  +- CometFilter (2)
                              :     :        :     :              :     :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (1)
                              :     :        :     :              :     :     :     +- CometProject (6)
                              :     :        :     :              :     :     :        +- CometFilter (5)
                              :     :        :     :              :     :     :           +- CometScan parquet spark_catalog.default.web_sales (4)
                              :     :        :     :              :     :     +- BroadcastExchange (13)
                              :     :        :     :              :     :        +- * Project (12)
                              :     :        :     :              :     :           +- * Filter (11)
                              :     :        :     :              :     :              +- * CometColumnarToRow (10)
                              :     :        :     :              :     :                 +- CometScan parquet spark_catalog.default.item (9)
                              :     :        :     :              :     +- ReusedExchange (16)
                              :     :        :     :              +- BroadcastExchange (22)
                              :     :        :     :                 +- * CometColumnarToRow (21)
                              :     :        :     :                    +- CometFilter (20)
                              :     :        :     :                       +- CometScan parquet spark_catalog.default.customer (19)
                              :     :        :     +- CometBroadcastExchange (30)
                              :     :        :        +- CometFilter (29)
                              :     :        :           +- CometScan parquet spark_catalog.default.store_sales (28)
                              :     :        +- CometBroadcastExchange (35)
                              :     :           +- CometFilter (34)
                              :     :              +- CometScan parquet spark_catalog.default.customer_address (33)
                              :     +- BroadcastExchange (42)
                              :        +- * CometColumnarToRow (41)
                              :           +- CometFilter (40)
                              :              +- CometScan parquet spark_catalog.default.store (39)
                              +- ReusedExchange (45)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(2) CometFilter
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(3) CometProject
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Arguments: [sold_date_sk#5, customer_sk#6, item_sk#7], [cs_sold_date_sk#3 AS sold_date_sk#5, cs_bill_customer_sk#1 AS customer_sk#6, cs_item_sk#2 AS item_sk#7]

(4) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#10), dynamicpruningexpression(ws_sold_date_sk#10 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(5) CometFilter
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_item_sk#8) AND isnotnull(ws_bill_customer_sk#9))

(6) CometProject
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Arguments: [sold_date_sk#11, customer_sk#12, item_sk#13], [ws_sold_date_sk#10 AS sold_date_sk#11, ws_bill_customer_sk#9 AS customer_sk#12, ws_item_sk#8 AS item_sk#13]

(7) CometUnion
Child 0 Input [3]: [sold_date_sk#5, customer_sk#6, item_sk#7]
Child 1 Input [3]: [sold_date_sk#11, customer_sk#12, item_sk#13]

(8) CometColumnarToRow [codegen id : 4]
Input [3]: [sold_date_sk#5, customer_sk#6, item_sk#7]

(9) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#14, i_class#15, i_category#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), IsNotNull(i_class), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometColumnarToRow [codegen id : 1]
Input [3]: [i_item_sk#14, i_class#15, i_category#16]

(11) Filter [codegen id : 1]
Input [3]: [i_item_sk#14, i_class#15, i_category#16]
Condition : ((((isnotnull(i_category#16) AND isnotnull(i_class#15)) AND (rpad(i_category#16, 50,  ) = Women                                             )) AND (rpad(i_class#15, 50,  ) = maternity                                         )) AND isnotnull(i_item_sk#14))

(12) Project [codegen id : 1]
Output [1]: [i_item_sk#14]
Input [3]: [i_item_sk#14, i_class#15, i_category#16]

(13) BroadcastExchange
Input [1]: [i_item_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(14) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [item_sk#7]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(15) Project [codegen id : 4]
Output [2]: [sold_date_sk#5, customer_sk#6]
Input [4]: [sold_date_sk#5, customer_sk#6, item_sk#7, i_item_sk#14]

(16) ReusedExchange [Reuses operator id: 61]
Output [1]: [d_date_sk#17]

(17) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [sold_date_sk#5]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(18) Project [codegen id : 4]
Output [1]: [customer_sk#6]
Input [3]: [sold_date_sk#5, customer_sk#6, d_date_sk#17]

(19) CometScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(20) CometFilter
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Condition : (isnotnull(c_customer_sk#18) AND isnotnull(c_current_addr_sk#19))

(21) CometColumnarToRow [codegen id : 3]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]

(22) BroadcastExchange
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_sk#6]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: None

(24) Project [codegen id : 4]
Output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Input [3]: [customer_sk#6, c_customer_sk#18, c_current_addr_sk#19]

(25) HashAggregate [codegen id : 4]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Keys [2]: [c_customer_sk#18, c_current_addr_sk#19]
Functions: []
Aggregate Attributes: []
Results [2]: [c_customer_sk#18, c_current_addr_sk#19]

(26) CometColumnarExchange
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: hashpartitioning(c_customer_sk#18, c_current_addr_sk#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(27) CometHashAggregate
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Keys [2]: [c_customer_sk#18, c_current_addr_sk#19]
Functions: []

(28) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#22), dynamicpruningexpression(ss_sold_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(29) CometFilter
Input [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_customer_sk#20)

(30) CometBroadcastExchange
Input [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Arguments: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]

(31) CometBroadcastHashJoin
Left output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Right output [3]: [ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Arguments: [c_customer_sk#18], [ss_customer_sk#20], Inner, BuildRight

(32) CometProject
Input [5]: [c_customer_sk#18, c_current_addr_sk#19, ss_customer_sk#20, ss_ext_sales_price#21, ss_sold_date_sk#22]
Arguments: [c_customer_sk#18, c_current_addr_sk#19, ss_ext_sales_price#21, ss_sold_date_sk#22], [c_customer_sk#18, c_current_addr_sk#19, ss_ext_sales_price#21, ss_sold_date_sk#22]

(33) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(34) CometFilter
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Condition : ((isnotnull(ca_address_sk#24) AND isnotnull(ca_county#25)) AND isnotnull(ca_state#26))

(35) CometBroadcastExchange
Input [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Arguments: [ca_address_sk#24, ca_county#25, ca_state#26]

(36) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#18, c_current_addr_sk#19, ss_ext_sales_price#21, ss_sold_date_sk#22]
Right output [3]: [ca_address_sk#24, ca_county#25, ca_state#26]
Arguments: [c_current_addr_sk#19], [ca_address_sk#24], Inner, BuildRight

(37) CometProject
Input [7]: [c_customer_sk#18, c_current_addr_sk#19, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_address_sk#24, ca_county#25, ca_state#26]
Arguments: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_county#25, ca_state#26], [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_county#25, ca_state#26]

(38) CometColumnarToRow [codegen id : 7]
Input [5]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_county#25, ca_state#26]

(39) CometScan parquet spark_catalog.default.store
Output [2]: [s_county#27, s_state#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), IsNotNull(s_state)]
ReadSchema: struct<s_county:string,s_state:string>

(40) CometFilter
Input [2]: [s_county#27, s_state#28]
Condition : (isnotnull(s_county#27) AND isnotnull(s_state#28))

(41) CometColumnarToRow [codegen id : 5]
Input [2]: [s_county#27, s_state#28]

(42) BroadcastExchange
Input [2]: [s_county#27, s_state#28]
Arguments: HashedRelationBroadcastMode(List(input[0, string, false], rpad(input[1, string, false], 2,  )),false), [plan_id=4]

(43) BroadcastHashJoin [codegen id : 7]
Left keys [2]: [ca_county#25, rpad(ca_state#26, 2,  )]
Right keys [2]: [s_county#27, rpad(s_state#28, 2,  )]
Join type: Inner
Join condition: None

(44) Project [codegen id : 7]
Output [3]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22]
Input [7]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, ca_county#25, ca_state#26, s_county#27, s_state#28]

(45) ReusedExchange [Reuses operator id: 66]
Output [1]: [d_date_sk#29]

(46) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_sold_date_sk#22]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(47) Project [codegen id : 7]
Output [2]: [c_customer_sk#18, ss_ext_sales_price#21]
Input [4]: [c_customer_sk#18, ss_ext_sales_price#21, ss_sold_date_sk#22, d_date_sk#29]

(48) HashAggregate [codegen id : 7]
Input [2]: [c_customer_sk#18, ss_ext_sales_price#21]
Keys [1]: [c_customer_sk#18]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#21))]
Aggregate Attributes [1]: [sum#30]
Results [2]: [c_customer_sk#18, sum#31]

(49) CometColumnarExchange
Input [2]: [c_customer_sk#18, sum#31]
Arguments: hashpartitioning(c_customer_sk#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(50) CometColumnarToRow [codegen id : 8]
Input [2]: [c_customer_sk#18, sum#31]

(51) HashAggregate [codegen id : 8]
Input [2]: [c_customer_sk#18, sum#31]
Keys [1]: [c_customer_sk#18]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#21))#32]
Results [1]: [cast((MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#21))#32,17,2) / 50) as int) AS segment#33]

(52) HashAggregate [codegen id : 8]
Input [1]: [segment#33]
Keys [1]: [segment#33]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#34]
Results [2]: [segment#33, count#35]

(53) CometColumnarExchange
Input [2]: [segment#33, count#35]
Arguments: hashpartitioning(segment#33, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(54) CometColumnarToRow [codegen id : 9]
Input [2]: [segment#33, count#35]

(55) HashAggregate [codegen id : 9]
Input [2]: [segment#33, count#35]
Keys [1]: [segment#33]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#36]
Results [3]: [segment#33, count(1)#36 AS num_customers#37, (segment#33 * 50) AS segment_base#38]

(56) TakeOrderedAndProject
Input [3]: [segment#33, num_customers#37, segment_base#38]
Arguments: 100, [segment#33 ASC NULLS FIRST, num_customers#37 ASC NULLS FIRST], [segment#33, num_customers#37, segment_base#38]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (61)
+- * CometColumnarToRow (60)
   +- CometProject (59)
      +- CometFilter (58)
         +- CometScan parquet spark_catalog.default.date_dim (57)


(57) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#39, d_moy#40]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(58) CometFilter
Input [3]: [d_date_sk#17, d_year#39, d_moy#40]
Condition : ((((isnotnull(d_moy#40) AND isnotnull(d_year#39)) AND (d_moy#40 = 12)) AND (d_year#39 = 1998)) AND isnotnull(d_date_sk#17))

(59) CometProject
Input [3]: [d_date_sk#17, d_year#39, d_moy#40]
Arguments: [d_date_sk#17], [d_date_sk#17]

(60) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#17]

(61) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 4 Hosting Expression = ws_sold_date_sk#10 IN dynamicpruning#4

Subquery:3 Hosting operator id = 28 Hosting Expression = ss_sold_date_sk#22 IN dynamicpruning#23
BroadcastExchange (66)
+- * CometColumnarToRow (65)
   +- CometProject (64)
      +- CometFilter (63)
         +- CometScan parquet spark_catalog.default.date_dim (62)


(62) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#29, d_month_seq#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(63) CometFilter
Input [2]: [d_date_sk#29, d_month_seq#41]
Condition : (((isnotnull(d_month_seq#41) AND (d_month_seq#41 >= Subquery scalar-subquery#42, [id=#43])) AND (d_month_seq#41 <= Subquery scalar-subquery#44, [id=#45])) AND isnotnull(d_date_sk#29))

(64) CometProject
Input [2]: [d_date_sk#29, d_month_seq#41]
Arguments: [d_date_sk#29], [d_date_sk#29]

(65) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#29]

(66) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:4 Hosting operator id = 63 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* CometColumnarToRow (73)
+- CometHashAggregate (72)
   +- CometExchange (71)
      +- CometHashAggregate (70)
         +- CometProject (69)
            +- CometFilter (68)
               +- CometScan parquet spark_catalog.default.date_dim (67)


(67) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#46, d_year#47, d_moy#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(68) CometFilter
Input [3]: [d_month_seq#46, d_year#47, d_moy#48]
Condition : (((isnotnull(d_year#47) AND isnotnull(d_moy#48)) AND (d_year#47 = 1998)) AND (d_moy#48 = 12))

(69) CometProject
Input [3]: [d_month_seq#46, d_year#47, d_moy#48]
Arguments: [(d_month_seq + 1)#49], [(d_month_seq#46 + 1) AS (d_month_seq + 1)#49]

(70) CometHashAggregate
Input [1]: [(d_month_seq + 1)#49]
Keys [1]: [(d_month_seq + 1)#49]
Functions: []

(71) CometExchange
Input [1]: [(d_month_seq + 1)#49]
Arguments: hashpartitioning((d_month_seq + 1)#49, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(72) CometHashAggregate
Input [1]: [(d_month_seq + 1)#49]
Keys [1]: [(d_month_seq + 1)#49]
Functions: []

(73) CometColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 1)#49]

Subquery:5 Hosting operator id = 63 Hosting Expression = Subquery scalar-subquery#44, [id=#45]
* CometColumnarToRow (80)
+- CometHashAggregate (79)
   +- CometExchange (78)
      +- CometHashAggregate (77)
         +- CometProject (76)
            +- CometFilter (75)
               +- CometScan parquet spark_catalog.default.date_dim (74)


(74) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#50, d_year#51, d_moy#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(75) CometFilter
Input [3]: [d_month_seq#50, d_year#51, d_moy#52]
Condition : (((isnotnull(d_year#51) AND isnotnull(d_moy#52)) AND (d_year#51 = 1998)) AND (d_moy#52 = 12))

(76) CometProject
Input [3]: [d_month_seq#50, d_year#51, d_moy#52]
Arguments: [(d_month_seq + 3)#53], [(d_month_seq#50 + 3) AS (d_month_seq + 3)#53]

(77) CometHashAggregate
Input [1]: [(d_month_seq + 3)#53]
Keys [1]: [(d_month_seq + 3)#53]
Functions: []

(78) CometExchange
Input [1]: [(d_month_seq + 3)#53]
Arguments: hashpartitioning((d_month_seq + 3)#53, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=10]

(79) CometHashAggregate
Input [1]: [(d_month_seq + 3)#53]
Keys [1]: [(d_month_seq + 3)#53]
Functions: []

(80) CometColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 3)#53]


