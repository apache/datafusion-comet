== Physical Plan ==
* CometColumnarToRow (58)
+- CometTakeOrderedAndProject (57)
   +- CometHashAggregate (56)
      +- CometExchange (55)
         +- CometHashAggregate (54)
            +- CometHashAggregate (53)
               +- CometExchange (52)
                  +- CometHashAggregate (51)
                     +- CometProject (50)
                        +- CometBroadcastHashJoin (49)
                           :- CometProject (44)
                           :  +- CometBroadcastHashJoin (43)
                           :     :- CometProject (38)
                           :     :  +- CometBroadcastHashJoin (37)
                           :     :     :- CometProject (32)
                           :     :     :  +- CometBroadcastHashJoin (31)
                           :     :     :     :- CometHashAggregate (27)
                           :     :     :     :  +- CometExchange (26)
                           :     :     :     :     +- CometHashAggregate (25)
                           :     :     :     :        +- CometProject (24)
                           :     :     :     :           +- CometBroadcastHashJoin (23)
                           :     :     :     :              :- CometProject (19)
                           :     :     :     :              :  +- CometBroadcastHashJoin (18)
                           :     :     :     :              :     :- CometProject (13)
                           :     :     :     :              :     :  +- CometBroadcastHashJoin (12)
                           :     :     :     :              :     :     :- CometUnion (7)
                           :     :     :     :              :     :     :  :- CometProject (3)
                           :     :     :     :              :     :     :  :  +- CometFilter (2)
                           :     :     :     :              :     :     :  :     +- CometScan parquet spark_catalog.default.catalog_sales (1)
                           :     :     :     :              :     :     :  +- CometProject (6)
                           :     :     :     :              :     :     :     +- CometFilter (5)
                           :     :     :     :              :     :     :        +- CometScan parquet spark_catalog.default.web_sales (4)
                           :     :     :     :              :     :     +- CometBroadcastExchange (11)
                           :     :     :     :              :     :        +- CometProject (10)
                           :     :     :     :              :     :           +- CometFilter (9)
                           :     :     :     :              :     :              +- CometScan parquet spark_catalog.default.item (8)
                           :     :     :     :              :     +- CometBroadcastExchange (17)
                           :     :     :     :              :        +- CometProject (16)
                           :     :     :     :              :           +- CometFilter (15)
                           :     :     :     :              :              +- CometScan parquet spark_catalog.default.date_dim (14)
                           :     :     :     :              +- CometBroadcastExchange (22)
                           :     :     :     :                 +- CometFilter (21)
                           :     :     :     :                    +- CometScan parquet spark_catalog.default.customer (20)
                           :     :     :     +- CometBroadcastExchange (30)
                           :     :     :        +- CometFilter (29)
                           :     :     :           +- CometScan parquet spark_catalog.default.store_sales (28)
                           :     :     +- CometBroadcastExchange (36)
                           :     :        +- CometProject (35)
                           :     :           +- CometFilter (34)
                           :     :              +- CometScan parquet spark_catalog.default.customer_address (33)
                           :     +- CometBroadcastExchange (42)
                           :        +- CometProject (41)
                           :           +- CometFilter (40)
                           :              +- CometScan parquet spark_catalog.default.store (39)
                           +- CometBroadcastExchange (48)
                              +- CometProject (47)
                                 +- CometFilter (46)
                                    +- CometScan parquet spark_catalog.default.date_dim (45)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int>

(2) CometFilter
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Condition : (isnotnull(cs_item_sk#2) AND isnotnull(cs_bill_customer_sk#1))

(3) CometProject
Input [3]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_sold_date_sk#3]
Arguments: [sold_date_sk#5, customer_sk#6, item_sk#7], [cs_sold_date_sk#3 AS sold_date_sk#5, cs_bill_customer_sk#1 AS customer_sk#6, cs_item_sk#2 AS item_sk#7]

(4) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#10), dynamicpruningexpression(ws_sold_date_sk#10 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int>

(5) CometFilter
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Condition : (isnotnull(ws_item_sk#8) AND isnotnull(ws_bill_customer_sk#9))

(6) CometProject
Input [3]: [ws_item_sk#8, ws_bill_customer_sk#9, ws_sold_date_sk#10]
Arguments: [sold_date_sk#11, customer_sk#12, item_sk#13], [ws_sold_date_sk#10 AS sold_date_sk#11, ws_bill_customer_sk#9 AS customer_sk#12, ws_item_sk#8 AS item_sk#13]

(7) CometUnion
Child 0 Input [3]: [sold_date_sk#5, customer_sk#6, item_sk#7]
Child 1 Input [3]: [sold_date_sk#11, customer_sk#12, item_sk#13]

(8) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#14, i_class#15, i_category#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(9) CometFilter
Input [3]: [i_item_sk#14, i_class#15, i_category#16]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#16, 50, true, false, true) = Women                                             ) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#15, 50, true, false, true) = maternity                                         )) AND isnotnull(i_item_sk#14))

(10) CometProject
Input [3]: [i_item_sk#14, i_class#15, i_category#16]
Arguments: [i_item_sk#14], [i_item_sk#14]

(11) CometBroadcastExchange
Input [1]: [i_item_sk#14]
Arguments: [i_item_sk#14]

(12) CometBroadcastHashJoin
Left output [3]: [sold_date_sk#5, customer_sk#6, item_sk#7]
Right output [1]: [i_item_sk#14]
Arguments: [item_sk#7], [i_item_sk#14], Inner, BuildRight

(13) CometProject
Input [4]: [sold_date_sk#5, customer_sk#6, item_sk#7, i_item_sk#14]
Arguments: [sold_date_sk#5, customer_sk#6], [sold_date_sk#5, customer_sk#6]

(14) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_moy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(15) CometFilter
Input [3]: [d_date_sk#17, d_year#18, d_moy#19]
Condition : ((((isnotnull(d_moy#19) AND isnotnull(d_year#18)) AND (d_moy#19 = 12)) AND (d_year#18 = 1998)) AND isnotnull(d_date_sk#17))

(16) CometProject
Input [3]: [d_date_sk#17, d_year#18, d_moy#19]
Arguments: [d_date_sk#17], [d_date_sk#17]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: [d_date_sk#17]

(18) CometBroadcastHashJoin
Left output [2]: [sold_date_sk#5, customer_sk#6]
Right output [1]: [d_date_sk#17]
Arguments: [sold_date_sk#5], [d_date_sk#17], Inner, BuildRight

(19) CometProject
Input [3]: [sold_date_sk#5, customer_sk#6, d_date_sk#17]
Arguments: [customer_sk#6], [customer_sk#6]

(20) CometScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#20, c_current_addr_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(21) CometFilter
Input [2]: [c_customer_sk#20, c_current_addr_sk#21]
Condition : (isnotnull(c_customer_sk#20) AND isnotnull(c_current_addr_sk#21))

(22) CometBroadcastExchange
Input [2]: [c_customer_sk#20, c_current_addr_sk#21]
Arguments: [c_customer_sk#20, c_current_addr_sk#21]

(23) CometBroadcastHashJoin
Left output [1]: [customer_sk#6]
Right output [2]: [c_customer_sk#20, c_current_addr_sk#21]
Arguments: [customer_sk#6], [c_customer_sk#20], Inner, BuildRight

(24) CometProject
Input [3]: [customer_sk#6, c_customer_sk#20, c_current_addr_sk#21]
Arguments: [c_customer_sk#20, c_current_addr_sk#21], [c_customer_sk#20, c_current_addr_sk#21]

(25) CometHashAggregate
Input [2]: [c_customer_sk#20, c_current_addr_sk#21]
Keys [2]: [c_customer_sk#20, c_current_addr_sk#21]
Functions: []

(26) CometExchange
Input [2]: [c_customer_sk#20, c_current_addr_sk#21]
Arguments: hashpartitioning(c_customer_sk#20, c_current_addr_sk#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(27) CometHashAggregate
Input [2]: [c_customer_sk#20, c_current_addr_sk#21]
Keys [2]: [c_customer_sk#20, c_current_addr_sk#21]
Functions: []

(28) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#22, ss_ext_sales_price#23, ss_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#24), dynamicpruningexpression(ss_sold_date_sk#24 IN dynamicpruning#25)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_sales_price:decimal(7,2)>

(29) CometFilter
Input [3]: [ss_customer_sk#22, ss_ext_sales_price#23, ss_sold_date_sk#24]
Condition : isnotnull(ss_customer_sk#22)

(30) CometBroadcastExchange
Input [3]: [ss_customer_sk#22, ss_ext_sales_price#23, ss_sold_date_sk#24]
Arguments: [ss_customer_sk#22, ss_ext_sales_price#23, ss_sold_date_sk#24]

(31) CometBroadcastHashJoin
Left output [2]: [c_customer_sk#20, c_current_addr_sk#21]
Right output [3]: [ss_customer_sk#22, ss_ext_sales_price#23, ss_sold_date_sk#24]
Arguments: [c_customer_sk#20], [ss_customer_sk#22], Inner, BuildRight

(32) CometProject
Input [5]: [c_customer_sk#20, c_current_addr_sk#21, ss_customer_sk#22, ss_ext_sales_price#23, ss_sold_date_sk#24]
Arguments: [c_customer_sk#20, c_current_addr_sk#21, ss_ext_sales_price#23, ss_sold_date_sk#24], [c_customer_sk#20, c_current_addr_sk#21, ss_ext_sales_price#23, ss_sold_date_sk#24]

(33) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#26, ca_county#27, ca_state#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string>

(34) CometFilter
Input [3]: [ca_address_sk#26, ca_county#27, ca_state#28]
Condition : ((isnotnull(ca_address_sk#26) AND isnotnull(ca_county#27)) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#28, 2, true, false, true)))

(35) CometProject
Input [3]: [ca_address_sk#26, ca_county#27, ca_state#28]
Arguments: [ca_address_sk#26, ca_county#27, ca_state#29], [ca_address_sk#26, ca_county#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#28, 2, true, false, true) AS ca_state#29]

(36) CometBroadcastExchange
Input [3]: [ca_address_sk#26, ca_county#27, ca_state#29]
Arguments: [ca_address_sk#26, ca_county#27, ca_state#29]

(37) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#20, c_current_addr_sk#21, ss_ext_sales_price#23, ss_sold_date_sk#24]
Right output [3]: [ca_address_sk#26, ca_county#27, ca_state#29]
Arguments: [c_current_addr_sk#21], [ca_address_sk#26], Inner, BuildRight

(38) CometProject
Input [7]: [c_customer_sk#20, c_current_addr_sk#21, ss_ext_sales_price#23, ss_sold_date_sk#24, ca_address_sk#26, ca_county#27, ca_state#29]
Arguments: [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24, ca_county#27, ca_state#29], [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24, ca_county#27, ca_state#29]

(39) CometScan parquet spark_catalog.default.store
Output [2]: [s_county#30, s_state#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county)]
ReadSchema: struct<s_county:string,s_state:string>

(40) CometFilter
Input [2]: [s_county#30, s_state#31]
Condition : (isnotnull(s_county#30) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#31, 2, true, false, true)))

(41) CometProject
Input [2]: [s_county#30, s_state#31]
Arguments: [s_county#30, s_state#32], [s_county#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#31, 2, true, false, true) AS s_state#32]

(42) CometBroadcastExchange
Input [2]: [s_county#30, s_state#32]
Arguments: [s_county#30, s_state#32]

(43) CometBroadcastHashJoin
Left output [5]: [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24, ca_county#27, ca_state#29]
Right output [2]: [s_county#30, s_state#32]
Arguments: [ca_county#27, ca_state#29], [s_county#30, s_state#32], Inner, BuildRight

(44) CometProject
Input [7]: [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24, ca_county#27, ca_state#29, s_county#30, s_state#32]
Arguments: [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24], [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24]

(45) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#33, d_month_seq#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(46) CometFilter
Input [2]: [d_date_sk#33, d_month_seq#34]
Condition : (((isnotnull(d_month_seq#34) AND (d_month_seq#34 >= ReusedSubquery Subquery scalar-subquery#35, [id=#36])) AND (d_month_seq#34 <= ReusedSubquery Subquery scalar-subquery#37, [id=#38])) AND isnotnull(d_date_sk#33))

(47) CometProject
Input [2]: [d_date_sk#33, d_month_seq#34]
Arguments: [d_date_sk#33], [d_date_sk#33]

(48) CometBroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: [d_date_sk#33]

(49) CometBroadcastHashJoin
Left output [3]: [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24]
Right output [1]: [d_date_sk#33]
Arguments: [ss_sold_date_sk#24], [d_date_sk#33], Inner, BuildRight

(50) CometProject
Input [4]: [c_customer_sk#20, ss_ext_sales_price#23, ss_sold_date_sk#24, d_date_sk#33]
Arguments: [c_customer_sk#20, ss_ext_sales_price#23], [c_customer_sk#20, ss_ext_sales_price#23]

(51) CometHashAggregate
Input [2]: [c_customer_sk#20, ss_ext_sales_price#23]
Keys [1]: [c_customer_sk#20]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#23))]

(52) CometExchange
Input [2]: [c_customer_sk#20, sum#39]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(53) CometHashAggregate
Input [2]: [c_customer_sk#20, sum#39]
Keys [1]: [c_customer_sk#20]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#23))]

(54) CometHashAggregate
Input [1]: [segment#40]
Keys [1]: [segment#40]
Functions [1]: [partial_count(1)]

(55) CometExchange
Input [2]: [segment#40, count#41]
Arguments: hashpartitioning(segment#40, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(56) CometHashAggregate
Input [2]: [segment#40, count#41]
Keys [1]: [segment#40]
Functions [1]: [count(1)]

(57) CometTakeOrderedAndProject
Input [3]: [segment#40, num_customers#42, segment_base#43]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[segment#40 ASC NULLS FIRST,num_customers#42 ASC NULLS FIRST], output=[segment#40,num_customers#42,segment_base#43]), [segment#40, num_customers#42, segment_base#43], 100, [segment#40 ASC NULLS FIRST, num_customers#42 ASC NULLS FIRST], [segment#40, num_customers#42, segment_base#43]

(58) CometColumnarToRow [codegen id : 1]
Input [3]: [segment#40, num_customers#42, segment_base#43]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (63)
+- * CometColumnarToRow (62)
   +- CometProject (61)
      +- CometFilter (60)
         +- CometScan parquet spark_catalog.default.date_dim (59)


(59) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_moy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,12), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(60) CometFilter
Input [3]: [d_date_sk#17, d_year#18, d_moy#19]
Condition : ((((isnotnull(d_moy#19) AND isnotnull(d_year#18)) AND (d_moy#19 = 12)) AND (d_year#18 = 1998)) AND isnotnull(d_date_sk#17))

(61) CometProject
Input [3]: [d_date_sk#17, d_year#18, d_moy#19]
Arguments: [d_date_sk#17], [d_date_sk#17]

(62) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#17]

(63) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 4 Hosting Expression = ws_sold_date_sk#10 IN dynamicpruning#4

Subquery:3 Hosting operator id = 28 Hosting Expression = ss_sold_date_sk#24 IN dynamicpruning#25
BroadcastExchange (68)
+- * CometColumnarToRow (67)
   +- CometProject (66)
      +- CometFilter (65)
         +- CometScan parquet spark_catalog.default.date_dim (64)


(64) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#33, d_month_seq#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(65) CometFilter
Input [2]: [d_date_sk#33, d_month_seq#34]
Condition : (((isnotnull(d_month_seq#34) AND (d_month_seq#34 >= Subquery scalar-subquery#35, [id=#36])) AND (d_month_seq#34 <= Subquery scalar-subquery#37, [id=#38])) AND isnotnull(d_date_sk#33))

(66) CometProject
Input [2]: [d_date_sk#33, d_month_seq#34]
Arguments: [d_date_sk#33], [d_date_sk#33]

(67) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#33]

(68) BroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

Subquery:4 Hosting operator id = 65 Hosting Expression = Subquery scalar-subquery#35, [id=#36]
* CometColumnarToRow (75)
+- CometHashAggregate (74)
   +- CometExchange (73)
      +- CometHashAggregate (72)
         +- CometProject (71)
            +- CometFilter (70)
               +- CometScan parquet spark_catalog.default.date_dim (69)


(69) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#44, d_year#45, d_moy#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(70) CometFilter
Input [3]: [d_month_seq#44, d_year#45, d_moy#46]
Condition : (((isnotnull(d_year#45) AND isnotnull(d_moy#46)) AND (d_year#45 = 1998)) AND (d_moy#46 = 12))

(71) CometProject
Input [3]: [d_month_seq#44, d_year#45, d_moy#46]
Arguments: [(d_month_seq + 1)#47], [(d_month_seq#44 + 1) AS (d_month_seq + 1)#47]

(72) CometHashAggregate
Input [1]: [(d_month_seq + 1)#47]
Keys [1]: [(d_month_seq + 1)#47]
Functions: []

(73) CometExchange
Input [1]: [(d_month_seq + 1)#47]
Arguments: hashpartitioning((d_month_seq + 1)#47, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(74) CometHashAggregate
Input [1]: [(d_month_seq + 1)#47]
Keys [1]: [(d_month_seq + 1)#47]
Functions: []

(75) CometColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 1)#47]

Subquery:5 Hosting operator id = 65 Hosting Expression = Subquery scalar-subquery#37, [id=#38]
* CometColumnarToRow (82)
+- CometHashAggregate (81)
   +- CometExchange (80)
      +- CometHashAggregate (79)
         +- CometProject (78)
            +- CometFilter (77)
               +- CometScan parquet spark_catalog.default.date_dim (76)


(76) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#48, d_year#49, d_moy#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,12)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(77) CometFilter
Input [3]: [d_month_seq#48, d_year#49, d_moy#50]
Condition : (((isnotnull(d_year#49) AND isnotnull(d_moy#50)) AND (d_year#49 = 1998)) AND (d_moy#50 = 12))

(78) CometProject
Input [3]: [d_month_seq#48, d_year#49, d_moy#50]
Arguments: [(d_month_seq + 3)#51], [(d_month_seq#48 + 3) AS (d_month_seq + 3)#51]

(79) CometHashAggregate
Input [1]: [(d_month_seq + 3)#51]
Keys [1]: [(d_month_seq + 3)#51]
Functions: []

(80) CometExchange
Input [1]: [(d_month_seq + 3)#51]
Arguments: hashpartitioning((d_month_seq + 3)#51, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(81) CometHashAggregate
Input [1]: [(d_month_seq + 3)#51]
Keys [1]: [(d_month_seq + 3)#51]
Functions: []

(82) CometColumnarToRow [codegen id : 1]
Input [1]: [(d_month_seq + 3)#51]

Subquery:6 Hosting operator id = 46 Hosting Expression = ReusedSubquery Subquery scalar-subquery#35, [id=#36]

Subquery:7 Hosting operator id = 46 Hosting Expression = ReusedSubquery Subquery scalar-subquery#37, [id=#38]


