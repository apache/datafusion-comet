== Physical Plan ==
* ColumnarToRow (67)
+- CometHashAggregate (66)
   +- CometExchange (65)
      +- CometHashAggregate (64)
         +- CometUnion (63)
            :- CometProject (46)
            :  +- CometBroadcastHashJoin (45)
            :     :- CometProject (40)
            :     :  +- CometSortMergeJoin (39)
            :     :     :- CometSort (24)
            :     :     :  +- CometExchange (23)
            :     :     :     +- CometProject (22)
            :     :     :        +- CometBroadcastHashJoin (21)
            :     :     :           :- CometScan parquet spark_catalog.default.catalog_sales (1)
            :     :     :           +- CometBroadcastExchange (20)
            :     :     :              +- CometProject (19)
            :     :     :                 +- CometFilter (18)
            :     :     :                    +- CometHashAggregate (17)
            :     :     :                       +- CometExchange (16)
            :     :     :                          +- CometHashAggregate (15)
            :     :     :                             +- CometProject (14)
            :     :     :                                +- CometBroadcastHashJoin (13)
            :     :     :                                   :- CometProject (9)
            :     :     :                                   :  +- CometBroadcastHashJoin (8)
            :     :     :                                   :     :- CometFilter (3)
            :     :     :                                   :     :  +- CometScan parquet spark_catalog.default.store_sales (2)
            :     :     :                                   :     +- CometBroadcastExchange (7)
            :     :     :                                   :        +- CometProject (6)
            :     :     :                                   :           +- CometFilter (5)
            :     :     :                                   :              +- CometScan parquet spark_catalog.default.date_dim (4)
            :     :     :                                   +- CometBroadcastExchange (12)
            :     :     :                                      +- CometFilter (11)
            :     :     :                                         +- CometScan parquet spark_catalog.default.item (10)
            :     :     +- CometSort (38)
            :     :        +- CometProject (37)
            :     :           +- CometFilter (36)
            :     :              +- CometHashAggregate (35)
            :     :                 +- CometExchange (34)
            :     :                    +- CometHashAggregate (33)
            :     :                       +- CometProject (32)
            :     :                          +- CometBroadcastHashJoin (31)
            :     :                             :- CometProject (27)
            :     :                             :  +- CometFilter (26)
            :     :                             :     +- CometScan parquet spark_catalog.default.store_sales (25)
            :     :                             +- CometBroadcastExchange (30)
            :     :                                +- CometFilter (29)
            :     :                                   +- CometScan parquet spark_catalog.default.customer (28)
            :     +- CometBroadcastExchange (44)
            :        +- CometProject (43)
            :           +- CometFilter (42)
            :              +- CometScan parquet spark_catalog.default.date_dim (41)
            +- CometProject (62)
               +- CometBroadcastHashJoin (61)
                  :- CometProject (59)
                  :  +- CometSortMergeJoin (58)
                  :     :- CometSort (52)
                  :     :  +- CometExchange (51)
                  :     :     +- CometProject (50)
                  :     :        +- CometBroadcastHashJoin (49)
                  :     :           :- CometScan parquet spark_catalog.default.web_sales (47)
                  :     :           +- ReusedExchange (48)
                  :     +- CometSort (57)
                  :        +- CometProject (56)
                  :           +- CometFilter (55)
                  :              +- CometHashAggregate (54)
                  :                 +- ReusedExchange (53)
                  +- ReusedExchange (60)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) CometScan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(3) CometFilter
Input [2]: [ss_item_sk#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_item_sk#6)

(4) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#8, d_date#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(5) CometFilter
Input [3]: [d_date_sk#8, d_date#9, d_year#10]
Condition : (d_year#10 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8))

(6) CometProject
Input [3]: [d_date_sk#8, d_date#9, d_year#10]
Arguments: [d_date_sk#8, d_date#9], [d_date_sk#8, d_date#9]

(7) CometBroadcastExchange
Input [2]: [d_date_sk#8, d_date#9]
Arguments: [d_date_sk#8, d_date#9]

(8) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#6, ss_sold_date_sk#7]
Right output [2]: [d_date_sk#8, d_date#9]
Arguments: [ss_sold_date_sk#7], [d_date_sk#8], Inner, BuildRight

(9) CometProject
Input [4]: [ss_item_sk#6, ss_sold_date_sk#7, d_date_sk#8, d_date#9]
Arguments: [ss_item_sk#6, d_date#9], [ss_item_sk#6, d_date#9]

(10) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#11, i_item_desc#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(11) CometFilter
Input [2]: [i_item_sk#11, i_item_desc#12]
Condition : isnotnull(i_item_sk#11)

(12) CometBroadcastExchange
Input [2]: [i_item_sk#11, i_item_desc#12]
Arguments: [i_item_sk#11, i_item_desc#12]

(13) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#6, d_date#9]
Right output [2]: [i_item_sk#11, i_item_desc#12]
Arguments: [ss_item_sk#6], [i_item_sk#11], Inner, BuildRight

(14) CometProject
Input [4]: [ss_item_sk#6, d_date#9, i_item_sk#11, i_item_desc#12]
Arguments: [d_date#9, i_item_sk#11, _groupingexpression#13], [d_date#9, i_item_sk#11, substr(i_item_desc#12, 1, 30) AS _groupingexpression#13]

(15) CometHashAggregate
Input [3]: [d_date#9, i_item_sk#11, _groupingexpression#13]
Keys [3]: [_groupingexpression#13, i_item_sk#11, d_date#9]
Functions [1]: [partial_count(1)]

(16) CometExchange
Input [4]: [_groupingexpression#13, i_item_sk#11, d_date#9, count#14]
Arguments: hashpartitioning(_groupingexpression#13, i_item_sk#11, d_date#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometHashAggregate
Input [4]: [_groupingexpression#13, i_item_sk#11, d_date#9, count#14]
Keys [3]: [_groupingexpression#13, i_item_sk#11, d_date#9]
Functions [1]: [count(1)]

(18) CometFilter
Input [2]: [item_sk#15, cnt#16]
Condition : (cnt#16 > 4)

(19) CometProject
Input [2]: [item_sk#15, cnt#16]
Arguments: [item_sk#15], [item_sk#15]

(20) CometBroadcastExchange
Input [1]: [item_sk#15]
Arguments: [item_sk#15]

(21) CometBroadcastHashJoin
Left output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [item_sk#15]
Arguments: [cs_item_sk#2], [item_sk#15], LeftSemi, BuildRight

(22) CometProject
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(23) CometExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(24) CometSort
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1 ASC NULLS FIRST]

(25) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, ss_sold_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(26) CometFilter
Input [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, ss_sold_date_sk#20]
Condition : isnotnull(ss_customer_sk#17)

(27) CometProject
Input [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, ss_sold_date_sk#20]
Arguments: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19], [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19]

(28) CometScan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(29) CometFilter
Input [1]: [c_customer_sk#21]
Condition : isnotnull(c_customer_sk#21)

(30) CometBroadcastExchange
Input [1]: [c_customer_sk#21]
Arguments: [c_customer_sk#21]

(31) CometBroadcastHashJoin
Left output [3]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19]
Right output [1]: [c_customer_sk#21]
Arguments: [ss_customer_sk#17], [c_customer_sk#21], Inner, BuildRight

(32) CometProject
Input [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, c_customer_sk#21]
Arguments: [ss_quantity#18, ss_sales_price#19, c_customer_sk#21], [ss_quantity#18, ss_sales_price#19, c_customer_sk#21]

(33) CometHashAggregate
Input [3]: [ss_quantity#18, ss_sales_price#19, c_customer_sk#21]
Keys [1]: [c_customer_sk#21]
Functions [1]: [partial_sum((cast(ss_quantity#18 as decimal(10,0)) * ss_sales_price#19))]

(34) CometExchange
Input [3]: [c_customer_sk#21, sum#22, isEmpty#23]
Arguments: hashpartitioning(c_customer_sk#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(35) CometHashAggregate
Input [3]: [c_customer_sk#21, sum#22, isEmpty#23]
Keys [1]: [c_customer_sk#21]
Functions [1]: [sum((cast(ss_quantity#18 as decimal(10,0)) * ss_sales_price#19))]

(36) CometFilter
Input [2]: [c_customer_sk#21, ssales#24]
Condition : (isnotnull(ssales#24) AND (cast(ssales#24 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#25, [id=#26])))

(37) CometProject
Input [2]: [c_customer_sk#21, ssales#24]
Arguments: [c_customer_sk#21], [c_customer_sk#21]

(38) CometSort
Input [1]: [c_customer_sk#21]
Arguments: [c_customer_sk#21], [c_customer_sk#21 ASC NULLS FIRST]

(39) CometSortMergeJoin
Left output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [c_customer_sk#21]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#21], LeftSemi

(40) CometProject
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(41) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#27, d_year#28, d_moy#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(42) CometFilter
Input [3]: [d_date_sk#27, d_year#28, d_moy#29]
Condition : ((((isnotnull(d_year#28) AND isnotnull(d_moy#29)) AND (d_year#28 = 2000)) AND (d_moy#29 = 2)) AND isnotnull(d_date_sk#27))

(43) CometProject
Input [3]: [d_date_sk#27, d_year#28, d_moy#29]
Arguments: [d_date_sk#27], [d_date_sk#27]

(44) CometBroadcastExchange
Input [1]: [d_date_sk#27]
Arguments: [d_date_sk#27]

(45) CometBroadcastHashJoin
Left output [3]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [d_date_sk#27]
Arguments: [cs_sold_date_sk#5], [d_date_sk#27], Inner, BuildRight

(46) CometProject
Input [4]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, d_date_sk#27]
Arguments: [sales#30], [(cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4) AS sales#30]

(47) CometScan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#35)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(48) ReusedExchange [Reuses operator id: 20]
Output [1]: [item_sk#36]

(49) CometBroadcastHashJoin
Left output [5]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Right output [1]: [item_sk#36]
Arguments: [ws_item_sk#31], [item_sk#36], LeftSemi, BuildRight

(50) CometProject
Input [5]: [ws_item_sk#31, ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Arguments: [ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35], [ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]

(51) CometExchange
Input [4]: [ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Arguments: hashpartitioning(ws_bill_customer_sk#32, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(52) CometSort
Input [4]: [ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Arguments: [ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35], [ws_bill_customer_sk#32 ASC NULLS FIRST]

(53) ReusedExchange [Reuses operator id: 34]
Output [3]: [c_customer_sk#37, sum#38, isEmpty#39]

(54) CometHashAggregate
Input [3]: [c_customer_sk#37, sum#38, isEmpty#39]
Keys [1]: [c_customer_sk#37]
Functions [1]: [sum((cast(ss_quantity#40 as decimal(10,0)) * ss_sales_price#41))]

(55) CometFilter
Input [2]: [c_customer_sk#37, ssales#42]
Condition : (isnotnull(ssales#42) AND (cast(ssales#42 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#25, [id=#26])))

(56) CometProject
Input [2]: [c_customer_sk#37, ssales#42]
Arguments: [c_customer_sk#37], [c_customer_sk#37]

(57) CometSort
Input [1]: [c_customer_sk#37]
Arguments: [c_customer_sk#37], [c_customer_sk#37 ASC NULLS FIRST]

(58) CometSortMergeJoin
Left output [4]: [ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Right output [1]: [c_customer_sk#37]
Arguments: [ws_bill_customer_sk#32], [c_customer_sk#37], LeftSemi

(59) CometProject
Input [4]: [ws_bill_customer_sk#32, ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Arguments: [ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35], [ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]

(60) ReusedExchange [Reuses operator id: 44]
Output [1]: [d_date_sk#43]

(61) CometBroadcastHashJoin
Left output [3]: [ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35]
Right output [1]: [d_date_sk#43]
Arguments: [ws_sold_date_sk#35], [d_date_sk#43], Inner, BuildRight

(62) CometProject
Input [4]: [ws_quantity#33, ws_list_price#34, ws_sold_date_sk#35, d_date_sk#43]
Arguments: [sales#44], [(cast(ws_quantity#33 as decimal(10,0)) * ws_list_price#34) AS sales#44]

(63) CometUnion
Child 0 Input [1]: [sales#30]
Child 1 Input [1]: [sales#44]

(64) CometHashAggregate
Input [1]: [sales#30]
Keys: []
Functions [1]: [partial_sum(sales#30)]

(65) CometExchange
Input [2]: [sum#45, isEmpty#46]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(66) CometHashAggregate
Input [2]: [sum#45, isEmpty#46]
Keys: []
Functions [1]: [sum(sales#30)]

(67) ColumnarToRow [codegen id : 1]
Input [1]: [sum(sales)#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 36 Hosting Expression = Subquery scalar-subquery#25, [id=#26]
* ColumnarToRow (85)
+- CometHashAggregate (84)
   +- CometExchange (83)
      +- CometHashAggregate (82)
         +- CometHashAggregate (81)
            +- CometExchange (80)
               +- CometHashAggregate (79)
                  +- CometProject (78)
                     +- CometBroadcastHashJoin (77)
                        :- CometProject (72)
                        :  +- CometBroadcastHashJoin (71)
                        :     :- CometFilter (69)
                        :     :  +- CometScan parquet spark_catalog.default.store_sales (68)
                        :     +- ReusedExchange (70)
                        +- CometBroadcastExchange (76)
                           +- CometProject (75)
                              +- CometFilter (74)
                                 +- CometScan parquet spark_catalog.default.date_dim (73)


(68) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#51)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(69) CometFilter
Input [4]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51]
Condition : isnotnull(ss_customer_sk#48)

(70) ReusedExchange [Reuses operator id: 30]
Output [1]: [c_customer_sk#52]

(71) CometBroadcastHashJoin
Left output [4]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51]
Right output [1]: [c_customer_sk#52]
Arguments: [ss_customer_sk#48], [c_customer_sk#52], Inner, BuildRight

(72) CometProject
Input [5]: [ss_customer_sk#48, ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51, c_customer_sk#52]
Arguments: [ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51, c_customer_sk#52], [ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51, c_customer_sk#52]

(73) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#53, d_year#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(74) CometFilter
Input [2]: [d_date_sk#53, d_year#54]
Condition : (d_year#54 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#53))

(75) CometProject
Input [2]: [d_date_sk#53, d_year#54]
Arguments: [d_date_sk#53], [d_date_sk#53]

(76) CometBroadcastExchange
Input [1]: [d_date_sk#53]
Arguments: [d_date_sk#53]

(77) CometBroadcastHashJoin
Left output [4]: [ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51, c_customer_sk#52]
Right output [1]: [d_date_sk#53]
Arguments: [ss_sold_date_sk#51], [d_date_sk#53], Inner, BuildRight

(78) CometProject
Input [5]: [ss_quantity#49, ss_sales_price#50, ss_sold_date_sk#51, c_customer_sk#52, d_date_sk#53]
Arguments: [ss_quantity#49, ss_sales_price#50, c_customer_sk#52], [ss_quantity#49, ss_sales_price#50, c_customer_sk#52]

(79) CometHashAggregate
Input [3]: [ss_quantity#49, ss_sales_price#50, c_customer_sk#52]
Keys [1]: [c_customer_sk#52]
Functions [1]: [partial_sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))]

(80) CometExchange
Input [3]: [c_customer_sk#52, sum#55, isEmpty#56]
Arguments: hashpartitioning(c_customer_sk#52, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(81) CometHashAggregate
Input [3]: [c_customer_sk#52, sum#55, isEmpty#56]
Keys [1]: [c_customer_sk#52]
Functions [1]: [sum((cast(ss_quantity#49 as decimal(10,0)) * ss_sales_price#50))]

(82) CometHashAggregate
Input [1]: [csales#57]
Keys: []
Functions [1]: [partial_max(csales#57)]

(83) CometExchange
Input [1]: [max#58]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(84) CometHashAggregate
Input [1]: [max#58]
Keys: []
Functions [1]: [max(csales#57)]

(85) ColumnarToRow [codegen id : 1]
Input [1]: [tpcds_cmax#59]

Subquery:2 Hosting operator id = 55 Hosting Expression = ReusedSubquery Subquery scalar-subquery#25, [id=#26]


