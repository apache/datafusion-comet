== Physical Plan ==
TakeOrderedAndProject (23)
+- * Project (22)
   +- Window (21)
      +- * CometColumnarToRow (20)
         +- CometSort (19)
            +- CometExchange (18)
               +- CometHashAggregate (17)
                  +- CometExchange (16)
                     +- CometHashAggregate (15)
                        +- CometProject (14)
                           +- CometBroadcastHashJoin (13)
                              :- CometProject (8)
                              :  +- CometBroadcastHashJoin (7)
                              :     :- CometFilter (2)
                              :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (1)
                              :     +- CometBroadcastExchange (6)
                              :        +- CometProject (5)
                              :           +- CometFilter (4)
                              :              +- CometNativeScan parquet spark_catalog.default.item (3)
                              +- CometBroadcastExchange (12)
                                 +- CometProject (11)
                                    +- CometFilter (10)
                                       +- CometNativeScan parquet spark_catalog.default.date_dim (9)


(1) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#3)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometNativeScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#4, i_item_id#5, i_item_desc#6, i_current_price#7, i_class#8, i_category#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string>

(4) CometFilter
Input [6]: [i_item_sk#4, i_item_id#5, i_item_desc#6, i_current_price#7, i_class#8, i_category#9]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#9, 50, true, false, true) IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#4))

(5) CometProject
Input [6]: [i_item_sk#4, i_item_id#5, i_item_desc#6, i_current_price#7, i_class#8, i_category#9]
Arguments: [i_item_sk#4, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12], [i_item_sk#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#5, 16, true, false, true) AS i_item_id#10, i_item_desc#6, i_current_price#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#8, 50, true, false, true) AS i_class#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#9, 50, true, false, true) AS i_category#12]

(6) CometBroadcastExchange
Input [6]: [i_item_sk#4, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]
Arguments: [i_item_sk#4, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3]
Right output [6]: [i_item_sk#4, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]
Arguments: [ws_item_sk#1], [i_item_sk#4], Inner, BuildRight

(8) CometProject
Input [9]: [ws_item_sk#1, ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_sk#4, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]
Arguments: [ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12], [ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_date#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(10) CometFilter
Input [2]: [d_date_sk#13, d_date#14]
Condition : (((isnotnull(d_date#14) AND (d_date#14 >= 1999-02-22)) AND (d_date#14 <= 1999-03-24)) AND isnotnull(d_date_sk#13))

(11) CometProject
Input [2]: [d_date_sk#13, d_date#14]
Arguments: [d_date_sk#13], [d_date_sk#13]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: [d_date_sk#13]

(13) CometBroadcastHashJoin
Left output [7]: [ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]
Right output [1]: [d_date_sk#13]
Arguments: [ws_sold_date_sk#3], [d_date_sk#13], Inner, BuildRight

(14) CometProject
Input [8]: [ws_ext_sales_price#2, ws_sold_date_sk#3, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12, d_date_sk#13]
Arguments: [ws_ext_sales_price#2, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12], [ws_ext_sales_price#2, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]

(15) CometHashAggregate
Input [6]: [ws_ext_sales_price#2, i_item_id#10, i_item_desc#6, i_current_price#7, i_class#11, i_category#12]
Keys [5]: [i_item_id#10, i_item_desc#6, i_category#12, i_class#11, i_current_price#7]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#2))]

(16) CometExchange
Input [6]: [i_item_id#10, i_item_desc#6, i_category#12, i_class#11, i_current_price#7, sum#15]
Arguments: hashpartitioning(i_item_id#10, i_item_desc#6, i_category#12, i_class#11, i_current_price#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometHashAggregate
Input [6]: [i_item_id#10, i_item_desc#6, i_category#12, i_class#11, i_current_price#7, sum#15]
Keys [5]: [i_item_id#10, i_item_desc#6, i_category#12, i_class#11, i_current_price#7]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#2))]

(18) CometExchange
Input [7]: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, _w0#17, i_item_id#10]
Arguments: hashpartitioning(i_class#11, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(19) CometSort
Input [7]: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, _w0#17, i_item_id#10]
Arguments: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, _w0#17, i_item_id#10], [i_class#11 ASC NULLS FIRST]

(20) CometColumnarToRow [codegen id : 1]
Input [7]: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, _w0#17, i_item_id#10]

(21) Window
Input [7]: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, _w0#17, i_item_id#10]
Arguments: [sum(_w0#17) windowspecdefinition(i_class#11, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#18], [i_class#11]

(22) Project [codegen id : 2]
Output [7]: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, ((_w0#17 * 100) / _we0#18) AS revenueratio#19, i_item_id#10]
Input [8]: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, _w0#17, i_item_id#10, _we0#18]

(23) TakeOrderedAndProject
Input [7]: [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, revenueratio#19, i_item_id#10]
Arguments: 100, [i_category#12 ASC NULLS FIRST, i_class#11 ASC NULLS FIRST, i_item_id#10 ASC NULLS FIRST, i_item_desc#6 ASC NULLS FIRST, revenueratio#19 ASC NULLS FIRST], [i_item_desc#6, i_category#12, i_class#11, i_current_price#7, itemrevenue#16, revenueratio#19]

