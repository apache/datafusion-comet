== Physical Plan ==
* Sort (95)
+- Exchange (94)
   +- * Project (93)
      +- * BroadcastHashJoin Inner BuildRight (92)
         :- * Project (78)
         :  +- * BroadcastHashJoin Inner BuildRight (77)
         :     :- * BroadcastHashJoin Inner BuildRight (63)
         :     :  :- * Project (49)
         :     :  :  +- * BroadcastHashJoin Inner BuildRight (48)
         :     :  :     :- * BroadcastHashJoin Inner BuildRight (32)
         :     :  :     :  :- * HashAggregate (16)
         :     :  :     :  :  +- Exchange (15)
         :     :  :     :  :     +- * ColumnarToRow (14)
         :     :  :     :  :        +- CometHashAggregate (13)
         :     :  :     :  :           +- CometProject (12)
         :     :  :     :  :              +- CometBroadcastHashJoin (11)
         :     :  :     :  :                 :- CometProject (7)
         :     :  :     :  :                 :  +- CometBroadcastHashJoin (6)
         :     :  :     :  :                 :     :- CometFilter (2)
         :     :  :     :  :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :  :     :  :                 :     +- CometBroadcastExchange (5)
         :     :  :     :  :                 :        +- CometFilter (4)
         :     :  :     :  :                 :           +- CometScan parquet spark_catalog.default.date_dim (3)
         :     :  :     :  :                 +- CometBroadcastExchange (10)
         :     :  :     :  :                    +- CometFilter (9)
         :     :  :     :  :                       +- CometScan parquet spark_catalog.default.customer_address (8)
         :     :  :     :  +- BroadcastExchange (31)
         :     :  :     :     +- * HashAggregate (30)
         :     :  :     :        +- Exchange (29)
         :     :  :     :           +- * ColumnarToRow (28)
         :     :  :     :              +- CometHashAggregate (27)
         :     :  :     :                 +- CometProject (26)
         :     :  :     :                    +- CometBroadcastHashJoin (25)
         :     :  :     :                       :- CometProject (23)
         :     :  :     :                       :  +- CometBroadcastHashJoin (22)
         :     :  :     :                       :     :- CometFilter (18)
         :     :  :     :                       :     :  +- CometScan parquet spark_catalog.default.store_sales (17)
         :     :  :     :                       :     +- CometBroadcastExchange (21)
         :     :  :     :                       :        +- CometFilter (20)
         :     :  :     :                       :           +- CometScan parquet spark_catalog.default.date_dim (19)
         :     :  :     :                       +- ReusedExchange (24)
         :     :  :     +- BroadcastExchange (47)
         :     :  :        +- * HashAggregate (46)
         :     :  :           +- Exchange (45)
         :     :  :              +- * ColumnarToRow (44)
         :     :  :                 +- CometHashAggregate (43)
         :     :  :                    +- CometProject (42)
         :     :  :                       +- CometBroadcastHashJoin (41)
         :     :  :                          :- CometProject (39)
         :     :  :                          :  +- CometBroadcastHashJoin (38)
         :     :  :                          :     :- CometFilter (34)
         :     :  :                          :     :  +- CometScan parquet spark_catalog.default.store_sales (33)
         :     :  :                          :     +- CometBroadcastExchange (37)
         :     :  :                          :        +- CometFilter (36)
         :     :  :                          :           +- CometScan parquet spark_catalog.default.date_dim (35)
         :     :  :                          +- ReusedExchange (40)
         :     :  +- BroadcastExchange (62)
         :     :     +- * HashAggregate (61)
         :     :        +- Exchange (60)
         :     :           +- * ColumnarToRow (59)
         :     :              +- CometHashAggregate (58)
         :     :                 +- CometProject (57)
         :     :                    +- CometBroadcastHashJoin (56)
         :     :                       :- CometProject (54)
         :     :                       :  +- CometBroadcastHashJoin (53)
         :     :                       :     :- CometFilter (51)
         :     :                       :     :  +- CometScan parquet spark_catalog.default.web_sales (50)
         :     :                       :     +- ReusedExchange (52)
         :     :                       +- ReusedExchange (55)
         :     +- BroadcastExchange (76)
         :        +- * HashAggregate (75)
         :           +- Exchange (74)
         :              +- * ColumnarToRow (73)
         :                 +- CometHashAggregate (72)
         :                    +- CometProject (71)
         :                       +- CometBroadcastHashJoin (70)
         :                          :- CometProject (68)
         :                          :  +- CometBroadcastHashJoin (67)
         :                          :     :- CometFilter (65)
         :                          :     :  +- CometScan parquet spark_catalog.default.web_sales (64)
         :                          :     +- ReusedExchange (66)
         :                          +- ReusedExchange (69)
         +- BroadcastExchange (91)
            +- * HashAggregate (90)
               +- Exchange (89)
                  +- * ColumnarToRow (88)
                     +- CometHashAggregate (87)
                        +- CometProject (86)
                           +- CometBroadcastHashJoin (85)
                              :- CometProject (83)
                              :  +- CometBroadcastHashJoin (82)
                              :     :- CometFilter (80)
                              :     :  +- CometScan parquet spark_catalog.default.web_sales (79)
                              :     +- ReusedExchange (81)
                              +- ReusedExchange (84)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_addr_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(4) CometFilter
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : ((((isnotnull(d_qoy#7) AND isnotnull(d_year#6)) AND (d_qoy#7 = 1)) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(5) CometBroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: [d_date_sk#5, d_year#6, d_qoy#7]

(6) CometBroadcastHashJoin
Left output [3]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(7) CometProject
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, d_date_sk#5, d_year#6, d_qoy#7]
Arguments: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7], [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]

(8) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_county#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_county)]
ReadSchema: struct<ca_address_sk:int,ca_county:string>

(9) CometFilter
Input [2]: [ca_address_sk#8, ca_county#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(ca_county#9))

(10) CometBroadcastExchange
Input [2]: [ca_address_sk#8, ca_county#9]
Arguments: [ca_address_sk#8, ca_county#9]

(11) CometBroadcastHashJoin
Left output [4]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7]
Right output [2]: [ca_address_sk#8, ca_county#9]
Arguments: [ss_addr_sk#1], [ca_address_sk#8], Inner, BuildRight

(12) CometProject
Input [6]: [ss_addr_sk#1, ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_address_sk#8, ca_county#9]
Arguments: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9], [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9]

(13) CometHashAggregate
Input [4]: [ss_ext_sales_price#2, d_year#6, d_qoy#7, ca_county#9]
Keys [3]: [ca_county#9, d_qoy#7, d_year#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(14) ColumnarToRow [codegen id : 1]
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#10]

(15) Exchange
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#10]
Arguments: hashpartitioning(ca_county#9, d_qoy#7, d_year#6, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(16) HashAggregate [codegen id : 12]
Input [4]: [ca_county#9, d_qoy#7, d_year#6, sum#10]
Keys [3]: [ca_county#9, d_qoy#7, d_year#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#11]
Results [3]: [ca_county#9, d_year#6, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#11,17,2) AS store_sales#12]

(17) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#15), dynamicpruningexpression(ss_sold_date_sk#15 IN dynamicpruning#16)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(18) CometFilter
Input [3]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15]
Condition : isnotnull(ss_addr_sk#13)

(19) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(20) CometFilter
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Condition : ((((isnotnull(d_qoy#19) AND isnotnull(d_year#18)) AND (d_qoy#19 = 2)) AND (d_year#18 = 2000)) AND isnotnull(d_date_sk#17))

(21) CometBroadcastExchange
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Arguments: [d_date_sk#17, d_year#18, d_qoy#19]

(22) CometBroadcastHashJoin
Left output [3]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15]
Right output [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Arguments: [ss_sold_date_sk#15], [d_date_sk#17], Inner, BuildRight

(23) CometProject
Input [6]: [ss_addr_sk#13, ss_ext_sales_price#14, ss_sold_date_sk#15, d_date_sk#17, d_year#18, d_qoy#19]
Arguments: [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19], [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19]

(24) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#20, ca_county#21]

(25) CometBroadcastHashJoin
Left output [4]: [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19]
Right output [2]: [ca_address_sk#20, ca_county#21]
Arguments: [ss_addr_sk#13], [ca_address_sk#20], Inner, BuildRight

(26) CometProject
Input [6]: [ss_addr_sk#13, ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_address_sk#20, ca_county#21]
Arguments: [ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_county#21], [ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_county#21]

(27) CometHashAggregate
Input [4]: [ss_ext_sales_price#14, d_year#18, d_qoy#19, ca_county#21]
Keys [3]: [ca_county#21, d_qoy#19, d_year#18]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#14))]

(28) ColumnarToRow [codegen id : 2]
Input [4]: [ca_county#21, d_qoy#19, d_year#18, sum#22]

(29) Exchange
Input [4]: [ca_county#21, d_qoy#19, d_year#18, sum#22]
Arguments: hashpartitioning(ca_county#21, d_qoy#19, d_year#18, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(30) HashAggregate [codegen id : 3]
Input [4]: [ca_county#21, d_qoy#19, d_year#18, sum#22]
Keys [3]: [ca_county#21, d_qoy#19, d_year#18]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#14))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#14))#11]
Results [2]: [ca_county#21, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#14))#11,17,2) AS store_sales#23]

(31) BroadcastExchange
Input [2]: [ca_county#21, store_sales#23]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(32) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#9]
Right keys [1]: [ca_county#21]
Join type: Inner
Join condition: None

(33) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ss_addr_sk)]
ReadSchema: struct<ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(34) CometFilter
Input [3]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_addr_sk#24)

(35) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(36) CometFilter
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Condition : ((((isnotnull(d_qoy#30) AND isnotnull(d_year#29)) AND (d_qoy#30 = 3)) AND (d_year#29 = 2000)) AND isnotnull(d_date_sk#28))

(37) CometBroadcastExchange
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Arguments: [d_date_sk#28, d_year#29, d_qoy#30]

(38) CometBroadcastHashJoin
Left output [3]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26]
Right output [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Arguments: [ss_sold_date_sk#26], [d_date_sk#28], Inner, BuildRight

(39) CometProject
Input [6]: [ss_addr_sk#24, ss_ext_sales_price#25, ss_sold_date_sk#26, d_date_sk#28, d_year#29, d_qoy#30]
Arguments: [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30], [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30]

(40) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#31, ca_county#32]

(41) CometBroadcastHashJoin
Left output [4]: [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30]
Right output [2]: [ca_address_sk#31, ca_county#32]
Arguments: [ss_addr_sk#24], [ca_address_sk#31], Inner, BuildRight

(42) CometProject
Input [6]: [ss_addr_sk#24, ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_address_sk#31, ca_county#32]
Arguments: [ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_county#32], [ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_county#32]

(43) CometHashAggregate
Input [4]: [ss_ext_sales_price#25, d_year#29, d_qoy#30, ca_county#32]
Keys [3]: [ca_county#32, d_qoy#30, d_year#29]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#25))]

(44) ColumnarToRow [codegen id : 4]
Input [4]: [ca_county#32, d_qoy#30, d_year#29, sum#33]

(45) Exchange
Input [4]: [ca_county#32, d_qoy#30, d_year#29, sum#33]
Arguments: hashpartitioning(ca_county#32, d_qoy#30, d_year#29, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(46) HashAggregate [codegen id : 5]
Input [4]: [ca_county#32, d_qoy#30, d_year#29, sum#33]
Keys [3]: [ca_county#32, d_qoy#30, d_year#29]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#25))#11]
Results [2]: [ca_county#32, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#25))#11,17,2) AS store_sales#34]

(47) BroadcastExchange
Input [2]: [ca_county#32, store_sales#34]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(48) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#21]
Right keys [1]: [ca_county#32]
Join type: Inner
Join condition: None

(49) Project [codegen id : 12]
Output [5]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34]
Input [7]: [ca_county#9, d_year#6, store_sales#12, ca_county#21, store_sales#23, ca_county#32, store_sales#34]

(50) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#37), dynamicpruningexpression(ws_sold_date_sk#37 IN dynamicpruning#38)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(51) CometFilter
Input [3]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Condition : isnotnull(ws_bill_addr_sk#35)

(52) ReusedExchange [Reuses operator id: 5]
Output [3]: [d_date_sk#39, d_year#40, d_qoy#41]

(53) CometBroadcastHashJoin
Left output [3]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37]
Right output [3]: [d_date_sk#39, d_year#40, d_qoy#41]
Arguments: [ws_sold_date_sk#37], [d_date_sk#39], Inner, BuildRight

(54) CometProject
Input [6]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, ws_sold_date_sk#37, d_date_sk#39, d_year#40, d_qoy#41]
Arguments: [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41], [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41]

(55) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#42, ca_county#43]

(56) CometBroadcastHashJoin
Left output [4]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41]
Right output [2]: [ca_address_sk#42, ca_county#43]
Arguments: [ws_bill_addr_sk#35], [ca_address_sk#42], Inner, BuildRight

(57) CometProject
Input [6]: [ws_bill_addr_sk#35, ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_address_sk#42, ca_county#43]
Arguments: [ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_county#43], [ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_county#43]

(58) CometHashAggregate
Input [4]: [ws_ext_sales_price#36, d_year#40, d_qoy#41, ca_county#43]
Keys [3]: [ca_county#43, d_qoy#41, d_year#40]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#36))]

(59) ColumnarToRow [codegen id : 6]
Input [4]: [ca_county#43, d_qoy#41, d_year#40, sum#44]

(60) Exchange
Input [4]: [ca_county#43, d_qoy#41, d_year#40, sum#44]
Arguments: hashpartitioning(ca_county#43, d_qoy#41, d_year#40, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(61) HashAggregate [codegen id : 7]
Input [4]: [ca_county#43, d_qoy#41, d_year#40, sum#44]
Keys [3]: [ca_county#43, d_qoy#41, d_year#40]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#36))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#36))#45]
Results [2]: [ca_county#43, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#36))#45,17,2) AS web_sales#46]

(62) BroadcastExchange
Input [2]: [ca_county#43, web_sales#46]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=7]

(63) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#9]
Right keys [1]: [ca_county#43]
Join type: Inner
Join condition: None

(64) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#49), dynamicpruningexpression(ws_sold_date_sk#49 IN dynamicpruning#50)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(65) CometFilter
Input [3]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49]
Condition : isnotnull(ws_bill_addr_sk#47)

(66) ReusedExchange [Reuses operator id: 21]
Output [3]: [d_date_sk#51, d_year#52, d_qoy#53]

(67) CometBroadcastHashJoin
Left output [3]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49]
Right output [3]: [d_date_sk#51, d_year#52, d_qoy#53]
Arguments: [ws_sold_date_sk#49], [d_date_sk#51], Inner, BuildRight

(68) CometProject
Input [6]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, ws_sold_date_sk#49, d_date_sk#51, d_year#52, d_qoy#53]
Arguments: [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53], [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53]

(69) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#54, ca_county#55]

(70) CometBroadcastHashJoin
Left output [4]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53]
Right output [2]: [ca_address_sk#54, ca_county#55]
Arguments: [ws_bill_addr_sk#47], [ca_address_sk#54], Inner, BuildRight

(71) CometProject
Input [6]: [ws_bill_addr_sk#47, ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_address_sk#54, ca_county#55]
Arguments: [ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_county#55], [ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_county#55]

(72) CometHashAggregate
Input [4]: [ws_ext_sales_price#48, d_year#52, d_qoy#53, ca_county#55]
Keys [3]: [ca_county#55, d_qoy#53, d_year#52]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#48))]

(73) ColumnarToRow [codegen id : 8]
Input [4]: [ca_county#55, d_qoy#53, d_year#52, sum#56]

(74) Exchange
Input [4]: [ca_county#55, d_qoy#53, d_year#52, sum#56]
Arguments: hashpartitioning(ca_county#55, d_qoy#53, d_year#52, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(75) HashAggregate [codegen id : 9]
Input [4]: [ca_county#55, d_qoy#53, d_year#52, sum#56]
Keys [3]: [ca_county#55, d_qoy#53, d_year#52]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#48))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#48))#45]
Results [2]: [ca_county#55, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#48))#45,17,2) AS web_sales#57]

(76) BroadcastExchange
Input [2]: [ca_county#55, web_sales#57]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=9]

(77) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#43]
Right keys [1]: [ca_county#55]
Join type: Inner
Join condition: (CASE WHEN (web_sales#46 > 0.00) THEN (web_sales#57 / web_sales#46) END > CASE WHEN (store_sales#12 > 0.00) THEN (store_sales#23 / store_sales#12) END)

(78) Project [codegen id : 12]
Output [8]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34, ca_county#43, web_sales#46, web_sales#57]
Input [9]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34, ca_county#43, web_sales#46, ca_county#55, web_sales#57]

(79) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#60), dynamicpruningexpression(ws_sold_date_sk#60 IN dynamicpruning#61)]
PushedFilters: [IsNotNull(ws_bill_addr_sk)]
ReadSchema: struct<ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(80) CometFilter
Input [3]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60]
Condition : isnotnull(ws_bill_addr_sk#58)

(81) ReusedExchange [Reuses operator id: 37]
Output [3]: [d_date_sk#62, d_year#63, d_qoy#64]

(82) CometBroadcastHashJoin
Left output [3]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60]
Right output [3]: [d_date_sk#62, d_year#63, d_qoy#64]
Arguments: [ws_sold_date_sk#60], [d_date_sk#62], Inner, BuildRight

(83) CometProject
Input [6]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, ws_sold_date_sk#60, d_date_sk#62, d_year#63, d_qoy#64]
Arguments: [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64], [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64]

(84) ReusedExchange [Reuses operator id: 10]
Output [2]: [ca_address_sk#65, ca_county#66]

(85) CometBroadcastHashJoin
Left output [4]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64]
Right output [2]: [ca_address_sk#65, ca_county#66]
Arguments: [ws_bill_addr_sk#58], [ca_address_sk#65], Inner, BuildRight

(86) CometProject
Input [6]: [ws_bill_addr_sk#58, ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_address_sk#65, ca_county#66]
Arguments: [ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_county#66], [ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_county#66]

(87) CometHashAggregate
Input [4]: [ws_ext_sales_price#59, d_year#63, d_qoy#64, ca_county#66]
Keys [3]: [ca_county#66, d_qoy#64, d_year#63]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#59))]

(88) ColumnarToRow [codegen id : 10]
Input [4]: [ca_county#66, d_qoy#64, d_year#63, sum#67]

(89) Exchange
Input [4]: [ca_county#66, d_qoy#64, d_year#63, sum#67]
Arguments: hashpartitioning(ca_county#66, d_qoy#64, d_year#63, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(90) HashAggregate [codegen id : 11]
Input [4]: [ca_county#66, d_qoy#64, d_year#63, sum#67]
Keys [3]: [ca_county#66, d_qoy#64, d_year#63]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#59))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#59))#45]
Results [2]: [ca_county#66, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#59))#45,17,2) AS web_sales#68]

(91) BroadcastExchange
Input [2]: [ca_county#66, web_sales#68]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=11]

(92) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [ca_county#43]
Right keys [1]: [ca_county#66]
Join type: Inner
Join condition: (CASE WHEN (web_sales#57 > 0.00) THEN (web_sales#68 / web_sales#57) END > CASE WHEN (store_sales#23 > 0.00) THEN (store_sales#34 / store_sales#23) END)

(93) Project [codegen id : 12]
Output [6]: [ca_county#9, d_year#6, (web_sales#57 / web_sales#46) AS web_q1_q2_increase#69, (store_sales#23 / store_sales#12) AS store_q1_q2_increase#70, (web_sales#68 / web_sales#57) AS web_q2_q3_increase#71, (store_sales#34 / store_sales#23) AS store_q2_q3_increase#72]
Input [10]: [ca_county#9, d_year#6, store_sales#12, store_sales#23, store_sales#34, ca_county#43, web_sales#46, web_sales#57, ca_county#66, web_sales#68]

(94) Exchange
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#69, store_q1_q2_increase#70, web_q2_q3_increase#71, store_q2_q3_increase#72]
Arguments: rangepartitioning(ca_county#9 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(95) Sort [codegen id : 13]
Input [6]: [ca_county#9, d_year#6, web_q1_q2_increase#69, store_q1_q2_increase#70, web_q2_q3_increase#71, store_q2_q3_increase#72]
Arguments: [ca_county#9 ASC NULLS FIRST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (99)
+- * ColumnarToRow (98)
   +- CometFilter (97)
      +- CometScan parquet spark_catalog.default.date_dim (96)


(96) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,1), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(97) CometFilter
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Condition : ((((isnotnull(d_qoy#7) AND isnotnull(d_year#6)) AND (d_qoy#7 = 1)) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(98) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]

(99) BroadcastExchange
Input [3]: [d_date_sk#5, d_year#6, d_qoy#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 17 Hosting Expression = ss_sold_date_sk#15 IN dynamicpruning#16
BroadcastExchange (103)
+- * ColumnarToRow (102)
   +- CometFilter (101)
      +- CometScan parquet spark_catalog.default.date_dim (100)


(100) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(101) CometFilter
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Condition : ((((isnotnull(d_qoy#19) AND isnotnull(d_year#18)) AND (d_qoy#19 = 2)) AND (d_year#18 = 2000)) AND isnotnull(d_date_sk#17))

(102) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]

(103) BroadcastExchange
Input [3]: [d_date_sk#17, d_year#18, d_qoy#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=14]

Subquery:3 Hosting operator id = 33 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#27
BroadcastExchange (107)
+- * ColumnarToRow (106)
   +- CometFilter (105)
      +- CometScan parquet spark_catalog.default.date_dim (104)


(104) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,3), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(105) CometFilter
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Condition : ((((isnotnull(d_qoy#30) AND isnotnull(d_year#29)) AND (d_qoy#30 = 3)) AND (d_year#29 = 2000)) AND isnotnull(d_date_sk#28))

(106) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]

(107) BroadcastExchange
Input [3]: [d_date_sk#28, d_year#29, d_qoy#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=15]

Subquery:4 Hosting operator id = 50 Hosting Expression = ws_sold_date_sk#37 IN dynamicpruning#4

Subquery:5 Hosting operator id = 64 Hosting Expression = ws_sold_date_sk#49 IN dynamicpruning#16

Subquery:6 Hosting operator id = 79 Hosting Expression = ws_sold_date_sk#60 IN dynamicpruning#27


