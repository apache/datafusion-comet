== Physical Plan ==
TakeOrderedAndProject (71)
+- * Project (70)
   +- * BroadcastHashJoin Inner BuildRight (69)
      :- * Project (53)
      :  +- * BroadcastHashJoin Inner BuildRight (52)
      :     :- * BroadcastHashJoin Inner BuildRight (35)
      :     :  :- * CometColumnarToRow (17)
      :     :  :  +- CometFilter (16)
      :     :  :     +- CometHashAggregate (15)
      :     :  :        +- CometExchange (14)
      :     :  :           +- CometHashAggregate (13)
      :     :  :              +- CometProject (12)
      :     :  :                 +- CometBroadcastHashJoin (11)
      :     :  :                    :- CometProject (7)
      :     :  :                    :  +- CometBroadcastHashJoin (6)
      :     :  :                    :     :- CometFilter (2)
      :     :  :                    :     :  +- CometScan parquet spark_catalog.default.customer (1)
      :     :  :                    :     +- CometBroadcastExchange (5)
      :     :  :                    :        +- CometFilter (4)
      :     :  :                    :           +- CometScan parquet spark_catalog.default.store_sales (3)
      :     :  :                    +- CometBroadcastExchange (10)
      :     :  :                       +- CometFilter (9)
      :     :  :                          +- CometScan parquet spark_catalog.default.date_dim (8)
      :     :  +- BroadcastExchange (34)
      :     :     +- * CometColumnarToRow (33)
      :     :        +- CometHashAggregate (32)
      :     :           +- CometExchange (31)
      :     :              +- CometHashAggregate (30)
      :     :                 +- CometProject (29)
      :     :                    +- CometBroadcastHashJoin (28)
      :     :                       :- CometProject (24)
      :     :                       :  +- CometBroadcastHashJoin (23)
      :     :                       :     :- CometFilter (19)
      :     :                       :     :  +- CometScan parquet spark_catalog.default.customer (18)
      :     :                       :     +- CometBroadcastExchange (22)
      :     :                       :        +- CometFilter (21)
      :     :                       :           +- CometScan parquet spark_catalog.default.store_sales (20)
      :     :                       +- CometBroadcastExchange (27)
      :     :                          +- CometFilter (26)
      :     :                             +- CometScan parquet spark_catalog.default.date_dim (25)
      :     +- BroadcastExchange (51)
      :        +- * CometColumnarToRow (50)
      :           +- CometFilter (49)
      :              +- CometHashAggregate (48)
      :                 +- CometExchange (47)
      :                    +- CometHashAggregate (46)
      :                       +- CometProject (45)
      :                          +- CometBroadcastHashJoin (44)
      :                             :- CometProject (42)
      :                             :  +- CometBroadcastHashJoin (41)
      :                             :     :- CometFilter (37)
      :                             :     :  +- CometScan parquet spark_catalog.default.customer (36)
      :                             :     +- CometBroadcastExchange (40)
      :                             :        +- CometFilter (39)
      :                             :           +- CometScan parquet spark_catalog.default.web_sales (38)
      :                             +- ReusedExchange (43)
      +- BroadcastExchange (68)
         +- * CometColumnarToRow (67)
            +- CometHashAggregate (66)
               +- CometExchange (65)
                  +- CometHashAggregate (64)
                     +- CometProject (63)
                        +- CometBroadcastHashJoin (62)
                           :- CometProject (60)
                           :  +- CometBroadcastHashJoin (59)
                           :     :- CometFilter (55)
                           :     :  +- CometScan parquet spark_catalog.default.customer (54)
                           :     +- CometBroadcastExchange (58)
                           :        +- CometFilter (57)
                           :           +- CometScan parquet spark_catalog.default.web_sales (56)
                           +- ReusedExchange (61)


(1) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) CometFilter
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(3) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(4) CometFilter
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(5) CometBroadcastExchange
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(6) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Right output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: [c_customer_sk#1], [ss_customer_sk#5], Inner, BuildRight

(7) CometProject
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7], [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]

(8) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(9) CometFilter
Input [2]: [d_date_sk#9, d_year#10]
Condition : (((isnotnull(d_year#10) AND (d_year#10 = 2001)) AND d_year#10 IN (2001,2002)) AND isnotnull(d_date_sk#9))

(10) CometBroadcastExchange
Input [2]: [d_date_sk#9, d_year#10]
Arguments: [d_date_sk#9, d_year#10]

(11) CometBroadcastHashJoin
Left output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Right output [2]: [d_date_sk#9, d_year#10]
Arguments: [ss_sold_date_sk#7], [d_date_sk#9], Inner, BuildRight

(12) CometProject
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#9, d_year#10]
Arguments: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10], [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10]

(13) CometHashAggregate
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]

(14) CometExchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#11]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(15) CometHashAggregate
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]

(16) CometFilter
Input [2]: [customer_id#12, year_total#13]
Condition : (isnotnull(year_total#13) AND (year_total#13 > 0.00))

(17) CometColumnarToRow [codegen id : 4]
Input [2]: [customer_id#12, year_total#13]

(18) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(19) CometFilter
Input [4]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17]
Condition : (isnotnull(c_customer_sk#14) AND isnotnull(c_customer_id#15))

(20) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#20), dynamicpruningexpression(ss_sold_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(21) CometFilter
Input [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Condition : isnotnull(ss_customer_sk#18)

(22) CometBroadcastExchange
Input [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Arguments: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]

(23) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17]
Right output [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Arguments: [c_customer_sk#14], [ss_customer_sk#18], Inner, BuildRight

(24) CometProject
Input [7]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17, ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Arguments: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20], [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20]

(25) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(26) CometFilter
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 = 2002)) AND d_year#23 IN (2001,2002)) AND isnotnull(d_date_sk#22))

(27) CometBroadcastExchange
Input [2]: [d_date_sk#22, d_year#23]
Arguments: [d_date_sk#22, d_year#23]

(28) CometBroadcastHashJoin
Left output [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20]
Right output [2]: [d_date_sk#22, d_year#23]
Arguments: [ss_sold_date_sk#20], [d_date_sk#22], Inner, BuildRight

(29) CometProject
Input [7]: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20, d_date_sk#22, d_year#23]
Arguments: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, d_year#23], [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, d_year#23]

(30) CometHashAggregate
Input [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, d_year#23]
Keys [4]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#19))]

(31) CometExchange
Input [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23, sum#24]
Arguments: hashpartitioning(c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(32) CometHashAggregate
Input [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23, sum#24]
Keys [4]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23]
Functions [1]: [sum(UnscaledValue(ss_net_paid#19))]

(33) CometColumnarToRow [codegen id : 1]
Input [4]: [customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]

(34) BroadcastExchange
Input [4]: [customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]
Arguments: HashedRelationBroadcastMode(List(rpad(input[0, string, true], 16,  )),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [rpad(customer_id#12, 16,  )]
Right keys [1]: [rpad(customer_id#25, 16,  )]
Join type: Inner
Join condition: None

(36) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(37) CometFilter
Input [4]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32]
Condition : (isnotnull(c_customer_sk#29) AND isnotnull(c_customer_id#30))

(38) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(39) CometFilter
Input [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Condition : isnotnull(ws_bill_customer_sk#33)

(40) CometBroadcastExchange
Input [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Arguments: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]

(41) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32]
Right output [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Arguments: [c_customer_sk#29], [ws_bill_customer_sk#33], Inner, BuildRight

(42) CometProject
Input [7]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32, ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Arguments: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35], [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35]

(43) ReusedExchange [Reuses operator id: 10]
Output [2]: [d_date_sk#37, d_year#38]

(44) CometBroadcastHashJoin
Left output [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35]
Right output [2]: [d_date_sk#37, d_year#38]
Arguments: [ws_sold_date_sk#35], [d_date_sk#37], Inner, BuildRight

(45) CometProject
Input [7]: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35, d_date_sk#37, d_year#38]
Arguments: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, d_year#38], [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, d_year#38]

(46) CometHashAggregate
Input [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, d_year#38]
Keys [4]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#34))]

(47) CometExchange
Input [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38, sum#39]
Arguments: hashpartitioning(c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(48) CometHashAggregate
Input [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38, sum#39]
Keys [4]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38]
Functions [1]: [sum(UnscaledValue(ws_net_paid#34))]

(49) CometFilter
Input [2]: [customer_id#40, year_total#41]
Condition : (isnotnull(year_total#41) AND (year_total#41 > 0.00))

(50) CometColumnarToRow [codegen id : 2]
Input [2]: [customer_id#40, year_total#41]

(51) BroadcastExchange
Input [2]: [customer_id#40, year_total#41]
Arguments: HashedRelationBroadcastMode(List(rpad(input[0, string, true], 16,  )),false), [plan_id=5]

(52) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [rpad(customer_id#12, 16,  )]
Right keys [1]: [rpad(customer_id#40, 16,  )]
Join type: Inner
Join condition: None

(53) Project [codegen id : 4]
Output [7]: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41]
Input [8]: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, customer_id#40, year_total#41]

(54) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(55) CometFilter
Input [4]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45]
Condition : (isnotnull(c_customer_sk#42) AND isnotnull(c_customer_id#43))

(56) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#48), dynamicpruningexpression(ws_sold_date_sk#48 IN dynamicpruning#49)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(57) CometFilter
Input [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Condition : isnotnull(ws_bill_customer_sk#46)

(58) CometBroadcastExchange
Input [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Arguments: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]

(59) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45]
Right output [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Arguments: [c_customer_sk#42], [ws_bill_customer_sk#46], Inner, BuildRight

(60) CometProject
Input [7]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45, ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Arguments: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48], [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48]

(61) ReusedExchange [Reuses operator id: 27]
Output [2]: [d_date_sk#50, d_year#51]

(62) CometBroadcastHashJoin
Left output [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48]
Right output [2]: [d_date_sk#50, d_year#51]
Arguments: [ws_sold_date_sk#48], [d_date_sk#50], Inner, BuildRight

(63) CometProject
Input [7]: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48, d_date_sk#50, d_year#51]
Arguments: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, d_year#51], [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, d_year#51]

(64) CometHashAggregate
Input [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, d_year#51]
Keys [4]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#47))]

(65) CometExchange
Input [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51, sum#52]
Arguments: hashpartitioning(c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(66) CometHashAggregate
Input [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51, sum#52]
Keys [4]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51]
Functions [1]: [sum(UnscaledValue(ws_net_paid#47))]

(67) CometColumnarToRow [codegen id : 3]
Input [2]: [customer_id#53, year_total#54]

(68) BroadcastExchange
Input [2]: [customer_id#53, year_total#54]
Arguments: HashedRelationBroadcastMode(List(rpad(input[0, string, true], 16,  )),false), [plan_id=7]

(69) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [rpad(customer_id#12, 16,  )]
Right keys [1]: [rpad(customer_id#53, 16,  )]
Join type: Inner
Join condition: (CASE WHEN (year_total#41 > 0.00) THEN (year_total#54 / year_total#41) END > CASE WHEN (year_total#13 > 0.00) THEN (year_total#28 / year_total#13) END)

(70) Project [codegen id : 4]
Output [3]: [customer_id#25, customer_first_name#26, customer_last_name#27]
Input [9]: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41, customer_id#53, year_total#54]

(71) TakeOrderedAndProject
Input [3]: [customer_id#25, customer_first_name#26, customer_last_name#27]
Arguments: 100, [customer_id#25 ASC NULLS FIRST, customer_id#25 ASC NULLS FIRST, customer_id#25 ASC NULLS FIRST], [customer_id#25, customer_first_name#26, customer_last_name#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (75)
+- * CometColumnarToRow (74)
   +- CometFilter (73)
      +- CometScan parquet spark_catalog.default.date_dim (72)


(72) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(73) CometFilter
Input [2]: [d_date_sk#9, d_year#10]
Condition : (((isnotnull(d_year#10) AND (d_year#10 = 2001)) AND d_year#10 IN (2001,2002)) AND isnotnull(d_date_sk#9))

(74) CometColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]

(75) BroadcastExchange
Input [2]: [d_date_sk#9, d_year#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 20 Hosting Expression = ss_sold_date_sk#20 IN dynamicpruning#21
BroadcastExchange (79)
+- * CometColumnarToRow (78)
   +- CometFilter (77)
      +- CometScan parquet spark_catalog.default.date_dim (76)


(76) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(77) CometFilter
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 = 2002)) AND d_year#23 IN (2001,2002)) AND isnotnull(d_date_sk#22))

(78) CometColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#22, d_year#23]

(79) BroadcastExchange
Input [2]: [d_date_sk#22, d_year#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

Subquery:3 Hosting operator id = 38 Hosting Expression = ws_sold_date_sk#35 IN dynamicpruning#8

Subquery:4 Hosting operator id = 56 Hosting Expression = ws_sold_date_sk#48 IN dynamicpruning#21


