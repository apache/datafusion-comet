== Physical Plan ==
* CometColumnarToRow (88)
+- CometTakeOrderedAndProject (87)
   +- CometUnion (86)
      :- CometHashAggregate (63)
      :  +- CometExchange (62)
      :     +- CometHashAggregate (61)
      :        +- CometProject (60)
      :           +- CometBroadcastHashJoin (59)
      :              :- CometProject (54)
      :              :  +- CometBroadcastHashJoin (53)
      :              :     :- CometSortMergeJoin (40)
      :              :     :  :- CometSort (25)
      :              :     :  :  +- CometExchange (24)
      :              :     :  :     +- CometProject (23)
      :              :     :  :        +- CometBroadcastHashJoin (22)
      :              :     :  :           :- CometFilter (2)
      :              :     :  :           :  +- CometNativeScan parquet spark_catalog.default.catalog_sales (1)
      :              :     :  :           +- CometBroadcastExchange (21)
      :              :     :  :              +- CometProject (20)
      :              :     :  :                 +- CometFilter (19)
      :              :     :  :                    +- CometHashAggregate (18)
      :              :     :  :                       +- CometExchange (17)
      :              :     :  :                          +- CometHashAggregate (16)
      :              :     :  :                             +- CometProject (15)
      :              :     :  :                                +- CometBroadcastHashJoin (14)
      :              :     :  :                                   :- CometProject (10)
      :              :     :  :                                   :  +- CometBroadcastHashJoin (9)
      :              :     :  :                                   :     :- CometFilter (4)
      :              :     :  :                                   :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (3)
      :              :     :  :                                   :     +- CometBroadcastExchange (8)
      :              :     :  :                                   :        +- CometProject (7)
      :              :     :  :                                   :           +- CometFilter (6)
      :              :     :  :                                   :              +- CometNativeScan parquet spark_catalog.default.date_dim (5)
      :              :     :  :                                   +- CometBroadcastExchange (13)
      :              :     :  :                                      +- CometFilter (12)
      :              :     :  :                                         +- CometNativeScan parquet spark_catalog.default.item (11)
      :              :     :  +- CometSort (39)
      :              :     :     +- CometProject (38)
      :              :     :        +- CometFilter (37)
      :              :     :           +- CometHashAggregate (36)
      :              :     :              +- CometExchange (35)
      :              :     :                 +- CometHashAggregate (34)
      :              :     :                    +- CometProject (33)
      :              :     :                       +- CometBroadcastHashJoin (32)
      :              :     :                          :- CometProject (28)
      :              :     :                          :  +- CometFilter (27)
      :              :     :                          :     +- CometNativeScan parquet spark_catalog.default.store_sales (26)
      :              :     :                          +- CometBroadcastExchange (31)
      :              :     :                             +- CometFilter (30)
      :              :     :                                +- CometNativeScan parquet spark_catalog.default.customer (29)
      :              :     +- CometBroadcastExchange (52)
      :              :        +- CometProject (51)
      :              :           +- CometSortMergeJoin (50)
      :              :              :- CometSort (44)
      :              :              :  +- CometExchange (43)
      :              :              :     +- CometFilter (42)
      :              :              :        +- CometNativeScan parquet spark_catalog.default.customer (41)
      :              :              +- CometSort (49)
      :              :                 +- CometProject (48)
      :              :                    +- CometFilter (47)
      :              :                       +- CometHashAggregate (46)
      :              :                          +- ReusedExchange (45)
      :              +- CometBroadcastExchange (58)
      :                 +- CometProject (57)
      :                    +- CometFilter (56)
      :                       +- CometNativeScan parquet spark_catalog.default.date_dim (55)
      +- CometHashAggregate (85)
         +- CometExchange (84)
            +- CometHashAggregate (83)
               +- CometProject (82)
                  +- CometBroadcastHashJoin (81)
                     :- CometProject (79)
                     :  +- CometBroadcastHashJoin (78)
                     :     :- CometSortMergeJoin (76)
                     :     :  :- CometSort (70)
                     :     :  :  +- CometExchange (69)
                     :     :  :     +- CometProject (68)
                     :     :  :        +- CometBroadcastHashJoin (67)
                     :     :  :           :- CometFilter (65)
                     :     :  :           :  +- CometNativeScan parquet spark_catalog.default.web_sales (64)
                     :     :  :           +- ReusedExchange (66)
                     :     :  +- CometSort (75)
                     :     :     +- CometProject (74)
                     :     :        +- CometFilter (73)
                     :     :           +- CometHashAggregate (72)
                     :     :              +- ReusedExchange (71)
                     :     +- ReusedExchange (77)
                     +- ReusedExchange (80)


(1) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#5)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2)>

(2) CometFilter
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Condition : isnotnull(cs_bill_customer_sk#1)

(3) CometNativeScan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#7)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(4) CometFilter
Input [2]: [ss_item_sk#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_item_sk#6)

(5) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#8, d_date#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_year:int>

(6) CometFilter
Input [3]: [d_date_sk#8, d_date#9, d_year#10]
Condition : (d_year#10 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#8))

(7) CometProject
Input [3]: [d_date_sk#8, d_date#9, d_year#10]
Arguments: [d_date_sk#8, d_date#9], [d_date_sk#8, d_date#9]

(8) CometBroadcastExchange
Input [2]: [d_date_sk#8, d_date#9]
Arguments: [d_date_sk#8, d_date#9]

(9) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#6, ss_sold_date_sk#7]
Right output [2]: [d_date_sk#8, d_date#9]
Arguments: [ss_sold_date_sk#7], [d_date_sk#8], Inner, BuildRight

(10) CometProject
Input [4]: [ss_item_sk#6, ss_sold_date_sk#7, d_date_sk#8, d_date#9]
Arguments: [ss_item_sk#6, d_date#9], [ss_item_sk#6, d_date#9]

(11) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#11, i_item_desc#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string>

(12) CometFilter
Input [2]: [i_item_sk#11, i_item_desc#12]
Condition : isnotnull(i_item_sk#11)

(13) CometBroadcastExchange
Input [2]: [i_item_sk#11, i_item_desc#12]
Arguments: [i_item_sk#11, i_item_desc#12]

(14) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#6, d_date#9]
Right output [2]: [i_item_sk#11, i_item_desc#12]
Arguments: [ss_item_sk#6], [i_item_sk#11], Inner, BuildRight

(15) CometProject
Input [4]: [ss_item_sk#6, d_date#9, i_item_sk#11, i_item_desc#12]
Arguments: [d_date#9, i_item_sk#11, _groupingexpression#13], [d_date#9, i_item_sk#11, substr(i_item_desc#12, 1, 30) AS _groupingexpression#13]

(16) CometHashAggregate
Input [3]: [d_date#9, i_item_sk#11, _groupingexpression#13]
Keys [3]: [_groupingexpression#13, i_item_sk#11, d_date#9]
Functions [1]: [partial_count(1)]

(17) CometExchange
Input [4]: [_groupingexpression#13, i_item_sk#11, d_date#9, count#14]
Arguments: hashpartitioning(_groupingexpression#13, i_item_sk#11, d_date#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(18) CometHashAggregate
Input [4]: [_groupingexpression#13, i_item_sk#11, d_date#9, count#14]
Keys [3]: [_groupingexpression#13, i_item_sk#11, d_date#9]
Functions [1]: [count(1)]

(19) CometFilter
Input [2]: [item_sk#15, cnt#16]
Condition : (cnt#16 > 4)

(20) CometProject
Input [2]: [item_sk#15, cnt#16]
Arguments: [item_sk#15], [item_sk#15]

(21) CometBroadcastExchange
Input [1]: [item_sk#15]
Arguments: [item_sk#15]

(22) CometBroadcastHashJoin
Left output [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [item_sk#15]
Arguments: [cs_item_sk#2], [item_sk#15], LeftSemi, BuildRight

(23) CometProject
Input [5]: [cs_bill_customer_sk#1, cs_item_sk#2, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]

(24) CometExchange
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(25) CometSort
Input [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Arguments: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5], [cs_bill_customer_sk#1 ASC NULLS FIRST]

(26) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, ss_sold_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(27) CometFilter
Input [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, ss_sold_date_sk#20]
Condition : isnotnull(ss_customer_sk#17)

(28) CometProject
Input [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, ss_sold_date_sk#20]
Arguments: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19], [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19]

(29) CometNativeScan parquet spark_catalog.default.customer
Output [1]: [c_customer_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int>

(30) CometFilter
Input [1]: [c_customer_sk#21]
Condition : isnotnull(c_customer_sk#21)

(31) CometBroadcastExchange
Input [1]: [c_customer_sk#21]
Arguments: [c_customer_sk#21]

(32) CometBroadcastHashJoin
Left output [3]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19]
Right output [1]: [c_customer_sk#21]
Arguments: [ss_customer_sk#17], [c_customer_sk#21], Inner, BuildRight

(33) CometProject
Input [4]: [ss_customer_sk#17, ss_quantity#18, ss_sales_price#19, c_customer_sk#21]
Arguments: [ss_quantity#18, ss_sales_price#19, c_customer_sk#21], [ss_quantity#18, ss_sales_price#19, c_customer_sk#21]

(34) CometHashAggregate
Input [3]: [ss_quantity#18, ss_sales_price#19, c_customer_sk#21]
Keys [1]: [c_customer_sk#21]
Functions [1]: [partial_sum((cast(ss_quantity#18 as decimal(10,0)) * ss_sales_price#19))]

(35) CometExchange
Input [3]: [c_customer_sk#21, sum#22, isEmpty#23]
Arguments: hashpartitioning(c_customer_sk#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(36) CometHashAggregate
Input [3]: [c_customer_sk#21, sum#22, isEmpty#23]
Keys [1]: [c_customer_sk#21]
Functions [1]: [sum((cast(ss_quantity#18 as decimal(10,0)) * ss_sales_price#19))]

(37) CometFilter
Input [2]: [c_customer_sk#21, ssales#24]
Condition : (isnotnull(ssales#24) AND (cast(ssales#24 as decimal(38,8)) > (0.500000 * Subquery scalar-subquery#25, [id=#26])))

(38) CometProject
Input [2]: [c_customer_sk#21, ssales#24]
Arguments: [c_customer_sk#21], [c_customer_sk#21]

(39) CometSort
Input [1]: [c_customer_sk#21]
Arguments: [c_customer_sk#21], [c_customer_sk#21 ASC NULLS FIRST]

(40) CometSortMergeJoin
Left output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [1]: [c_customer_sk#21]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#21], LeftSemi

(41) CometNativeScan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(42) CometFilter
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Condition : isnotnull(c_customer_sk#27)

(43) CometExchange
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Arguments: hashpartitioning(c_customer_sk#27, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(44) CometSort
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Arguments: [c_customer_sk#27, c_first_name#28, c_last_name#29], [c_customer_sk#27 ASC NULLS FIRST]

(45) ReusedExchange [Reuses operator id: 35]
Output [3]: [c_customer_sk#21, sum#22, isEmpty#23]

(46) CometHashAggregate
Input [3]: [c_customer_sk#21, sum#22, isEmpty#23]
Keys [1]: [c_customer_sk#21]
Functions [1]: [sum((cast(ss_quantity#18 as decimal(10,0)) * ss_sales_price#19))]

(47) CometFilter
Input [2]: [c_customer_sk#21, ssales#24]
Condition : (isnotnull(ssales#24) AND (cast(ssales#24 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#25, [id=#26])))

(48) CometProject
Input [2]: [c_customer_sk#21, ssales#24]
Arguments: [c_customer_sk#21], [c_customer_sk#21]

(49) CometSort
Input [1]: [c_customer_sk#21]
Arguments: [c_customer_sk#21], [c_customer_sk#21 ASC NULLS FIRST]

(50) CometSortMergeJoin
Left output [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Right output [1]: [c_customer_sk#21]
Arguments: [c_customer_sk#27], [c_customer_sk#21], LeftSemi

(51) CometProject
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Arguments: [c_customer_sk#27, c_first_name#30, c_last_name#31], [c_customer_sk#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#28, 20, true, false, true) AS c_first_name#30, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#29, 30, true, false, true) AS c_last_name#31]

(52) CometBroadcastExchange
Input [3]: [c_customer_sk#27, c_first_name#30, c_last_name#31]
Arguments: [c_customer_sk#27, c_first_name#30, c_last_name#31]

(53) CometBroadcastHashJoin
Left output [4]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5]
Right output [3]: [c_customer_sk#27, c_first_name#30, c_last_name#31]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#27], Inner, BuildRight

(54) CometProject
Input [7]: [cs_bill_customer_sk#1, cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_customer_sk#27, c_first_name#30, c_last_name#31]
Arguments: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31], [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31]

(55) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#32, d_year#33, d_moy#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(56) CometFilter
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Condition : ((((isnotnull(d_year#33) AND isnotnull(d_moy#34)) AND (d_year#33 = 2000)) AND (d_moy#34 = 2)) AND isnotnull(d_date_sk#32))

(57) CometProject
Input [3]: [d_date_sk#32, d_year#33, d_moy#34]
Arguments: [d_date_sk#32], [d_date_sk#32]

(58) CometBroadcastExchange
Input [1]: [d_date_sk#32]
Arguments: [d_date_sk#32]

(59) CometBroadcastHashJoin
Left output [5]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31]
Right output [1]: [d_date_sk#32]
Arguments: [cs_sold_date_sk#5], [d_date_sk#32], Inner, BuildRight

(60) CometProject
Input [6]: [cs_quantity#3, cs_list_price#4, cs_sold_date_sk#5, c_first_name#30, c_last_name#31, d_date_sk#32]
Arguments: [cs_quantity#3, cs_list_price#4, c_first_name#30, c_last_name#31], [cs_quantity#3, cs_list_price#4, c_first_name#30, c_last_name#31]

(61) CometHashAggregate
Input [4]: [cs_quantity#3, cs_list_price#4, c_first_name#30, c_last_name#31]
Keys [2]: [c_last_name#31, c_first_name#30]
Functions [1]: [partial_sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]

(62) CometExchange
Input [4]: [c_last_name#31, c_first_name#30, sum#35, isEmpty#36]
Arguments: hashpartitioning(c_last_name#31, c_first_name#30, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(63) CometHashAggregate
Input [4]: [c_last_name#31, c_first_name#30, sum#35, isEmpty#36]
Keys [2]: [c_last_name#31, c_first_name#30]
Functions [1]: [sum((cast(cs_quantity#3 as decimal(10,0)) * cs_list_price#4))]

(64) CometNativeScan parquet spark_catalog.default.web_sales
Output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#41)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_quantity:int,ws_list_price:decimal(7,2)>

(65) CometFilter
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Condition : isnotnull(ws_bill_customer_sk#38)

(66) ReusedExchange [Reuses operator id: 21]
Output [1]: [item_sk#42]

(67) CometBroadcastHashJoin
Left output [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Right output [1]: [item_sk#42]
Arguments: [ws_item_sk#37], [item_sk#42], LeftSemi, BuildRight

(68) CometProject
Input [5]: [ws_item_sk#37, ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41], [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]

(69) CometExchange
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: hashpartitioning(ws_bill_customer_sk#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(70) CometSort
Input [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Arguments: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41], [ws_bill_customer_sk#38 ASC NULLS FIRST]

(71) ReusedExchange [Reuses operator id: 35]
Output [3]: [c_customer_sk#43, sum#44, isEmpty#45]

(72) CometHashAggregate
Input [3]: [c_customer_sk#43, sum#44, isEmpty#45]
Keys [1]: [c_customer_sk#43]
Functions [1]: [sum((cast(ss_quantity#46 as decimal(10,0)) * ss_sales_price#47))]

(73) CometFilter
Input [2]: [c_customer_sk#43, ssales#48]
Condition : (isnotnull(ssales#48) AND (cast(ssales#48 as decimal(38,8)) > (0.500000 * ReusedSubquery Subquery scalar-subquery#25, [id=#26])))

(74) CometProject
Input [2]: [c_customer_sk#43, ssales#48]
Arguments: [c_customer_sk#43], [c_customer_sk#43]

(75) CometSort
Input [1]: [c_customer_sk#43]
Arguments: [c_customer_sk#43], [c_customer_sk#43 ASC NULLS FIRST]

(76) CometSortMergeJoin
Left output [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Right output [1]: [c_customer_sk#43]
Arguments: [ws_bill_customer_sk#38], [c_customer_sk#43], LeftSemi

(77) ReusedExchange [Reuses operator id: 52]
Output [3]: [c_customer_sk#49, c_first_name#50, c_last_name#51]

(78) CometBroadcastHashJoin
Left output [4]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41]
Right output [3]: [c_customer_sk#49, c_first_name#50, c_last_name#51]
Arguments: [ws_bill_customer_sk#38], [c_customer_sk#49], Inner, BuildRight

(79) CometProject
Input [7]: [ws_bill_customer_sk#38, ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_customer_sk#49, c_first_name#50, c_last_name#51]
Arguments: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#50, c_last_name#51], [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#50, c_last_name#51]

(80) ReusedExchange [Reuses operator id: 58]
Output [1]: [d_date_sk#52]

(81) CometBroadcastHashJoin
Left output [5]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#50, c_last_name#51]
Right output [1]: [d_date_sk#52]
Arguments: [ws_sold_date_sk#41], [d_date_sk#52], Inner, BuildRight

(82) CometProject
Input [6]: [ws_quantity#39, ws_list_price#40, ws_sold_date_sk#41, c_first_name#50, c_last_name#51, d_date_sk#52]
Arguments: [ws_quantity#39, ws_list_price#40, c_first_name#50, c_last_name#51], [ws_quantity#39, ws_list_price#40, c_first_name#50, c_last_name#51]

(83) CometHashAggregate
Input [4]: [ws_quantity#39, ws_list_price#40, c_first_name#50, c_last_name#51]
Keys [2]: [c_last_name#51, c_first_name#50]
Functions [1]: [partial_sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))]

(84) CometExchange
Input [4]: [c_last_name#51, c_first_name#50, sum#53, isEmpty#54]
Arguments: hashpartitioning(c_last_name#51, c_first_name#50, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(85) CometHashAggregate
Input [4]: [c_last_name#51, c_first_name#50, sum#53, isEmpty#54]
Keys [2]: [c_last_name#51, c_first_name#50]
Functions [1]: [sum((cast(ws_quantity#39 as decimal(10,0)) * ws_list_price#40))]

(86) CometUnion
Child 0 Input [3]: [c_last_name#31, c_first_name#30, sales#55]
Child 1 Input [3]: [c_last_name#51, c_first_name#50, sales#56]

(87) CometTakeOrderedAndProject
Input [3]: [c_last_name#31, c_first_name#30, sales#55]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_last_name#31 ASC NULLS FIRST,c_first_name#30 ASC NULLS FIRST,sales#55 ASC NULLS FIRST], output=[c_last_name#31,c_first_name#30,sales#55]), [c_last_name#31, c_first_name#30, sales#55], 100, 0, [c_last_name#31 ASC NULLS FIRST, c_first_name#30 ASC NULLS FIRST, sales#55 ASC NULLS FIRST], [c_last_name#31, c_first_name#30, sales#55]

(88) CometColumnarToRow [codegen id : 1]
Input [3]: [c_last_name#31, c_first_name#30, sales#55]

===== Subqueries =====

Subquery:1 Hosting operator id = 37 Hosting Expression = Subquery scalar-subquery#25, [id=#26]
* CometColumnarToRow (106)
+- CometHashAggregate (105)
   +- CometExchange (104)
      +- CometHashAggregate (103)
         +- CometHashAggregate (102)
            +- CometExchange (101)
               +- CometHashAggregate (100)
                  +- CometProject (99)
                     +- CometBroadcastHashJoin (98)
                        :- CometProject (93)
                        :  +- CometBroadcastHashJoin (92)
                        :     :- CometFilter (90)
                        :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (89)
                        :     +- ReusedExchange (91)
                        +- CometBroadcastExchange (97)
                           +- CometProject (96)
                              +- CometFilter (95)
                                 +- CometNativeScan parquet spark_catalog.default.date_dim (94)


(89) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#57, ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#60)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(90) CometFilter
Input [4]: [ss_customer_sk#57, ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60]
Condition : isnotnull(ss_customer_sk#57)

(91) ReusedExchange [Reuses operator id: 31]
Output [1]: [c_customer_sk#61]

(92) CometBroadcastHashJoin
Left output [4]: [ss_customer_sk#57, ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60]
Right output [1]: [c_customer_sk#61]
Arguments: [ss_customer_sk#57], [c_customer_sk#61], Inner, BuildRight

(93) CometProject
Input [5]: [ss_customer_sk#57, ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60, c_customer_sk#61]
Arguments: [ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60, c_customer_sk#61], [ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60, c_customer_sk#61]

(94) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#62, d_year#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_year, [2000,2001,2002,2003]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(95) CometFilter
Input [2]: [d_date_sk#62, d_year#63]
Condition : (d_year#63 IN (2000,2001,2002,2003) AND isnotnull(d_date_sk#62))

(96) CometProject
Input [2]: [d_date_sk#62, d_year#63]
Arguments: [d_date_sk#62], [d_date_sk#62]

(97) CometBroadcastExchange
Input [1]: [d_date_sk#62]
Arguments: [d_date_sk#62]

(98) CometBroadcastHashJoin
Left output [4]: [ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60, c_customer_sk#61]
Right output [1]: [d_date_sk#62]
Arguments: [ss_sold_date_sk#60], [d_date_sk#62], Inner, BuildRight

(99) CometProject
Input [5]: [ss_quantity#58, ss_sales_price#59, ss_sold_date_sk#60, c_customer_sk#61, d_date_sk#62]
Arguments: [ss_quantity#58, ss_sales_price#59, c_customer_sk#61], [ss_quantity#58, ss_sales_price#59, c_customer_sk#61]

(100) CometHashAggregate
Input [3]: [ss_quantity#58, ss_sales_price#59, c_customer_sk#61]
Keys [1]: [c_customer_sk#61]
Functions [1]: [partial_sum((cast(ss_quantity#58 as decimal(10,0)) * ss_sales_price#59))]

(101) CometExchange
Input [3]: [c_customer_sk#61, sum#64, isEmpty#65]
Arguments: hashpartitioning(c_customer_sk#61, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(102) CometHashAggregate
Input [3]: [c_customer_sk#61, sum#64, isEmpty#65]
Keys [1]: [c_customer_sk#61]
Functions [1]: [sum((cast(ss_quantity#58 as decimal(10,0)) * ss_sales_price#59))]

(103) CometHashAggregate
Input [1]: [csales#66]
Keys: []
Functions [1]: [partial_max(csales#66)]

(104) CometExchange
Input [1]: [max#67]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(105) CometHashAggregate
Input [1]: [max#67]
Keys: []
Functions [1]: [max(csales#66)]

(106) CometColumnarToRow [codegen id : 1]
Input [1]: [tpcds_cmax#68]

Subquery:2 Hosting operator id = 47 Hosting Expression = ReusedSubquery Subquery scalar-subquery#25, [id=#26]

Subquery:3 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#25, [id=#26]


