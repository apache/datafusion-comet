== Physical Plan ==
TakeOrderedAndProject (22)
+- * HashAggregate (21)
   +- * CometColumnarToRow (20)
      +- CometColumnarExchange (19)
         +- * HashAggregate (18)
            +- * Project (17)
               +- * BroadcastHashJoin Inner BuildRight (16)
                  :- * Project (14)
                  :  +- * BroadcastHashJoin Inner BuildRight (13)
                  :     :- * CometColumnarToRow (8)
                  :     :  +- CometProject (7)
                  :     :     +- CometBroadcastHashJoin (6)
                  :     :        :- CometFilter (2)
                  :     :        :  +- CometScan parquet spark_catalog.default.catalog_sales (1)
                  :     :        +- CometBroadcastExchange (5)
                  :     :           +- CometFilter (4)
                  :     :              +- CometScan parquet spark_catalog.default.customer (3)
                  :     +- BroadcastExchange (12)
                  :        +- * CometColumnarToRow (11)
                  :           +- CometFilter (10)
                  :              +- CometScan parquet spark_catalog.default.customer_address (9)
                  +- ReusedExchange (15)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_bill_customer_sk#1)

(3) CometScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(4) CometFilter
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Condition : (isnotnull(c_customer_sk#5) AND isnotnull(c_current_addr_sk#6))

(5) CometBroadcastExchange
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: [c_customer_sk#5, c_current_addr_sk#6]

(6) CometBroadcastHashJoin
Left output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Right output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#5], Inner, BuildRight

(7) CometProject
Input [5]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, c_customer_sk#5, c_current_addr_sk#6]
Arguments: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6], [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6]

(8) CometColumnarToRow [codegen id : 3]
Input [3]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6]

(9) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(10) CometFilter
Input [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Condition : isnotnull(ca_address_sk#7)

(11) CometColumnarToRow [codegen id : 1]
Input [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]

(12) BroadcastExchange
Input [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(13) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_current_addr_sk#6]
Right keys [1]: [ca_address_sk#7]
Join type: Inner
Join condition: ((substr(ca_zip#9, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR rpad(ca_state#8, 2,  ) IN (CA,WA,GA)) OR (cs_sales_price#2 > 500.00))

(14) Project [codegen id : 3]
Output [3]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#9]
Input [6]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6, ca_address_sk#7, ca_state#8, ca_zip#9]

(15) ReusedExchange [Reuses operator id: 27]
Output [1]: [d_date_sk#10]

(16) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [cs_sold_date_sk#3]
Right keys [1]: [d_date_sk#10]
Join type: Inner
Join condition: None

(17) Project [codegen id : 3]
Output [2]: [cs_sales_price#2, ca_zip#9]
Input [4]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#9, d_date_sk#10]

(18) HashAggregate [codegen id : 3]
Input [2]: [cs_sales_price#2, ca_zip#9]
Keys [1]: [ca_zip#9]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum#11]
Results [2]: [ca_zip#9, sum#12]

(19) CometColumnarExchange
Input [2]: [ca_zip#9, sum#12]
Arguments: hashpartitioning(ca_zip#9, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(20) CometColumnarToRow [codegen id : 4]
Input [2]: [ca_zip#9, sum#12]

(21) HashAggregate [codegen id : 4]
Input [2]: [ca_zip#9, sum#12]
Keys [1]: [ca_zip#9]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#13]
Results [2]: [ca_zip#9, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#13,17,2) AS sum(cs_sales_price)#14]

(22) TakeOrderedAndProject
Input [2]: [ca_zip#9, sum(cs_sales_price)#14]
Arguments: 100, [ca_zip#9 ASC NULLS FIRST], [ca_zip#9, sum(cs_sales_price)#14]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (27)
+- * CometColumnarToRow (26)
   +- CometProject (25)
      +- CometFilter (24)
         +- CometScan parquet spark_catalog.default.date_dim (23)


(23) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#15, d_qoy#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(24) CometFilter
Input [3]: [d_date_sk#10, d_year#15, d_qoy#16]
Condition : ((((isnotnull(d_qoy#16) AND isnotnull(d_year#15)) AND (d_qoy#16 = 2)) AND (d_year#15 = 2001)) AND isnotnull(d_date_sk#10))

(25) CometProject
Input [3]: [d_date_sk#10, d_year#15, d_qoy#16]
Arguments: [d_date_sk#10], [d_date_sk#10]

(26) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#10]

(27) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]


