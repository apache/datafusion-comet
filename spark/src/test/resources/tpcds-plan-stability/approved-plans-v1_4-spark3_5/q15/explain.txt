== Physical Plan ==
TakeOrderedAndProject (23)
+- * HashAggregate (22)
   +- Exchange (21)
      +- * ColumnarToRow (20)
         +- CometHashAggregate (19)
            +- CometProject (18)
               +- CometBroadcastHashJoin (17)
                  :- CometProject (12)
                  :  +- CometBroadcastHashJoin (11)
                  :     :- CometProject (7)
                  :     :  +- CometBroadcastHashJoin (6)
                  :     :     :- CometFilter (2)
                  :     :     :  +- CometScan parquet spark_catalog.default.catalog_sales (1)
                  :     :     +- CometBroadcastExchange (5)
                  :     :        +- CometFilter (4)
                  :     :           +- CometScan parquet spark_catalog.default.customer (3)
                  :     +- CometBroadcastExchange (10)
                  :        +- CometFilter (9)
                  :           +- CometScan parquet spark_catalog.default.customer_address (8)
                  +- CometBroadcastExchange (16)
                     +- CometProject (15)
                        +- CometFilter (14)
                           +- CometScan parquet spark_catalog.default.date_dim (13)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_bill_customer_sk#1)

(3) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(4) CometFilter
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Condition : (isnotnull(c_customer_sk#5) AND isnotnull(c_current_addr_sk#6))

(5) CometBroadcastExchange
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: [c_customer_sk#5, c_current_addr_sk#6]

(6) CometBroadcastHashJoin
Left output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Right output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#5], Inner, BuildRight

(7) CometProject
Input [5]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, c_customer_sk#5, c_current_addr_sk#6]
Arguments: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6], [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6]

(8) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(9) CometFilter
Input [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Condition : isnotnull(ca_address_sk#7)

(10) CometBroadcastExchange
Input [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Arguments: [ca_address_sk#7, ca_state#8, ca_zip#9]

(11) CometBroadcastHashJoin
Left output [3]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6]
Right output [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Arguments: [c_current_addr_sk#6], [ca_address_sk#7], Inner, ((substr(ca_zip#9, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#8 IN (CA,WA,GA)) OR (cs_sales_price#2 > 500.00)), BuildRight

(12) CometProject
Input [6]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6, ca_address_sk#7, ca_state#8, ca_zip#9]
Arguments: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#9], [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#9]

(13) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(14) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Condition : ((((isnotnull(d_qoy#12) AND isnotnull(d_year#11)) AND (d_qoy#12 = 2)) AND (d_year#11 = 2001)) AND isnotnull(d_date_sk#10))

(15) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(16) CometBroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: [d_date_sk#10]

(17) CometBroadcastHashJoin
Left output [3]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#9]
Right output [1]: [d_date_sk#10]
Arguments: [cs_sold_date_sk#3], [d_date_sk#10], Inner, BuildRight

(18) CometProject
Input [4]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#9, d_date_sk#10]
Arguments: [cs_sales_price#2, ca_zip#9], [cs_sales_price#2, ca_zip#9]

(19) CometHashAggregate
Input [2]: [cs_sales_price#2, ca_zip#9]
Keys [1]: [ca_zip#9]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]

(20) ColumnarToRow [codegen id : 1]
Input [2]: [ca_zip#9, sum#13]

(21) Exchange
Input [2]: [ca_zip#9, sum#13]
Arguments: hashpartitioning(ca_zip#9, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(22) HashAggregate [codegen id : 2]
Input [2]: [ca_zip#9, sum#13]
Keys [1]: [ca_zip#9]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#14]
Results [2]: [ca_zip#9, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#14,17,2) AS sum(cs_sales_price)#15]

(23) TakeOrderedAndProject
Input [2]: [ca_zip#9, sum(cs_sales_price)#15]
Arguments: 100, [ca_zip#9 ASC NULLS FIRST], [ca_zip#9, sum(cs_sales_price)#15]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (28)
+- * ColumnarToRow (27)
   +- CometProject (26)
      +- CometFilter (25)
         +- CometScan parquet spark_catalog.default.date_dim (24)


(24) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(25) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Condition : ((((isnotnull(d_qoy#12) AND isnotnull(d_year#11)) AND (d_qoy#12 = 2)) AND (d_year#11 = 2001)) AND isnotnull(d_date_sk#10))

(26) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_qoy#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(27) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#10]

(28) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]


