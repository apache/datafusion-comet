== Physical Plan ==
TakeOrderedAndProject (34)
+- * HashAggregate (33)
   +- Exchange (32)
      +- * ColumnarToRow (31)
         +- CometHashAggregate (30)
            +- CometUnion (29)
               :- CometProject (12)
               :  +- CometBroadcastHashJoin (11)
               :     :- CometProject (7)
               :     :  +- CometBroadcastHashJoin (6)
               :     :     :- CometFilter (2)
               :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
               :     :     +- CometBroadcastExchange (5)
               :     :        +- CometFilter (4)
               :     :           +- CometScan parquet spark_catalog.default.item (3)
               :     +- CometBroadcastExchange (10)
               :        +- CometFilter (9)
               :           +- CometScan parquet spark_catalog.default.date_dim (8)
               :- CometProject (20)
               :  +- CometBroadcastHashJoin (19)
               :     :- CometProject (17)
               :     :  +- CometBroadcastHashJoin (16)
               :     :     :- CometFilter (14)
               :     :     :  +- CometScan parquet spark_catalog.default.web_sales (13)
               :     :     +- ReusedExchange (15)
               :     +- ReusedExchange (18)
               +- CometProject (28)
                  +- CometBroadcastHashJoin (27)
                     :- CometProject (25)
                     :  +- CometBroadcastHashJoin (24)
                     :     :- CometFilter (22)
                     :     :  +- CometScan parquet spark_catalog.default.catalog_sales (21)
                     :     +- ReusedExchange (23)
                     +- ReusedExchange (26)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4)]
PushedFilters: [IsNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(3) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#5, i_category#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_category:string>

(4) CometFilter
Input [2]: [i_item_sk#5, i_category#6]
Condition : isnotnull(i_item_sk#5)

(5) CometBroadcastExchange
Input [2]: [i_item_sk#5, i_category#6]
Arguments: [i_item_sk#5, i_category#6]

(6) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Right output [2]: [i_item_sk#5, i_category#6]
Arguments: [ss_item_sk#1], [i_item_sk#5], Inner, BuildRight

(7) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_item_sk#5, i_category#6]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_category#6], [ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_category#6]

(8) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(9) CometFilter
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Condition : isnotnull(d_date_sk#7)

(10) CometBroadcastExchange
Input [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Arguments: [d_date_sk#7, d_year#8, d_qoy#9]

(11) CometBroadcastHashJoin
Left output [4]: [ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_category#6]
Right output [3]: [d_date_sk#7, d_year#8, d_qoy#9]
Arguments: [ss_sold_date_sk#4], [d_date_sk#7], Inner, BuildRight

(12) CometProject
Input [7]: [ss_store_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, i_category#6, d_date_sk#7, d_year#8, d_qoy#9]
Arguments: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, ext_sales_price#12], [store AS channel#10, ss_store_sk#2 AS col_name#11, d_year#8, d_qoy#9, i_category#6, ss_ext_sales_price#3 AS ext_sales_price#12]

(13) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#13, ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#16)]
PushedFilters: [IsNull(ws_ship_customer_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ship_customer_sk:int,ws_ext_sales_price:decimal(7,2)>

(14) CometFilter
Input [4]: [ws_item_sk#13, ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16]
Condition : (isnull(ws_ship_customer_sk#14) AND isnotnull(ws_item_sk#13))

(15) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#17, i_category#18]

(16) CometBroadcastHashJoin
Left output [4]: [ws_item_sk#13, ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16]
Right output [2]: [i_item_sk#17, i_category#18]
Arguments: [ws_item_sk#13], [i_item_sk#17], Inner, BuildRight

(17) CometProject
Input [6]: [ws_item_sk#13, ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16, i_item_sk#17, i_category#18]
Arguments: [ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16, i_category#18], [ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16, i_category#18]

(18) ReusedExchange [Reuses operator id: 10]
Output [3]: [d_date_sk#19, d_year#20, d_qoy#21]

(19) CometBroadcastHashJoin
Left output [4]: [ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16, i_category#18]
Right output [3]: [d_date_sk#19, d_year#20, d_qoy#21]
Arguments: [ws_sold_date_sk#16], [d_date_sk#19], Inner, BuildRight

(20) CometProject
Input [7]: [ws_ship_customer_sk#14, ws_ext_sales_price#15, ws_sold_date_sk#16, i_category#18, d_date_sk#19, d_year#20, d_qoy#21]
Arguments: [channel#22, col_name#23, d_year#20, d_qoy#21, i_category#18, ext_sales_price#24], [web AS channel#22, ws_ship_customer_sk#14 AS col_name#23, d_year#20, d_qoy#21, i_category#18, ws_ext_sales_price#15 AS ext_sales_price#24]

(21) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_ship_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27, cs_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#28)]
PushedFilters: [IsNull(cs_ship_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_ship_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(22) CometFilter
Input [4]: [cs_ship_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27, cs_sold_date_sk#28]
Condition : (isnull(cs_ship_addr_sk#25) AND isnotnull(cs_item_sk#26))

(23) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#29, i_category#30]

(24) CometBroadcastHashJoin
Left output [4]: [cs_ship_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27, cs_sold_date_sk#28]
Right output [2]: [i_item_sk#29, i_category#30]
Arguments: [cs_item_sk#26], [i_item_sk#29], Inner, BuildRight

(25) CometProject
Input [6]: [cs_ship_addr_sk#25, cs_item_sk#26, cs_ext_sales_price#27, cs_sold_date_sk#28, i_item_sk#29, i_category#30]
Arguments: [cs_ship_addr_sk#25, cs_ext_sales_price#27, cs_sold_date_sk#28, i_category#30], [cs_ship_addr_sk#25, cs_ext_sales_price#27, cs_sold_date_sk#28, i_category#30]

(26) ReusedExchange [Reuses operator id: 10]
Output [3]: [d_date_sk#31, d_year#32, d_qoy#33]

(27) CometBroadcastHashJoin
Left output [4]: [cs_ship_addr_sk#25, cs_ext_sales_price#27, cs_sold_date_sk#28, i_category#30]
Right output [3]: [d_date_sk#31, d_year#32, d_qoy#33]
Arguments: [cs_sold_date_sk#28], [d_date_sk#31], Inner, BuildRight

(28) CometProject
Input [7]: [cs_ship_addr_sk#25, cs_ext_sales_price#27, cs_sold_date_sk#28, i_category#30, d_date_sk#31, d_year#32, d_qoy#33]
Arguments: [channel#34, col_name#35, d_year#32, d_qoy#33, i_category#30, ext_sales_price#36], [catalog AS channel#34, cs_ship_addr_sk#25 AS col_name#35, d_year#32, d_qoy#33, i_category#30, cs_ext_sales_price#27 AS ext_sales_price#36]

(29) CometUnion
Child 0 Input [6]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, ext_sales_price#12]
Child 1 Input [6]: [channel#22, col_name#23, d_year#20, d_qoy#21, i_category#18, ext_sales_price#24]
Child 2 Input [6]: [channel#34, col_name#35, d_year#32, d_qoy#33, i_category#30, ext_sales_price#36]

(30) CometHashAggregate
Input [6]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, ext_sales_price#12]
Keys [5]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6]
Functions [2]: [partial_count(1), partial_sum(UnscaledValue(ext_sales_price#12))]

(31) ColumnarToRow [codegen id : 1]
Input [7]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, count#37, sum#38]

(32) Exchange
Input [7]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, count#37, sum#38]
Arguments: hashpartitioning(channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(33) HashAggregate [codegen id : 2]
Input [7]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, count#37, sum#38]
Keys [5]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6]
Functions [2]: [count(1), sum(UnscaledValue(ext_sales_price#12))]
Aggregate Attributes [2]: [count(1)#39, sum(UnscaledValue(ext_sales_price#12))#40]
Results [7]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, count(1)#39 AS sales_cnt#41, MakeDecimal(sum(UnscaledValue(ext_sales_price#12))#40,17,2) AS sales_amt#42]

(34) TakeOrderedAndProject
Input [7]: [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, sales_cnt#41, sales_amt#42]
Arguments: 100, [channel#10 ASC NULLS FIRST, col_name#11 ASC NULLS FIRST, d_year#8 ASC NULLS FIRST, d_qoy#9 ASC NULLS FIRST, i_category#6 ASC NULLS FIRST], [channel#10, col_name#11, d_year#8, d_qoy#9, i_category#6, sales_cnt#41, sales_amt#42]

