== Physical Plan ==
* CometColumnarToRow (50)
+- CometTakeOrderedAndProject (49)
   +- CometProject (48)
      +- CometBroadcastHashJoin (47)
         :- CometProject (42)
         :  +- CometBroadcastHashJoin (41)
         :     :- CometProject (36)
         :     :  +- CometBroadcastHashJoin (35)
         :     :     :- CometFilter (18)
         :     :     :  +- CometHashAggregate (17)
         :     :     :     +- CometExchange (16)
         :     :     :        +- CometHashAggregate (15)
         :     :     :           +- CometProject (14)
         :     :     :              +- CometBroadcastHashJoin (13)
         :     :     :                 :- CometProject (8)
         :     :     :                 :  +- CometBroadcastHashJoin (7)
         :     :     :                 :     :- CometFilter (2)
         :     :     :                 :     :  +- CometNativeScan parquet spark_catalog.default.web_returns (1)
         :     :     :                 :     +- CometBroadcastExchange (6)
         :     :     :                 :        +- CometProject (5)
         :     :     :                 :           +- CometFilter (4)
         :     :     :                 :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
         :     :     :                 +- CometBroadcastExchange (12)
         :     :     :                    +- CometProject (11)
         :     :     :                       +- CometFilter (10)
         :     :     :                          +- CometNativeScan parquet spark_catalog.default.customer_address (9)
         :     :     +- CometBroadcastExchange (34)
         :     :        +- CometFilter (33)
         :     :           +- CometHashAggregate (32)
         :     :              +- CometExchange (31)
         :     :                 +- CometHashAggregate (30)
         :     :                    +- CometHashAggregate (29)
         :     :                       +- CometExchange (28)
         :     :                          +- CometHashAggregate (27)
         :     :                             +- CometProject (26)
         :     :                                +- CometBroadcastHashJoin (25)
         :     :                                   :- CometProject (23)
         :     :                                   :  +- CometBroadcastHashJoin (22)
         :     :                                   :     :- CometFilter (20)
         :     :                                   :     :  +- CometNativeScan parquet spark_catalog.default.web_returns (19)
         :     :                                   :     +- ReusedExchange (21)
         :     :                                   +- ReusedExchange (24)
         :     +- CometBroadcastExchange (40)
         :        +- CometProject (39)
         :           +- CometFilter (38)
         :              +- CometNativeScan parquet spark_catalog.default.customer (37)
         +- CometBroadcastExchange (46)
            +- CometProject (45)
               +- CometFilter (44)
                  +- CometNativeScan parquet spark_catalog.default.customer_address (43)


(1) CometNativeScan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(wr_returned_date_sk#4)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(2) CometFilter
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : (isnotnull(wr_returning_addr_sk#2) AND isnotnull(wr_returning_customer_sk#1))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2002)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_year#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Right output [1]: [d_date_sk#5]
Arguments: [wr_returned_date_sk#4], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#5]
Arguments: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3], [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]

(9) CometNativeScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#7, ca_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(10) CometFilter
Input [2]: [ca_address_sk#7, ca_state#8]
Condition : (isnotnull(ca_address_sk#7) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#8, 2, true, false, true)))

(11) CometProject
Input [2]: [ca_address_sk#7, ca_state#8]
Arguments: [ca_address_sk#7, ca_state#9], [ca_address_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#8, 2, true, false, true) AS ca_state#9]

(12) CometBroadcastExchange
Input [2]: [ca_address_sk#7, ca_state#9]
Arguments: [ca_address_sk#7, ca_state#9]

(13) CometBroadcastHashJoin
Left output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Right output [2]: [ca_address_sk#7, ca_state#9]
Arguments: [wr_returning_addr_sk#2], [ca_address_sk#7], Inner, BuildRight

(14) CometProject
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#7, ca_state#9]
Arguments: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#9], [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#9]

(15) CometHashAggregate
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#9]
Keys [2]: [wr_returning_customer_sk#1, ca_state#9]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]

(16) CometExchange
Input [3]: [wr_returning_customer_sk#1, ca_state#9, sum#10]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometHashAggregate
Input [3]: [wr_returning_customer_sk#1, ca_state#9, sum#10]
Keys [2]: [wr_returning_customer_sk#1, ca_state#9]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]

(18) CometFilter
Input [3]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13]
Condition : isnotnull(ctr_total_return#13)

(19) CometNativeScan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16, wr_returned_date_sk#17]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(wr_returned_date_sk#17)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(20) CometFilter
Input [4]: [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16, wr_returned_date_sk#17]
Condition : isnotnull(wr_returning_addr_sk#15)

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#18]

(22) CometBroadcastHashJoin
Left output [4]: [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16, wr_returned_date_sk#17]
Right output [1]: [d_date_sk#18]
Arguments: [wr_returned_date_sk#17], [d_date_sk#18], Inner, BuildRight

(23) CometProject
Input [5]: [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16, wr_returned_date_sk#17, d_date_sk#18]
Arguments: [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16], [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16]

(24) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#19, ca_state#9]

(25) CometBroadcastHashJoin
Left output [3]: [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16]
Right output [2]: [ca_address_sk#19, ca_state#9]
Arguments: [wr_returning_addr_sk#15], [ca_address_sk#19], Inner, BuildRight

(26) CometProject
Input [5]: [wr_returning_customer_sk#14, wr_returning_addr_sk#15, wr_return_amt#16, ca_address_sk#19, ca_state#9]
Arguments: [wr_returning_customer_sk#14, wr_return_amt#16, ca_state#9], [wr_returning_customer_sk#14, wr_return_amt#16, ca_state#9]

(27) CometHashAggregate
Input [3]: [wr_returning_customer_sk#14, wr_return_amt#16, ca_state#9]
Keys [2]: [wr_returning_customer_sk#14, ca_state#9]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#16))]

(28) CometExchange
Input [3]: [wr_returning_customer_sk#14, ca_state#9, sum#20]
Arguments: hashpartitioning(wr_returning_customer_sk#14, ca_state#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(29) CometHashAggregate
Input [3]: [wr_returning_customer_sk#14, ca_state#9, sum#20]
Keys [2]: [wr_returning_customer_sk#14, ca_state#9]
Functions [1]: [sum(UnscaledValue(wr_return_amt#16))]

(30) CometHashAggregate
Input [2]: [ctr_state#21, ctr_total_return#22]
Keys [1]: [ctr_state#21]
Functions [1]: [partial_avg(ctr_total_return#22)]

(31) CometExchange
Input [3]: [ctr_state#21, sum#23, count#24]
Arguments: hashpartitioning(ctr_state#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(32) CometHashAggregate
Input [3]: [ctr_state#21, sum#23, count#24]
Keys [1]: [ctr_state#21]
Functions [1]: [avg(ctr_total_return#22)]

(33) CometFilter
Input [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#25)

(34) CometBroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Arguments: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]

(35) CometBroadcastHashJoin
Left output [3]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13]
Right output [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Arguments: [ctr_state#12], [ctr_state#21], Inner, (cast(ctr_total_return#13 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#25), BuildRight

(36) CometProject
Input [5]: [ctr_customer_sk#11, ctr_state#12, ctr_total_return#13, (avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Arguments: [ctr_customer_sk#11, ctr_total_return#13], [ctr_customer_sk#11, ctr_total_return#13]

(37) CometNativeScan parquet spark_catalog.default.customer
Output [14]: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31, c_preferred_cust_flag#32, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#37, c_email_address#38, c_last_review_date#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(38) CometFilter
Input [14]: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31, c_preferred_cust_flag#32, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#37, c_email_address#38, c_last_review_date#39]
Condition : (isnotnull(c_customer_sk#26) AND isnotnull(c_current_addr_sk#28))

(39) CometProject
Input [14]: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31, c_preferred_cust_flag#32, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#37, c_email_address#38, c_last_review_date#39]
Arguments: [c_customer_sk#26, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39], [c_customer_sk#26, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#27, 16, true, false, true) AS c_customer_id#40, c_current_addr_sk#28, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_salutation#29, 10, true, false, true) AS c_salutation#41, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#30, 20, true, false, true) AS c_first_name#42, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#31, 30, true, false, true) AS c_last_name#43, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_preferred_cust_flag#32, 1, true, false, true) AS c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_login#37, 13, true, false, true) AS c_login#45, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_email_address#38, 50, true, false, true) AS c_email_address#46, c_last_review_date#39]

(40) CometBroadcastExchange
Input [14]: [c_customer_sk#26, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39]
Arguments: [c_customer_sk#26, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39]

(41) CometBroadcastHashJoin
Left output [2]: [ctr_customer_sk#11, ctr_total_return#13]
Right output [14]: [c_customer_sk#26, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39]
Arguments: [ctr_customer_sk#11], [c_customer_sk#26], Inner, BuildRight

(42) CometProject
Input [16]: [ctr_customer_sk#11, ctr_total_return#13, c_customer_sk#26, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39]
Arguments: [ctr_total_return#13, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39], [ctr_total_return#13, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39]

(43) CometNativeScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#47, ca_state#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(44) CometFilter
Input [2]: [ca_address_sk#47, ca_state#48]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#48, 2, true, false, true) = GA) AND isnotnull(ca_address_sk#47))

(45) CometProject
Input [2]: [ca_address_sk#47, ca_state#48]
Arguments: [ca_address_sk#47], [ca_address_sk#47]

(46) CometBroadcastExchange
Input [1]: [ca_address_sk#47]
Arguments: [ca_address_sk#47]

(47) CometBroadcastHashJoin
Left output [14]: [ctr_total_return#13, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39]
Right output [1]: [ca_address_sk#47]
Arguments: [c_current_addr_sk#28], [ca_address_sk#47], Inner, BuildRight

(48) CometProject
Input [15]: [ctr_total_return#13, c_customer_id#40, c_current_addr_sk#28, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39, ca_address_sk#47]
Arguments: [c_customer_id#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39, ctr_total_return#13], [c_customer_id#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39, ctr_total_return#13]

(49) CometTakeOrderedAndProject
Input [13]: [c_customer_id#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39, ctr_total_return#13]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#40 ASC NULLS FIRST,c_salutation#41 ASC NULLS FIRST,c_first_name#42 ASC NULLS FIRST,c_last_name#43 ASC NULLS FIRST,c_preferred_cust_flag#44 ASC NULLS FIRST,c_birth_day#33 ASC NULLS FIRST,c_birth_month#34 ASC NULLS FIRST,c_birth_year#35 ASC NULLS FIRST,c_birth_country#36 ASC NULLS FIRST,c_login#45 ASC NULLS FIRST,c_email_address#46 ASC NULLS FIRST,c_last_review_date#39 ASC NULLS FIRST,ctr_total_return#13 ASC NULLS FIRST], output=[c_customer_id#40,c_salutation#41,c_first_name#42,c_last_name#43,c_preferred_cust_flag#44,c_birth_day#33,c_birth_month#34,c_birth_year#35,c_birth_country#36,c_login#45,c_email_address#46,c_last_review_date#39,ctr_total_return#13]), [c_customer_id#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39, ctr_total_return#13], 100, 0, [c_customer_id#40 ASC NULLS FIRST, c_salutation#41 ASC NULLS FIRST, c_first_name#42 ASC NULLS FIRST, c_last_name#43 ASC NULLS FIRST, c_preferred_cust_flag#44 ASC NULLS FIRST, c_birth_day#33 ASC NULLS FIRST, c_birth_month#34 ASC NULLS FIRST, c_birth_year#35 ASC NULLS FIRST, c_birth_country#36 ASC NULLS FIRST, c_login#45 ASC NULLS FIRST, c_email_address#46 ASC NULLS FIRST, c_last_review_date#39 ASC NULLS FIRST, ctr_total_return#13 ASC NULLS FIRST], [c_customer_id#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39, ctr_total_return#13]

(50) CometColumnarToRow [codegen id : 1]
Input [13]: [c_customer_id#40, c_salutation#41, c_first_name#42, c_last_name#43, c_preferred_cust_flag#44, c_birth_day#33, c_birth_month#34, c_birth_year#35, c_birth_country#36, c_login#45, c_email_address#46, c_last_review_date#39, ctr_total_return#13]

