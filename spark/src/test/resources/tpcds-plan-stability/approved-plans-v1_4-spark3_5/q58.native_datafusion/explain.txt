== Physical Plan ==
* CometColumnarToRow (55)
+- CometTakeOrderedAndProject (54)
   +- CometProject (53)
      +- CometBroadcastHashJoin (52)
         :- CometProject (38)
         :  +- CometBroadcastHashJoin (37)
         :     :- CometFilter (23)
         :     :  +- CometHashAggregate (22)
         :     :     +- CometExchange (21)
         :     :        +- CometHashAggregate (20)
         :     :           +- CometProject (19)
         :     :              +- CometBroadcastHashJoin (18)
         :     :                 :- CometProject (8)
         :     :                 :  +- CometBroadcastHashJoin (7)
         :     :                 :     :- CometFilter (2)
         :     :                 :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
         :     :                 :     +- CometBroadcastExchange (6)
         :     :                 :        +- CometProject (5)
         :     :                 :           +- CometFilter (4)
         :     :                 :              +- CometNativeScan parquet spark_catalog.default.item (3)
         :     :                 +- CometBroadcastExchange (17)
         :     :                    +- CometProject (16)
         :     :                       +- CometBroadcastHashJoin (15)
         :     :                          :- CometFilter (10)
         :     :                          :  +- CometNativeScan parquet spark_catalog.default.date_dim (9)
         :     :                          +- CometBroadcastExchange (14)
         :     :                             +- CometProject (13)
         :     :                                +- CometFilter (12)
         :     :                                   +- CometNativeScan parquet spark_catalog.default.date_dim (11)
         :     +- CometBroadcastExchange (36)
         :        +- CometFilter (35)
         :           +- CometHashAggregate (34)
         :              +- CometExchange (33)
         :                 +- CometHashAggregate (32)
         :                    +- CometProject (31)
         :                       +- CometBroadcastHashJoin (30)
         :                          :- CometProject (28)
         :                          :  +- CometBroadcastHashJoin (27)
         :                          :     :- CometFilter (25)
         :                          :     :  +- CometNativeScan parquet spark_catalog.default.catalog_sales (24)
         :                          :     +- ReusedExchange (26)
         :                          +- ReusedExchange (29)
         +- CometBroadcastExchange (51)
            +- CometFilter (50)
               +- CometHashAggregate (49)
                  +- CometExchange (48)
                     +- CometHashAggregate (47)
                        +- CometProject (46)
                           +- CometBroadcastHashJoin (45)
                              :- CometProject (43)
                              :  +- CometBroadcastHashJoin (42)
                              :     :- CometFilter (40)
                              :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (39)
                              :     +- ReusedExchange (41)
                              +- ReusedExchange (44)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#4, i_item_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#4, i_item_id#5]
Condition : (isnotnull(i_item_sk#4) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#5, 16, true, false, true)))

(5) CometProject
Input [2]: [i_item_sk#4, i_item_id#5]
Arguments: [i_item_sk#4, i_item_id#6], [i_item_sk#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#5, 16, true, false, true) AS i_item_id#6]

(6) CometBroadcastExchange
Input [2]: [i_item_sk#4, i_item_id#6]
Arguments: [i_item_sk#4, i_item_id#6]

(7) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#4, i_item_id#6]
Arguments: [ss_item_sk#1], [i_item_sk#4], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#4, i_item_id#6]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(10) CometFilter
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(11) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#9, d_week_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(12) CometFilter
Input [2]: [d_date#9, d_week_seq#10]
Condition : (isnotnull(d_week_seq#10) AND (d_week_seq#10 = Subquery scalar-subquery#11, [id=#12]))

(13) CometProject
Input [2]: [d_date#9, d_week_seq#10]
Arguments: [d_date#9], [d_date#9]

(14) CometBroadcastExchange
Input [1]: [d_date#9]
Arguments: [d_date#9]

(15) CometBroadcastHashJoin
Left output [2]: [d_date_sk#7, d_date#8]
Right output [1]: [d_date#9]
Arguments: [d_date#8], [d_date#9], LeftSemi, BuildRight

(16) CometProject
Input [2]: [d_date_sk#7, d_date#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(18) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#7], Inner, BuildRight

(19) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6, d_date_sk#7]
Arguments: [ss_ext_sales_price#2, i_item_id#6], [ss_ext_sales_price#2, i_item_id#6]

(20) CometHashAggregate
Input [2]: [ss_ext_sales_price#2, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(21) CometExchange
Input [2]: [i_item_id#6, sum#13]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(22) CometHashAggregate
Input [2]: [i_item_id#6, sum#13]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]

(23) CometFilter
Input [2]: [item_id#14, ss_item_rev#15]
Condition : isnotnull(ss_item_rev#15)

(24) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#18)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(25) CometFilter
Input [3]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#16)

(26) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#19, i_item_id#20]

(27) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18]
Right output [2]: [i_item_sk#19, i_item_id#20]
Arguments: [cs_item_sk#16], [i_item_sk#19], Inner, BuildRight

(28) CometProject
Input [5]: [cs_item_sk#16, cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_sk#19, i_item_id#20]
Arguments: [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20], [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20]

(29) ReusedExchange [Reuses operator id: 17]
Output [1]: [d_date_sk#21]

(30) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20]
Right output [1]: [d_date_sk#21]
Arguments: [cs_sold_date_sk#18], [d_date_sk#21], Inner, BuildRight

(31) CometProject
Input [4]: [cs_ext_sales_price#17, cs_sold_date_sk#18, i_item_id#20, d_date_sk#21]
Arguments: [cs_ext_sales_price#17, i_item_id#20], [cs_ext_sales_price#17, i_item_id#20]

(32) CometHashAggregate
Input [2]: [cs_ext_sales_price#17, i_item_id#20]
Keys [1]: [i_item_id#20]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#17))]

(33) CometExchange
Input [2]: [i_item_id#20, sum#22]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(34) CometHashAggregate
Input [2]: [i_item_id#20, sum#22]
Keys [1]: [i_item_id#20]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#17))]

(35) CometFilter
Input [2]: [item_id#23, cs_item_rev#24]
Condition : isnotnull(cs_item_rev#24)

(36) CometBroadcastExchange
Input [2]: [item_id#23, cs_item_rev#24]
Arguments: [item_id#23, cs_item_rev#24]

(37) CometBroadcastHashJoin
Left output [2]: [item_id#14, ss_item_rev#15]
Right output [2]: [item_id#23, cs_item_rev#24]
Arguments: [item_id#14], [item_id#23], Inner, ((((cast(ss_item_rev#15 as decimal(19,3)) >= (0.9 * cs_item_rev#24)) AND (cast(ss_item_rev#15 as decimal(20,3)) <= (1.1 * cs_item_rev#24))) AND (cast(cs_item_rev#24 as decimal(19,3)) >= (0.9 * ss_item_rev#15))) AND (cast(cs_item_rev#24 as decimal(20,3)) <= (1.1 * ss_item_rev#15))), BuildRight

(38) CometProject
Input [4]: [item_id#14, ss_item_rev#15, item_id#23, cs_item_rev#24]
Arguments: [item_id#14, ss_item_rev#15, cs_item_rev#24], [item_id#14, ss_item_rev#15, cs_item_rev#24]

(39) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#25, ws_ext_sales_price#26, ws_sold_date_sk#27]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#27)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(40) CometFilter
Input [3]: [ws_item_sk#25, ws_ext_sales_price#26, ws_sold_date_sk#27]
Condition : isnotnull(ws_item_sk#25)

(41) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#28, i_item_id#29]

(42) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#25, ws_ext_sales_price#26, ws_sold_date_sk#27]
Right output [2]: [i_item_sk#28, i_item_id#29]
Arguments: [ws_item_sk#25], [i_item_sk#28], Inner, BuildRight

(43) CometProject
Input [5]: [ws_item_sk#25, ws_ext_sales_price#26, ws_sold_date_sk#27, i_item_sk#28, i_item_id#29]
Arguments: [ws_ext_sales_price#26, ws_sold_date_sk#27, i_item_id#29], [ws_ext_sales_price#26, ws_sold_date_sk#27, i_item_id#29]

(44) ReusedExchange [Reuses operator id: 17]
Output [1]: [d_date_sk#30]

(45) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#26, ws_sold_date_sk#27, i_item_id#29]
Right output [1]: [d_date_sk#30]
Arguments: [ws_sold_date_sk#27], [d_date_sk#30], Inner, BuildRight

(46) CometProject
Input [4]: [ws_ext_sales_price#26, ws_sold_date_sk#27, i_item_id#29, d_date_sk#30]
Arguments: [ws_ext_sales_price#26, i_item_id#29], [ws_ext_sales_price#26, i_item_id#29]

(47) CometHashAggregate
Input [2]: [ws_ext_sales_price#26, i_item_id#29]
Keys [1]: [i_item_id#29]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#26))]

(48) CometExchange
Input [2]: [i_item_id#29, sum#31]
Arguments: hashpartitioning(i_item_id#29, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(49) CometHashAggregate
Input [2]: [i_item_id#29, sum#31]
Keys [1]: [i_item_id#29]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#26))]

(50) CometFilter
Input [2]: [item_id#32, ws_item_rev#33]
Condition : isnotnull(ws_item_rev#33)

(51) CometBroadcastExchange
Input [2]: [item_id#32, ws_item_rev#33]
Arguments: [item_id#32, ws_item_rev#33]

(52) CometBroadcastHashJoin
Left output [3]: [item_id#14, ss_item_rev#15, cs_item_rev#24]
Right output [2]: [item_id#32, ws_item_rev#33]
Arguments: [item_id#14], [item_id#32], Inner, ((((((((cast(ss_item_rev#15 as decimal(19,3)) >= (0.9 * ws_item_rev#33)) AND (cast(ss_item_rev#15 as decimal(20,3)) <= (1.1 * ws_item_rev#33))) AND (cast(cs_item_rev#24 as decimal(19,3)) >= (0.9 * ws_item_rev#33))) AND (cast(cs_item_rev#24 as decimal(20,3)) <= (1.1 * ws_item_rev#33))) AND (cast(ws_item_rev#33 as decimal(19,3)) >= (0.9 * ss_item_rev#15))) AND (cast(ws_item_rev#33 as decimal(20,3)) <= (1.1 * ss_item_rev#15))) AND (cast(ws_item_rev#33 as decimal(19,3)) >= (0.9 * cs_item_rev#24))) AND (cast(ws_item_rev#33 as decimal(20,3)) <= (1.1 * cs_item_rev#24))), BuildRight

(53) CometProject
Input [5]: [item_id#14, ss_item_rev#15, cs_item_rev#24, item_id#32, ws_item_rev#33]
Arguments: [item_id#14, ss_item_rev#15, ss_dev#34, cs_item_rev#24, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37], [item_id#14, ss_item_rev#15, (((ss_item_rev#15 / ((ss_item_rev#15 + cs_item_rev#24) + ws_item_rev#33)) / 3) * 100) AS ss_dev#34, cs_item_rev#24, (((cs_item_rev#24 / ((ss_item_rev#15 + cs_item_rev#24) + ws_item_rev#33)) / 3) * 100) AS cs_dev#35, ws_item_rev#33, (((ws_item_rev#33 / ((ss_item_rev#15 + cs_item_rev#24) + ws_item_rev#33)) / 3) * 100) AS ws_dev#36, (((ss_item_rev#15 + cs_item_rev#24) + ws_item_rev#33) / 3) AS average#37]

(54) CometTakeOrderedAndProject
Input [8]: [item_id#14, ss_item_rev#15, ss_dev#34, cs_item_rev#24, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[item_id#14 ASC NULLS FIRST,ss_item_rev#15 ASC NULLS FIRST], output=[item_id#14,ss_item_rev#15,ss_dev#34,cs_item_rev#24,cs_dev#35,ws_item_rev#33,ws_dev#36,average#37]), [item_id#14, ss_item_rev#15, ss_dev#34, cs_item_rev#24, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37], 100, 0, [item_id#14 ASC NULLS FIRST, ss_item_rev#15 ASC NULLS FIRST], [item_id#14, ss_item_rev#15, ss_dev#34, cs_item_rev#24, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]

(55) CometColumnarToRow [codegen id : 1]
Input [8]: [item_id#14, ss_item_rev#15, ss_dev#34, cs_item_rev#24, cs_dev#35, ws_item_rev#33, ws_dev#36, average#37]

===== Subqueries =====

Subquery:1 Hosting operator id = 12 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
* CometColumnarToRow (59)
+- CometProject (58)
   +- CometFilter (57)
      +- CometNativeScan parquet spark_catalog.default.date_dim (56)


(56) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#38, d_week_seq#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(57) CometFilter
Input [2]: [d_date#38, d_week_seq#39]
Condition : (isnotnull(d_date#38) AND (d_date#38 = 2000-01-03))

(58) CometProject
Input [2]: [d_date#38, d_week_seq#39]
Arguments: [d_week_seq#39], [d_week_seq#39]

(59) CometColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#39]


