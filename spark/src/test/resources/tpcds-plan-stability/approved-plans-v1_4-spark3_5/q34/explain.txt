== Physical Plan ==
* Sort (33)
+- Exchange (32)
   +- * Project (31)
      +- * BroadcastHashJoin Inner BuildRight (30)
         :- * Filter (25)
         :  +- * HashAggregate (24)
         :     +- Exchange (23)
         :        +- * ColumnarToRow (22)
         :           +- CometHashAggregate (21)
         :              +- CometProject (20)
         :                 +- CometBroadcastHashJoin (19)
         :                    :- CometProject (14)
         :                    :  +- CometBroadcastHashJoin (13)
         :                    :     :- CometProject (8)
         :                    :     :  +- CometBroadcastHashJoin (7)
         :                    :     :     :- CometFilter (2)
         :                    :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :                    :     :     +- CometBroadcastExchange (6)
         :                    :     :        +- CometProject (5)
         :                    :     :           +- CometFilter (4)
         :                    :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
         :                    :     +- CometBroadcastExchange (12)
         :                    :        +- CometProject (11)
         :                    :           +- CometFilter (10)
         :                    :              +- CometScan parquet spark_catalog.default.store (9)
         :                    +- CometBroadcastExchange (18)
         :                       +- CometProject (17)
         :                          +- CometFilter (16)
         :                             +- CometScan parquet spark_catalog.default.household_demographics (15)
         +- BroadcastExchange (29)
            +- * ColumnarToRow (28)
               +- CometFilter (27)
                  +- CometScan parquet spark_catalog.default.customer (26)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_store_sk:int,ss_ticket_number:int>

(2) CometFilter
Input [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5]
Condition : ((isnotnull(ss_store_sk#3) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_customer_sk#1))

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_dom#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(And(GreaterThanOrEqual(d_dom,1),LessThanOrEqual(d_dom,3)),And(GreaterThanOrEqual(d_dom,25),LessThanOrEqual(d_dom,28))), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(4) CometFilter
Input [3]: [d_date_sk#7, d_year#8, d_dom#9]
Condition : (((((d_dom#9 >= 1) AND (d_dom#9 <= 3)) OR ((d_dom#9 >= 25) AND (d_dom#9 <= 28))) AND d_year#8 IN (1999,2000,2001)) AND isnotnull(d_date_sk#7))

(5) CometProject
Input [3]: [d_date_sk#7, d_year#8, d_dom#9]
Arguments: [d_date_sk#7], [d_date_sk#7]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(7) CometBroadcastHashJoin
Left output [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#5], [d_date_sk#7], Inner, BuildRight

(8) CometProject
Input [6]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_sold_date_sk#5, d_date_sk#7]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4], [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4]

(9) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#10, s_county#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_county), EqualTo(s_county,Williamson County), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string>

(10) CometFilter
Input [2]: [s_store_sk#10, s_county#11]
Condition : ((isnotnull(s_county#11) AND (s_county#11 = Williamson County)) AND isnotnull(s_store_sk#10))

(11) CometProject
Input [2]: [s_store_sk#10, s_county#11]
Arguments: [s_store_sk#10], [s_store_sk#10]

(12) CometBroadcastExchange
Input [1]: [s_store_sk#10]
Arguments: [s_store_sk#10]

(13) CometBroadcastHashJoin
Left output [4]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4]
Right output [1]: [s_store_sk#10]
Arguments: [ss_store_sk#3], [s_store_sk#10], Inner, BuildRight

(14) CometProject
Input [5]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_store_sk#3, ss_ticket_number#4, s_store_sk#10]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_ticket_number#4], [ss_customer_sk#1, ss_hdemo_sk#2, ss_ticket_number#4]

(15) Scan parquet spark_catalog.default.household_demographics
Output [4]: [hd_demo_sk#12, hd_buy_potential#13, hd_dep_count#14, hd_vehicle_count#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_vehicle_count), Or(EqualTo(hd_buy_potential,>10000         ),EqualTo(hd_buy_potential,unknown        )), GreaterThan(hd_vehicle_count,0), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string,hd_dep_count:int,hd_vehicle_count:int>

(16) CometFilter
Input [4]: [hd_demo_sk#12, hd_buy_potential#13, hd_dep_count#14, hd_vehicle_count#15]
Condition : ((((isnotnull(hd_vehicle_count#15) AND ((hd_buy_potential#13 = >10000         ) OR (hd_buy_potential#13 = unknown        ))) AND (hd_vehicle_count#15 > 0)) AND CASE WHEN (hd_vehicle_count#15 > 0) THEN ((cast(hd_dep_count#14 as double) / cast(hd_vehicle_count#15 as double)) > 1.2) END) AND isnotnull(hd_demo_sk#12))

(17) CometProject
Input [4]: [hd_demo_sk#12, hd_buy_potential#13, hd_dep_count#14, hd_vehicle_count#15]
Arguments: [hd_demo_sk#12], [hd_demo_sk#12]

(18) CometBroadcastExchange
Input [1]: [hd_demo_sk#12]
Arguments: [hd_demo_sk#12]

(19) CometBroadcastHashJoin
Left output [3]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_ticket_number#4]
Right output [1]: [hd_demo_sk#12]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#12], Inner, BuildRight

(20) CometProject
Input [4]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_ticket_number#4, hd_demo_sk#12]
Arguments: [ss_customer_sk#1, ss_ticket_number#4], [ss_customer_sk#1, ss_ticket_number#4]

(21) CometHashAggregate
Input [2]: [ss_customer_sk#1, ss_ticket_number#4]
Keys [2]: [ss_ticket_number#4, ss_customer_sk#1]
Functions [1]: [partial_count(1)]

(22) ColumnarToRow [codegen id : 1]
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, count#16]

(23) Exchange
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, count#16]
Arguments: hashpartitioning(ss_ticket_number#4, ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(24) HashAggregate [codegen id : 3]
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, count#16]
Keys [2]: [ss_ticket_number#4, ss_customer_sk#1]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#17]
Results [3]: [ss_ticket_number#4, ss_customer_sk#1, count(1)#17 AS cnt#18]

(25) Filter [codegen id : 3]
Input [3]: [ss_ticket_number#4, ss_customer_sk#1, cnt#18]
Condition : ((cnt#18 >= 15) AND (cnt#18 <= 20))

(26) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#19, c_salutation#20, c_first_name#21, c_last_name#22, c_preferred_cust_flag#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string>

(27) CometFilter
Input [5]: [c_customer_sk#19, c_salutation#20, c_first_name#21, c_last_name#22, c_preferred_cust_flag#23]
Condition : isnotnull(c_customer_sk#19)

(28) ColumnarToRow [codegen id : 2]
Input [5]: [c_customer_sk#19, c_salutation#20, c_first_name#21, c_last_name#22, c_preferred_cust_flag#23]

(29) BroadcastExchange
Input [5]: [c_customer_sk#19, c_salutation#20, c_first_name#21, c_last_name#22, c_preferred_cust_flag#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(30) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#19]
Join type: Inner
Join condition: None

(31) Project [codegen id : 3]
Output [6]: [c_last_name#22, c_first_name#21, c_salutation#20, c_preferred_cust_flag#23, ss_ticket_number#4, cnt#18]
Input [8]: [ss_ticket_number#4, ss_customer_sk#1, cnt#18, c_customer_sk#19, c_salutation#20, c_first_name#21, c_last_name#22, c_preferred_cust_flag#23]

(32) Exchange
Input [6]: [c_last_name#22, c_first_name#21, c_salutation#20, c_preferred_cust_flag#23, ss_ticket_number#4, cnt#18]
Arguments: rangepartitioning(c_last_name#22 ASC NULLS FIRST, c_first_name#21 ASC NULLS FIRST, c_salutation#20 ASC NULLS FIRST, c_preferred_cust_flag#23 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(33) Sort [codegen id : 4]
Input [6]: [c_last_name#22, c_first_name#21, c_salutation#20, c_preferred_cust_flag#23, ss_ticket_number#4, cnt#18]
Arguments: [c_last_name#22 ASC NULLS FIRST, c_first_name#21 ASC NULLS FIRST, c_salutation#20 ASC NULLS FIRST, c_preferred_cust_flag#23 DESC NULLS LAST], true, 0

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (38)
+- * ColumnarToRow (37)
   +- CometProject (36)
      +- CometFilter (35)
         +- CometScan parquet spark_catalog.default.date_dim (34)


(34) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#7, d_year#8, d_dom#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(And(GreaterThanOrEqual(d_dom,1),LessThanOrEqual(d_dom,3)),And(GreaterThanOrEqual(d_dom,25),LessThanOrEqual(d_dom,28))), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(35) CometFilter
Input [3]: [d_date_sk#7, d_year#8, d_dom#9]
Condition : (((((d_dom#9 >= 1) AND (d_dom#9 <= 3)) OR ((d_dom#9 >= 25) AND (d_dom#9 <= 28))) AND d_year#8 IN (1999,2000,2001)) AND isnotnull(d_date_sk#7))

(36) CometProject
Input [3]: [d_date_sk#7, d_year#8, d_dom#9]
Arguments: [d_date_sk#7], [d_date_sk#7]

(37) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(38) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]


