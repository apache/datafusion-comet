== Physical Plan ==
* ColumnarToRow (61)
+- CometTakeOrderedAndProject (60)
   +- CometHashAggregate (59)
      +- CometExchange (58)
         +- CometHashAggregate (57)
            +- CometUnion (56)
               :- CometHashAggregate (27)
               :  +- CometExchange (26)
               :     +- CometHashAggregate (25)
               :        +- CometProject (24)
               :           +- CometBroadcastHashJoin (23)
               :              :- CometProject (14)
               :              :  +- CometBroadcastHashJoin (13)
               :              :     :- CometProject (8)
               :              :     :  +- CometBroadcastHashJoin (7)
               :              :     :     :- CometFilter (2)
               :              :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
               :              :     :     +- CometBroadcastExchange (6)
               :              :     :        +- CometProject (5)
               :              :     :           +- CometFilter (4)
               :              :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
               :              :     +- CometBroadcastExchange (12)
               :              :        +- CometProject (11)
               :              :           +- CometFilter (10)
               :              :              +- CometScan parquet spark_catalog.default.customer_address (9)
               :              +- CometBroadcastExchange (22)
               :                 +- CometBroadcastHashJoin (21)
               :                    :- CometFilter (16)
               :                    :  +- CometScan parquet spark_catalog.default.item (15)
               :                    +- CometBroadcastExchange (20)
               :                       +- CometProject (19)
               :                          +- CometFilter (18)
               :                             +- CometScan parquet spark_catalog.default.item (17)
               :- CometHashAggregate (41)
               :  +- CometExchange (40)
               :     +- CometHashAggregate (39)
               :        +- CometProject (38)
               :           +- CometBroadcastHashJoin (37)
               :              :- CometProject (35)
               :              :  +- CometBroadcastHashJoin (34)
               :              :     :- CometProject (32)
               :              :     :  +- CometBroadcastHashJoin (31)
               :              :     :     :- CometFilter (29)
               :              :     :     :  +- CometScan parquet spark_catalog.default.catalog_sales (28)
               :              :     :     +- ReusedExchange (30)
               :              :     +- ReusedExchange (33)
               :              +- ReusedExchange (36)
               +- CometHashAggregate (55)
                  +- CometExchange (54)
                     +- CometHashAggregate (53)
                        +- CometProject (52)
                           +- CometBroadcastHashJoin (51)
                              :- CometProject (49)
                              :  +- CometBroadcastHashJoin (48)
                              :     :- CometProject (46)
                              :     :  +- CometBroadcastHashJoin (45)
                              :     :     :- CometFilter (43)
                              :     :     :  +- CometScan parquet spark_catalog.default.web_sales (42)
                              :     :     +- ReusedExchange (44)
                              :     +- ReusedExchange (47)
                              +- ReusedExchange (50)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_addr_sk#2) AND isnotnull(ss_item_sk#1))

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(4) CometFilter
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 2001)) AND (d_moy#8 = 2)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]
Arguments: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3], [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]

(9) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#9, ca_gmt_offset#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(10) CometFilter
Input [2]: [ca_address_sk#9, ca_gmt_offset#10]
Condition : ((isnotnull(ca_gmt_offset#10) AND (ca_gmt_offset#10 = -5.00)) AND isnotnull(ca_address_sk#9))

(11) CometProject
Input [2]: [ca_address_sk#9, ca_gmt_offset#10]
Arguments: [ca_address_sk#9], [ca_address_sk#9]

(12) CometBroadcastExchange
Input [1]: [ca_address_sk#9]
Arguments: [ca_address_sk#9]

(13) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]
Right output [1]: [ca_address_sk#9]
Arguments: [ss_addr_sk#2], [ca_address_sk#9], Inner, BuildRight

(14) CometProject
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ca_address_sk#9]
Arguments: [ss_item_sk#1, ss_ext_sales_price#3], [ss_item_sk#1, ss_ext_sales_price#3]

(15) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#11, i_item_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(16) CometFilter
Input [2]: [i_item_sk#11, i_item_id#12]
Condition : isnotnull(i_item_sk#11)

(17) Scan parquet spark_catalog.default.item
Output [2]: [i_item_id#13, i_color#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_color, [blanched            ,burnished           ,slate               ])]
ReadSchema: struct<i_item_id:string,i_color:string>

(18) CometFilter
Input [2]: [i_item_id#13, i_color#14]
Condition : i_color#14 IN (slate               ,blanched            ,burnished           )

(19) CometProject
Input [2]: [i_item_id#13, i_color#14]
Arguments: [i_item_id#13], [i_item_id#13]

(20) CometBroadcastExchange
Input [1]: [i_item_id#13]
Arguments: [i_item_id#13]

(21) CometBroadcastHashJoin
Left output [2]: [i_item_sk#11, i_item_id#12]
Right output [1]: [i_item_id#13]
Arguments: [i_item_id#12], [i_item_id#13], LeftSemi, BuildRight

(22) CometBroadcastExchange
Input [2]: [i_item_sk#11, i_item_id#12]
Arguments: [i_item_sk#11, i_item_id#12]

(23) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#1, ss_ext_sales_price#3]
Right output [2]: [i_item_sk#11, i_item_id#12]
Arguments: [ss_item_sk#1], [i_item_sk#11], Inner, BuildRight

(24) CometProject
Input [4]: [ss_item_sk#1, ss_ext_sales_price#3, i_item_sk#11, i_item_id#12]
Arguments: [ss_ext_sales_price#3, i_item_id#12], [ss_ext_sales_price#3, i_item_id#12]

(25) CometHashAggregate
Input [2]: [ss_ext_sales_price#3, i_item_id#12]
Keys [1]: [i_item_id#12]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]

(26) CometExchange
Input [2]: [i_item_id#12, sum#15]
Arguments: hashpartitioning(i_item_id#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(27) CometHashAggregate
Input [2]: [i_item_id#12, sum#15]
Keys [1]: [i_item_id#12]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]

(28) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#19), dynamicpruningexpression(cs_sold_date_sk#19 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(29) CometFilter
Input [4]: [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Condition : (isnotnull(cs_bill_addr_sk#16) AND isnotnull(cs_item_sk#17))

(30) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#21]

(31) CometBroadcastHashJoin
Left output [4]: [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19]
Right output [1]: [d_date_sk#21]
Arguments: [cs_sold_date_sk#19], [d_date_sk#21], Inner, BuildRight

(32) CometProject
Input [5]: [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18, cs_sold_date_sk#19, d_date_sk#21]
Arguments: [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18], [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18]

(33) ReusedExchange [Reuses operator id: 12]
Output [1]: [ca_address_sk#22]

(34) CometBroadcastHashJoin
Left output [3]: [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18]
Right output [1]: [ca_address_sk#22]
Arguments: [cs_bill_addr_sk#16], [ca_address_sk#22], Inner, BuildRight

(35) CometProject
Input [4]: [cs_bill_addr_sk#16, cs_item_sk#17, cs_ext_sales_price#18, ca_address_sk#22]
Arguments: [cs_item_sk#17, cs_ext_sales_price#18], [cs_item_sk#17, cs_ext_sales_price#18]

(36) ReusedExchange [Reuses operator id: 22]
Output [2]: [i_item_sk#23, i_item_id#24]

(37) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#17, cs_ext_sales_price#18]
Right output [2]: [i_item_sk#23, i_item_id#24]
Arguments: [cs_item_sk#17], [i_item_sk#23], Inner, BuildRight

(38) CometProject
Input [4]: [cs_item_sk#17, cs_ext_sales_price#18, i_item_sk#23, i_item_id#24]
Arguments: [cs_ext_sales_price#18, i_item_id#24], [cs_ext_sales_price#18, i_item_id#24]

(39) CometHashAggregate
Input [2]: [cs_ext_sales_price#18, i_item_id#24]
Keys [1]: [i_item_id#24]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#18))]

(40) CometExchange
Input [2]: [i_item_id#24, sum#25]
Arguments: hashpartitioning(i_item_id#24, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(41) CometHashAggregate
Input [2]: [i_item_id#24, sum#25]
Keys [1]: [i_item_id#24]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#18))]

(42) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#30)]
PushedFilters: [IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(43) CometFilter
Input [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Condition : (isnotnull(ws_bill_addr_sk#27) AND isnotnull(ws_item_sk#26))

(44) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#31]

(45) CometBroadcastHashJoin
Left output [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Right output [1]: [d_date_sk#31]
Arguments: [ws_sold_date_sk#29], [d_date_sk#31], Inner, BuildRight

(46) CometProject
Input [5]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29, d_date_sk#31]
Arguments: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28], [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28]

(47) ReusedExchange [Reuses operator id: 12]
Output [1]: [ca_address_sk#32]

(48) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28]
Right output [1]: [ca_address_sk#32]
Arguments: [ws_bill_addr_sk#27], [ca_address_sk#32], Inner, BuildRight

(49) CometProject
Input [4]: [ws_item_sk#26, ws_bill_addr_sk#27, ws_ext_sales_price#28, ca_address_sk#32]
Arguments: [ws_item_sk#26, ws_ext_sales_price#28], [ws_item_sk#26, ws_ext_sales_price#28]

(50) ReusedExchange [Reuses operator id: 22]
Output [2]: [i_item_sk#33, i_item_id#34]

(51) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#26, ws_ext_sales_price#28]
Right output [2]: [i_item_sk#33, i_item_id#34]
Arguments: [ws_item_sk#26], [i_item_sk#33], Inner, BuildRight

(52) CometProject
Input [4]: [ws_item_sk#26, ws_ext_sales_price#28, i_item_sk#33, i_item_id#34]
Arguments: [ws_ext_sales_price#28, i_item_id#34], [ws_ext_sales_price#28, i_item_id#34]

(53) CometHashAggregate
Input [2]: [ws_ext_sales_price#28, i_item_id#34]
Keys [1]: [i_item_id#34]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#28))]

(54) CometExchange
Input [2]: [i_item_id#34, sum#35]
Arguments: hashpartitioning(i_item_id#34, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(55) CometHashAggregate
Input [2]: [i_item_id#34, sum#35]
Keys [1]: [i_item_id#34]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#28))]

(56) CometUnion
Child 0 Input [2]: [i_item_id#12, total_sales#36]
Child 1 Input [2]: [i_item_id#24, total_sales#37]
Child 2 Input [2]: [i_item_id#34, total_sales#38]

(57) CometHashAggregate
Input [2]: [i_item_id#12, total_sales#36]
Keys [1]: [i_item_id#12]
Functions [1]: [partial_sum(total_sales#36)]

(58) CometExchange
Input [3]: [i_item_id#12, sum#39, isEmpty#40]
Arguments: hashpartitioning(i_item_id#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(59) CometHashAggregate
Input [3]: [i_item_id#12, sum#39, isEmpty#40]
Keys [1]: [i_item_id#12]
Functions [1]: [sum(total_sales#36)]

(60) CometTakeOrderedAndProject
Input [2]: [i_item_id#12, total_sales#41]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[total_sales#41 ASC NULLS FIRST], output=[i_item_id#12,total_sales#41]), [i_item_id#12, total_sales#41], 100, [total_sales#41 ASC NULLS FIRST], [i_item_id#12, total_sales#41]

(61) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_id#12, total_sales#41]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (66)
+- * ColumnarToRow (65)
   +- CometProject (64)
      +- CometFilter (63)
         +- CometScan parquet spark_catalog.default.date_dim (62)


(62) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2001), EqualTo(d_moy,2), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(63) CometFilter
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 2001)) AND (d_moy#8 = 2)) AND isnotnull(d_date_sk#6))

(64) CometProject
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Arguments: [d_date_sk#6], [d_date_sk#6]

(65) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(66) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

Subquery:2 Hosting operator id = 28 Hosting Expression = cs_sold_date_sk#19 IN dynamicpruning#5

Subquery:3 Hosting operator id = 42 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#5


