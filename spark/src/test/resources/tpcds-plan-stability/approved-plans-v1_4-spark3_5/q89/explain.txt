== Physical Plan ==
TakeOrderedAndProject (28)
+- * Project (27)
   +- * Filter (26)
      +- Window (25)
         +- * Sort (24)
            +- Exchange (23)
               +- * HashAggregate (22)
                  +- Exchange (21)
                     +- * ColumnarToRow (20)
                        +- CometHashAggregate (19)
                           +- CometProject (18)
                              +- CometBroadcastHashJoin (17)
                                 :- CometProject (13)
                                 :  +- CometBroadcastHashJoin (12)
                                 :     :- CometProject (7)
                                 :     :  +- CometBroadcastHashJoin (6)
                                 :     :     :- CometFilter (2)
                                 :     :     :  +- CometScan parquet spark_catalog.default.item (1)
                                 :     :     +- CometBroadcastExchange (5)
                                 :     :        +- CometFilter (4)
                                 :     :           +- CometScan parquet spark_catalog.default.store_sales (3)
                                 :     +- CometBroadcastExchange (11)
                                 :        +- CometProject (10)
                                 :           +- CometFilter (9)
                                 :              +- CometScan parquet spark_catalog.default.date_dim (8)
                                 +- CometBroadcastExchange (16)
                                    +- CometFilter (15)
                                       +- CometScan parquet spark_catalog.default.store (14)


(1) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(In(i_category, [Books                                             ,Electronics                                       ,Sports                                            ]),In(i_class, [computers                                         ,football                                          ,stereo                                            ])),And(In(i_category, [Jewelry                                           ,Men                                               ,Women                                             ]),In(i_class, [birdal                                            ,dresses                                           ,shirts                                            ]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string>

(2) CometFilter
Input [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Condition : (((i_category#4 IN (Books                                             ,Electronics                                       ,Sports                                            ) AND i_class#3 IN (computers                                         ,stereo                                            ,football                                          )) OR (i_category#4 IN (Men                                               ,Jewelry                                           ,Women                                             ) AND i_class#3 IN (shirts                                            ,birdal                                            ,dresses                                           ))) AND isnotnull(i_item_sk#1))

(3) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(4) CometFilter
Input [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Condition : (isnotnull(ss_item_sk#5) AND isnotnull(ss_store_sk#6))

(5) CometBroadcastExchange
Input [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Arguments: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]

(6) CometBroadcastHashJoin
Left output [4]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4]
Right output [4]: [ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Arguments: [i_item_sk#1], [ss_item_sk#5], Inner, BuildRight

(7) CometProject
Input [8]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, ss_item_sk#5, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Arguments: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8], [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]

(8) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(9) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((isnotnull(d_year#11) AND (d_year#11 = 1999)) AND isnotnull(d_date_sk#10))

(10) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10, d_moy#12], [d_date_sk#10, d_moy#12]

(11) CometBroadcastExchange
Input [2]: [d_date_sk#10, d_moy#12]
Arguments: [d_date_sk#10, d_moy#12]

(12) CometBroadcastHashJoin
Left output [6]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8]
Right output [2]: [d_date_sk#10, d_moy#12]
Arguments: [ss_sold_date_sk#8], [d_date_sk#10], Inner, BuildRight

(13) CometProject
Input [8]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, ss_sold_date_sk#8, d_date_sk#10, d_moy#12]
Arguments: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, d_moy#12], [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, d_moy#12]

(14) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(15) CometFilter
Input [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Condition : isnotnull(s_store_sk#13)

(16) CometBroadcastExchange
Input [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Arguments: [s_store_sk#13, s_store_name#14, s_company_name#15]

(17) CometBroadcastHashJoin
Left output [6]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, d_moy#12]
Right output [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Arguments: [ss_store_sk#6], [s_store_sk#13], Inner, BuildRight

(18) CometProject
Input [9]: [i_brand#2, i_class#3, i_category#4, ss_store_sk#6, ss_sales_price#7, d_moy#12, s_store_sk#13, s_store_name#14, s_company_name#15]
Arguments: [i_brand#2, i_class#3, i_category#4, ss_sales_price#7, d_moy#12, s_store_name#14, s_company_name#15], [i_brand#2, i_class#3, i_category#4, ss_sales_price#7, d_moy#12, s_store_name#14, s_company_name#15]

(19) CometHashAggregate
Input [7]: [i_brand#2, i_class#3, i_category#4, ss_sales_price#7, d_moy#12, s_store_name#14, s_company_name#15]
Keys [6]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#7))]

(20) ColumnarToRow [codegen id : 1]
Input [7]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum#16]

(21) Exchange
Input [7]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum#16]
Arguments: hashpartitioning(i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(22) HashAggregate [codegen id : 2]
Input [7]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum#16]
Keys [6]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12]
Functions [1]: [sum(UnscaledValue(ss_sales_price#7))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#7))#17]
Results [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, MakeDecimal(sum(UnscaledValue(ss_sales_price#7))#17,17,2) AS sum_sales#18, MakeDecimal(sum(UnscaledValue(ss_sales_price#7))#17,17,2) AS _w0#19]

(23) Exchange
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, _w0#19]
Arguments: hashpartitioning(i_category#4, i_brand#2, s_store_name#14, s_company_name#15, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(24) Sort [codegen id : 3]
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, _w0#19]
Arguments: [i_category#4 ASC NULLS FIRST, i_brand#2 ASC NULLS FIRST, s_store_name#14 ASC NULLS FIRST, s_company_name#15 ASC NULLS FIRST], false, 0

(25) Window
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, _w0#19]
Arguments: [avg(_w0#19) windowspecdefinition(i_category#4, i_brand#2, s_store_name#14, s_company_name#15, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#20], [i_category#4, i_brand#2, s_store_name#14, s_company_name#15]

(26) Filter [codegen id : 4]
Input [9]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, _w0#19, avg_monthly_sales#20]
Condition : CASE WHEN NOT (avg_monthly_sales#20 = 0.000000) THEN ((abs((sum_sales#18 - avg_monthly_sales#20)) / avg_monthly_sales#20) > 0.1000000000000000) END

(27) Project [codegen id : 4]
Output [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, avg_monthly_sales#20]
Input [9]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, _w0#19, avg_monthly_sales#20]

(28) TakeOrderedAndProject
Input [8]: [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, avg_monthly_sales#20]
Arguments: 100, [(sum_sales#18 - avg_monthly_sales#20) ASC NULLS FIRST, s_store_name#14 ASC NULLS FIRST], [i_category#4, i_class#3, i_brand#2, s_store_name#14, s_company_name#15, d_moy#12, sum_sales#18, avg_monthly_sales#20]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (33)
+- * ColumnarToRow (32)
   +- CometProject (31)
      +- CometFilter (30)
         +- CometScan parquet spark_catalog.default.date_dim (29)


(29) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(30) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((isnotnull(d_year#11) AND (d_year#11 = 1999)) AND isnotnull(d_date_sk#10))

(31) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10, d_moy#12], [d_date_sk#10, d_moy#12]

(32) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#10, d_moy#12]

(33) BroadcastExchange
Input [2]: [d_date_sk#10, d_moy#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]


