== Physical Plan ==
TakeOrderedAndProject (53)
+- * HashAggregate (52)
   +- Exchange (51)
      +- * HashAggregate (50)
         +- * Expand (49)
            +- Union (48)
               :- * ColumnarToRow (22)
               :  +- CometProject (21)
               :     +- CometBroadcastHashJoin (20)
               :        :- CometHashAggregate (16)
               :        :  +- CometExchange (15)
               :        :     +- CometHashAggregate (14)
               :        :        +- CometProject (13)
               :        :           +- CometBroadcastHashJoin (12)
               :        :              :- CometProject (8)
               :        :              :  +- CometBroadcastHashJoin (7)
               :        :              :     :- CometFilter (2)
               :        :              :     :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (1)
               :        :              :     +- CometBroadcastExchange (6)
               :        :              :        +- CometProject (5)
               :        :              :           +- CometFilter (4)
               :        :              :              +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (3)
               :        :              +- CometBroadcastExchange (11)
               :        :                 +- CometFilter (10)
               :        :                    +- CometNativeScan: `spark_catalog`.`default`.`store` (9)
               :        +- CometBroadcastExchange (19)
               :           +- CometHashAggregate (18)
               :              +- ReusedExchange (17)
               :- * Project (41)
               :  +- * BroadcastNestedLoopJoin Inner BuildLeft (40)
               :     :- BroadcastExchange (31)
               :     :  +- * ColumnarToRow (30)
               :     :     +- CometHashAggregate (29)
               :     :        +- CometExchange (28)
               :     :           +- CometHashAggregate (27)
               :     :              +- CometProject (26)
               :     :                 +- CometBroadcastHashJoin (25)
               :     :                    :- CometNativeScan: `spark_catalog`.`default`.`catalog_sales` (23)
               :     :                    +- ReusedExchange (24)
               :     +- * ColumnarToRow (39)
               :        +- CometHashAggregate (38)
               :           +- CometExchange (37)
               :              +- CometHashAggregate (36)
               :                 +- CometProject (35)
               :                    +- CometBroadcastHashJoin (34)
               :                       :- CometNativeScan: `spark_catalog`.`default`.`catalog_returns` (32)
               :                       +- ReusedExchange (33)
               +- * ColumnarToRow (47)
                  +- CometProject (46)
                     +- CometBroadcastHashJoin (45)
                        :- CometHashAggregate (43)
                        :  +- ReusedExchange (42)
                        +- ReusedExchange (44)


(1) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Arguments: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#5, d_date#6]
Arguments: [d_date_sk#5, d_date#6]

(4) CometFilter
Input [2]: [d_date_sk#5, d_date#6]
Condition : (((isnotnull(d_date#6) AND (d_date#6 >= 2000-08-03)) AND (d_date#6 <= 2000-09-02)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_date#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#4], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#5]
Arguments: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3], [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]

(9) CometNativeScan: `spark_catalog`.`default`.`store`
Output [1]: [s_store_sk#7]
Arguments: [s_store_sk#7]

(10) CometFilter
Input [1]: [s_store_sk#7]
Condition : isnotnull(s_store_sk#7)

(11) CometBroadcastExchange
Input [1]: [s_store_sk#7]
Arguments: [s_store_sk#7]

(12) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Right output [1]: [s_store_sk#7]
Arguments: [ss_store_sk#1], [s_store_sk#7], Inner, BuildRight

(13) CometProject
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Arguments: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7], [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]

(14) CometHashAggregate
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#7]
Keys [1]: [s_store_sk#7]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]

(15) CometExchange
Input [3]: [s_store_sk#7, sum#8, sum#9]
Arguments: hashpartitioning(s_store_sk#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(16) CometHashAggregate
Input [3]: [s_store_sk#7, sum#8, sum#9]
Keys [1]: [s_store_sk#7]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]

(17) ReusedExchange [Reuses operator id: 15]
Output [3]: [s_store_sk#10, sum#11, sum#12]

(18) CometHashAggregate
Input [3]: [s_store_sk#10, sum#11, sum#12]
Keys [1]: [s_store_sk#10]
Functions [2]: [sum(UnscaledValue(sr_return_amt#13)), sum(UnscaledValue(sr_net_loss#14))]

(19) CometBroadcastExchange
Input [3]: [s_store_sk#10, returns#15, profit_loss#16]
Arguments: [s_store_sk#10, returns#15, profit_loss#16]

(20) CometBroadcastHashJoin
Left output [3]: [s_store_sk#7, sales#17, profit#18]
Right output [3]: [s_store_sk#10, returns#15, profit_loss#16]
Arguments: [s_store_sk#7], [s_store_sk#10], LeftOuter, BuildRight

(21) CometProject
Input [6]: [s_store_sk#7, sales#17, profit#18, s_store_sk#10, returns#15, profit_loss#16]
Arguments: [sales#17, returns#19, profit#20, channel#21, id#22], [sales#17, coalesce(returns#15, 0.00) AS returns#19, (profit#18 - coalesce(profit_loss#16, 0.00)) AS profit#20, store channel AS channel#21, s_store_sk#7 AS id#22]

(22) ColumnarToRow [codegen id : 1]
Input [5]: [sales#17, returns#19, profit#20, channel#21, id#22]

(23) CometNativeScan: `spark_catalog`.`default`.`catalog_sales`
Output [4]: [cs_call_center_sk#23, cs_ext_sales_price#24, cs_net_profit#25, cs_sold_date_sk#26]
Arguments: [cs_call_center_sk#23, cs_ext_sales_price#24, cs_net_profit#25, cs_sold_date_sk#26]

(24) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#27]

(25) CometBroadcastHashJoin
Left output [4]: [cs_call_center_sk#23, cs_ext_sales_price#24, cs_net_profit#25, cs_sold_date_sk#26]
Right output [1]: [d_date_sk#27]
Arguments: [cs_sold_date_sk#26], [d_date_sk#27], Inner, BuildRight

(26) CometProject
Input [5]: [cs_call_center_sk#23, cs_ext_sales_price#24, cs_net_profit#25, cs_sold_date_sk#26, d_date_sk#27]
Arguments: [cs_call_center_sk#23, cs_ext_sales_price#24, cs_net_profit#25], [cs_call_center_sk#23, cs_ext_sales_price#24, cs_net_profit#25]

(27) CometHashAggregate
Input [3]: [cs_call_center_sk#23, cs_ext_sales_price#24, cs_net_profit#25]
Keys [1]: [cs_call_center_sk#23]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#24)), partial_sum(UnscaledValue(cs_net_profit#25))]

(28) CometExchange
Input [3]: [cs_call_center_sk#23, sum#28, sum#29]
Arguments: hashpartitioning(cs_call_center_sk#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(29) CometHashAggregate
Input [3]: [cs_call_center_sk#23, sum#28, sum#29]
Keys [1]: [cs_call_center_sk#23]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#24)), sum(UnscaledValue(cs_net_profit#25))]

(30) ColumnarToRow [codegen id : 2]
Input [3]: [cs_call_center_sk#23, sales#30, profit#31]

(31) BroadcastExchange
Input [3]: [cs_call_center_sk#23, sales#30, profit#31]
Arguments: IdentityBroadcastMode, [plan_id=3]

(32) CometNativeScan: `spark_catalog`.`default`.`catalog_returns`
Output [3]: [cr_return_amount#32, cr_net_loss#33, cr_returned_date_sk#34]
Arguments: [cr_return_amount#32, cr_net_loss#33, cr_returned_date_sk#34]

(33) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#35]

(34) CometBroadcastHashJoin
Left output [3]: [cr_return_amount#32, cr_net_loss#33, cr_returned_date_sk#34]
Right output [1]: [d_date_sk#35]
Arguments: [cr_returned_date_sk#34], [d_date_sk#35], Inner, BuildRight

(35) CometProject
Input [4]: [cr_return_amount#32, cr_net_loss#33, cr_returned_date_sk#34, d_date_sk#35]
Arguments: [cr_return_amount#32, cr_net_loss#33], [cr_return_amount#32, cr_net_loss#33]

(36) CometHashAggregate
Input [2]: [cr_return_amount#32, cr_net_loss#33]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#32)), partial_sum(UnscaledValue(cr_net_loss#33))]

(37) CometExchange
Input [2]: [sum#36, sum#37]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(38) CometHashAggregate
Input [2]: [sum#36, sum#37]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#32)), sum(UnscaledValue(cr_net_loss#33))]

(39) ColumnarToRow
Input [2]: [returns#38, profit_loss#39]

(40) BroadcastNestedLoopJoin [codegen id : 3]
Join type: Inner
Join condition: None

(41) Project [codegen id : 3]
Output [5]: [sales#30, returns#38, (profit#31 - profit_loss#39) AS profit#40, catalog channel AS channel#41, cs_call_center_sk#23 AS id#42]
Input [5]: [cs_call_center_sk#23, sales#30, profit#31, returns#38, profit_loss#39]

(42) ReusedExchange [Reuses operator id: 15]
Output [3]: [wp_web_page_sk#43, sum#44, sum#45]

(43) CometHashAggregate
Input [3]: [wp_web_page_sk#43, sum#44, sum#45]
Keys [1]: [wp_web_page_sk#43]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#46)), sum(UnscaledValue(ws_net_profit#47))]

(44) ReusedExchange [Reuses operator id: 19]
Output [3]: [wp_web_page_sk#48, returns#49, profit_loss#50]

(45) CometBroadcastHashJoin
Left output [3]: [wp_web_page_sk#43, sales#51, profit#52]
Right output [3]: [wp_web_page_sk#48, returns#49, profit_loss#50]
Arguments: [wp_web_page_sk#43], [wp_web_page_sk#48], LeftOuter, BuildRight

(46) CometProject
Input [6]: [wp_web_page_sk#43, sales#51, profit#52, wp_web_page_sk#48, returns#49, profit_loss#50]
Arguments: [sales#51, returns#53, profit#54, channel#55, id#56], [sales#51, coalesce(returns#49, 0.00) AS returns#53, (profit#52 - coalesce(profit_loss#50, 0.00)) AS profit#54, web channel AS channel#55, wp_web_page_sk#43 AS id#56]

(47) ColumnarToRow [codegen id : 4]
Input [5]: [sales#51, returns#53, profit#54, channel#55, id#56]

(48) Union

(49) Expand [codegen id : 5]
Input [5]: [sales#17, returns#19, profit#20, channel#21, id#22]
Arguments: [[sales#17, returns#19, profit#20, channel#21, id#22, 0], [sales#17, returns#19, profit#20, channel#21, null, 1], [sales#17, returns#19, profit#20, null, null, 3]], [sales#17, returns#19, profit#20, channel#57, id#58, spark_grouping_id#59]

(50) HashAggregate [codegen id : 5]
Input [6]: [sales#17, returns#19, profit#20, channel#57, id#58, spark_grouping_id#59]
Keys [3]: [channel#57, id#58, spark_grouping_id#59]
Functions [3]: [partial_sum(sales#17), partial_sum(returns#19), partial_sum(profit#20)]
Aggregate Attributes [6]: [sum#60, isEmpty#61, sum#62, isEmpty#63, sum#64, isEmpty#65]
Results [9]: [channel#57, id#58, spark_grouping_id#59, sum#66, isEmpty#67, sum#68, isEmpty#69, sum#70, isEmpty#71]

(51) Exchange
Input [9]: [channel#57, id#58, spark_grouping_id#59, sum#66, isEmpty#67, sum#68, isEmpty#69, sum#70, isEmpty#71]
Arguments: hashpartitioning(channel#57, id#58, spark_grouping_id#59, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(52) HashAggregate [codegen id : 6]
Input [9]: [channel#57, id#58, spark_grouping_id#59, sum#66, isEmpty#67, sum#68, isEmpty#69, sum#70, isEmpty#71]
Keys [3]: [channel#57, id#58, spark_grouping_id#59]
Functions [3]: [sum(sales#17), sum(returns#19), sum(profit#20)]
Aggregate Attributes [3]: [sum(sales#17)#72, sum(returns#19)#73, sum(profit#20)#74]
Results [5]: [channel#57, id#58, sum(sales#17)#72 AS sales#75, sum(returns#19)#73 AS returns#76, sum(profit#20)#74 AS profit#77]

(53) TakeOrderedAndProject
Input [5]: [channel#57, id#58, sales#75, returns#76, profit#77]
Arguments: 100, [channel#57 ASC NULLS FIRST, id#58 ASC NULLS FIRST], [channel#57, id#58, sales#75, returns#76, profit#77]

