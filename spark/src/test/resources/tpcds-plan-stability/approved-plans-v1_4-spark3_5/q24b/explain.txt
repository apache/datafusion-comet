== Physical Plan ==
* Filter (40)
+- * HashAggregate (39)
   +- Exchange (38)
      +- * HashAggregate (37)
         +- * HashAggregate (36)
            +- Exchange (35)
               +- * HashAggregate (34)
                  +- * Project (33)
                     +- * BroadcastHashJoin Inner BuildRight (32)
                        :- * ColumnarToRow (27)
                        :  +- CometProject (26)
                        :     +- CometBroadcastHashJoin (25)
                        :        :- CometProject (21)
                        :        :  +- CometBroadcastHashJoin (20)
                        :        :     :- CometProject (16)
                        :        :     :  +- CometBroadcastHashJoin (15)
                        :        :     :     :- CometProject (10)
                        :        :     :     :  +- CometHashJoin (9)
                        :        :     :     :     :- CometExchange (4)
                        :        :     :     :     :  +- CometProject (3)
                        :        :     :     :     :     +- CometFilter (2)
                        :        :     :     :     :        +- CometScan parquet spark_catalog.default.store_sales (1)
                        :        :     :     :     +- CometExchange (8)
                        :        :     :     :        +- CometProject (7)
                        :        :     :     :           +- CometFilter (6)
                        :        :     :     :              +- CometScan parquet spark_catalog.default.store_returns (5)
                        :        :     :     +- CometBroadcastExchange (14)
                        :        :     :        +- CometProject (13)
                        :        :     :           +- CometFilter (12)
                        :        :     :              +- CometScan parquet spark_catalog.default.store (11)
                        :        :     +- CometBroadcastExchange (19)
                        :        :        +- CometFilter (18)
                        :        :           +- CometScan parquet spark_catalog.default.item (17)
                        :        +- CometBroadcastExchange (24)
                        :           +- CometFilter (23)
                        :              +- CometScan parquet spark_catalog.default.customer (22)
                        +- BroadcastExchange (31)
                           +- * ColumnarToRow (30)
                              +- CometFilter (29)
                                 +- CometScan parquet spark_catalog.default.customer_address (28)


(1) CometScan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(3) CometProject
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(4) CometExchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(5) CometScan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(6) CometFilter
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(7) CometProject
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_item_sk#7, sr_ticket_number#8]

(8) CometExchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometHashJoin
Left output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Right output [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_ticket_number#4, ss_item_sk#1], [sr_ticket_number#8, sr_item_sk#7], Inner, BuildRight

(10) CometProject
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]

(11) CometScan parquet spark_catalog.default.store
Output [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(12) CometFilter
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Condition : (((isnotnull(s_market_id#12) AND (s_market_id#12 = 8)) AND isnotnull(s_store_sk#10)) AND isnotnull(s_zip#14))

(13) CometProject
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14], [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(14) CometBroadcastExchange
Input [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(15) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Right output [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_store_sk#3], [s_store_sk#10], Inner, BuildRight

(16) CometProject
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14], [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]

(17) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,chiffon             ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(18) CometFilter
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Condition : ((isnotnull(i_color#18) AND (i_color#18 = chiffon             )) AND isnotnull(i_item_sk#15))

(19) CometBroadcastExchange
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(20) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Right output [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [ss_item_sk#1], [i_item_sk#15], Inner, BuildRight

(21) CometProject
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20], [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(22) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(23) CometFilter
Input [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Condition : (isnotnull(c_customer_sk#21) AND isnotnull(c_birth_country#24))

(24) CometBroadcastExchange
Input [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Arguments: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]

(25) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Right output [4]: [c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Arguments: [ss_customer_sk#2], [c_customer_sk#21], Inner, BuildRight

(26) CometProject
Input [14]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_customer_sk#21, c_first_name#22, c_last_name#23, c_birth_country#24]
Arguments: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24], [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24]

(27) ColumnarToRow [codegen id : 2]
Input [12]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24]

(28) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_state#25, ca_zip#26, ca_country#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_state:string,ca_zip:string,ca_country:string>

(29) CometFilter
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Condition : (isnotnull(ca_country#27) AND isnotnull(ca_zip#26))

(30) ColumnarToRow [codegen id : 1]
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]

(31) BroadcastExchange
Input [3]: [ca_state#25, ca_zip#26, ca_country#27]
Arguments: HashedRelationBroadcastMode(List(upper(input[2, string, false]), input[1, string, false]),false), [plan_id=3]

(32) BroadcastHashJoin [codegen id : 2]
Left keys [2]: [c_birth_country#24, s_zip#14]
Right keys [2]: [upper(ca_country#27), ca_zip#26]
Join type: Inner
Join condition: None

(33) Project [codegen id : 2]
Output [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, ca_state#25]
Input [15]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, c_birth_country#24, ca_state#25, ca_zip#26, ca_country#27]

(34) HashAggregate [codegen id : 2]
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#22, c_last_name#23, ca_state#25]
Keys [10]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#28]
Results [11]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#29]

(35) Exchange
Input [11]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#29]
Arguments: hashpartitioning(c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(36) HashAggregate [codegen id : 3]
Input [11]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#29]
Keys [10]: [c_last_name#23, c_first_name#22, s_store_name#11, ca_state#25, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#30]
Results [4]: [c_last_name#23, c_first_name#22, s_store_name#11, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#30,17,2) AS netpaid#31]

(37) HashAggregate [codegen id : 3]
Input [4]: [c_last_name#23, c_first_name#22, s_store_name#11, netpaid#31]
Keys [3]: [c_last_name#23, c_first_name#22, s_store_name#11]
Functions [1]: [partial_sum(netpaid#31)]
Aggregate Attributes [2]: [sum#32, isEmpty#33]
Results [5]: [c_last_name#23, c_first_name#22, s_store_name#11, sum#34, isEmpty#35]

(38) Exchange
Input [5]: [c_last_name#23, c_first_name#22, s_store_name#11, sum#34, isEmpty#35]
Arguments: hashpartitioning(c_last_name#23, c_first_name#22, s_store_name#11, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(39) HashAggregate [codegen id : 4]
Input [5]: [c_last_name#23, c_first_name#22, s_store_name#11, sum#34, isEmpty#35]
Keys [3]: [c_last_name#23, c_first_name#22, s_store_name#11]
Functions [1]: [sum(netpaid#31)]
Aggregate Attributes [1]: [sum(netpaid#31)#36]
Results [4]: [c_last_name#23, c_first_name#22, s_store_name#11, sum(netpaid#31)#36 AS paid#37]

(40) Filter [codegen id : 4]
Input [4]: [c_last_name#23, c_first_name#22, s_store_name#11, paid#37]
Condition : (isnotnull(paid#37) AND (cast(paid#37 as decimal(33,8)) > cast(Subquery scalar-subquery#38, [id=#39] as decimal(33,8))))

===== Subqueries =====

Subquery:1 Hosting operator id = 40 Hosting Expression = Subquery scalar-subquery#38, [id=#39]
* HashAggregate (65)
+- Exchange (64)
   +- * HashAggregate (63)
      +- * HashAggregate (62)
         +- Exchange (61)
            +- * HashAggregate (60)
               +- * Project (59)
                  +- * BroadcastHashJoin Inner BuildRight (58)
                     :- * ColumnarToRow (56)
                     :  +- CometProject (55)
                     :     +- CometBroadcastHashJoin (54)
                     :        :- CometProject (52)
                     :        :  +- CometBroadcastHashJoin (51)
                     :        :     :- CometProject (47)
                     :        :     :  +- CometBroadcastHashJoin (46)
                     :        :     :     :- CometProject (44)
                     :        :     :     :  +- CometHashJoin (43)
                     :        :     :     :     :- ReusedExchange (41)
                     :        :     :     :     +- ReusedExchange (42)
                     :        :     :     +- ReusedExchange (45)
                     :        :     +- CometBroadcastExchange (50)
                     :        :        +- CometFilter (49)
                     :        :           +- CometScan parquet spark_catalog.default.item (48)
                     :        +- ReusedExchange (53)
                     +- ReusedExchange (57)


(41) ReusedExchange [Reuses operator id: 4]
Output [5]: [ss_item_sk#40, ss_customer_sk#41, ss_store_sk#42, ss_ticket_number#43, ss_net_paid#44]

(42) ReusedExchange [Reuses operator id: 8]
Output [2]: [sr_item_sk#45, sr_ticket_number#46]

(43) CometHashJoin
Left output [5]: [ss_item_sk#40, ss_customer_sk#41, ss_store_sk#42, ss_ticket_number#43, ss_net_paid#44]
Right output [2]: [sr_item_sk#45, sr_ticket_number#46]
Arguments: [ss_ticket_number#43, ss_item_sk#40], [sr_ticket_number#46, sr_item_sk#45], Inner, BuildRight

(44) CometProject
Input [7]: [ss_item_sk#40, ss_customer_sk#41, ss_store_sk#42, ss_ticket_number#43, ss_net_paid#44, sr_item_sk#45, sr_ticket_number#46]
Arguments: [ss_item_sk#40, ss_customer_sk#41, ss_store_sk#42, ss_net_paid#44], [ss_item_sk#40, ss_customer_sk#41, ss_store_sk#42, ss_net_paid#44]

(45) ReusedExchange [Reuses operator id: 14]
Output [4]: [s_store_sk#47, s_store_name#48, s_state#49, s_zip#50]

(46) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#40, ss_customer_sk#41, ss_store_sk#42, ss_net_paid#44]
Right output [4]: [s_store_sk#47, s_store_name#48, s_state#49, s_zip#50]
Arguments: [ss_store_sk#42], [s_store_sk#47], Inner, BuildRight

(47) CometProject
Input [8]: [ss_item_sk#40, ss_customer_sk#41, ss_store_sk#42, ss_net_paid#44, s_store_sk#47, s_store_name#48, s_state#49, s_zip#50]
Arguments: [ss_item_sk#40, ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50], [ss_item_sk#40, ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50]

(48) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#51, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(49) CometFilter
Input [6]: [i_item_sk#51, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]
Condition : isnotnull(i_item_sk#51)

(50) CometBroadcastExchange
Input [6]: [i_item_sk#51, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]
Arguments: [i_item_sk#51, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]

(51) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#40, ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50]
Right output [6]: [i_item_sk#51, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]
Arguments: [ss_item_sk#40], [i_item_sk#51], Inner, BuildRight

(52) CometProject
Input [12]: [ss_item_sk#40, ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_item_sk#51, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]
Arguments: [ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56], [ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]

(53) ReusedExchange [Reuses operator id: 24]
Output [4]: [c_customer_sk#57, c_first_name#58, c_last_name#59, c_birth_country#60]

(54) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56]
Right output [4]: [c_customer_sk#57, c_first_name#58, c_last_name#59, c_birth_country#60]
Arguments: [ss_customer_sk#41], [c_customer_sk#57], Inner, BuildRight

(55) CometProject
Input [14]: [ss_customer_sk#41, ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56, c_customer_sk#57, c_first_name#58, c_last_name#59, c_birth_country#60]
Arguments: [ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56, c_first_name#58, c_last_name#59, c_birth_country#60], [ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56, c_first_name#58, c_last_name#59, c_birth_country#60]

(56) ColumnarToRow [codegen id : 2]
Input [12]: [ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56, c_first_name#58, c_last_name#59, c_birth_country#60]

(57) ReusedExchange [Reuses operator id: 31]
Output [3]: [ca_state#61, ca_zip#62, ca_country#63]

(58) BroadcastHashJoin [codegen id : 2]
Left keys [2]: [c_birth_country#60, s_zip#50]
Right keys [2]: [upper(ca_country#63), ca_zip#62]
Join type: Inner
Join condition: None

(59) Project [codegen id : 2]
Output [11]: [ss_net_paid#44, s_store_name#48, s_state#49, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56, c_first_name#58, c_last_name#59, ca_state#61]
Input [15]: [ss_net_paid#44, s_store_name#48, s_state#49, s_zip#50, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56, c_first_name#58, c_last_name#59, c_birth_country#60, ca_state#61, ca_zip#62, ca_country#63]

(60) HashAggregate [codegen id : 2]
Input [11]: [ss_net_paid#44, s_store_name#48, s_state#49, i_current_price#52, i_size#53, i_color#54, i_units#55, i_manager_id#56, c_first_name#58, c_last_name#59, ca_state#61]
Keys [10]: [c_last_name#59, c_first_name#58, s_store_name#48, ca_state#61, s_state#49, i_color#54, i_current_price#52, i_manager_id#56, i_units#55, i_size#53]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#44))]
Aggregate Attributes [1]: [sum#64]
Results [11]: [c_last_name#59, c_first_name#58, s_store_name#48, ca_state#61, s_state#49, i_color#54, i_current_price#52, i_manager_id#56, i_units#55, i_size#53, sum#65]

(61) Exchange
Input [11]: [c_last_name#59, c_first_name#58, s_store_name#48, ca_state#61, s_state#49, i_color#54, i_current_price#52, i_manager_id#56, i_units#55, i_size#53, sum#65]
Arguments: hashpartitioning(c_last_name#59, c_first_name#58, s_store_name#48, ca_state#61, s_state#49, i_color#54, i_current_price#52, i_manager_id#56, i_units#55, i_size#53, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(62) HashAggregate [codegen id : 3]
Input [11]: [c_last_name#59, c_first_name#58, s_store_name#48, ca_state#61, s_state#49, i_color#54, i_current_price#52, i_manager_id#56, i_units#55, i_size#53, sum#65]
Keys [10]: [c_last_name#59, c_first_name#58, s_store_name#48, ca_state#61, s_state#49, i_color#54, i_current_price#52, i_manager_id#56, i_units#55, i_size#53]
Functions [1]: [sum(UnscaledValue(ss_net_paid#44))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#44))#30]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#44))#30,17,2) AS netpaid#66]

(63) HashAggregate [codegen id : 3]
Input [1]: [netpaid#66]
Keys: []
Functions [1]: [partial_avg(netpaid#66)]
Aggregate Attributes [2]: [sum#67, count#68]
Results [2]: [sum#69, count#70]

(64) Exchange
Input [2]: [sum#69, count#70]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(65) HashAggregate [codegen id : 4]
Input [2]: [sum#69, count#70]
Keys: []
Functions [1]: [avg(netpaid#66)]
Aggregate Attributes [1]: [avg(netpaid#66)#71]
Results [1]: [(0.05 * avg(netpaid#66)#71) AS (0.05 * avg(netpaid))#72]


