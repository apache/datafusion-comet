== Physical Plan ==
* CometColumnarToRow (40)
+- CometTakeOrderedAndProject (39)
   +- CometFilter (38)
      +- CometHashAggregate (37)
         +- CometExchange (36)
            +- CometHashAggregate (35)
               +- CometProject (34)
                  +- CometBroadcastHashJoin (33)
                     :- CometProject (19)
                     :  +- CometBroadcastHashJoin (18)
                     :     :- CometProject (13)
                     :     :  +- CometBroadcastHashJoin (12)
                     :     :     :- CometProject (8)
                     :     :     :  +- CometBroadcastHashJoin (7)
                     :     :     :     :- CometProject (3)
                     :     :     :     :  +- CometFilter (2)
                     :     :     :     :     +- CometNativeScan parquet spark_catalog.default.customer_address (1)
                     :     :     :     +- CometBroadcastExchange (6)
                     :     :     :        +- CometFilter (5)
                     :     :     :           +- CometNativeScan parquet spark_catalog.default.customer (4)
                     :     :     +- CometBroadcastExchange (11)
                     :     :        +- CometFilter (10)
                     :     :           +- CometNativeScan parquet spark_catalog.default.store_sales (9)
                     :     +- CometBroadcastExchange (17)
                     :        +- CometProject (16)
                     :           +- CometFilter (15)
                     :              +- CometNativeScan parquet spark_catalog.default.date_dim (14)
                     +- CometBroadcastExchange (32)
                        +- CometProject (31)
                           +- CometBroadcastHashJoin (30)
                              :- CometFilter (21)
                              :  +- CometNativeScan parquet spark_catalog.default.item (20)
                              +- CometBroadcastExchange (29)
                                 +- CometFilter (28)
                                    +- CometHashAggregate (27)
                                       +- CometExchange (26)
                                          +- CometHashAggregate (25)
                                             +- CometProject (24)
                                                +- CometFilter (23)
                                                   +- CometNativeScan parquet spark_catalog.default.item (22)


(1) CometNativeScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) CometFilter
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : isnotnull(ca_address_sk#1)

(3) CometProject
Input [2]: [ca_address_sk#1, ca_state#2]
Arguments: [ca_address_sk#1, ca_state#3], [ca_address_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#2, 2, true, false, true) AS ca_state#3]

(4) CometNativeScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(5) CometFilter
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_customer_sk#4))

(6) CometBroadcastExchange
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#4, c_current_addr_sk#5]

(7) CometBroadcastHashJoin
Left output [2]: [ca_address_sk#1, ca_state#3]
Right output [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: [ca_address_sk#1], [c_current_addr_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ca_address_sk#1, ca_state#3, c_customer_sk#4, c_current_addr_sk#5]
Arguments: [ca_state#3, c_customer_sk#4], [ca_state#3, c_customer_sk#4]

(9) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#8)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>

(10) CometFilter
Input [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Condition : (isnotnull(ss_customer_sk#7) AND isnotnull(ss_item_sk#6))

(11) CometBroadcastExchange
Input [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Arguments: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]

(12) CometBroadcastHashJoin
Left output [2]: [ca_state#3, c_customer_sk#4]
Right output [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Arguments: [c_customer_sk#4], [ss_customer_sk#7], Inner, BuildRight

(13) CometProject
Input [5]: [ca_state#3, c_customer_sk#4, ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Arguments: [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8], [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8]

(14) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_month_seq#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(15) CometFilter
Input [2]: [d_date_sk#9, d_month_seq#10]
Condition : ((isnotnull(d_month_seq#10) AND (d_month_seq#10 = Subquery scalar-subquery#11, [id=#12])) AND isnotnull(d_date_sk#9))

(16) CometProject
Input [2]: [d_date_sk#9, d_month_seq#10]
Arguments: [d_date_sk#9], [d_date_sk#9]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: [d_date_sk#9]

(18) CometBroadcastHashJoin
Left output [3]: [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#9]
Arguments: [ss_sold_date_sk#8], [d_date_sk#9], Inner, BuildRight

(19) CometProject
Input [4]: [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8, d_date_sk#9]
Arguments: [ca_state#3, ss_item_sk#6], [ca_state#3, ss_item_sk#6]

(20) CometNativeScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#13, i_current_price#14, i_category#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(21) CometFilter
Input [3]: [i_item_sk#13, i_current_price#14, i_category#15]
Condition : (isnotnull(i_current_price#14) AND isnotnull(i_item_sk#13))

(22) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_current_price#16, i_category#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(23) CometFilter
Input [2]: [i_current_price#16, i_category#17]
Condition : isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#17, 50, true, false, true))

(24) CometProject
Input [2]: [i_current_price#16, i_category#17]
Arguments: [i_current_price#16, i_category#18], [i_current_price#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#17, 50, true, false, true) AS i_category#18]

(25) CometHashAggregate
Input [2]: [i_current_price#16, i_category#18]
Keys [1]: [i_category#18]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#16))]

(26) CometExchange
Input [3]: [i_category#18, sum#19, count#20]
Arguments: hashpartitioning(i_category#18, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(27) CometHashAggregate
Input [3]: [i_category#18, sum#19, count#20]
Keys [1]: [i_category#18]
Functions [1]: [avg(UnscaledValue(i_current_price#16))]

(28) CometFilter
Input [2]: [avg(i_current_price)#21, i_category#18]
Condition : isnotnull(avg(i_current_price)#21)

(29) CometBroadcastExchange
Input [2]: [avg(i_current_price)#21, i_category#18]
Arguments: [avg(i_current_price)#21, i_category#18]

(30) CometBroadcastHashJoin
Left output [3]: [i_item_sk#13, i_current_price#14, i_category#15]
Right output [2]: [avg(i_current_price)#21, i_category#18]
Arguments: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#15, 50, true, false, true)], [i_category#18], Inner, (cast(i_current_price#14 as decimal(14,7)) > (1.2 * avg(i_current_price)#21)), BuildRight

(31) CometProject
Input [5]: [i_item_sk#13, i_current_price#14, i_category#15, avg(i_current_price)#21, i_category#18]
Arguments: [i_item_sk#13], [i_item_sk#13]

(32) CometBroadcastExchange
Input [1]: [i_item_sk#13]
Arguments: [i_item_sk#13]

(33) CometBroadcastHashJoin
Left output [2]: [ca_state#3, ss_item_sk#6]
Right output [1]: [i_item_sk#13]
Arguments: [ss_item_sk#6], [i_item_sk#13], Inner, BuildRight

(34) CometProject
Input [3]: [ca_state#3, ss_item_sk#6, i_item_sk#13]
Arguments: [ca_state#3], [ca_state#3]

(35) CometHashAggregate
Input [1]: [ca_state#3]
Keys [1]: [ca_state#3]
Functions [1]: [partial_count(1)]

(36) CometExchange
Input [2]: [ca_state#3, count#22]
Arguments: hashpartitioning(ca_state#3, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(37) CometHashAggregate
Input [2]: [ca_state#3, count#22]
Keys [1]: [ca_state#3]
Functions [1]: [count(1)]

(38) CometFilter
Input [2]: [state#23, cnt#24]
Condition : (cnt#24 >= 10)

(39) CometTakeOrderedAndProject
Input [2]: [state#23, cnt#24]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[cnt#24 ASC NULLS FIRST], output=[state#23,cnt#24]), [state#23, cnt#24], 100, 0, [cnt#24 ASC NULLS FIRST], [state#23, cnt#24]

(40) CometColumnarToRow [codegen id : 1]
Input [2]: [state#23, cnt#24]

===== Subqueries =====

Subquery:1 Hosting operator id = 15 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
* CometColumnarToRow (47)
+- CometHashAggregate (46)
   +- CometExchange (45)
      +- CometHashAggregate (44)
         +- CometProject (43)
            +- CometFilter (42)
               +- CometNativeScan parquet spark_catalog.default.date_dim (41)


(41) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#25, d_year#26, d_moy#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(42) CometFilter
Input [3]: [d_month_seq#25, d_year#26, d_moy#27]
Condition : (((isnotnull(d_year#26) AND isnotnull(d_moy#27)) AND (d_year#26 = 2000)) AND (d_moy#27 = 1))

(43) CometProject
Input [3]: [d_month_seq#25, d_year#26, d_moy#27]
Arguments: [d_month_seq#25], [d_month_seq#25]

(44) CometHashAggregate
Input [1]: [d_month_seq#25]
Keys [1]: [d_month_seq#25]
Functions: []

(45) CometExchange
Input [1]: [d_month_seq#25]
Arguments: hashpartitioning(d_month_seq#25, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(46) CometHashAggregate
Input [1]: [d_month_seq#25]
Keys [1]: [d_month_seq#25]
Functions: []

(47) CometColumnarToRow [codegen id : 1]
Input [1]: [d_month_seq#25]


