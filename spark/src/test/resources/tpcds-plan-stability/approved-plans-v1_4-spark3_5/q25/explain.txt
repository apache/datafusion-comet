== Physical Plan ==
TakeOrderedAndProject (42)
+- * HashAggregate (41)
   +- Exchange (40)
      +- * ColumnarToRow (39)
         +- CometHashAggregate (38)
            +- CometProject (37)
               +- CometBroadcastHashJoin (36)
                  :- CometProject (32)
                  :  +- CometBroadcastHashJoin (31)
                  :     :- CometProject (27)
                  :     :  +- CometBroadcastHashJoin (26)
                  :     :     :- CometProject (24)
                  :     :     :  +- CometBroadcastHashJoin (23)
                  :     :     :     :- CometProject (18)
                  :     :     :     :  +- CometBroadcastHashJoin (17)
                  :     :     :     :     :- CometProject (12)
                  :     :     :     :     :  +- CometBroadcastHashJoin (11)
                  :     :     :     :     :     :- CometProject (7)
                  :     :     :     :     :     :  +- CometBroadcastHashJoin (6)
                  :     :     :     :     :     :     :- CometFilter (2)
                  :     :     :     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                  :     :     :     :     :     :     +- CometBroadcastExchange (5)
                  :     :     :     :     :     :        +- CometFilter (4)
                  :     :     :     :     :     :           +- CometScan parquet spark_catalog.default.store_returns (3)
                  :     :     :     :     :     +- CometBroadcastExchange (10)
                  :     :     :     :     :        +- CometFilter (9)
                  :     :     :     :     :           +- CometScan parquet spark_catalog.default.catalog_sales (8)
                  :     :     :     :     +- CometBroadcastExchange (16)
                  :     :     :     :        +- CometProject (15)
                  :     :     :     :           +- CometFilter (14)
                  :     :     :     :              +- CometScan parquet spark_catalog.default.date_dim (13)
                  :     :     :     +- CometBroadcastExchange (22)
                  :     :     :        +- CometProject (21)
                  :     :     :           +- CometFilter (20)
                  :     :     :              +- CometScan parquet spark_catalog.default.date_dim (19)
                  :     :     +- ReusedExchange (25)
                  :     +- CometBroadcastExchange (30)
                  :        +- CometFilter (29)
                  :           +- CometScan parquet spark_catalog.default.store (28)
                  +- CometBroadcastExchange (35)
                     +- CometFilter (34)
                        +- CometScan parquet spark_catalog.default.item (33)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk), IsNotNull(ss_ticket_number), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3))

(3) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#12), dynamicpruningexpression(sr_returned_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(sr_customer_sk), IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_customer_sk:int,sr_ticket_number:int,sr_net_loss:decimal(7,2)>

(4) CometFilter
Input [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Condition : ((isnotnull(sr_customer_sk#9) AND isnotnull(sr_item_sk#8)) AND isnotnull(sr_ticket_number#10))

(5) CometBroadcastExchange
Input [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]

(6) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6]
Right output [5]: [sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4], [sr_customer_sk#9, sr_item_sk#8, sr_ticket_number#10], Inner, BuildRight

(7) CometProject
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_ticket_number#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_net_loss#11, sr_returned_date_sk#12], [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_net_loss#11, sr_returned_date_sk#12]

(8) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#17), dynamicpruningexpression(cs_sold_date_sk#17 IN dynamicpruning#18)]
PushedFilters: [IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_item_sk:int,cs_net_profit:decimal(7,2)>

(9) CometFilter
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Condition : (isnotnull(cs_bill_customer_sk#14) AND isnotnull(cs_item_sk#15))

(10) CometBroadcastExchange
Input [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Arguments: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]

(11) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_net_loss#11, sr_returned_date_sk#12]
Right output [4]: [cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Arguments: [sr_customer_sk#9, sr_item_sk#8], [cs_bill_customer_sk#14, cs_item_sk#15], Inner, BuildRight

(12) CometProject
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_item_sk#8, sr_customer_sk#9, sr_net_loss#11, sr_returned_date_sk#12, cs_bill_customer_sk#14, cs_item_sk#15, cs_net_profit#16, cs_sold_date_sk#17]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17], [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17]

(13) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#19, d_year#20, d_moy#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(14) CometFilter
Input [3]: [d_date_sk#19, d_year#20, d_moy#21]
Condition : ((((isnotnull(d_moy#21) AND isnotnull(d_year#20)) AND (d_moy#21 = 4)) AND (d_year#20 = 2001)) AND isnotnull(d_date_sk#19))

(15) CometProject
Input [3]: [d_date_sk#19, d_year#20, d_moy#21]
Arguments: [d_date_sk#19], [d_date_sk#19]

(16) CometBroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: [d_date_sk#19]

(17) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17]
Right output [1]: [d_date_sk#19]
Arguments: [ss_sold_date_sk#6], [d_date_sk#19], Inner, BuildRight

(18) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, ss_sold_date_sk#6, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17, d_date_sk#19]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17], [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17]

(19) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#22, d_year#23, d_moy#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(20) CometFilter
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]
Condition : (((((isnotnull(d_moy#24) AND isnotnull(d_year#23)) AND (d_moy#24 >= 4)) AND (d_moy#24 <= 10)) AND (d_year#23 = 2001)) AND isnotnull(d_date_sk#22))

(21) CometProject
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]
Arguments: [d_date_sk#22], [d_date_sk#22]

(22) CometBroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: [d_date_sk#22]

(23) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17]
Right output [1]: [d_date_sk#22]
Arguments: [sr_returned_date_sk#12], [d_date_sk#22], Inner, BuildRight

(24) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, sr_returned_date_sk#12, cs_net_profit#16, cs_sold_date_sk#17, d_date_sk#22]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, cs_sold_date_sk#17], [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, cs_sold_date_sk#17]

(25) ReusedExchange [Reuses operator id: 22]
Output [1]: [d_date_sk#25]

(26) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, cs_sold_date_sk#17]
Right output [1]: [d_date_sk#25]
Arguments: [cs_sold_date_sk#17], [d_date_sk#25], Inner, BuildRight

(27) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, cs_sold_date_sk#17, d_date_sk#25]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16], [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16]

(28) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#26, s_store_id#27, s_store_name#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(29) CometFilter
Input [3]: [s_store_sk#26, s_store_id#27, s_store_name#28]
Condition : isnotnull(s_store_sk#26)

(30) CometBroadcastExchange
Input [3]: [s_store_sk#26, s_store_id#27, s_store_name#28]
Arguments: [s_store_sk#26, s_store_id#27, s_store_name#28]

(31) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16]
Right output [3]: [s_store_sk#26, s_store_id#27, s_store_name#28]
Arguments: [ss_store_sk#3], [s_store_sk#26], Inner, BuildRight

(32) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_sk#26, s_store_id#27, s_store_name#28]
Arguments: [ss_item_sk#1, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#27, s_store_name#28], [ss_item_sk#1, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#27, s_store_name#28]

(33) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string>

(34) CometFilter
Input [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]
Condition : isnotnull(i_item_sk#29)

(35) CometBroadcastExchange
Input [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]
Arguments: [i_item_sk#29, i_item_id#30, i_item_desc#31]

(36) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#27, s_store_name#28]
Right output [3]: [i_item_sk#29, i_item_id#30, i_item_desc#31]
Arguments: [ss_item_sk#1], [i_item_sk#29], Inner, BuildRight

(37) CometProject
Input [9]: [ss_item_sk#1, ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#27, s_store_name#28, i_item_sk#29, i_item_id#30, i_item_desc#31]
Arguments: [ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#27, s_store_name#28, i_item_id#30, i_item_desc#31], [ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#27, s_store_name#28, i_item_id#30, i_item_desc#31]

(38) CometHashAggregate
Input [7]: [ss_net_profit#5, sr_net_loss#11, cs_net_profit#16, s_store_id#27, s_store_name#28, i_item_id#30, i_item_desc#31]
Keys [4]: [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28]
Functions [3]: [partial_sum(UnscaledValue(ss_net_profit#5)), partial_sum(UnscaledValue(sr_net_loss#11)), partial_sum(UnscaledValue(cs_net_profit#16))]

(39) ColumnarToRow [codegen id : 1]
Input [7]: [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28, sum#32, sum#33, sum#34]

(40) Exchange
Input [7]: [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28, sum#32, sum#33, sum#34]
Arguments: hashpartitioning(i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(41) HashAggregate [codegen id : 2]
Input [7]: [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28, sum#32, sum#33, sum#34]
Keys [4]: [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28]
Functions [3]: [sum(UnscaledValue(ss_net_profit#5)), sum(UnscaledValue(sr_net_loss#11)), sum(UnscaledValue(cs_net_profit#16))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_net_profit#5))#35, sum(UnscaledValue(sr_net_loss#11))#36, sum(UnscaledValue(cs_net_profit#16))#37]
Results [7]: [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28, MakeDecimal(sum(UnscaledValue(ss_net_profit#5))#35,17,2) AS store_sales_profit#38, MakeDecimal(sum(UnscaledValue(sr_net_loss#11))#36,17,2) AS store_returns_loss#39, MakeDecimal(sum(UnscaledValue(cs_net_profit#16))#37,17,2) AS catalog_sales_profit#40]

(42) TakeOrderedAndProject
Input [7]: [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28, store_sales_profit#38, store_returns_loss#39, catalog_sales_profit#40]
Arguments: 100, [i_item_id#30 ASC NULLS FIRST, i_item_desc#31 ASC NULLS FIRST, s_store_id#27 ASC NULLS FIRST, s_store_name#28 ASC NULLS FIRST], [i_item_id#30, i_item_desc#31, s_store_id#27, s_store_name#28, store_sales_profit#38, store_returns_loss#39, catalog_sales_profit#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (47)
+- * ColumnarToRow (46)
   +- CometProject (45)
      +- CometFilter (44)
         +- CometScan parquet spark_catalog.default.date_dim (43)


(43) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#19, d_year#20, d_moy#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,4), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(44) CometFilter
Input [3]: [d_date_sk#19, d_year#20, d_moy#21]
Condition : ((((isnotnull(d_moy#21) AND isnotnull(d_year#20)) AND (d_moy#21 = 4)) AND (d_year#20 = 2001)) AND isnotnull(d_date_sk#19))

(45) CometProject
Input [3]: [d_date_sk#19, d_year#20, d_moy#21]
Arguments: [d_date_sk#19], [d_date_sk#19]

(46) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#19]

(47) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

Subquery:2 Hosting operator id = 3 Hosting Expression = sr_returned_date_sk#12 IN dynamicpruning#13
BroadcastExchange (52)
+- * ColumnarToRow (51)
   +- CometProject (50)
      +- CometFilter (49)
         +- CometScan parquet spark_catalog.default.date_dim (48)


(48) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#22, d_year#23, d_moy#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), GreaterThanOrEqual(d_moy,4), LessThanOrEqual(d_moy,10), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(49) CometFilter
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]
Condition : (((((isnotnull(d_moy#24) AND isnotnull(d_year#23)) AND (d_moy#24 >= 4)) AND (d_moy#24 <= 10)) AND (d_year#23 = 2001)) AND isnotnull(d_date_sk#22))

(50) CometProject
Input [3]: [d_date_sk#22, d_year#23, d_moy#24]
Arguments: [d_date_sk#22], [d_date_sk#22]

(51) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#22]

(52) BroadcastExchange
Input [1]: [d_date_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

Subquery:3 Hosting operator id = 8 Hosting Expression = cs_sold_date_sk#17 IN dynamicpruning#13


