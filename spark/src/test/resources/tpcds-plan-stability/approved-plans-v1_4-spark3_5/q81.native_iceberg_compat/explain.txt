== Physical Plan ==
* ColumnarToRow (47)
+- CometTakeOrderedAndProject (46)
   +- CometProject (45)
      +- CometBroadcastHashJoin (44)
         :- CometProject (40)
         :  +- CometBroadcastHashJoin (39)
         :     :- CometProject (35)
         :     :  +- CometBroadcastHashJoin (34)
         :     :     :- CometFilter (17)
         :     :     :  +- CometHashAggregate (16)
         :     :     :     +- CometExchange (15)
         :     :     :        +- CometHashAggregate (14)
         :     :     :           +- CometProject (13)
         :     :     :              +- CometBroadcastHashJoin (12)
         :     :     :                 :- CometProject (8)
         :     :     :                 :  +- CometBroadcastHashJoin (7)
         :     :     :                 :     :- CometFilter (2)
         :     :     :                 :     :  +- CometScan parquet spark_catalog.default.catalog_returns (1)
         :     :     :                 :     +- CometBroadcastExchange (6)
         :     :     :                 :        +- CometProject (5)
         :     :     :                 :           +- CometFilter (4)
         :     :     :                 :              +- CometScan parquet spark_catalog.default.date_dim (3)
         :     :     :                 +- CometBroadcastExchange (11)
         :     :     :                    +- CometFilter (10)
         :     :     :                       +- CometScan parquet spark_catalog.default.customer_address (9)
         :     :     +- CometBroadcastExchange (33)
         :     :        +- CometFilter (32)
         :     :           +- CometHashAggregate (31)
         :     :              +- CometExchange (30)
         :     :                 +- CometHashAggregate (29)
         :     :                    +- CometHashAggregate (28)
         :     :                       +- CometExchange (27)
         :     :                          +- CometHashAggregate (26)
         :     :                             +- CometProject (25)
         :     :                                +- CometBroadcastHashJoin (24)
         :     :                                   :- CometProject (22)
         :     :                                   :  +- CometBroadcastHashJoin (21)
         :     :                                   :     :- CometFilter (19)
         :     :                                   :     :  +- CometScan parquet spark_catalog.default.catalog_returns (18)
         :     :                                   :     +- ReusedExchange (20)
         :     :                                   +- ReusedExchange (23)
         :     +- CometBroadcastExchange (38)
         :        +- CometFilter (37)
         :           +- CometScan parquet spark_catalog.default.customer (36)
         +- CometBroadcastExchange (43)
            +- CometFilter (42)
               +- CometScan parquet spark_catalog.default.customer_address (41)


(1) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) CometFilter
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : (isnotnull(cr_returning_addr_sk#2) AND isnotnull(cr_returning_customer_sk#1))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_year#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Right output [1]: [d_date_sk#5]
Arguments: [cr_returned_date_sk#4], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#5]
Arguments: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3], [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]

(9) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#7, ca_state#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(10) CometFilter
Input [2]: [ca_address_sk#7, ca_state#8]
Condition : (isnotnull(ca_address_sk#7) AND isnotnull(ca_state#8))

(11) CometBroadcastExchange
Input [2]: [ca_address_sk#7, ca_state#8]
Arguments: [ca_address_sk#7, ca_state#8]

(12) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Right output [2]: [ca_address_sk#7, ca_state#8]
Arguments: [cr_returning_addr_sk#2], [ca_address_sk#7], Inner, BuildRight

(13) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#7, ca_state#8]
Arguments: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#8], [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#8]

(14) CometHashAggregate
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#8]
Keys [2]: [cr_returning_customer_sk#1, ca_state#8]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]

(15) CometExchange
Input [3]: [cr_returning_customer_sk#1, ca_state#8, sum#9]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#8, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(16) CometHashAggregate
Input [3]: [cr_returning_customer_sk#1, ca_state#8, sum#9]
Keys [2]: [cr_returning_customer_sk#1, ca_state#8]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]

(17) CometFilter
Input [3]: [ctr_customer_sk#10, ctr_state#11, ctr_total_return#12]
Condition : isnotnull(ctr_total_return#12)

(18) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15, cr_returned_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#16)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(19) CometFilter
Input [4]: [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15, cr_returned_date_sk#16]
Condition : isnotnull(cr_returning_addr_sk#14)

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#17]

(21) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15, cr_returned_date_sk#16]
Right output [1]: [d_date_sk#17]
Arguments: [cr_returned_date_sk#16], [d_date_sk#17], Inner, BuildRight

(22) CometProject
Input [5]: [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15, cr_returned_date_sk#16, d_date_sk#17]
Arguments: [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15], [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15]

(23) ReusedExchange [Reuses operator id: 11]
Output [2]: [ca_address_sk#18, ca_state#19]

(24) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15]
Right output [2]: [ca_address_sk#18, ca_state#19]
Arguments: [cr_returning_addr_sk#14], [ca_address_sk#18], Inner, BuildRight

(25) CometProject
Input [5]: [cr_returning_customer_sk#13, cr_returning_addr_sk#14, cr_return_amt_inc_tax#15, ca_address_sk#18, ca_state#19]
Arguments: [cr_returning_customer_sk#13, cr_return_amt_inc_tax#15, ca_state#19], [cr_returning_customer_sk#13, cr_return_amt_inc_tax#15, ca_state#19]

(26) CometHashAggregate
Input [3]: [cr_returning_customer_sk#13, cr_return_amt_inc_tax#15, ca_state#19]
Keys [2]: [cr_returning_customer_sk#13, ca_state#19]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#15))]

(27) CometExchange
Input [3]: [cr_returning_customer_sk#13, ca_state#19, sum#20]
Arguments: hashpartitioning(cr_returning_customer_sk#13, ca_state#19, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(28) CometHashAggregate
Input [3]: [cr_returning_customer_sk#13, ca_state#19, sum#20]
Keys [2]: [cr_returning_customer_sk#13, ca_state#19]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#15))]

(29) CometHashAggregate
Input [2]: [ctr_state#21, ctr_total_return#22]
Keys [1]: [ctr_state#21]
Functions [1]: [partial_avg(ctr_total_return#22)]

(30) CometExchange
Input [3]: [ctr_state#21, sum#23, count#24]
Arguments: hashpartitioning(ctr_state#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(31) CometHashAggregate
Input [3]: [ctr_state#21, sum#23, count#24]
Keys [1]: [ctr_state#21]
Functions [1]: [avg(ctr_total_return#22)]

(32) CometFilter
Input [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#25)

(33) CometBroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Arguments: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]

(34) CometBroadcastHashJoin
Left output [3]: [ctr_customer_sk#10, ctr_state#11, ctr_total_return#12]
Right output [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Arguments: [ctr_state#11], [ctr_state#21], Inner, (cast(ctr_total_return#12 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#25), BuildRight

(35) CometProject
Input [5]: [ctr_customer_sk#10, ctr_state#11, ctr_total_return#12, (avg(ctr_total_return) * 1.2)#25, ctr_state#21]
Arguments: [ctr_customer_sk#10, ctr_total_return#12], [ctr_customer_sk#10, ctr_total_return#12]

(36) CometScan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(37) CometFilter
Input [6]: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]
Condition : (isnotnull(c_customer_sk#26) AND isnotnull(c_current_addr_sk#28))

(38) CometBroadcastExchange
Input [6]: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]
Arguments: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]

(39) CometBroadcastHashJoin
Left output [2]: [ctr_customer_sk#10, ctr_total_return#12]
Right output [6]: [c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]
Arguments: [ctr_customer_sk#10], [c_customer_sk#26], Inner, BuildRight

(40) CometProject
Input [8]: [ctr_customer_sk#10, ctr_total_return#12, c_customer_sk#26, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]
Arguments: [ctr_total_return#12, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31], [ctr_total_return#12, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]

(41) CometScan parquet spark_catalog.default.customer_address
Output [12]: [ca_address_sk#32, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(42) CometFilter
Input [12]: [ca_address_sk#32, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43]
Condition : ((isnotnull(ca_state#39) AND (ca_state#39 = GA)) AND isnotnull(ca_address_sk#32))

(43) CometBroadcastExchange
Input [12]: [ca_address_sk#32, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43]
Arguments: [ca_address_sk#32, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43]

(44) CometBroadcastHashJoin
Left output [6]: [ctr_total_return#12, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31]
Right output [12]: [ca_address_sk#32, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43]
Arguments: [c_current_addr_sk#28], [ca_address_sk#32], Inner, BuildRight

(45) CometProject
Input [18]: [ctr_total_return#12, c_customer_id#27, c_current_addr_sk#28, c_salutation#29, c_first_name#30, c_last_name#31, ca_address_sk#32, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43]
Arguments: [c_customer_id#27, c_salutation#29, c_first_name#30, c_last_name#31, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43, ctr_total_return#12], [c_customer_id#27, c_salutation#29, c_first_name#30, c_last_name#31, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43, ctr_total_return#12]

(46) CometTakeOrderedAndProject
Input [16]: [c_customer_id#27, c_salutation#29, c_first_name#30, c_last_name#31, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43, ctr_total_return#12]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[c_customer_id#27 ASC NULLS FIRST,c_salutation#29 ASC NULLS FIRST,c_first_name#30 ASC NULLS FIRST,c_last_name#31 ASC NULLS FIRST,ca_street_number#33 ASC NULLS FIRST,ca_street_name#34 ASC NULLS FIRST,ca_street_type#35 ASC NULLS FIRST,ca_suite_number#36 ASC NULLS FIRST,ca_city#37 ASC NULLS FIRST,ca_county#38 ASC NULLS FIRST,ca_state#39 ASC NULLS FIRST,ca_zip#40 ASC NULLS FIRST,ca_country#41 ASC NULLS FIRST,ca_gmt_offset#42 ASC NULLS FIRST,ca_location_type#43 ASC NULLS FIRST,ctr_total_return#12 ASC NULLS FIRST], output=[c_customer_id#27,c_salutation#29,c_first_name#30,c_last_name#31,ca_street_number#33,ca_street_name#34,ca_street_type#35,ca_suite_number#36,ca_city#37,ca_county#38,ca_state#39,ca_zip#40,ca_country#41,ca_gmt_offset#42,ca_location_type#43,ctr_total_return#12]), [c_customer_id#27, c_salutation#29, c_first_name#30, c_last_name#31, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43, ctr_total_return#12], 100, [c_customer_id#27 ASC NULLS FIRST, c_salutation#29 ASC NULLS FIRST, c_first_name#30 ASC NULLS FIRST, c_last_name#31 ASC NULLS FIRST, ca_street_number#33 ASC NULLS FIRST, ca_street_name#34 ASC NULLS FIRST, ca_street_type#35 ASC NULLS FIRST, ca_suite_number#36 ASC NULLS FIRST, ca_city#37 ASC NULLS FIRST, ca_county#38 ASC NULLS FIRST, ca_state#39 ASC NULLS FIRST, ca_zip#40 ASC NULLS FIRST, ca_country#41 ASC NULLS FIRST, ca_gmt_offset#42 ASC NULLS FIRST, ca_location_type#43 ASC NULLS FIRST, ctr_total_return#12 ASC NULLS FIRST], [c_customer_id#27, c_salutation#29, c_first_name#30, c_last_name#31, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43, ctr_total_return#12]

(47) ColumnarToRow [codegen id : 1]
Input [16]: [c_customer_id#27, c_salutation#29, c_first_name#30, c_last_name#31, ca_street_number#33, ca_street_name#34, ca_street_type#35, ca_suite_number#36, ca_city#37, ca_county#38, ca_state#39, ca_zip#40, ca_country#41, ca_gmt_offset#42, ca_location_type#43, ctr_total_return#12]

