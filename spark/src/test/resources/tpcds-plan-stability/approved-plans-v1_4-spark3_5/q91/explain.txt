== Physical Plan ==
* CometColumnarToRow (45)
+- CometSort (44)
   +- CometColumnarExchange (43)
      +- * HashAggregate (42)
         +- * CometColumnarToRow (41)
            +- CometColumnarExchange (40)
               +- * HashAggregate (39)
                  +- * Project (38)
                     +- * BroadcastHashJoin Inner BuildRight (37)
                        :- * Project (31)
                        :  +- * BroadcastHashJoin Inner BuildRight (30)
                        :     :- * CometColumnarToRow (25)
                        :     :  +- CometProject (24)
                        :     :     +- CometBroadcastHashJoin (23)
                        :     :        :- CometProject (18)
                        :     :        :  +- CometBroadcastHashJoin (17)
                        :     :        :     :- CometProject (13)
                        :     :        :     :  +- CometBroadcastHashJoin (12)
                        :     :        :     :     :- CometProject (7)
                        :     :        :     :     :  +- CometBroadcastHashJoin (6)
                        :     :        :     :     :     :- CometFilter (2)
                        :     :        :     :     :     :  +- CometScan parquet spark_catalog.default.call_center (1)
                        :     :        :     :     :     +- CometBroadcastExchange (5)
                        :     :        :     :     :        +- CometFilter (4)
                        :     :        :     :     :           +- CometScan parquet spark_catalog.default.catalog_returns (3)
                        :     :        :     :     +- CometBroadcastExchange (11)
                        :     :        :     :        +- CometProject (10)
                        :     :        :     :           +- CometFilter (9)
                        :     :        :     :              +- CometScan parquet spark_catalog.default.date_dim (8)
                        :     :        :     +- CometBroadcastExchange (16)
                        :     :        :        +- CometFilter (15)
                        :     :        :           +- CometScan parquet spark_catalog.default.customer (14)
                        :     :        +- CometBroadcastExchange (22)
                        :     :           +- CometProject (21)
                        :     :              +- CometFilter (20)
                        :     :                 +- CometScan parquet spark_catalog.default.customer_address (19)
                        :     +- BroadcastExchange (29)
                        :        +- * Filter (28)
                        :           +- * CometColumnarToRow (27)
                        :              +- CometScan parquet spark_catalog.default.customer_demographics (26)
                        +- BroadcastExchange (36)
                           +- * CometColumnarToRow (35)
                              +- CometProject (34)
                                 +- CometFilter (33)
                                    +- CometScan parquet spark_catalog.default.household_demographics (32)


(1) CometScan parquet spark_catalog.default.call_center
Output [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk)]
ReadSchema: struct<cc_call_center_sk:int,cc_call_center_id:string,cc_name:string,cc_manager:string>

(2) CometFilter
Input [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Condition : isnotnull(cc_call_center_sk#1)

(3) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#8), dynamicpruningexpression(cr_returned_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(cr_call_center_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_call_center_sk:int,cr_net_loss:decimal(7,2)>

(4) CometFilter
Input [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Condition : (isnotnull(cr_call_center_sk#6) AND isnotnull(cr_returning_customer_sk#5))

(5) CometBroadcastExchange
Input [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Arguments: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]

(6) CometBroadcastHashJoin
Left output [4]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4]
Right output [4]: [cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Arguments: [cc_call_center_sk#1], [cr_call_center_sk#6], Inner, BuildRight

(7) CometProject
Input [8]: [cc_call_center_sk#1, cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_call_center_sk#6, cr_net_loss#7, cr_returned_date_sk#8]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8]

(8) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(9) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#12)) AND (d_year#11 = 1998)) AND (d_moy#12 = 11)) AND isnotnull(d_date_sk#10))

(10) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(11) CometBroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: [d_date_sk#10]

(12) CometBroadcastHashJoin
Left output [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8]
Right output [1]: [d_date_sk#10]
Arguments: [cr_returned_date_sk#8], [d_date_sk#10], Inner, BuildRight

(13) CometProject
Input [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, cr_returned_date_sk#8, d_date_sk#10]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7]

(14) CometScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_hdemo_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_hdemo_sk:int,c_current_addr_sk:int>

(15) CometFilter
Input [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Condition : (((isnotnull(c_customer_sk#13) AND isnotnull(c_current_addr_sk#16)) AND isnotnull(c_current_cdemo_sk#14)) AND isnotnull(c_current_hdemo_sk#15))

(16) CometBroadcastExchange
Input [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Arguments: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]

(17) CometBroadcastHashJoin
Left output [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7]
Right output [4]: [c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Arguments: [cr_returning_customer_sk#5], [c_customer_sk#13], Inner, BuildRight

(18) CometProject
Input [9]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_returning_customer_sk#5, cr_net_loss#7, c_customer_sk#13, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]

(19) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#17, ca_gmt_offset#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-7.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(20) CometFilter
Input [2]: [ca_address_sk#17, ca_gmt_offset#18]
Condition : ((isnotnull(ca_gmt_offset#18) AND (ca_gmt_offset#18 = -7.00)) AND isnotnull(ca_address_sk#17))

(21) CometProject
Input [2]: [ca_address_sk#17, ca_gmt_offset#18]
Arguments: [ca_address_sk#17], [ca_address_sk#17]

(22) CometBroadcastExchange
Input [1]: [ca_address_sk#17]
Arguments: [ca_address_sk#17]

(23) CometBroadcastHashJoin
Left output [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16]
Right output [1]: [ca_address_sk#17]
Arguments: [c_current_addr_sk#16], [ca_address_sk#17], Inner, BuildRight

(24) CometProject
Input [8]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15, c_current_addr_sk#16, ca_address_sk#17]
Arguments: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15], [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15]

(25) CometColumnarToRow [codegen id : 3]
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15]

(26) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(27) CometColumnarToRow [codegen id : 1]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(28) Filter [codegen id : 1]
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Condition : ((((rpad(cd_marital_status#20, 1,  ) = M) AND (rpad(cd_education_status#21, 20,  ) = Unknown             )) OR ((rpad(cd_marital_status#20, 1,  ) = W) AND (rpad(cd_education_status#21, 20,  ) = Advanced Degree     ))) AND isnotnull(cd_demo_sk#19))

(29) BroadcastExchange
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(30) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_current_cdemo_sk#14]
Right keys [1]: [cd_demo_sk#19]
Join type: Inner
Join condition: None

(31) Project [codegen id : 3]
Output [7]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_hdemo_sk#15, cd_marital_status#20, cd_education_status#21]
Input [9]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_cdemo_sk#14, c_current_hdemo_sk#15, cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]

(32) CometScan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#22, hd_buy_potential#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_buy_potential), StringStartsWith(hd_buy_potential,Unknown), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_buy_potential:string>

(33) CometFilter
Input [2]: [hd_demo_sk#22, hd_buy_potential#23]
Condition : ((isnotnull(hd_buy_potential#23) AND StartsWith(hd_buy_potential#23, Unknown)) AND isnotnull(hd_demo_sk#22))

(34) CometProject
Input [2]: [hd_demo_sk#22, hd_buy_potential#23]
Arguments: [hd_demo_sk#22], [hd_demo_sk#22]

(35) CometColumnarToRow [codegen id : 2]
Input [1]: [hd_demo_sk#22]

(36) BroadcastExchange
Input [1]: [hd_demo_sk#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(37) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_current_hdemo_sk#15]
Right keys [1]: [hd_demo_sk#22]
Join type: Inner
Join condition: None

(38) Project [codegen id : 3]
Output [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, cd_marital_status#20, cd_education_status#21]
Input [8]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, c_current_hdemo_sk#15, cd_marital_status#20, cd_education_status#21, hd_demo_sk#22]

(39) HashAggregate [codegen id : 3]
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cr_net_loss#7, cd_marital_status#20, cd_education_status#21]
Keys [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#20, cd_education_status#21]
Functions [1]: [partial_sum(UnscaledValue(cr_net_loss#7))]
Aggregate Attributes [1]: [sum#24]
Results [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#20, cd_education_status#21, sum#25]

(40) CometColumnarExchange
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#20, cd_education_status#21, sum#25]
Arguments: hashpartitioning(cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#20, cd_education_status#21, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(41) CometColumnarToRow [codegen id : 4]
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#20, cd_education_status#21, sum#25]

(42) HashAggregate [codegen id : 4]
Input [6]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#20, cd_education_status#21, sum#25]
Keys [5]: [cc_call_center_id#2, cc_name#3, cc_manager#4, cd_marital_status#20, cd_education_status#21]
Functions [1]: [sum(UnscaledValue(cr_net_loss#7))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_net_loss#7))#26]
Results [4]: [cc_call_center_id#2 AS Call_Center#27, cc_name#3 AS Call_Center_Name#28, cc_manager#4 AS Manager#29, MakeDecimal(sum(UnscaledValue(cr_net_loss#7))#26,17,2) AS Returns_Loss#30]

(43) CometColumnarExchange
Input [4]: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30]
Arguments: rangepartitioning(Returns_Loss#30 DESC NULLS LAST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(44) CometSort
Input [4]: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30]
Arguments: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30], [Returns_Loss#30 DESC NULLS LAST]

(45) CometColumnarToRow [codegen id : 5]
Input [4]: [Call_Center#27, Call_Center_Name#28, Manager#29, Returns_Loss#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = cr_returned_date_sk#8 IN dynamicpruning#9
BroadcastExchange (50)
+- * CometColumnarToRow (49)
   +- CometProject (48)
      +- CometFilter (47)
         +- CometScan parquet spark_catalog.default.date_dim (46)


(46) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,11), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(47) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((isnotnull(d_year#11) AND isnotnull(d_moy#12)) AND (d_year#11 = 1998)) AND (d_moy#12 = 11)) AND isnotnull(d_date_sk#10))

(48) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(49) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#10]

(50) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]


