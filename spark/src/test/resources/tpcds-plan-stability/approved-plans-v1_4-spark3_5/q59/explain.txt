== Physical Plan ==
* CometColumnarToRow (42)
+- CometTakeOrderedAndProject (41)
   +- CometProject (40)
      +- CometBroadcastHashJoin (39)
         :- CometProject (23)
         :  +- CometBroadcastHashJoin (22)
         :     :- CometProject (17)
         :     :  +- CometBroadcastHashJoin (16)
         :     :     :- CometHashAggregate (11)
         :     :     :  +- CometExchange (10)
         :     :     :     +- CometHashAggregate (9)
         :     :     :        +- CometProject (8)
         :     :     :           +- CometBroadcastHashJoin (7)
         :     :     :              :- CometFilter (2)
         :     :     :              :  +- CometScan parquet spark_catalog.default.store_sales (1)
         :     :     :              +- CometBroadcastExchange (6)
         :     :     :                 +- CometProject (5)
         :     :     :                    +- CometFilter (4)
         :     :     :                       +- CometScan parquet spark_catalog.default.date_dim (3)
         :     :     +- CometBroadcastExchange (15)
         :     :        +- CometProject (14)
         :     :           +- CometFilter (13)
         :     :              +- CometScan parquet spark_catalog.default.store (12)
         :     +- CometBroadcastExchange (21)
         :        +- CometProject (20)
         :           +- CometFilter (19)
         :              +- CometScan parquet spark_catalog.default.date_dim (18)
         +- CometBroadcastExchange (38)
            +- CometProject (37)
               +- CometBroadcastHashJoin (36)
                  :- CometProject (31)
                  :  +- CometBroadcastHashJoin (30)
                  :     :- CometHashAggregate (25)
                  :     :  +- ReusedExchange (24)
                  :     +- CometBroadcastExchange (29)
                  :        +- CometProject (28)
                  :           +- CometFilter (27)
                  :              +- CometScan parquet spark_catalog.default.store (26)
                  +- CometBroadcastExchange (35)
                     +- CometProject (34)
                        +- CometFilter (33)
                           +- CometScan parquet spark_catalog.default.date_dim (32)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(4) CometFilter
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Condition : (isnotnull(d_date_sk#4) AND isnotnull(d_week_seq#5))

(5) CometProject
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Arguments: [d_date_sk#4, d_week_seq#5, d_day_name#7], [d_date_sk#4, d_week_seq#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, d_day_name#6, 9, true, false, true) AS d_day_name#7]

(6) CometBroadcastExchange
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [d_date_sk#4, d_week_seq#5, d_day_name#7]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Right output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7], [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7]

(9) CometHashAggregate
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]

(10) CometExchange
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]
Arguments: hashpartitioning(d_week_seq#5, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(11) CometHashAggregate
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]

(12) CometScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#15, s_store_id#16, s_store_name#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(13) CometFilter
Input [3]: [s_store_sk#15, s_store_id#16, s_store_name#17]
Condition : (isnotnull(s_store_sk#15) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#16, 16, true, false, true)))

(14) CometProject
Input [3]: [s_store_sk#15, s_store_id#16, s_store_name#17]
Arguments: [s_store_sk#15, s_store_id#18, s_store_name#17], [s_store_sk#15, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#16, 16, true, false, true) AS s_store_id#18, s_store_name#17]

(15) CometBroadcastExchange
Input [3]: [s_store_sk#15, s_store_id#18, s_store_name#17]
Arguments: [s_store_sk#15, s_store_id#18, s_store_name#17]

(16) CometBroadcastHashJoin
Left output [9]: [d_week_seq#5, ss_store_sk#1, sun_sales#19, mon_sales#20, tue_sales#21, wed_sales#22, thu_sales#23, fri_sales#24, sat_sales#25]
Right output [3]: [s_store_sk#15, s_store_id#18, s_store_name#17]
Arguments: [ss_store_sk#1], [s_store_sk#15], Inner, BuildRight

(17) CometProject
Input [12]: [d_week_seq#5, ss_store_sk#1, sun_sales#19, mon_sales#20, tue_sales#21, wed_sales#22, thu_sales#23, fri_sales#24, sat_sales#25, s_store_sk#15, s_store_id#18, s_store_name#17]
Arguments: [d_week_seq#5, sun_sales#19, mon_sales#20, tue_sales#21, wed_sales#22, thu_sales#23, fri_sales#24, sat_sales#25, s_store_id#18, s_store_name#17], [d_week_seq#5, sun_sales#19, mon_sales#20, tue_sales#21, wed_sales#22, thu_sales#23, fri_sales#24, sat_sales#25, s_store_id#18, s_store_name#17]

(18) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#26, d_week_seq#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(19) CometFilter
Input [2]: [d_month_seq#26, d_week_seq#27]
Condition : (((isnotnull(d_month_seq#26) AND (d_month_seq#26 >= 1212)) AND (d_month_seq#26 <= 1223)) AND isnotnull(d_week_seq#27))

(20) CometProject
Input [2]: [d_month_seq#26, d_week_seq#27]
Arguments: [d_week_seq#27], [d_week_seq#27]

(21) CometBroadcastExchange
Input [1]: [d_week_seq#27]
Arguments: [d_week_seq#27]

(22) CometBroadcastHashJoin
Left output [10]: [d_week_seq#5, sun_sales#19, mon_sales#20, tue_sales#21, wed_sales#22, thu_sales#23, fri_sales#24, sat_sales#25, s_store_id#18, s_store_name#17]
Right output [1]: [d_week_seq#27]
Arguments: [d_week_seq#5], [d_week_seq#27], Inner, BuildRight

(23) CometProject
Input [11]: [d_week_seq#5, sun_sales#19, mon_sales#20, tue_sales#21, wed_sales#22, thu_sales#23, fri_sales#24, sat_sales#25, s_store_id#18, s_store_name#17, d_week_seq#27]
Arguments: [s_store_name1#28, d_week_seq1#29, s_store_id1#30, sun_sales1#31, mon_sales1#32, tue_sales1#33, wed_sales1#34, thu_sales1#35, fri_sales1#36, sat_sales1#37], [s_store_name#17 AS s_store_name1#28, d_week_seq#5 AS d_week_seq1#29, s_store_id#18 AS s_store_id1#30, sun_sales#19 AS sun_sales1#31, mon_sales#20 AS mon_sales1#32, tue_sales#21 AS tue_sales1#33, wed_sales#22 AS wed_sales1#34, thu_sales#23 AS thu_sales1#35, fri_sales#24 AS fri_sales1#36, sat_sales#25 AS sat_sales1#37]

(24) ReusedExchange [Reuses operator id: 10]
Output [9]: [d_week_seq#38, ss_store_sk#39, sum#40, sum#41, sum#42, sum#43, sum#44, sum#45, sum#46]

(25) CometHashAggregate
Input [9]: [d_week_seq#38, ss_store_sk#39, sum#40, sum#41, sum#42, sum#43, sum#44, sum#45, sum#46]
Keys [2]: [d_week_seq#38, ss_store_sk#39]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#47 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#47 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#47 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#47 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#47 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#47 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#47 END))]

(26) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#48, s_store_id#49]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(27) CometFilter
Input [2]: [s_store_sk#48, s_store_id#49]
Condition : (isnotnull(s_store_sk#48) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#49, 16, true, false, true)))

(28) CometProject
Input [2]: [s_store_sk#48, s_store_id#49]
Arguments: [s_store_sk#48, s_store_id#50], [s_store_sk#48, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#49, 16, true, false, true) AS s_store_id#50]

(29) CometBroadcastExchange
Input [2]: [s_store_sk#48, s_store_id#50]
Arguments: [s_store_sk#48, s_store_id#50]

(30) CometBroadcastHashJoin
Left output [9]: [d_week_seq#38, ss_store_sk#39, sun_sales#51, mon_sales#52, tue_sales#53, wed_sales#54, thu_sales#55, fri_sales#56, sat_sales#57]
Right output [2]: [s_store_sk#48, s_store_id#50]
Arguments: [ss_store_sk#39], [s_store_sk#48], Inner, BuildRight

(31) CometProject
Input [11]: [d_week_seq#38, ss_store_sk#39, sun_sales#51, mon_sales#52, tue_sales#53, wed_sales#54, thu_sales#55, fri_sales#56, sat_sales#57, s_store_sk#48, s_store_id#50]
Arguments: [d_week_seq#38, sun_sales#51, mon_sales#52, tue_sales#53, wed_sales#54, thu_sales#55, fri_sales#56, sat_sales#57, s_store_id#50], [d_week_seq#38, sun_sales#51, mon_sales#52, tue_sales#53, wed_sales#54, thu_sales#55, fri_sales#56, sat_sales#57, s_store_id#50]

(32) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#58, d_week_seq#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1224), LessThanOrEqual(d_month_seq,1235), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(33) CometFilter
Input [2]: [d_month_seq#58, d_week_seq#59]
Condition : (((isnotnull(d_month_seq#58) AND (d_month_seq#58 >= 1224)) AND (d_month_seq#58 <= 1235)) AND isnotnull(d_week_seq#59))

(34) CometProject
Input [2]: [d_month_seq#58, d_week_seq#59]
Arguments: [d_week_seq#59], [d_week_seq#59]

(35) CometBroadcastExchange
Input [1]: [d_week_seq#59]
Arguments: [d_week_seq#59]

(36) CometBroadcastHashJoin
Left output [9]: [d_week_seq#38, sun_sales#51, mon_sales#52, tue_sales#53, wed_sales#54, thu_sales#55, fri_sales#56, sat_sales#57, s_store_id#50]
Right output [1]: [d_week_seq#59]
Arguments: [d_week_seq#38], [d_week_seq#59], Inner, BuildRight

(37) CometProject
Input [10]: [d_week_seq#38, sun_sales#51, mon_sales#52, tue_sales#53, wed_sales#54, thu_sales#55, fri_sales#56, sat_sales#57, s_store_id#50, d_week_seq#59]
Arguments: [d_week_seq2#60, s_store_id2#61, sun_sales2#62, mon_sales2#63, tue_sales2#64, wed_sales2#65, thu_sales2#66, fri_sales2#67, sat_sales2#68], [d_week_seq#38 AS d_week_seq2#60, s_store_id#50 AS s_store_id2#61, sun_sales#51 AS sun_sales2#62, mon_sales#52 AS mon_sales2#63, tue_sales#53 AS tue_sales2#64, wed_sales#54 AS wed_sales2#65, thu_sales#55 AS thu_sales2#66, fri_sales#56 AS fri_sales2#67, sat_sales#57 AS sat_sales2#68]

(38) CometBroadcastExchange
Input [9]: [d_week_seq2#60, s_store_id2#61, sun_sales2#62, mon_sales2#63, tue_sales2#64, wed_sales2#65, thu_sales2#66, fri_sales2#67, sat_sales2#68]
Arguments: [d_week_seq2#60, s_store_id2#61, sun_sales2#62, mon_sales2#63, tue_sales2#64, wed_sales2#65, thu_sales2#66, fri_sales2#67, sat_sales2#68]

(39) CometBroadcastHashJoin
Left output [10]: [s_store_name1#28, d_week_seq1#29, s_store_id1#30, sun_sales1#31, mon_sales1#32, tue_sales1#33, wed_sales1#34, thu_sales1#35, fri_sales1#36, sat_sales1#37]
Right output [9]: [d_week_seq2#60, s_store_id2#61, sun_sales2#62, mon_sales2#63, tue_sales2#64, wed_sales2#65, thu_sales2#66, fri_sales2#67, sat_sales2#68]
Arguments: [s_store_id1#30, d_week_seq1#29], [s_store_id2#61, (d_week_seq2#60 - 52)], Inner, BuildRight

(40) CometProject
Input [19]: [s_store_name1#28, d_week_seq1#29, s_store_id1#30, sun_sales1#31, mon_sales1#32, tue_sales1#33, wed_sales1#34, thu_sales1#35, fri_sales1#36, sat_sales1#37, d_week_seq2#60, s_store_id2#61, sun_sales2#62, mon_sales2#63, tue_sales2#64, wed_sales2#65, thu_sales2#66, fri_sales2#67, sat_sales2#68]
Arguments: [s_store_name1#28, s_store_id1#30, d_week_seq1#29, (sun_sales1 / sun_sales2)#69, (mon_sales1 / mon_sales2)#70, (tue_sales1 / tue_sales2)#71, (wed_sales1 / wed_sales2)#72, (thu_sales1 / thu_sales2)#73, (fri_sales1 / fri_sales2)#74, (sat_sales1 / sat_sales2)#75], [s_store_name1#28, s_store_id1#30, d_week_seq1#29, (sun_sales1#31 / sun_sales2#62) AS (sun_sales1 / sun_sales2)#69, (mon_sales1#32 / mon_sales2#63) AS (mon_sales1 / mon_sales2)#70, (tue_sales1#33 / tue_sales2#64) AS (tue_sales1 / tue_sales2)#71, (wed_sales1#34 / wed_sales2#65) AS (wed_sales1 / wed_sales2)#72, (thu_sales1#35 / thu_sales2#66) AS (thu_sales1 / thu_sales2)#73, (fri_sales1#36 / fri_sales2#67) AS (fri_sales1 / fri_sales2)#74, (sat_sales1#37 / sat_sales2#68) AS (sat_sales1 / sat_sales2)#75]

(41) CometTakeOrderedAndProject
Input [10]: [s_store_name1#28, s_store_id1#30, d_week_seq1#29, (sun_sales1 / sun_sales2)#69, (mon_sales1 / mon_sales2)#70, (tue_sales1 / tue_sales2)#71, (wed_sales1 / wed_sales2)#72, (thu_sales1 / thu_sales2)#73, (fri_sales1 / fri_sales2)#74, (sat_sales1 / sat_sales2)#75]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[s_store_name1#28 ASC NULLS FIRST,s_store_id1#30 ASC NULLS FIRST,d_week_seq1#29 ASC NULLS FIRST], output=[s_store_name1#28,s_store_id1#30,d_week_seq1#29,(sun_sales1 / sun_sales2)#69,(mon_sales1 / mon_sales2)#70,(tue_sales1 / tue_sales2)#71,(wed_sales1 / wed_sales2)#72,(thu_sales1 / thu_sales2)#73,(fri_sales1 / fri_sales2)#74,(sat_sales1 / sat_sales2)#75]), [s_store_name1#28, s_store_id1#30, d_week_seq1#29, (sun_sales1 / sun_sales2)#69, (mon_sales1 / mon_sales2)#70, (tue_sales1 / tue_sales2)#71, (wed_sales1 / wed_sales2)#72, (thu_sales1 / thu_sales2)#73, (fri_sales1 / fri_sales2)#74, (sat_sales1 / sat_sales2)#75], 100, [s_store_name1#28 ASC NULLS FIRST, s_store_id1#30 ASC NULLS FIRST, d_week_seq1#29 ASC NULLS FIRST], [s_store_name1#28, s_store_id1#30, d_week_seq1#29, (sun_sales1 / sun_sales2)#69, (mon_sales1 / mon_sales2)#70, (tue_sales1 / tue_sales2)#71, (wed_sales1 / wed_sales2)#72, (thu_sales1 / thu_sales2)#73, (fri_sales1 / fri_sales2)#74, (sat_sales1 / sat_sales2)#75]

(42) CometColumnarToRow [codegen id : 1]
Input [10]: [s_store_name1#28, s_store_id1#30, d_week_seq1#29, (sun_sales1 / sun_sales2)#69, (mon_sales1 / mon_sales2)#70, (tue_sales1 / tue_sales2)#71, (wed_sales1 / wed_sales2)#72, (thu_sales1 / thu_sales2)#73, (fri_sales1 / fri_sales2)#74, (sat_sales1 / sat_sales2)#75]

