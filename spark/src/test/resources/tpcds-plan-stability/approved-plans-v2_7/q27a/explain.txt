== Physical Plan ==
* CometColumnarToRow (71)
+- CometTakeOrderedAndProject (70)
   +- CometUnion (69)
      :- CometHashAggregate (29)
      :  +- CometExchange (28)
      :     +- CometHashAggregate (27)
      :        +- CometProject (26)
      :           +- CometBroadcastHashJoin (25)
      :              :- CometProject (20)
      :              :  +- CometBroadcastHashJoin (19)
      :              :     :- CometProject (14)
      :              :     :  +- CometBroadcastHashJoin (13)
      :              :     :     :- CometProject (8)
      :              :     :     :  +- CometBroadcastHashJoin (7)
      :              :     :     :     :- CometFilter (2)
      :              :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
      :              :     :     :     +- CometBroadcastExchange (6)
      :              :     :     :        +- CometProject (5)
      :              :     :     :           +- CometFilter (4)
      :              :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (3)
      :              :     :     +- CometBroadcastExchange (12)
      :              :     :        +- CometProject (11)
      :              :     :           +- CometFilter (10)
      :              :     :              +- CometScan parquet spark_catalog.default.date_dim (9)
      :              :     +- CometBroadcastExchange (18)
      :              :        +- CometProject (17)
      :              :           +- CometFilter (16)
      :              :              +- CometScan parquet spark_catalog.default.store (15)
      :              +- CometBroadcastExchange (24)
      :                 +- CometProject (23)
      :                    +- CometFilter (22)
      :                       +- CometScan parquet spark_catalog.default.item (21)
      :- CometHashAggregate (49)
      :  +- CometExchange (48)
      :     +- CometHashAggregate (47)
      :        +- CometProject (46)
      :           +- CometBroadcastHashJoin (45)
      :              :- CometProject (43)
      :              :  +- CometBroadcastHashJoin (42)
      :              :     :- CometProject (37)
      :              :     :  +- CometBroadcastHashJoin (36)
      :              :     :     :- CometProject (34)
      :              :     :     :  +- CometBroadcastHashJoin (33)
      :              :     :     :     :- CometFilter (31)
      :              :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (30)
      :              :     :     :     +- ReusedExchange (32)
      :              :     :     +- ReusedExchange (35)
      :              :     +- CometBroadcastExchange (41)
      :              :        +- CometProject (40)
      :              :           +- CometFilter (39)
      :              :              +- CometScan parquet spark_catalog.default.store (38)
      :              +- ReusedExchange (44)
      +- CometHashAggregate (68)
         +- CometExchange (67)
            +- CometHashAggregate (66)
               +- CometProject (65)
                  +- CometBroadcastHashJoin (64)
                     :- CometProject (60)
                     :  +- CometBroadcastHashJoin (59)
                     :     :- CometProject (57)
                     :     :  +- CometBroadcastHashJoin (56)
                     :     :     :- CometProject (54)
                     :     :     :  +- CometBroadcastHashJoin (53)
                     :     :     :     :- CometFilter (51)
                     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (50)
                     :     :     :     +- ReusedExchange (52)
                     :     :     +- ReusedExchange (55)
                     :     +- ReusedExchange (58)
                     +- CometBroadcastExchange (63)
                        +- CometFilter (62)
                           +- CometScan parquet spark_catalog.default.item (61)


(1) CometScan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(3) CometScan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(4) CometFilter
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_gender#11, 1, true, false, true) = F) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#12, 1, true, false, true) = W)) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#13, 20, true, false, true) = Primary             )) AND isnotnull(cd_demo_sk#10))

(5) CometProject
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Arguments: [cd_demo_sk#10], [cd_demo_sk#10]

(6) CometBroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: [cd_demo_sk#10]

(7) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [cd_demo_sk#10]
Arguments: [ss_cdemo_sk#2], [cd_demo_sk#10], Inner, BuildRight

(8) CometProject
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(9) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 1998)) AND isnotnull(d_date_sk#14))

(11) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(13) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#8], [d_date_sk#14], Inner, BuildRight

(14) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]

(15) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_state#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#16, s_state#17]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#17, 2, true, false, true) = TN) AND isnotnull(s_store_sk#16))

(17) CometProject
Input [2]: [s_store_sk#16, s_state#17]
Arguments: [s_store_sk#16, s_state#18], [s_store_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#17, 2, true, false, true) AS s_state#18]

(18) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_state#18]
Arguments: [s_store_sk#16, s_state#18]

(19) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Right output [2]: [s_store_sk#16, s_state#18]
Arguments: [ss_store_sk#3], [s_store_sk#16], Inner, BuildRight

(20) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#16, s_state#18]
Arguments: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#18], [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#18]

(21) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#19, i_item_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(22) CometFilter
Input [2]: [i_item_sk#19, i_item_id#20]
Condition : isnotnull(i_item_sk#19)

(23) CometProject
Input [2]: [i_item_sk#19, i_item_id#20]
Arguments: [i_item_sk#19, i_item_id#21], [i_item_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#20, 16, true, false, true) AS i_item_id#21]

(24) CometBroadcastExchange
Input [2]: [i_item_sk#19, i_item_id#21]
Arguments: [i_item_sk#19, i_item_id#21]

(25) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#18]
Right output [2]: [i_item_sk#19, i_item_id#21]
Arguments: [ss_item_sk#1], [i_item_sk#19], Inner, BuildRight

(26) CometProject
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#18, i_item_sk#19, i_item_id#21]
Arguments: [i_item_id#22, s_state#23, agg1#24, agg2#25, agg3#26, agg4#27], [i_item_id#21 AS i_item_id#22, s_state#18 AS s_state#23, ss_quantity#4 AS agg1#24, ss_list_price#5 AS agg2#25, ss_coupon_amt#7 AS agg3#26, ss_sales_price#6 AS agg4#27]

(27) CometHashAggregate
Input [6]: [i_item_id#22, s_state#23, agg1#24, agg2#25, agg3#26, agg4#27]
Keys [2]: [i_item_id#22, s_state#23]
Functions [4]: [partial_avg(agg1#24), partial_avg(UnscaledValue(agg2#25)), partial_avg(UnscaledValue(agg3#26)), partial_avg(UnscaledValue(agg4#27))]

(28) CometExchange
Input [10]: [i_item_id#22, s_state#23, sum#28, count#29, sum#30, count#31, sum#32, count#33, sum#34, count#35]
Arguments: hashpartitioning(i_item_id#22, s_state#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(29) CometHashAggregate
Input [10]: [i_item_id#22, s_state#23, sum#28, count#29, sum#30, count#31, sum#32, count#33, sum#34, count#35]
Keys [2]: [i_item_id#22, s_state#23]
Functions [4]: [avg(agg1#24), avg(UnscaledValue(agg2#25)), avg(UnscaledValue(agg3#26)), avg(UnscaledValue(agg4#27))]

(30) CometScan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#36, ss_cdemo_sk#37, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#43), dynamicpruningexpression(ss_sold_date_sk#43 IN dynamicpruning#44)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(31) CometFilter
Input [8]: [ss_item_sk#36, ss_cdemo_sk#37, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43]
Condition : ((isnotnull(ss_cdemo_sk#37) AND isnotnull(ss_store_sk#38)) AND isnotnull(ss_item_sk#36))

(32) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#45]

(33) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#36, ss_cdemo_sk#37, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43]
Right output [1]: [cd_demo_sk#45]
Arguments: [ss_cdemo_sk#37], [cd_demo_sk#45], Inner, BuildRight

(34) CometProject
Input [9]: [ss_item_sk#36, ss_cdemo_sk#37, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43, cd_demo_sk#45]
Arguments: [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43], [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43]

(35) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#46]

(36) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43]
Right output [1]: [d_date_sk#46]
Arguments: [ss_sold_date_sk#43], [d_date_sk#46], Inner, BuildRight

(37) CometProject
Input [8]: [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, ss_sold_date_sk#43, d_date_sk#46]
Arguments: [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42], [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42]

(38) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#47, s_state#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(39) CometFilter
Input [2]: [s_store_sk#47, s_state#48]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#48, 2, true, false, true) = TN) AND isnotnull(s_store_sk#47))

(40) CometProject
Input [2]: [s_store_sk#47, s_state#48]
Arguments: [s_store_sk#47], [s_store_sk#47]

(41) CometBroadcastExchange
Input [1]: [s_store_sk#47]
Arguments: [s_store_sk#47]

(42) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42]
Right output [1]: [s_store_sk#47]
Arguments: [ss_store_sk#38], [s_store_sk#47], Inner, BuildRight

(43) CometProject
Input [7]: [ss_item_sk#36, ss_store_sk#38, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, s_store_sk#47]
Arguments: [ss_item_sk#36, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42], [ss_item_sk#36, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42]

(44) ReusedExchange [Reuses operator id: 24]
Output [2]: [i_item_sk#49, i_item_id#21]

(45) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#36, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42]
Right output [2]: [i_item_sk#49, i_item_id#21]
Arguments: [ss_item_sk#36], [i_item_sk#49], Inner, BuildRight

(46) CometProject
Input [7]: [ss_item_sk#36, ss_quantity#39, ss_list_price#40, ss_sales_price#41, ss_coupon_amt#42, i_item_sk#49, i_item_id#21]
Arguments: [i_item_id#21, agg1#24, agg2#25, agg3#26, agg4#27], [i_item_id#21, ss_quantity#39 AS agg1#24, ss_list_price#40 AS agg2#25, ss_coupon_amt#42 AS agg3#26, ss_sales_price#41 AS agg4#27]

(47) CometHashAggregate
Input [5]: [i_item_id#21, agg1#24, agg2#25, agg3#26, agg4#27]
Keys [1]: [i_item_id#21]
Functions [4]: [partial_avg(agg1#24), partial_avg(UnscaledValue(agg2#25)), partial_avg(UnscaledValue(agg3#26)), partial_avg(UnscaledValue(agg4#27))]

(48) CometExchange
Input [9]: [i_item_id#21, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57]
Arguments: hashpartitioning(i_item_id#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(49) CometHashAggregate
Input [9]: [i_item_id#21, sum#50, count#51, sum#52, count#53, sum#54, count#55, sum#56, count#57]
Keys [1]: [i_item_id#21]
Functions [4]: [avg(agg1#24), avg(UnscaledValue(agg2#25)), avg(UnscaledValue(agg3#26)), avg(UnscaledValue(agg4#27))]

(50) CometScan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#58, ss_cdemo_sk#59, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#65), dynamicpruningexpression(ss_sold_date_sk#65 IN dynamicpruning#66)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(51) CometFilter
Input [8]: [ss_item_sk#58, ss_cdemo_sk#59, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]
Condition : ((isnotnull(ss_cdemo_sk#59) AND isnotnull(ss_store_sk#60)) AND isnotnull(ss_item_sk#58))

(52) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#67]

(53) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#58, ss_cdemo_sk#59, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]
Right output [1]: [cd_demo_sk#67]
Arguments: [ss_cdemo_sk#59], [cd_demo_sk#67], Inner, BuildRight

(54) CometProject
Input [9]: [ss_item_sk#58, ss_cdemo_sk#59, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65, cd_demo_sk#67]
Arguments: [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65], [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]

(55) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#68]

(56) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]
Right output [1]: [d_date_sk#68]
Arguments: [ss_sold_date_sk#65], [d_date_sk#68], Inner, BuildRight

(57) CometProject
Input [8]: [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, ss_sold_date_sk#65, d_date_sk#68]
Arguments: [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64], [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64]

(58) ReusedExchange [Reuses operator id: 41]
Output [1]: [s_store_sk#69]

(59) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64]
Right output [1]: [s_store_sk#69]
Arguments: [ss_store_sk#60], [s_store_sk#69], Inner, BuildRight

(60) CometProject
Input [7]: [ss_item_sk#58, ss_store_sk#60, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, s_store_sk#69]
Arguments: [ss_item_sk#58, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64], [ss_item_sk#58, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64]

(61) CometScan parquet spark_catalog.default.item
Output [1]: [i_item_sk#70]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(62) CometFilter
Input [1]: [i_item_sk#70]
Condition : isnotnull(i_item_sk#70)

(63) CometBroadcastExchange
Input [1]: [i_item_sk#70]
Arguments: [i_item_sk#70]

(64) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#58, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64]
Right output [1]: [i_item_sk#70]
Arguments: [ss_item_sk#58], [i_item_sk#70], Inner, BuildRight

(65) CometProject
Input [6]: [ss_item_sk#58, ss_quantity#61, ss_list_price#62, ss_sales_price#63, ss_coupon_amt#64, i_item_sk#70]
Arguments: [agg1#24, agg2#25, agg3#26, agg4#27], [ss_quantity#61 AS agg1#24, ss_list_price#62 AS agg2#25, ss_coupon_amt#64 AS agg3#26, ss_sales_price#63 AS agg4#27]

(66) CometHashAggregate
Input [4]: [agg1#24, agg2#25, agg3#26, agg4#27]
Keys: []
Functions [4]: [partial_avg(agg1#24), partial_avg(UnscaledValue(agg2#25)), partial_avg(UnscaledValue(agg3#26)), partial_avg(UnscaledValue(agg4#27))]

(67) CometExchange
Input [8]: [sum#71, count#72, sum#73, count#74, sum#75, count#76, sum#77, count#78]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(68) CometHashAggregate
Input [8]: [sum#71, count#72, sum#73, count#74, sum#75, count#76, sum#77, count#78]
Keys: []
Functions [4]: [avg(agg1#24), avg(UnscaledValue(agg2#25)), avg(UnscaledValue(agg3#26)), avg(UnscaledValue(agg4#27))]

(69) CometUnion
Child 0 Input [7]: [i_item_id#22, s_state#23, g_state#79, agg1#80, agg2#81, agg3#82, agg4#83]
Child 1 Input [7]: [i_item_id#21, s_state#84, g_state#85, agg1#86, agg2#87, agg3#88, agg4#89]
Child 2 Input [7]: [i_item_id#90, s_state#91, g_state#92, agg1#93, agg2#94, agg3#95, agg4#96]

(70) CometTakeOrderedAndProject
Input [7]: [i_item_id#22, s_state#23, g_state#79, agg1#80, agg2#81, agg3#82, agg4#83]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[i_item_id#22 ASC NULLS FIRST,s_state#23 ASC NULLS FIRST], output=[i_item_id#22,s_state#23,g_state#79,agg1#80,agg2#81,agg3#82,agg4#83]), [i_item_id#22, s_state#23, g_state#79, agg1#80, agg2#81, agg3#82, agg4#83], 100, [i_item_id#22 ASC NULLS FIRST, s_state#23 ASC NULLS FIRST], [i_item_id#22, s_state#23, g_state#79, agg1#80, agg2#81, agg3#82, agg4#83]

(71) CometColumnarToRow [codegen id : 1]
Input [7]: [i_item_id#22, s_state#23, g_state#79, agg1#80, agg2#81, agg3#82, agg4#83]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (76)
+- * CometColumnarToRow (75)
   +- CometProject (74)
      +- CometFilter (73)
         +- CometScan parquet spark_catalog.default.date_dim (72)


(72) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(73) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 1998)) AND isnotnull(d_date_sk#14))

(74) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(75) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(76) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 30 Hosting Expression = ss_sold_date_sk#43 IN dynamicpruning#9

Subquery:3 Hosting operator id = 50 Hosting Expression = ss_sold_date_sk#65 IN dynamicpruning#9


