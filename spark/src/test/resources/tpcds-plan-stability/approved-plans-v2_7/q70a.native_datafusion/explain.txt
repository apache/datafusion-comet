== Physical Plan ==
TakeOrderedAndProject (57)
+- * Project (56)
   +- Window (55)
      +- * Sort (54)
         +- Exchange (53)
            +- * HashAggregate (52)
               +- Exchange (51)
                  +- * HashAggregate (50)
                     +- Union (49)
                        :- * HashAggregate (38)
                        :  +- Exchange (37)
                        :     +- * HashAggregate (36)
                        :        +- * Project (35)
                        :           +- * BroadcastHashJoin Inner BuildRight (34)
                        :              :- * ColumnarToRow (9)
                        :              :  +- CometProject (8)
                        :              :     +- CometBroadcastHashJoin (7)
                        :              :        :- CometFilter (2)
                        :              :        :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (1)
                        :              :        +- CometBroadcastExchange (6)
                        :              :           +- CometProject (5)
                        :              :              +- CometFilter (4)
                        :              :                 +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (3)
                        :              +- BroadcastExchange (33)
                        :                 +- * BroadcastHashJoin LeftSemi BuildRight (32)
                        :                    :- * ColumnarToRow (12)
                        :                    :  +- CometFilter (11)
                        :                    :     +- CometNativeScan: `spark_catalog`.`default`.`store` (10)
                        :                    +- BroadcastExchange (31)
                        :                       +- * Project (30)
                        :                          +- * Filter (29)
                        :                             +- Window (28)
                        :                                +- * ColumnarToRow (27)
                        :                                   +- CometSort (26)
                        :                                      +- CometHashAggregate (25)
                        :                                         +- CometExchange (24)
                        :                                            +- CometHashAggregate (23)
                        :                                               +- CometProject (22)
                        :                                                  +- CometBroadcastHashJoin (21)
                        :                                                     :- CometProject (19)
                        :                                                     :  +- CometBroadcastHashJoin (18)
                        :                                                     :     :- CometFilter (14)
                        :                                                     :     :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (13)
                        :                                                     :     +- CometBroadcastExchange (17)
                        :                                                     :        +- CometFilter (16)
                        :                                                     :           +- CometNativeScan: `spark_catalog`.`default`.`store` (15)
                        :                                                     +- ReusedExchange (20)
                        :- * HashAggregate (43)
                        :  +- Exchange (42)
                        :     +- * HashAggregate (41)
                        :        +- * HashAggregate (40)
                        :           +- ReusedExchange (39)
                        +- * HashAggregate (48)
                           +- Exchange (47)
                              +- * HashAggregate (46)
                                 +- * HashAggregate (45)
                                    +- ReusedExchange (44)


(1) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Arguments: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4, d_month_seq#5]

(4) CometFilter
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1212)) AND (d_month_seq#5 <= 1223)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4], [d_date_sk#4]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: [d_date_sk#4]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#4]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#4]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) ColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometNativeScan: `spark_catalog`.`default`.`store`
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: [s_store_sk#6, s_county#7, s_state#8]

(11) CometFilter
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(12) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(13) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Arguments: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]

(14) CometFilter
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_store_sk#9)

(15) CometNativeScan: `spark_catalog`.`default`.`store`
Output [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12, s_state#13]

(16) CometFilter
Input [2]: [s_store_sk#12, s_state#13]
Condition : isnotnull(s_store_sk#12)

(17) CometBroadcastExchange
Input [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12, s_state#13]

(18) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Right output [2]: [s_store_sk#12, s_state#13]
Arguments: [ss_store_sk#9], [s_store_sk#12], Inner, BuildRight

(19) CometProject
Input [5]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11, s_store_sk#12, s_state#13]
Arguments: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13], [ss_net_profit#10, ss_sold_date_sk#11, s_state#13]

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#14]

(21) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#11], [d_date_sk#14], Inner, BuildRight

(22) CometProject
Input [4]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13, d_date_sk#14]
Arguments: [ss_net_profit#10, s_state#13], [ss_net_profit#10, s_state#13]

(23) CometHashAggregate
Input [2]: [ss_net_profit#10, s_state#13]
Keys [1]: [s_state#13]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]

(24) CometExchange
Input [2]: [s_state#13, sum#15]
Arguments: hashpartitioning(s_state#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(25) CometHashAggregate
Input [2]: [s_state#13, sum#15]
Keys [1]: [s_state#13]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]

(26) CometSort
Input [3]: [s_state#13, _w0#16, s_state#13]
Arguments: [s_state#13, _w0#16, s_state#13], [s_state#13 ASC NULLS FIRST, _w0#16 DESC NULLS LAST]

(27) ColumnarToRow [codegen id : 1]
Input [3]: [s_state#13, _w0#16, s_state#13]

(28) Window
Input [3]: [s_state#13, _w0#16, s_state#13]
Arguments: [rank(_w0#16) windowspecdefinition(s_state#13, _w0#16 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#17], [s_state#13], [_w0#16 DESC NULLS LAST]

(29) Filter [codegen id : 2]
Input [4]: [s_state#13, _w0#16, s_state#13, ranking#17]
Condition : (ranking#17 <= 5)

(30) Project [codegen id : 2]
Output [1]: [s_state#13]
Input [4]: [s_state#13, _w0#16, s_state#13, ranking#17]

(31) BroadcastExchange
Input [1]: [s_state#13]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(32) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [s_state#8]
Right keys [1]: [s_state#13]
Join type: LeftSemi
Join condition: None

(33) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(34) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join type: Inner
Join condition: None

(35) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_county#7, s_state#8]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#8]

(36) HashAggregate [codegen id : 4]
Input [3]: [ss_net_profit#2, s_county#7, s_state#8]
Keys [2]: [s_state#8, s_county#7]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#18]
Results [3]: [s_state#8, s_county#7, sum#19]

(37) Exchange
Input [3]: [s_state#8, s_county#7, sum#19]
Arguments: hashpartitioning(s_state#8, s_county#7, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(38) HashAggregate [codegen id : 5]
Input [3]: [s_state#8, s_county#7, sum#19]
Keys [2]: [s_state#8, s_county#7]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#20]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#20,17,2) as decimal(27,2)) AS total_sum#21, s_state#8, s_county#7, 0 AS g_state#22, 0 AS g_county#23, 0 AS lochierarchy#24]

(39) ReusedExchange [Reuses operator id: 37]
Output [3]: [s_state#8, s_county#7, sum#25]

(40) HashAggregate [codegen id : 10]
Input [3]: [s_state#8, s_county#7, sum#25]
Keys [2]: [s_state#8, s_county#7]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#20]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#20,17,2) AS total_sum#26, s_state#8]

(41) HashAggregate [codegen id : 10]
Input [2]: [total_sum#26, s_state#8]
Keys [1]: [s_state#8]
Functions [1]: [partial_sum(total_sum#26)]
Aggregate Attributes [2]: [sum#27, isEmpty#28]
Results [3]: [s_state#8, sum#29, isEmpty#30]

(42) Exchange
Input [3]: [s_state#8, sum#29, isEmpty#30]
Arguments: hashpartitioning(s_state#8, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(43) HashAggregate [codegen id : 11]
Input [3]: [s_state#8, sum#29, isEmpty#30]
Keys [1]: [s_state#8]
Functions [1]: [sum(total_sum#26)]
Aggregate Attributes [1]: [sum(total_sum#26)#31]
Results [6]: [sum(total_sum#26)#31 AS total_sum#32, s_state#8, null AS s_county#33, 0 AS g_state#34, 1 AS g_county#35, 1 AS lochierarchy#36]

(44) ReusedExchange [Reuses operator id: 37]
Output [3]: [s_state#8, s_county#7, sum#37]

(45) HashAggregate [codegen id : 16]
Input [3]: [s_state#8, s_county#7, sum#37]
Keys [2]: [s_state#8, s_county#7]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#20]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#20,17,2) AS total_sum#26]

(46) HashAggregate [codegen id : 16]
Input [1]: [total_sum#26]
Keys: []
Functions [1]: [partial_sum(total_sum#26)]
Aggregate Attributes [2]: [sum#38, isEmpty#39]
Results [2]: [sum#40, isEmpty#41]

(47) Exchange
Input [2]: [sum#40, isEmpty#41]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(48) HashAggregate [codegen id : 17]
Input [2]: [sum#40, isEmpty#41]
Keys: []
Functions [1]: [sum(total_sum#26)]
Aggregate Attributes [1]: [sum(total_sum#26)#42]
Results [6]: [sum(total_sum#26)#42 AS total_sum#43, null AS s_state#44, null AS s_county#45, 1 AS g_state#46, 1 AS g_county#47, 2 AS lochierarchy#48]

(49) Union

(50) HashAggregate [codegen id : 18]
Input [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Keys [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]

(51) Exchange
Input [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Arguments: hashpartitioning(total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(52) HashAggregate [codegen id : 19]
Input [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Keys [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, CASE WHEN (g_county#23 = 0) THEN s_state#8 END AS _w0#49]

(53) Exchange
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#49]
Arguments: hashpartitioning(lochierarchy#24, _w0#49, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(54) Sort [codegen id : 20]
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#49]
Arguments: [lochierarchy#24 ASC NULLS FIRST, _w0#49 ASC NULLS FIRST, total_sum#21 DESC NULLS LAST], false, 0

(55) Window
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#49]
Arguments: [rank(total_sum#21) windowspecdefinition(lochierarchy#24, _w0#49, total_sum#21 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#50], [lochierarchy#24, _w0#49], [total_sum#21 DESC NULLS LAST]

(56) Project [codegen id : 21]
Output [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, rank_within_parent#50]
Input [6]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#49, rank_within_parent#50]

(57) TakeOrderedAndProject
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, rank_within_parent#50]
Arguments: 100, [lochierarchy#24 DESC NULLS LAST, CASE WHEN (lochierarchy#24 = 0) THEN s_state#8 END ASC NULLS FIRST, rank_within_parent#50 ASC NULLS FIRST], [total_sum#21, s_state#8, s_county#7, lochierarchy#24, rank_within_parent#50]

