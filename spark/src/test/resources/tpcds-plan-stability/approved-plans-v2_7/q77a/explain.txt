== Physical Plan ==
TakeOrderedAndProject (99)
+- * HashAggregate (98)
   +- Exchange (97)
      +- * HashAggregate (96)
         +- Union (95)
            :- * HashAggregate (84)
            :  +- Exchange (83)
            :     +- * HashAggregate (82)
            :        +- Union (81)
            :           :- * Project (32)
            :           :  +- * BroadcastHashJoin LeftOuter BuildRight (31)
            :           :     :- * HashAggregate (17)
            :           :     :  +- Exchange (16)
            :           :     :     +- * ColumnarToRow (15)
            :           :     :        +- CometHashAggregate (14)
            :           :     :           +- CometProject (13)
            :           :     :              +- CometBroadcastHashJoin (12)
            :           :     :                 :- CometProject (8)
            :           :     :                 :  +- CometBroadcastHashJoin (7)
            :           :     :                 :     :- CometFilter (2)
            :           :     :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :     :                 :     +- CometBroadcastExchange (6)
            :           :     :                 :        +- CometProject (5)
            :           :     :                 :           +- CometFilter (4)
            :           :     :                 :              +- CometScan parquet spark_catalog.default.date_dim (3)
            :           :     :                 +- CometBroadcastExchange (11)
            :           :     :                    +- CometFilter (10)
            :           :     :                       +- CometScan parquet spark_catalog.default.store (9)
            :           :     +- BroadcastExchange (30)
            :           :        +- * HashAggregate (29)
            :           :           +- Exchange (28)
            :           :              +- * ColumnarToRow (27)
            :           :                 +- CometHashAggregate (26)
            :           :                    +- CometProject (25)
            :           :                       +- CometBroadcastHashJoin (24)
            :           :                          :- CometProject (22)
            :           :                          :  +- CometBroadcastHashJoin (21)
            :           :                          :     :- CometFilter (19)
            :           :                          :     :  +- CometScan parquet spark_catalog.default.store_returns (18)
            :           :                          :     +- ReusedExchange (20)
            :           :                          +- ReusedExchange (23)
            :           :- * Project (51)
            :           :  +- * BroadcastNestedLoopJoin Inner BuildLeft (50)
            :           :     :- BroadcastExchange (41)
            :           :     :  +- * HashAggregate (40)
            :           :     :     +- Exchange (39)
            :           :     :        +- * ColumnarToRow (38)
            :           :     :           +- CometHashAggregate (37)
            :           :     :              +- CometProject (36)
            :           :     :                 +- CometBroadcastHashJoin (35)
            :           :     :                    :- CometScan parquet spark_catalog.default.catalog_sales (33)
            :           :     :                    +- ReusedExchange (34)
            :           :     +- * HashAggregate (49)
            :           :        +- Exchange (48)
            :           :           +- * ColumnarToRow (47)
            :           :              +- CometHashAggregate (46)
            :           :                 +- CometProject (45)
            :           :                    +- CometBroadcastHashJoin (44)
            :           :                       :- CometScan parquet spark_catalog.default.catalog_returns (42)
            :           :                       +- ReusedExchange (43)
            :           +- * Project (80)
            :              +- * BroadcastHashJoin LeftOuter BuildRight (79)
            :                 :- * HashAggregate (65)
            :                 :  +- Exchange (64)
            :                 :     +- * ColumnarToRow (63)
            :                 :        +- CometHashAggregate (62)
            :                 :           +- CometProject (61)
            :                 :              +- CometBroadcastHashJoin (60)
            :                 :                 :- CometProject (56)
            :                 :                 :  +- CometBroadcastHashJoin (55)
            :                 :                 :     :- CometFilter (53)
            :                 :                 :     :  +- CometScan parquet spark_catalog.default.web_sales (52)
            :                 :                 :     +- ReusedExchange (54)
            :                 :                 +- CometBroadcastExchange (59)
            :                 :                    +- CometFilter (58)
            :                 :                       +- CometScan parquet spark_catalog.default.web_page (57)
            :                 +- BroadcastExchange (78)
            :                    +- * HashAggregate (77)
            :                       +- Exchange (76)
            :                          +- * ColumnarToRow (75)
            :                             +- CometHashAggregate (74)
            :                                +- CometProject (73)
            :                                   +- CometBroadcastHashJoin (72)
            :                                      :- CometProject (70)
            :                                      :  +- CometBroadcastHashJoin (69)
            :                                      :     :- CometFilter (67)
            :                                      :     :  +- CometScan parquet spark_catalog.default.web_returns (66)
            :                                      :     +- ReusedExchange (68)
            :                                      +- ReusedExchange (71)
            :- * HashAggregate (89)
            :  +- Exchange (88)
            :     +- * HashAggregate (87)
            :        +- * HashAggregate (86)
            :           +- ReusedExchange (85)
            +- * HashAggregate (94)
               +- Exchange (93)
                  +- * HashAggregate (92)
                     +- * HashAggregate (91)
                        +- ReusedExchange (90)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(4) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 1998-08-04)) AND (d_date#7 <= 1998-09-03)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]
Arguments: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3], [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]

(9) Scan parquet spark_catalog.default.store
Output [1]: [s_store_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(10) CometFilter
Input [1]: [s_store_sk#8]
Condition : isnotnull(s_store_sk#8)

(11) CometBroadcastExchange
Input [1]: [s_store_sk#8]
Arguments: [s_store_sk#8]

(12) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Right output [1]: [s_store_sk#8]
Arguments: [ss_store_sk#1], [s_store_sk#8], Inner, BuildRight

(13) CometProject
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Arguments: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8], [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]

(14) CometHashAggregate
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Keys [1]: [s_store_sk#8]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]

(15) ColumnarToRow [codegen id : 1]
Input [3]: [s_store_sk#8, sum#9, sum#10]

(16) Exchange
Input [3]: [s_store_sk#8, sum#9, sum#10]
Arguments: hashpartitioning(s_store_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(17) HashAggregate [codegen id : 4]
Input [3]: [s_store_sk#8, sum#9, sum#10]
Keys [1]: [s_store_sk#8]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#11, sum(UnscaledValue(ss_net_profit#3))#12]
Results [3]: [s_store_sk#8, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#11,17,2) AS sales#13, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#12,17,2) AS profit#14]

(18) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#18), dynamicpruningexpression(sr_returned_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(19) CometFilter
Input [4]: [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18]
Condition : isnotnull(sr_store_sk#15)

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#20]

(21) CometBroadcastHashJoin
Left output [4]: [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18]
Right output [1]: [d_date_sk#20]
Arguments: [sr_returned_date_sk#18], [d_date_sk#20], Inner, BuildRight

(22) CometProject
Input [5]: [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17, sr_returned_date_sk#18, d_date_sk#20]
Arguments: [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17], [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17]

(23) ReusedExchange [Reuses operator id: 11]
Output [1]: [s_store_sk#21]

(24) CometBroadcastHashJoin
Left output [3]: [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17]
Right output [1]: [s_store_sk#21]
Arguments: [sr_store_sk#15], [s_store_sk#21], Inner, BuildRight

(25) CometProject
Input [4]: [sr_store_sk#15, sr_return_amt#16, sr_net_loss#17, s_store_sk#21]
Arguments: [sr_return_amt#16, sr_net_loss#17, s_store_sk#21], [sr_return_amt#16, sr_net_loss#17, s_store_sk#21]

(26) CometHashAggregate
Input [3]: [sr_return_amt#16, sr_net_loss#17, s_store_sk#21]
Keys [1]: [s_store_sk#21]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#16)), partial_sum(UnscaledValue(sr_net_loss#17))]

(27) ColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#21, sum#22, sum#23]

(28) Exchange
Input [3]: [s_store_sk#21, sum#22, sum#23]
Arguments: hashpartitioning(s_store_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(29) HashAggregate [codegen id : 3]
Input [3]: [s_store_sk#21, sum#22, sum#23]
Keys [1]: [s_store_sk#21]
Functions [2]: [sum(UnscaledValue(sr_return_amt#16)), sum(UnscaledValue(sr_net_loss#17))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#16))#24, sum(UnscaledValue(sr_net_loss#17))#25]
Results [3]: [s_store_sk#21, MakeDecimal(sum(UnscaledValue(sr_return_amt#16))#24,17,2) AS returns#26, MakeDecimal(sum(UnscaledValue(sr_net_loss#17))#25,17,2) AS profit_loss#27]

(30) BroadcastExchange
Input [3]: [s_store_sk#21, returns#26, profit_loss#27]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(31) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_store_sk#8]
Right keys [1]: [s_store_sk#21]
Join type: LeftOuter
Join condition: None

(32) Project [codegen id : 4]
Output [5]: [store channel AS channel#28, s_store_sk#8 AS id#29, sales#13, coalesce(returns#26, 0.00) AS returns#30, (profit#14 - coalesce(profit_loss#27, 0.00)) AS profit#31]
Input [6]: [s_store_sk#8, sales#13, profit#14, s_store_sk#21, returns#26, profit_loss#27]

(33) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#32, cs_ext_sales_price#33, cs_net_profit#34, cs_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#35), dynamicpruningexpression(cs_sold_date_sk#35 IN dynamicpruning#36)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(34) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#37]

(35) CometBroadcastHashJoin
Left output [4]: [cs_call_center_sk#32, cs_ext_sales_price#33, cs_net_profit#34, cs_sold_date_sk#35]
Right output [1]: [d_date_sk#37]
Arguments: [cs_sold_date_sk#35], [d_date_sk#37], Inner, BuildRight

(36) CometProject
Input [5]: [cs_call_center_sk#32, cs_ext_sales_price#33, cs_net_profit#34, cs_sold_date_sk#35, d_date_sk#37]
Arguments: [cs_call_center_sk#32, cs_ext_sales_price#33, cs_net_profit#34], [cs_call_center_sk#32, cs_ext_sales_price#33, cs_net_profit#34]

(37) CometHashAggregate
Input [3]: [cs_call_center_sk#32, cs_ext_sales_price#33, cs_net_profit#34]
Keys [1]: [cs_call_center_sk#32]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#33)), partial_sum(UnscaledValue(cs_net_profit#34))]

(38) ColumnarToRow [codegen id : 5]
Input [3]: [cs_call_center_sk#32, sum#38, sum#39]

(39) Exchange
Input [3]: [cs_call_center_sk#32, sum#38, sum#39]
Arguments: hashpartitioning(cs_call_center_sk#32, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(40) HashAggregate [codegen id : 6]
Input [3]: [cs_call_center_sk#32, sum#38, sum#39]
Keys [1]: [cs_call_center_sk#32]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#33)), sum(UnscaledValue(cs_net_profit#34))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#33))#40, sum(UnscaledValue(cs_net_profit#34))#41]
Results [3]: [cs_call_center_sk#32, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#33))#40,17,2) AS sales#42, MakeDecimal(sum(UnscaledValue(cs_net_profit#34))#41,17,2) AS profit#43]

(41) BroadcastExchange
Input [3]: [cs_call_center_sk#32, sales#42, profit#43]
Arguments: IdentityBroadcastMode, [plan_id=5]

(42) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_return_amount#44, cr_net_loss#45, cr_returned_date_sk#46]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#46), dynamicpruningexpression(cr_returned_date_sk#46 IN dynamicpruning#47)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(43) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#48]

(44) CometBroadcastHashJoin
Left output [3]: [cr_return_amount#44, cr_net_loss#45, cr_returned_date_sk#46]
Right output [1]: [d_date_sk#48]
Arguments: [cr_returned_date_sk#46], [d_date_sk#48], Inner, BuildRight

(45) CometProject
Input [4]: [cr_return_amount#44, cr_net_loss#45, cr_returned_date_sk#46, d_date_sk#48]
Arguments: [cr_return_amount#44, cr_net_loss#45], [cr_return_amount#44, cr_net_loss#45]

(46) CometHashAggregate
Input [2]: [cr_return_amount#44, cr_net_loss#45]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#44)), partial_sum(UnscaledValue(cr_net_loss#45))]

(47) ColumnarToRow [codegen id : 7]
Input [2]: [sum#49, sum#50]

(48) Exchange
Input [2]: [sum#49, sum#50]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(49) HashAggregate
Input [2]: [sum#49, sum#50]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#44)), sum(UnscaledValue(cr_net_loss#45))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#44))#51, sum(UnscaledValue(cr_net_loss#45))#52]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#44))#51,17,2) AS returns#53, MakeDecimal(sum(UnscaledValue(cr_net_loss#45))#52,17,2) AS profit_loss#54]

(50) BroadcastNestedLoopJoin [codegen id : 8]
Join type: Inner
Join condition: None

(51) Project [codegen id : 8]
Output [5]: [catalog channel AS channel#55, cs_call_center_sk#32 AS id#56, sales#42, returns#53, (profit#43 - profit_loss#54) AS profit#57]
Input [5]: [cs_call_center_sk#32, sales#42, profit#43, returns#53, profit_loss#54]

(52) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60, ws_sold_date_sk#61]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#61), dynamicpruningexpression(ws_sold_date_sk#61 IN dynamicpruning#62)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(53) CometFilter
Input [4]: [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60, ws_sold_date_sk#61]
Condition : isnotnull(ws_web_page_sk#58)

(54) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#63]

(55) CometBroadcastHashJoin
Left output [4]: [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60, ws_sold_date_sk#61]
Right output [1]: [d_date_sk#63]
Arguments: [ws_sold_date_sk#61], [d_date_sk#63], Inner, BuildRight

(56) CometProject
Input [5]: [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60, ws_sold_date_sk#61, d_date_sk#63]
Arguments: [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60], [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60]

(57) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(58) CometFilter
Input [1]: [wp_web_page_sk#64]
Condition : isnotnull(wp_web_page_sk#64)

(59) CometBroadcastExchange
Input [1]: [wp_web_page_sk#64]
Arguments: [wp_web_page_sk#64]

(60) CometBroadcastHashJoin
Left output [3]: [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60]
Right output [1]: [wp_web_page_sk#64]
Arguments: [ws_web_page_sk#58], [wp_web_page_sk#64], Inner, BuildRight

(61) CometProject
Input [4]: [ws_web_page_sk#58, ws_ext_sales_price#59, ws_net_profit#60, wp_web_page_sk#64]
Arguments: [ws_ext_sales_price#59, ws_net_profit#60, wp_web_page_sk#64], [ws_ext_sales_price#59, ws_net_profit#60, wp_web_page_sk#64]

(62) CometHashAggregate
Input [3]: [ws_ext_sales_price#59, ws_net_profit#60, wp_web_page_sk#64]
Keys [1]: [wp_web_page_sk#64]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#59)), partial_sum(UnscaledValue(ws_net_profit#60))]

(63) ColumnarToRow [codegen id : 9]
Input [3]: [wp_web_page_sk#64, sum#65, sum#66]

(64) Exchange
Input [3]: [wp_web_page_sk#64, sum#65, sum#66]
Arguments: hashpartitioning(wp_web_page_sk#64, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(65) HashAggregate [codegen id : 12]
Input [3]: [wp_web_page_sk#64, sum#65, sum#66]
Keys [1]: [wp_web_page_sk#64]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#59)), sum(UnscaledValue(ws_net_profit#60))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#59))#67, sum(UnscaledValue(ws_net_profit#60))#68]
Results [3]: [wp_web_page_sk#64, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#59))#67,17,2) AS sales#69, MakeDecimal(sum(UnscaledValue(ws_net_profit#60))#68,17,2) AS profit#70]

(66) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73, wr_returned_date_sk#74]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#74), dynamicpruningexpression(wr_returned_date_sk#74 IN dynamicpruning#75)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(67) CometFilter
Input [4]: [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73, wr_returned_date_sk#74]
Condition : isnotnull(wr_web_page_sk#71)

(68) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#76]

(69) CometBroadcastHashJoin
Left output [4]: [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73, wr_returned_date_sk#74]
Right output [1]: [d_date_sk#76]
Arguments: [wr_returned_date_sk#74], [d_date_sk#76], Inner, BuildRight

(70) CometProject
Input [5]: [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73, wr_returned_date_sk#74, d_date_sk#76]
Arguments: [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73], [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73]

(71) ReusedExchange [Reuses operator id: 59]
Output [1]: [wp_web_page_sk#77]

(72) CometBroadcastHashJoin
Left output [3]: [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73]
Right output [1]: [wp_web_page_sk#77]
Arguments: [wr_web_page_sk#71], [wp_web_page_sk#77], Inner, BuildRight

(73) CometProject
Input [4]: [wr_web_page_sk#71, wr_return_amt#72, wr_net_loss#73, wp_web_page_sk#77]
Arguments: [wr_return_amt#72, wr_net_loss#73, wp_web_page_sk#77], [wr_return_amt#72, wr_net_loss#73, wp_web_page_sk#77]

(74) CometHashAggregate
Input [3]: [wr_return_amt#72, wr_net_loss#73, wp_web_page_sk#77]
Keys [1]: [wp_web_page_sk#77]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#72)), partial_sum(UnscaledValue(wr_net_loss#73))]

(75) ColumnarToRow [codegen id : 10]
Input [3]: [wp_web_page_sk#77, sum#78, sum#79]

(76) Exchange
Input [3]: [wp_web_page_sk#77, sum#78, sum#79]
Arguments: hashpartitioning(wp_web_page_sk#77, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(77) HashAggregate [codegen id : 11]
Input [3]: [wp_web_page_sk#77, sum#78, sum#79]
Keys [1]: [wp_web_page_sk#77]
Functions [2]: [sum(UnscaledValue(wr_return_amt#72)), sum(UnscaledValue(wr_net_loss#73))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#72))#80, sum(UnscaledValue(wr_net_loss#73))#81]
Results [3]: [wp_web_page_sk#77, MakeDecimal(sum(UnscaledValue(wr_return_amt#72))#80,17,2) AS returns#82, MakeDecimal(sum(UnscaledValue(wr_net_loss#73))#81,17,2) AS profit_loss#83]

(78) BroadcastExchange
Input [3]: [wp_web_page_sk#77, returns#82, profit_loss#83]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(79) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [wp_web_page_sk#64]
Right keys [1]: [wp_web_page_sk#77]
Join type: LeftOuter
Join condition: None

(80) Project [codegen id : 12]
Output [5]: [web channel AS channel#84, wp_web_page_sk#64 AS id#85, sales#69, coalesce(returns#82, 0.00) AS returns#86, (profit#70 - coalesce(profit_loss#83, 0.00)) AS profit#87]
Input [6]: [wp_web_page_sk#64, sales#69, profit#70, wp_web_page_sk#77, returns#82, profit_loss#83]

(81) Union

(82) HashAggregate [codegen id : 13]
Input [5]: [channel#28, id#29, sales#13, returns#30, profit#31]
Keys [2]: [channel#28, id#29]
Functions [3]: [partial_sum(sales#13), partial_sum(returns#30), partial_sum(profit#31)]
Aggregate Attributes [6]: [sum#88, isEmpty#89, sum#90, isEmpty#91, sum#92, isEmpty#93]
Results [8]: [channel#28, id#29, sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]

(83) Exchange
Input [8]: [channel#28, id#29, sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]
Arguments: hashpartitioning(channel#28, id#29, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(84) HashAggregate [codegen id : 14]
Input [8]: [channel#28, id#29, sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]
Keys [2]: [channel#28, id#29]
Functions [3]: [sum(sales#13), sum(returns#30), sum(profit#31)]
Aggregate Attributes [3]: [sum(sales#13)#100, sum(returns#30)#101, sum(profit#31)#102]
Results [5]: [channel#28, id#29, cast(sum(sales#13)#100 as decimal(37,2)) AS sales#103, cast(sum(returns#30)#101 as decimal(37,2)) AS returns#104, cast(sum(profit#31)#102 as decimal(38,2)) AS profit#105]

(85) ReusedExchange [Reuses operator id: 83]
Output [8]: [channel#28, id#29, sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]

(86) HashAggregate [codegen id : 28]
Input [8]: [channel#28, id#29, sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]
Keys [2]: [channel#28, id#29]
Functions [3]: [sum(sales#13), sum(returns#30), sum(profit#31)]
Aggregate Attributes [3]: [sum(sales#13)#100, sum(returns#30)#101, sum(profit#31)#102]
Results [4]: [channel#28, sum(sales#13)#100 AS sales#106, sum(returns#30)#101 AS returns#107, sum(profit#31)#102 AS profit#108]

(87) HashAggregate [codegen id : 28]
Input [4]: [channel#28, sales#106, returns#107, profit#108]
Keys [1]: [channel#28]
Functions [3]: [partial_sum(sales#106), partial_sum(returns#107), partial_sum(profit#108)]
Aggregate Attributes [6]: [sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114]
Results [7]: [channel#28, sum#115, isEmpty#116, sum#117, isEmpty#118, sum#119, isEmpty#120]

(88) Exchange
Input [7]: [channel#28, sum#115, isEmpty#116, sum#117, isEmpty#118, sum#119, isEmpty#120]
Arguments: hashpartitioning(channel#28, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(89) HashAggregate [codegen id : 29]
Input [7]: [channel#28, sum#115, isEmpty#116, sum#117, isEmpty#118, sum#119, isEmpty#120]
Keys [1]: [channel#28]
Functions [3]: [sum(sales#106), sum(returns#107), sum(profit#108)]
Aggregate Attributes [3]: [sum(sales#106)#121, sum(returns#107)#122, sum(profit#108)#123]
Results [5]: [channel#28, null AS id#124, sum(sales#106)#121 AS sales#125, sum(returns#107)#122 AS returns#126, sum(profit#108)#123 AS profit#127]

(90) ReusedExchange [Reuses operator id: 83]
Output [8]: [channel#28, id#29, sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]

(91) HashAggregate [codegen id : 43]
Input [8]: [channel#28, id#29, sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]
Keys [2]: [channel#28, id#29]
Functions [3]: [sum(sales#13), sum(returns#30), sum(profit#31)]
Aggregate Attributes [3]: [sum(sales#13)#100, sum(returns#30)#101, sum(profit#31)#102]
Results [3]: [sum(sales#13)#100 AS sales#106, sum(returns#30)#101 AS returns#107, sum(profit#31)#102 AS profit#108]

(92) HashAggregate [codegen id : 43]
Input [3]: [sales#106, returns#107, profit#108]
Keys: []
Functions [3]: [partial_sum(sales#106), partial_sum(returns#107), partial_sum(profit#108)]
Aggregate Attributes [6]: [sum#128, isEmpty#129, sum#130, isEmpty#131, sum#132, isEmpty#133]
Results [6]: [sum#134, isEmpty#135, sum#136, isEmpty#137, sum#138, isEmpty#139]

(93) Exchange
Input [6]: [sum#134, isEmpty#135, sum#136, isEmpty#137, sum#138, isEmpty#139]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(94) HashAggregate [codegen id : 44]
Input [6]: [sum#134, isEmpty#135, sum#136, isEmpty#137, sum#138, isEmpty#139]
Keys: []
Functions [3]: [sum(sales#106), sum(returns#107), sum(profit#108)]
Aggregate Attributes [3]: [sum(sales#106)#140, sum(returns#107)#141, sum(profit#108)#142]
Results [5]: [null AS channel#143, null AS id#144, sum(sales#106)#140 AS sales#145, sum(returns#107)#141 AS returns#146, sum(profit#108)#142 AS profit#147]

(95) Union

(96) HashAggregate [codegen id : 45]
Input [5]: [channel#28, id#29, sales#103, returns#104, profit#105]
Keys [5]: [channel#28, id#29, sales#103, returns#104, profit#105]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#28, id#29, sales#103, returns#104, profit#105]

(97) Exchange
Input [5]: [channel#28, id#29, sales#103, returns#104, profit#105]
Arguments: hashpartitioning(channel#28, id#29, sales#103, returns#104, profit#105, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(98) HashAggregate [codegen id : 46]
Input [5]: [channel#28, id#29, sales#103, returns#104, profit#105]
Keys [5]: [channel#28, id#29, sales#103, returns#104, profit#105]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#28, id#29, sales#103, returns#104, profit#105]

(99) TakeOrderedAndProject
Input [5]: [channel#28, id#29, sales#103, returns#104, profit#105]
Arguments: 100, [channel#28 ASC NULLS FIRST, id#29 ASC NULLS FIRST], [channel#28, id#29, sales#103, returns#104, profit#105]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (104)
+- * ColumnarToRow (103)
   +- CometProject (102)
      +- CometFilter (101)
         +- CometScan parquet spark_catalog.default.date_dim (100)


(100) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(101) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 1998-08-04)) AND (d_date#7 <= 1998-09-03)) AND isnotnull(d_date_sk#6))

(102) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(103) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(104) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 18 Hosting Expression = sr_returned_date_sk#18 IN dynamicpruning#5

Subquery:3 Hosting operator id = 33 Hosting Expression = cs_sold_date_sk#35 IN dynamicpruning#5

Subquery:4 Hosting operator id = 42 Hosting Expression = cr_returned_date_sk#46 IN dynamicpruning#5

Subquery:5 Hosting operator id = 52 Hosting Expression = ws_sold_date_sk#61 IN dynamicpruning#5

Subquery:6 Hosting operator id = 66 Hosting Expression = wr_returned_date_sk#74 IN dynamicpruning#5


