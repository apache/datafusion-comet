== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- Window (41)
      +- * CometColumnarToRow (40)
         +- CometSort (39)
            +- CometExchange (38)
               +- CometHashAggregate (37)
                  +- CometExchange (36)
                     +- CometHashAggregate (35)
                        +- CometUnion (34)
                           :- CometHashAggregate (23)
                           :  +- CometExchange (22)
                           :     +- CometHashAggregate (21)
                           :        +- CometProject (20)
                           :           +- CometBroadcastHashJoin (19)
                           :              :- CometProject (14)
                           :              :  +- CometBroadcastHashJoin (13)
                           :              :     :- CometProject (8)
                           :              :     :  +- CometBroadcastHashJoin (7)
                           :              :     :     :- CometFilter (2)
                           :              :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
                           :              :     :     +- CometBroadcastExchange (6)
                           :              :     :        +- CometProject (5)
                           :              :     :           +- CometFilter (4)
                           :              :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
                           :              :     +- CometBroadcastExchange (12)
                           :              :        +- CometProject (11)
                           :              :           +- CometFilter (10)
                           :              :              +- CometNativeScan parquet spark_catalog.default.item (9)
                           :              +- CometBroadcastExchange (18)
                           :                 +- CometProject (17)
                           :                    +- CometFilter (16)
                           :                       +- CometNativeScan parquet spark_catalog.default.store (15)
                           :- CometHashAggregate (28)
                           :  +- CometExchange (27)
                           :     +- CometHashAggregate (26)
                           :        +- CometHashAggregate (25)
                           :           +- ReusedExchange (24)
                           +- CometHashAggregate (33)
                              +- CometExchange (32)
                                 +- CometHashAggregate (31)
                                    +- CometHashAggregate (30)
                                       +- ReusedExchange (29)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#5)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#5], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#6]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) CometNativeScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Condition : isnotnull(i_item_sk#8)

(11) CometProject
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Arguments: [i_item_sk#8, i_class#11, i_category#12], [i_item_sk#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#9, 50, true, false, true) AS i_class#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#10, 50, true, false, true) AS i_category#12]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#8, i_class#11, i_category#12]
Arguments: [i_item_sk#8, i_class#11, i_category#12]

(13) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#8, i_class#11, i_category#12]
Arguments: [ss_item_sk#1], [i_item_sk#8], Inner, BuildRight

(14) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#8, i_class#11, i_category#12]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]

(15) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#13, s_state#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#13, s_state#14]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#14, 2, true, false, true) = TN) AND isnotnull(s_store_sk#13))

(17) CometProject
Input [2]: [s_store_sk#13, s_state#14]
Arguments: [s_store_sk#13], [s_store_sk#13]

(18) CometBroadcastExchange
Input [1]: [s_store_sk#13]
Arguments: [s_store_sk#13]

(19) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]
Right output [1]: [s_store_sk#13]
Arguments: [ss_store_sk#2], [s_store_sk#13], Inner, BuildRight

(20) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12, s_store_sk#13]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12], [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]

(21) CometHashAggregate
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#11, i_category#12]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]

(22) CometExchange
Input [4]: [i_category#12, i_class#11, sum#15, sum#16]
Arguments: hashpartitioning(i_category#12, i_class#11, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(23) CometHashAggregate
Input [4]: [i_category#12, i_class#11, sum#15, sum#16]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]

(24) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#12, i_class#11, sum#17, sum#18]

(25) CometHashAggregate
Input [4]: [i_category#12, i_class#11, sum#17, sum#18]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [sum(UnscaledValue(ss_net_profit#19)), sum(UnscaledValue(ss_ext_sales_price#20))]

(26) CometHashAggregate
Input [3]: [ss_net_profit#21, ss_ext_sales_price#22, i_category#12]
Keys [1]: [i_category#12]
Functions [2]: [partial_sum(ss_net_profit#21), partial_sum(ss_ext_sales_price#22)]

(27) CometExchange
Input [5]: [i_category#12, sum#23, isEmpty#24, sum#25, isEmpty#26]
Arguments: hashpartitioning(i_category#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(28) CometHashAggregate
Input [5]: [i_category#12, sum#23, isEmpty#24, sum#25, isEmpty#26]
Keys [1]: [i_category#12]
Functions [2]: [sum(ss_net_profit#21), sum(ss_ext_sales_price#22)]

(29) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#12, i_class#11, sum#27, sum#28]

(30) CometHashAggregate
Input [4]: [i_category#12, i_class#11, sum#27, sum#28]
Keys [2]: [i_category#12, i_class#11]
Functions [2]: [sum(UnscaledValue(ss_net_profit#29)), sum(UnscaledValue(ss_ext_sales_price#30))]

(31) CometHashAggregate
Input [2]: [ss_net_profit#21, ss_ext_sales_price#22]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#21), partial_sum(ss_ext_sales_price#22)]

(32) CometExchange
Input [4]: [sum#31, isEmpty#32, sum#33, isEmpty#34]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(33) CometHashAggregate
Input [4]: [sum#31, isEmpty#32, sum#33, isEmpty#34]
Keys: []
Functions [2]: [sum(ss_net_profit#21), sum(ss_ext_sales_price#22)]

(34) CometUnion
Child 0 Input [6]: [gross_margin#35, i_category#36, i_class#37, t_category#38, t_class#39, lochierarchy#40]
Child 1 Input [6]: [gross_margin#41, i_category#12, i_class#42, t_category#43, t_class#44, lochierarchy#45]
Child 2 Input [6]: [gross_margin#46, i_category#47, i_class#48, t_category#49, t_class#50, lochierarchy#51]

(35) CometHashAggregate
Input [6]: [gross_margin#35, i_category#36, i_class#37, t_category#38, t_class#39, lochierarchy#40]
Keys [6]: [gross_margin#35, i_category#36, i_class#37, t_category#38, t_class#39, lochierarchy#40]
Functions: []

(36) CometExchange
Input [6]: [gross_margin#35, i_category#36, i_class#37, t_category#38, t_class#39, lochierarchy#40]
Arguments: hashpartitioning(gross_margin#35, i_category#36, i_class#37, t_category#38, t_class#39, lochierarchy#40, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(37) CometHashAggregate
Input [6]: [gross_margin#35, i_category#36, i_class#37, t_category#38, t_class#39, lochierarchy#40]
Keys [6]: [gross_margin#35, i_category#36, i_class#37, t_category#38, t_class#39, lochierarchy#40]
Functions: []

(38) CometExchange
Input [5]: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, _w0#52]
Arguments: hashpartitioning(lochierarchy#40, _w0#52, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(39) CometSort
Input [5]: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, _w0#52]
Arguments: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, _w0#52], [lochierarchy#40 ASC NULLS FIRST, _w0#52 ASC NULLS FIRST, gross_margin#35 ASC NULLS FIRST]

(40) CometColumnarToRow [codegen id : 1]
Input [5]: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, _w0#52]

(41) Window
Input [5]: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, _w0#52]
Arguments: [rank(gross_margin#35) windowspecdefinition(lochierarchy#40, _w0#52, gross_margin#35 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#53], [lochierarchy#40, _w0#52], [gross_margin#35 ASC NULLS FIRST]

(42) Project [codegen id : 2]
Output [5]: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, rank_within_parent#53]
Input [6]: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, _w0#52, rank_within_parent#53]

(43) TakeOrderedAndProject
Input [5]: [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, rank_within_parent#53]
Arguments: 100, [lochierarchy#40 DESC NULLS LAST, CASE WHEN (lochierarchy#40 = 0) THEN i_category#36 END ASC NULLS FIRST, rank_within_parent#53 ASC NULLS FIRST], [gross_margin#35, i_category#36, i_class#37, lochierarchy#40, rank_within_parent#53]

