== Physical Plan ==
TakeOrderedAndProject (65)
+- * Project (64)
   +- Window (63)
      +- * CometColumnarToRow (62)
         +- CometSort (61)
            +- CometExchange (60)
               +- CometHashAggregate (59)
                  +- CometColumnarExchange (58)
                     +- * HashAggregate (57)
                        +- Union (56)
                           :- * HashAggregate (41)
                           :  +- * CometColumnarToRow (40)
                           :     +- CometColumnarExchange (39)
                           :        +- * HashAggregate (38)
                           :           +- * Project (37)
                           :              +- * BroadcastHashJoin Inner BuildRight (36)
                           :                 :- * CometColumnarToRow (9)
                           :                 :  +- CometProject (8)
                           :                 :     +- CometBroadcastHashJoin (7)
                           :                 :        :- CometFilter (2)
                           :                 :        :  +- CometScan parquet spark_catalog.default.store_sales (1)
                           :                 :        +- CometBroadcastExchange (6)
                           :                 :           +- CometProject (5)
                           :                 :              +- CometFilter (4)
                           :                 :                 +- CometScan parquet spark_catalog.default.date_dim (3)
                           :                 +- BroadcastExchange (35)
                           :                    +- * Project (34)
                           :                       +- * BroadcastHashJoin LeftSemi BuildRight (33)
                           :                          :- * CometColumnarToRow (12)
                           :                          :  +- CometFilter (11)
                           :                          :     +- CometScan parquet spark_catalog.default.store (10)
                           :                          +- BroadcastExchange (32)
                           :                             +- * Project (31)
                           :                                +- * Filter (30)
                           :                                   +- Window (29)
                           :                                      +- * CometColumnarToRow (28)
                           :                                         +- CometSort (27)
                           :                                            +- CometHashAggregate (26)
                           :                                               +- CometExchange (25)
                           :                                                  +- CometHashAggregate (24)
                           :                                                     +- CometProject (23)
                           :                                                        +- CometBroadcastHashJoin (22)
                           :                                                           :- CometProject (20)
                           :                                                           :  +- CometBroadcastHashJoin (19)
                           :                                                           :     :- CometFilter (14)
                           :                                                           :     :  +- CometScan parquet spark_catalog.default.store_sales (13)
                           :                                                           :     +- CometBroadcastExchange (18)
                           :                                                           :        +- CometProject (17)
                           :                                                           :           +- CometFilter (16)
                           :                                                           :              +- CometScan parquet spark_catalog.default.store (15)
                           :                                                           +- ReusedExchange (21)
                           :- * HashAggregate (48)
                           :  +- * CometColumnarToRow (47)
                           :     +- CometColumnarExchange (46)
                           :        +- * HashAggregate (45)
                           :           +- * HashAggregate (44)
                           :              +- * CometColumnarToRow (43)
                           :                 +- ReusedExchange (42)
                           +- * HashAggregate (55)
                              +- * CometColumnarToRow (54)
                                 +- CometColumnarExchange (53)
                                    +- * HashAggregate (52)
                                       +- * HashAggregate (51)
                                          +- * CometColumnarToRow (50)
                                             +- ReusedExchange (49)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) CometColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(12) CometColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_store_sk#10)

(15) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : isnotnull(s_store_sk#14)

(17) CometProject
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14, s_state#16], [s_store_sk#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#15, 2, true, false, true) AS s_state#16]

(18) CometBroadcastExchange
Input [2]: [s_store_sk#14, s_state#16]
Arguments: [s_store_sk#14, s_state#16]

(19) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Right output [2]: [s_store_sk#14, s_state#16]
Arguments: [ss_store_sk#10], [s_store_sk#14], Inner, BuildRight

(20) CometProject
Input [5]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12, s_store_sk#14, s_state#16]
Arguments: [ss_net_profit#11, ss_sold_date_sk#12, s_state#16], [ss_net_profit#11, ss_sold_date_sk#12, s_state#16]

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#17]

(22) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#16]
Right output [1]: [d_date_sk#17]
Arguments: [ss_sold_date_sk#12], [d_date_sk#17], Inner, BuildRight

(23) CometProject
Input [4]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#16, d_date_sk#17]
Arguments: [ss_net_profit#11, s_state#16], [ss_net_profit#11, s_state#16]

(24) CometHashAggregate
Input [2]: [ss_net_profit#11, s_state#16]
Keys [1]: [s_state#16]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#11))]

(25) CometExchange
Input [2]: [s_state#16, sum#18]
Arguments: hashpartitioning(s_state#16, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(26) CometHashAggregate
Input [2]: [s_state#16, sum#18]
Keys [1]: [s_state#16]
Functions [1]: [sum(UnscaledValue(ss_net_profit#11))]

(27) CometSort
Input [3]: [s_state#16, _w0#19, s_state#16]
Arguments: [s_state#16, _w0#19, s_state#16], [s_state#16 ASC NULLS FIRST, _w0#19 DESC NULLS LAST]

(28) CometColumnarToRow [codegen id : 1]
Input [3]: [s_state#16, _w0#19, s_state#16]

(29) Window
Input [3]: [s_state#16, _w0#19, s_state#16]
Arguments: [rank(_w0#19) windowspecdefinition(s_state#16, _w0#19 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#20], [s_state#16], [_w0#19 DESC NULLS LAST]

(30) Filter [codegen id : 2]
Input [4]: [s_state#16, _w0#19, s_state#16, ranking#20]
Condition : (ranking#20 <= 5)

(31) Project [codegen id : 2]
Output [1]: [s_state#16]
Input [4]: [s_state#16, _w0#19, s_state#16, ranking#20]

(32) BroadcastExchange
Input [1]: [s_state#16]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(33) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#9, 2, true, false, true)]
Right keys [1]: [s_state#16]
Join type: LeftSemi
Join condition: None

(34) Project [codegen id : 3]
Output [3]: [s_store_sk#7, s_county#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#9, 2, true, false, true) AS s_state#21]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(35) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#8, s_state#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(36) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(37) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_county#8, s_state#21]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#7, s_county#8, s_state#21]

(38) HashAggregate [codegen id : 4]
Input [3]: [ss_net_profit#2, s_county#8, s_state#21]
Keys [2]: [s_state#21, s_county#8]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#22]
Results [3]: [s_state#21, s_county#8, sum#23]

(39) CometColumnarExchange
Input [3]: [s_state#21, s_county#8, sum#23]
Arguments: hashpartitioning(s_state#21, s_county#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(40) CometColumnarToRow [codegen id : 5]
Input [3]: [s_state#21, s_county#8, sum#23]

(41) HashAggregate [codegen id : 5]
Input [3]: [s_state#21, s_county#8, sum#23]
Keys [2]: [s_state#21, s_county#8]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#24]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#24,17,2) as decimal(27,2)) AS total_sum#25, s_state#21 AS s_state#26, s_county#8 AS s_county#27, 0 AS g_state#28, 0 AS g_county#29, 0 AS lochierarchy#30]

(42) ReusedExchange [Reuses operator id: 39]
Output [3]: [s_state#21, s_county#31, sum#32]

(43) CometColumnarToRow [codegen id : 10]
Input [3]: [s_state#21, s_county#31, sum#32]

(44) HashAggregate [codegen id : 10]
Input [3]: [s_state#21, s_county#31, sum#32]
Keys [2]: [s_state#21, s_county#31]
Functions [1]: [sum(UnscaledValue(ss_net_profit#33))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#33))#24]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#33))#24,17,2) AS total_sum#34, s_state#21]

(45) HashAggregate [codegen id : 10]
Input [2]: [total_sum#34, s_state#21]
Keys [1]: [s_state#21]
Functions [1]: [partial_sum(total_sum#34)]
Aggregate Attributes [2]: [sum#35, isEmpty#36]
Results [3]: [s_state#21, sum#37, isEmpty#38]

(46) CometColumnarExchange
Input [3]: [s_state#21, sum#37, isEmpty#38]
Arguments: hashpartitioning(s_state#21, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(47) CometColumnarToRow [codegen id : 11]
Input [3]: [s_state#21, sum#37, isEmpty#38]

(48) HashAggregate [codegen id : 11]
Input [3]: [s_state#21, sum#37, isEmpty#38]
Keys [1]: [s_state#21]
Functions [1]: [sum(total_sum#34)]
Aggregate Attributes [1]: [sum(total_sum#34)#39]
Results [6]: [sum(total_sum#34)#39 AS total_sum#40, s_state#21, null AS s_county#41, 0 AS g_state#42, 1 AS g_county#43, 1 AS lochierarchy#44]

(49) ReusedExchange [Reuses operator id: 39]
Output [3]: [s_state#21, s_county#45, sum#46]

(50) CometColumnarToRow [codegen id : 16]
Input [3]: [s_state#21, s_county#45, sum#46]

(51) HashAggregate [codegen id : 16]
Input [3]: [s_state#21, s_county#45, sum#46]
Keys [2]: [s_state#21, s_county#45]
Functions [1]: [sum(UnscaledValue(ss_net_profit#47))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#47))#24]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#47))#24,17,2) AS total_sum#34]

(52) HashAggregate [codegen id : 16]
Input [1]: [total_sum#34]
Keys: []
Functions [1]: [partial_sum(total_sum#34)]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [2]: [sum#50, isEmpty#51]

(53) CometColumnarExchange
Input [2]: [sum#50, isEmpty#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(54) CometColumnarToRow [codegen id : 17]
Input [2]: [sum#50, isEmpty#51]

(55) HashAggregate [codegen id : 17]
Input [2]: [sum#50, isEmpty#51]
Keys: []
Functions [1]: [sum(total_sum#34)]
Aggregate Attributes [1]: [sum(total_sum#34)#52]
Results [6]: [sum(total_sum#34)#52 AS total_sum#53, null AS s_state#54, null AS s_county#55, 1 AS g_state#56, 1 AS g_county#57, 2 AS lochierarchy#58]

(56) Union

(57) HashAggregate [codegen id : 18]
Input [6]: [total_sum#25, s_state#26, s_county#27, g_state#28, g_county#29, lochierarchy#30]
Keys [6]: [total_sum#25, s_state#26, s_county#27, g_state#28, g_county#29, lochierarchy#30]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#25, s_state#26, s_county#27, g_state#28, g_county#29, lochierarchy#30]

(58) CometColumnarExchange
Input [6]: [total_sum#25, s_state#26, s_county#27, g_state#28, g_county#29, lochierarchy#30]
Arguments: hashpartitioning(total_sum#25, s_state#26, s_county#27, g_state#28, g_county#29, lochierarchy#30, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(59) CometHashAggregate
Input [6]: [total_sum#25, s_state#26, s_county#27, g_state#28, g_county#29, lochierarchy#30]
Keys [6]: [total_sum#25, s_state#26, s_county#27, g_state#28, g_county#29, lochierarchy#30]
Functions: []

(60) CometExchange
Input [5]: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, _w0#59]
Arguments: hashpartitioning(lochierarchy#30, _w0#59, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(61) CometSort
Input [5]: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, _w0#59]
Arguments: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, _w0#59], [lochierarchy#30 ASC NULLS FIRST, _w0#59 ASC NULLS FIRST, total_sum#25 DESC NULLS LAST]

(62) CometColumnarToRow [codegen id : 19]
Input [5]: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, _w0#59]

(63) Window
Input [5]: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, _w0#59]
Arguments: [rank(total_sum#25) windowspecdefinition(lochierarchy#30, _w0#59, total_sum#25 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#60], [lochierarchy#30, _w0#59], [total_sum#25 DESC NULLS LAST]

(64) Project [codegen id : 20]
Output [5]: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, rank_within_parent#60]
Input [6]: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, _w0#59, rank_within_parent#60]

(65) TakeOrderedAndProject
Input [5]: [total_sum#25, s_state#26, s_county#27, lochierarchy#30, rank_within_parent#60]
Arguments: 100, [lochierarchy#30 DESC NULLS LAST, CASE WHEN (lochierarchy#30 = 0) THEN s_state#26 END ASC NULLS FIRST, rank_within_parent#60 ASC NULLS FIRST], [total_sum#25, s_state#26, s_county#27, lochierarchy#30, rank_within_parent#60]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (70)
+- * CometColumnarToRow (69)
   +- CometProject (68)
      +- CometFilter (67)
         +- CometScan parquet spark_catalog.default.date_dim (66)


(66) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(67) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(68) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(69) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(70) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 13 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#4


