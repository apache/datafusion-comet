== Physical Plan ==
TakeOrderedAndProject (76)
+- * Filter (75)
   +- * HashAggregate (74)
      +- * HashAggregate (73)
         +- * Project (72)
            +- * BroadcastHashJoin Inner BuildRight (71)
               :- Window (64)
               :  +- * CometColumnarToRow (63)
               :     +- CometSort (62)
               :        +- CometExchange (61)
               :           +- CometProject (60)
               :              +- CometFilter (59)
               :                 +- CometSortMergeJoin (58)
               :                    :- CometSort (30)
               :                    :  +- CometColumnarExchange (29)
               :                    :     +- * HashAggregate (28)
               :                    :        +- * CometColumnarToRow (27)
               :                    :           +- CometColumnarExchange (26)
               :                    :              +- * HashAggregate (25)
               :                    :                 +- * Project (24)
               :                    :                    +- * BroadcastHashJoin Inner BuildRight (23)
               :                    :                       :- * Project (16)
               :                    :                       :  +- Window (15)
               :                    :                       :     +- * CometColumnarToRow (14)
               :                    :                       :        +- CometSort (13)
               :                    :                       :           +- CometExchange (12)
               :                    :                       :              +- CometHashAggregate (11)
               :                    :                       :                 +- CometExchange (10)
               :                    :                       :                    +- CometHashAggregate (9)
               :                    :                       :                       +- CometProject (8)
               :                    :                       :                          +- CometBroadcastHashJoin (7)
               :                    :                       :                             :- CometFilter (2)
               :                    :                       :                             :  +- CometNativeScan parquet spark_catalog.default.web_sales (1)
               :                    :                       :                             +- CometBroadcastExchange (6)
               :                    :                       :                                +- CometProject (5)
               :                    :                       :                                   +- CometFilter (4)
               :                    :                       :                                      +- CometNativeScan parquet spark_catalog.default.date_dim (3)
               :                    :                       +- BroadcastExchange (22)
               :                    :                          +- * Project (21)
               :                    :                             +- Window (20)
               :                    :                                +- * CometColumnarToRow (19)
               :                    :                                   +- CometSort (18)
               :                    :                                      +- ReusedExchange (17)
               :                    +- CometSort (57)
               :                       +- CometColumnarExchange (56)
               :                          +- * HashAggregate (55)
               :                             +- * CometColumnarToRow (54)
               :                                +- CometColumnarExchange (53)
               :                                   +- * HashAggregate (52)
               :                                      +- * Project (51)
               :                                         +- * BroadcastHashJoin Inner BuildRight (50)
               :                                            :- * Project (43)
               :                                            :  +- Window (42)
               :                                            :     +- * CometColumnarToRow (41)
               :                                            :        +- CometSort (40)
               :                                            :           +- CometExchange (39)
               :                                            :              +- CometHashAggregate (38)
               :                                            :                 +- CometExchange (37)
               :                                            :                    +- CometHashAggregate (36)
               :                                            :                       +- CometProject (35)
               :                                            :                          +- CometBroadcastHashJoin (34)
               :                                            :                             :- CometFilter (32)
               :                                            :                             :  +- CometNativeScan parquet spark_catalog.default.store_sales (31)
               :                                            :                             +- ReusedExchange (33)
               :                                            +- BroadcastExchange (49)
               :                                               +- * Project (48)
               :                                                  +- Window (47)
               :                                                     +- * CometColumnarToRow (46)
               :                                                        +- CometSort (45)
               :                                                           +- ReusedExchange (44)
               +- BroadcastExchange (70)
                  +- * Project (69)
                     +- Window (68)
                        +- * CometColumnarToRow (67)
                           +- CometSort (66)
                              +- ReusedExchange (65)


(1) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#3)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(4) CometFilter
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Arguments: [d_date_sk#4, d_date#5], [d_date_sk#4, d_date#5]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: [d_date_sk#4, d_date#5]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Right output [2]: [d_date_sk#4, d_date#5]
Arguments: [ws_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#4, d_date#5]
Arguments: [ws_item_sk#1, ws_sales_price#2, d_date#5], [ws_item_sk#1, ws_sales_price#2, d_date#5]

(9) CometHashAggregate
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#5]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]

(10) CometExchange
Input [3]: [ws_item_sk#1, d_date#5, sum#7]
Arguments: hashpartitioning(ws_item_sk#1, d_date#5, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(11) CometHashAggregate
Input [3]: [ws_item_sk#1, d_date#5, sum#7]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]

(12) CometExchange
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(13) CometSort
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]
Arguments: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST]

(14) CometColumnarToRow [codegen id : 1]
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]

(15) Window
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#5 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#10], [ws_item_sk#1], [d_date#5 ASC NULLS FIRST]

(16) Project [codegen id : 4]
Output [4]: [item_sk#8, d_date#5, sumws#9, rk#10]
Input [5]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1, rk#10]

(17) ReusedExchange [Reuses operator id: 12]
Output [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]

(18) CometSort
Input [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]
Arguments: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12], [ws_item_sk#12 ASC NULLS FIRST, d_date#11 ASC NULLS FIRST]

(19) CometColumnarToRow [codegen id : 2]
Input [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]

(20) Window
Input [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]
Arguments: [row_number() windowspecdefinition(ws_item_sk#12, d_date#11 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#13], [ws_item_sk#12], [d_date#11 ASC NULLS FIRST]

(21) Project [codegen id : 3]
Output [3]: [item_sk#8 AS item_sk#14, sumws#9 AS sumws#15, rk#13]
Input [5]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12, rk#13]

(22) BroadcastExchange
Input [3]: [item_sk#14, sumws#15, rk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [item_sk#8]
Right keys [1]: [item_sk#14]
Join type: Inner
Join condition: (rk#10 >= rk#13)

(24) Project [codegen id : 4]
Output [4]: [item_sk#8, d_date#5, sumws#9, sumws#15]
Input [7]: [item_sk#8, d_date#5, sumws#9, rk#10, item_sk#14, sumws#15, rk#13]

(25) HashAggregate [codegen id : 4]
Input [4]: [item_sk#8, d_date#5, sumws#9, sumws#15]
Keys [3]: [item_sk#8, d_date#5, sumws#9]
Functions [1]: [partial_sum(sumws#15)]
Aggregate Attributes [2]: [sum#16, isEmpty#17]
Results [5]: [item_sk#8, d_date#5, sumws#9, sum#18, isEmpty#19]

(26) CometColumnarExchange
Input [5]: [item_sk#8, d_date#5, sumws#9, sum#18, isEmpty#19]
Arguments: hashpartitioning(item_sk#8, d_date#5, sumws#9, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(27) CometColumnarToRow [codegen id : 5]
Input [5]: [item_sk#8, d_date#5, sumws#9, sum#18, isEmpty#19]

(28) HashAggregate [codegen id : 5]
Input [5]: [item_sk#8, d_date#5, sumws#9, sum#18, isEmpty#19]
Keys [3]: [item_sk#8, d_date#5, sumws#9]
Functions [1]: [sum(sumws#15)]
Aggregate Attributes [1]: [sum(sumws#15)#20]
Results [3]: [item_sk#8, d_date#5, sum(sumws#15)#20 AS cume_sales#21]

(29) CometColumnarExchange
Input [3]: [item_sk#8, d_date#5, cume_sales#21]
Arguments: hashpartitioning(item_sk#8, d_date#5, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(30) CometSort
Input [3]: [item_sk#8, d_date#5, cume_sales#21]
Arguments: [item_sk#8, d_date#5, cume_sales#21], [item_sk#8 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST]

(31) CometNativeScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#24)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(32) CometFilter
Input [3]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24]
Condition : isnotnull(ss_item_sk#22)

(33) ReusedExchange [Reuses operator id: 6]
Output [2]: [d_date_sk#25, d_date#26]

(34) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24]
Right output [2]: [d_date_sk#25, d_date#26]
Arguments: [ss_sold_date_sk#24], [d_date_sk#25], Inner, BuildRight

(35) CometProject
Input [5]: [ss_item_sk#22, ss_sales_price#23, ss_sold_date_sk#24, d_date_sk#25, d_date#26]
Arguments: [ss_item_sk#22, ss_sales_price#23, d_date#26], [ss_item_sk#22, ss_sales_price#23, d_date#26]

(36) CometHashAggregate
Input [3]: [ss_item_sk#22, ss_sales_price#23, d_date#26]
Keys [2]: [ss_item_sk#22, d_date#26]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#23))]

(37) CometExchange
Input [3]: [ss_item_sk#22, d_date#26, sum#27]
Arguments: hashpartitioning(ss_item_sk#22, d_date#26, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(38) CometHashAggregate
Input [3]: [ss_item_sk#22, d_date#26, sum#27]
Keys [2]: [ss_item_sk#22, d_date#26]
Functions [1]: [sum(UnscaledValue(ss_sales_price#23))]

(39) CometExchange
Input [4]: [item_sk#28, d_date#26, sumss#29, ss_item_sk#22]
Arguments: hashpartitioning(ss_item_sk#22, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(40) CometSort
Input [4]: [item_sk#28, d_date#26, sumss#29, ss_item_sk#22]
Arguments: [item_sk#28, d_date#26, sumss#29, ss_item_sk#22], [ss_item_sk#22 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST]

(41) CometColumnarToRow [codegen id : 6]
Input [4]: [item_sk#28, d_date#26, sumss#29, ss_item_sk#22]

(42) Window
Input [4]: [item_sk#28, d_date#26, sumss#29, ss_item_sk#22]
Arguments: [row_number() windowspecdefinition(ss_item_sk#22, d_date#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#30], [ss_item_sk#22], [d_date#26 ASC NULLS FIRST]

(43) Project [codegen id : 9]
Output [4]: [item_sk#28, d_date#26, sumss#29, rk#30]
Input [5]: [item_sk#28, d_date#26, sumss#29, ss_item_sk#22, rk#30]

(44) ReusedExchange [Reuses operator id: 39]
Output [4]: [item_sk#28, d_date#31, sumss#29, ss_item_sk#32]

(45) CometSort
Input [4]: [item_sk#28, d_date#31, sumss#29, ss_item_sk#32]
Arguments: [item_sk#28, d_date#31, sumss#29, ss_item_sk#32], [ss_item_sk#32 ASC NULLS FIRST, d_date#31 ASC NULLS FIRST]

(46) CometColumnarToRow [codegen id : 7]
Input [4]: [item_sk#28, d_date#31, sumss#29, ss_item_sk#32]

(47) Window
Input [4]: [item_sk#28, d_date#31, sumss#29, ss_item_sk#32]
Arguments: [row_number() windowspecdefinition(ss_item_sk#32, d_date#31 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#33], [ss_item_sk#32], [d_date#31 ASC NULLS FIRST]

(48) Project [codegen id : 8]
Output [3]: [item_sk#28 AS item_sk#34, sumss#29 AS sumss#35, rk#33]
Input [5]: [item_sk#28, d_date#31, sumss#29, ss_item_sk#32, rk#33]

(49) BroadcastExchange
Input [3]: [item_sk#34, sumss#35, rk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(50) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [item_sk#28]
Right keys [1]: [item_sk#34]
Join type: Inner
Join condition: (rk#30 >= rk#33)

(51) Project [codegen id : 9]
Output [4]: [item_sk#28, d_date#26, sumss#29, sumss#35]
Input [7]: [item_sk#28, d_date#26, sumss#29, rk#30, item_sk#34, sumss#35, rk#33]

(52) HashAggregate [codegen id : 9]
Input [4]: [item_sk#28, d_date#26, sumss#29, sumss#35]
Keys [3]: [item_sk#28, d_date#26, sumss#29]
Functions [1]: [partial_sum(sumss#35)]
Aggregate Attributes [2]: [sum#36, isEmpty#37]
Results [5]: [item_sk#28, d_date#26, sumss#29, sum#38, isEmpty#39]

(53) CometColumnarExchange
Input [5]: [item_sk#28, d_date#26, sumss#29, sum#38, isEmpty#39]
Arguments: hashpartitioning(item_sk#28, d_date#26, sumss#29, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(54) CometColumnarToRow [codegen id : 10]
Input [5]: [item_sk#28, d_date#26, sumss#29, sum#38, isEmpty#39]

(55) HashAggregate [codegen id : 10]
Input [5]: [item_sk#28, d_date#26, sumss#29, sum#38, isEmpty#39]
Keys [3]: [item_sk#28, d_date#26, sumss#29]
Functions [1]: [sum(sumss#35)]
Aggregate Attributes [1]: [sum(sumss#35)#40]
Results [3]: [item_sk#28, d_date#26, sum(sumss#35)#40 AS cume_sales#41]

(56) CometColumnarExchange
Input [3]: [item_sk#28, d_date#26, cume_sales#41]
Arguments: hashpartitioning(item_sk#28, d_date#26, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(57) CometSort
Input [3]: [item_sk#28, d_date#26, cume_sales#41]
Arguments: [item_sk#28, d_date#26, cume_sales#41], [item_sk#28 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST]

(58) CometSortMergeJoin
Left output [3]: [item_sk#8, d_date#5, cume_sales#21]
Right output [3]: [item_sk#28, d_date#26, cume_sales#41]
Arguments: [item_sk#8, d_date#5], [item_sk#28, d_date#26], FullOuter

(59) CometFilter
Input [6]: [item_sk#8, d_date#5, cume_sales#21, item_sk#28, d_date#26, cume_sales#41]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#8) THEN item_sk#8 ELSE item_sk#28 END)

(60) CometProject
Input [6]: [item_sk#8, d_date#5, cume_sales#21, item_sk#28, d_date#26, cume_sales#41]
Arguments: [item_sk#42, d_date#43, web_sales#44, store_sales#45], [CASE WHEN isnotnull(item_sk#8) THEN item_sk#8 ELSE item_sk#28 END AS item_sk#42, CASE WHEN isnotnull(d_date#5) THEN d_date#5 ELSE d_date#26 END AS d_date#43, cume_sales#21 AS web_sales#44, cume_sales#41 AS store_sales#45]

(61) CometExchange
Input [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]
Arguments: hashpartitioning(item_sk#42, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=11]

(62) CometSort
Input [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]
Arguments: [item_sk#42, d_date#43, web_sales#44, store_sales#45], [item_sk#42 ASC NULLS FIRST, d_date#43 ASC NULLS FIRST]

(63) CometColumnarToRow [codegen id : 11]
Input [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]

(64) Window
Input [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]
Arguments: [row_number() windowspecdefinition(item_sk#42, d_date#43 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#46], [item_sk#42], [d_date#43 ASC NULLS FIRST]

(65) ReusedExchange [Reuses operator id: 61]
Output [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]

(66) CometSort
Input [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]
Arguments: [item_sk#42, d_date#43, web_sales#44, store_sales#45], [item_sk#42 ASC NULLS FIRST, d_date#43 ASC NULLS FIRST]

(67) CometColumnarToRow [codegen id : 22]
Input [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]

(68) Window
Input [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]
Arguments: [row_number() windowspecdefinition(item_sk#42, d_date#43 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#47], [item_sk#42], [d_date#43 ASC NULLS FIRST]

(69) Project [codegen id : 23]
Output [4]: [item_sk#42 AS item_sk#48, web_sales#44 AS web_sales#49, store_sales#45 AS store_sales#50, rk#47]
Input [5]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, rk#47]

(70) BroadcastExchange
Input [4]: [item_sk#48, web_sales#49, store_sales#50, rk#47]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

(71) BroadcastHashJoin [codegen id : 24]
Left keys [1]: [item_sk#42]
Right keys [1]: [item_sk#48]
Join type: Inner
Join condition: (rk#46 >= rk#47)

(72) Project [codegen id : 24]
Output [6]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, web_sales#49, store_sales#50]
Input [9]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, rk#46, item_sk#48, web_sales#49, store_sales#50, rk#47]

(73) HashAggregate [codegen id : 24]
Input [6]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, web_sales#49, store_sales#50]
Keys [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]
Functions [2]: [partial_max(web_sales#49), partial_max(store_sales#50)]
Aggregate Attributes [2]: [max#51, max#52]
Results [6]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, max#53, max#54]

(74) HashAggregate [codegen id : 24]
Input [6]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, max#53, max#54]
Keys [4]: [item_sk#42, d_date#43, web_sales#44, store_sales#45]
Functions [2]: [max(web_sales#49), max(store_sales#50)]
Aggregate Attributes [2]: [max(web_sales#49)#55, max(store_sales#50)#56]
Results [6]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, max(web_sales#49)#55 AS web_cumulative#57, max(store_sales#50)#56 AS store_cumulative#58]

(75) Filter [codegen id : 24]
Input [6]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, web_cumulative#57, store_cumulative#58]
Condition : ((isnotnull(web_cumulative#57) AND isnotnull(store_cumulative#58)) AND (web_cumulative#57 > store_cumulative#58))

(76) TakeOrderedAndProject
Input [6]: [item_sk#42, d_date#43, web_sales#44, store_sales#45, web_cumulative#57, store_cumulative#58]
Arguments: 100, [item_sk#42 ASC NULLS FIRST, d_date#43 ASC NULLS FIRST], [item_sk#42, d_date#43, web_sales#44, store_sales#45, web_cumulative#57, store_cumulative#58]

