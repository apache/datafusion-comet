== Physical Plan ==
TakeOrderedAndProject (48)
+- * Filter (47)
   +- * HashAggregate (46)
      +- * HashAggregate (45)
         +- * Project (44)
            +- * BroadcastHashJoin Inner BuildRight (43)
               :- Window (37)
               :  +- * Sort (36)
               :     +- Exchange (35)
               :        +- * Project (34)
               :           +- * Filter (33)
               :              +- * SortMergeJoin FullOuter (32)
               :                 :- * Sort (29)
               :                 :  +- Exchange (28)
               :                 :     +- * HashAggregate (27)
               :                 :        +- Exchange (26)
               :                 :           +- * HashAggregate (25)
               :                 :              +- * Project (24)
               :                 :                 +- * BroadcastHashJoin Inner BuildRight (23)
               :                 :                    :- * Project (16)
               :                 :                    :  +- Window (15)
               :                 :                    :     +- * ColumnarToRow (14)
               :                 :                    :        +- CometSort (13)
               :                 :                    :           +- CometExchange (12)
               :                 :                    :              +- CometHashAggregate (11)
               :                 :                    :                 +- CometExchange (10)
               :                 :                    :                    +- CometHashAggregate (9)
               :                 :                    :                       +- CometProject (8)
               :                 :                    :                          +- CometBroadcastHashJoin (7)
               :                 :                    :                             :- CometFilter (2)
               :                 :                    :                             :  +- CometNativeScan: `spark_catalog`.`default`.`web_sales` (1)
               :                 :                    :                             +- CometBroadcastExchange (6)
               :                 :                    :                                +- CometProject (5)
               :                 :                    :                                   +- CometFilter (4)
               :                 :                    :                                      +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (3)
               :                 :                    +- BroadcastExchange (22)
               :                 :                       +- * Project (21)
               :                 :                          +- Window (20)
               :                 :                             +- * ColumnarToRow (19)
               :                 :                                +- CometSort (18)
               :                 :                                   +- ReusedExchange (17)
               :                 +- * Sort (31)
               :                    +- ReusedExchange (30)
               +- BroadcastExchange (42)
                  +- * Project (41)
                     +- Window (40)
                        +- * Sort (39)
                           +- ReusedExchange (38)


(1) CometNativeScan: `spark_catalog`.`default`.`web_sales`
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Arguments: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Arguments: [d_date_sk#4, d_date#5, d_month_seq#6]

(4) CometFilter
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Arguments: [d_date_sk#4, d_date#5], [d_date_sk#4, d_date#5]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: [d_date_sk#4, d_date#5]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Right output [2]: [d_date_sk#4, d_date#5]
Arguments: [ws_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#4, d_date#5]
Arguments: [ws_item_sk#1, ws_sales_price#2, d_date#5], [ws_item_sk#1, ws_sales_price#2, d_date#5]

(9) CometHashAggregate
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#5]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]

(10) CometExchange
Input [3]: [ws_item_sk#1, d_date#5, sum#7]
Arguments: hashpartitioning(ws_item_sk#1, d_date#5, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(11) CometHashAggregate
Input [3]: [ws_item_sk#1, d_date#5, sum#7]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]

(12) CometExchange
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(13) CometSort
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]
Arguments: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST]

(14) ColumnarToRow [codegen id : 1]
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]

(15) Window
Input [4]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#5 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#10], [ws_item_sk#1], [d_date#5 ASC NULLS FIRST]

(16) Project [codegen id : 4]
Output [4]: [item_sk#8, d_date#5, sumws#9, rk#10]
Input [5]: [item_sk#8, d_date#5, sumws#9, ws_item_sk#1, rk#10]

(17) ReusedExchange [Reuses operator id: 12]
Output [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]

(18) CometSort
Input [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]
Arguments: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12], [ws_item_sk#12 ASC NULLS FIRST, d_date#11 ASC NULLS FIRST]

(19) ColumnarToRow [codegen id : 2]
Input [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]

(20) Window
Input [4]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12]
Arguments: [row_number() windowspecdefinition(ws_item_sk#12, d_date#11 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#13], [ws_item_sk#12], [d_date#11 ASC NULLS FIRST]

(21) Project [codegen id : 3]
Output [3]: [item_sk#8 AS item_sk#14, sumws#9 AS sumws#15, rk#13]
Input [5]: [item_sk#8, d_date#11, sumws#9, ws_item_sk#12, rk#13]

(22) BroadcastExchange
Input [3]: [item_sk#14, sumws#15, rk#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(23) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [item_sk#8]
Right keys [1]: [item_sk#14]
Join type: Inner
Join condition: (rk#10 >= rk#13)

(24) Project [codegen id : 4]
Output [4]: [item_sk#8, d_date#5, sumws#9, sumws#15]
Input [7]: [item_sk#8, d_date#5, sumws#9, rk#10, item_sk#14, sumws#15, rk#13]

(25) HashAggregate [codegen id : 4]
Input [4]: [item_sk#8, d_date#5, sumws#9, sumws#15]
Keys [3]: [item_sk#8, d_date#5, sumws#9]
Functions [1]: [partial_sum(sumws#15)]
Aggregate Attributes [2]: [sum#16, isEmpty#17]
Results [5]: [item_sk#8, d_date#5, sumws#9, sum#18, isEmpty#19]

(26) Exchange
Input [5]: [item_sk#8, d_date#5, sumws#9, sum#18, isEmpty#19]
Arguments: hashpartitioning(item_sk#8, d_date#5, sumws#9, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(27) HashAggregate [codegen id : 5]
Input [5]: [item_sk#8, d_date#5, sumws#9, sum#18, isEmpty#19]
Keys [3]: [item_sk#8, d_date#5, sumws#9]
Functions [1]: [sum(sumws#15)]
Aggregate Attributes [1]: [sum(sumws#15)#20]
Results [3]: [item_sk#8, d_date#5, sum(sumws#15)#20 AS cume_sales#21]

(28) Exchange
Input [3]: [item_sk#8, d_date#5, cume_sales#21]
Arguments: hashpartitioning(item_sk#8, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(29) Sort [codegen id : 6]
Input [3]: [item_sk#8, d_date#5, cume_sales#21]
Arguments: [item_sk#8 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(30) ReusedExchange [Reuses operator id: 28]
Output [3]: [item_sk#22, d_date#23, cume_sales#24]

(31) Sort [codegen id : 12]
Input [3]: [item_sk#22, d_date#23, cume_sales#24]
Arguments: [item_sk#22 ASC NULLS FIRST, d_date#23 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 13]
Left keys [2]: [item_sk#8, d_date#5]
Right keys [2]: [item_sk#22, d_date#23]
Join type: FullOuter
Join condition: None

(33) Filter [codegen id : 13]
Input [6]: [item_sk#8, d_date#5, cume_sales#21, item_sk#22, d_date#23, cume_sales#24]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#8) THEN item_sk#8 ELSE item_sk#22 END)

(34) Project [codegen id : 13]
Output [4]: [CASE WHEN isnotnull(item_sk#8) THEN item_sk#8 ELSE item_sk#22 END AS item_sk#25, CASE WHEN isnotnull(d_date#5) THEN d_date#5 ELSE d_date#23 END AS d_date#26, cume_sales#21 AS web_sales#27, cume_sales#24 AS store_sales#28]
Input [6]: [item_sk#8, d_date#5, cume_sales#21, item_sk#22, d_date#23, cume_sales#24]

(35) Exchange
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: hashpartitioning(item_sk#25, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) Sort [codegen id : 14]
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: [item_sk#25 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST], false, 0

(37) Window
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: [row_number() windowspecdefinition(item_sk#25, d_date#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#29], [item_sk#25], [d_date#26 ASC NULLS FIRST]

(38) ReusedExchange [Reuses operator id: 35]
Output [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]

(39) Sort [codegen id : 28]
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: [item_sk#25 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST], false, 0

(40) Window
Input [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Arguments: [row_number() windowspecdefinition(item_sk#25, d_date#26 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#30], [item_sk#25], [d_date#26 ASC NULLS FIRST]

(41) Project [codegen id : 29]
Output [4]: [item_sk#25 AS item_sk#31, web_sales#27 AS web_sales#32, store_sales#28 AS store_sales#33, rk#30]
Input [5]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, rk#30]

(42) BroadcastExchange
Input [4]: [item_sk#31, web_sales#32, store_sales#33, rk#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

(43) BroadcastHashJoin [codegen id : 30]
Left keys [1]: [item_sk#25]
Right keys [1]: [item_sk#31]
Join type: Inner
Join condition: (rk#29 >= rk#30)

(44) Project [codegen id : 30]
Output [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_sales#32, store_sales#33]
Input [9]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, rk#29, item_sk#31, web_sales#32, store_sales#33, rk#30]

(45) HashAggregate [codegen id : 30]
Input [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_sales#32, store_sales#33]
Keys [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Functions [2]: [partial_max(web_sales#32), partial_max(store_sales#33)]
Aggregate Attributes [2]: [max#34, max#35]
Results [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, max#36, max#37]

(46) HashAggregate [codegen id : 30]
Input [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, max#36, max#37]
Keys [4]: [item_sk#25, d_date#26, web_sales#27, store_sales#28]
Functions [2]: [max(web_sales#32), max(store_sales#33)]
Aggregate Attributes [2]: [max(web_sales#32)#38, max(store_sales#33)#39]
Results [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, max(web_sales#32)#38 AS web_cumulative#40, max(store_sales#33)#39 AS store_cumulative#41]

(47) Filter [codegen id : 30]
Input [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_cumulative#40, store_cumulative#41]
Condition : ((isnotnull(web_cumulative#40) AND isnotnull(store_cumulative#41)) AND (web_cumulative#40 > store_cumulative#41))

(48) TakeOrderedAndProject
Input [6]: [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_cumulative#40, store_cumulative#41]
Arguments: 100, [item_sk#25 ASC NULLS FIRST, d_date#26 ASC NULLS FIRST], [item_sk#25, d_date#26, web_sales#27, store_sales#28, web_cumulative#40, store_cumulative#41]

