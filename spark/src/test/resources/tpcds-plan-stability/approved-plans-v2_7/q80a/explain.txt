== Physical Plan ==
TakeOrderedAndProject (109)
+- * HashAggregate (108)
   +- Exchange (107)
      +- * HashAggregate (106)
         +- Union (105)
            :- * HashAggregate (94)
            :  +- Exchange (93)
            :     +- * HashAggregate (92)
            :        +- Union (91)
            :           :- * HashAggregate (36)
            :           :  +- * ColumnarToRow (35)
            :           :     +- CometExchange (34)
            :           :        +- CometHashAggregate (33)
            :           :           +- CometProject (32)
            :           :              +- CometBroadcastHashJoin (31)
            :           :                 :- CometProject (26)
            :           :                 :  +- CometBroadcastHashJoin (25)
            :           :                 :     :- CometProject (20)
            :           :                 :     :  +- CometBroadcastHashJoin (19)
            :           :                 :     :     :- CometProject (15)
            :           :                 :     :     :  +- CometBroadcastHashJoin (14)
            :           :                 :     :     :     :- CometProject (9)
            :           :                 :     :     :     :  +- CometHashJoin (8)
            :           :                 :     :     :     :     :- CometExchange (3)
            :           :                 :     :     :     :     :  +- CometFilter (2)
            :           :                 :     :     :     :     :     +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :     :     :     +- CometExchange (7)
            :           :                 :     :     :     :        +- CometProject (6)
            :           :                 :     :     :     :           +- CometFilter (5)
            :           :                 :     :     :     :              +- CometScan parquet spark_catalog.default.store_returns (4)
            :           :                 :     :     :     +- CometBroadcastExchange (13)
            :           :                 :     :     :        +- CometProject (12)
            :           :                 :     :     :           +- CometFilter (11)
            :           :                 :     :     :              +- CometScan parquet spark_catalog.default.date_dim (10)
            :           :                 :     :     +- CometBroadcastExchange (18)
            :           :                 :     :        +- CometFilter (17)
            :           :                 :     :           +- CometScan parquet spark_catalog.default.store (16)
            :           :                 :     +- CometBroadcastExchange (24)
            :           :                 :        +- CometProject (23)
            :           :                 :           +- CometFilter (22)
            :           :                 :              +- CometScan parquet spark_catalog.default.item (21)
            :           :                 +- CometBroadcastExchange (30)
            :           :                    +- CometProject (29)
            :           :                       +- CometFilter (28)
            :           :                          +- CometScan parquet spark_catalog.default.promotion (27)
            :           :- * HashAggregate (63)
            :           :  +- * ColumnarToRow (62)
            :           :     +- CometExchange (61)
            :           :        +- CometHashAggregate (60)
            :           :           +- CometProject (59)
            :           :              +- CometBroadcastHashJoin (58)
            :           :                 :- CometProject (56)
            :           :                 :  +- CometBroadcastHashJoin (55)
            :           :                 :     :- CometProject (53)
            :           :                 :     :  +- CometBroadcastHashJoin (52)
            :           :                 :     :     :- CometProject (48)
            :           :                 :     :     :  +- CometBroadcastHashJoin (47)
            :           :                 :     :     :     :- CometProject (45)
            :           :                 :     :     :     :  +- CometHashJoin (44)
            :           :                 :     :     :     :     :- CometExchange (39)
            :           :                 :     :     :     :     :  +- CometFilter (38)
            :           :                 :     :     :     :     :     +- CometScan parquet spark_catalog.default.catalog_sales (37)
            :           :                 :     :     :     :     +- CometExchange (43)
            :           :                 :     :     :     :        +- CometProject (42)
            :           :                 :     :     :     :           +- CometFilter (41)
            :           :                 :     :     :     :              +- CometScan parquet spark_catalog.default.catalog_returns (40)
            :           :                 :     :     :     +- ReusedExchange (46)
            :           :                 :     :     +- CometBroadcastExchange (51)
            :           :                 :     :        +- CometFilter (50)
            :           :                 :     :           +- CometScan parquet spark_catalog.default.catalog_page (49)
            :           :                 :     +- ReusedExchange (54)
            :           :                 +- ReusedExchange (57)
            :           +- * HashAggregate (90)
            :              +- * ColumnarToRow (89)
            :                 +- CometExchange (88)
            :                    +- CometHashAggregate (87)
            :                       +- CometProject (86)
            :                          +- CometBroadcastHashJoin (85)
            :                             :- CometProject (83)
            :                             :  +- CometBroadcastHashJoin (82)
            :                             :     :- CometProject (80)
            :                             :     :  +- CometBroadcastHashJoin (79)
            :                             :     :     :- CometProject (75)
            :                             :     :     :  +- CometBroadcastHashJoin (74)
            :                             :     :     :     :- CometProject (72)
            :                             :     :     :     :  +- CometHashJoin (71)
            :                             :     :     :     :     :- CometExchange (66)
            :                             :     :     :     :     :  +- CometFilter (65)
            :                             :     :     :     :     :     +- CometScan parquet spark_catalog.default.web_sales (64)
            :                             :     :     :     :     +- CometExchange (70)
            :                             :     :     :     :        +- CometProject (69)
            :                             :     :     :     :           +- CometFilter (68)
            :                             :     :     :     :              +- CometScan parquet spark_catalog.default.web_returns (67)
            :                             :     :     :     +- ReusedExchange (73)
            :                             :     :     +- CometBroadcastExchange (78)
            :                             :     :        +- CometFilter (77)
            :                             :     :           +- CometScan parquet spark_catalog.default.web_site (76)
            :                             :     +- ReusedExchange (81)
            :                             +- ReusedExchange (84)
            :- * HashAggregate (99)
            :  +- Exchange (98)
            :     +- * HashAggregate (97)
            :        +- * HashAggregate (96)
            :           +- ReusedExchange (95)
            +- * HashAggregate (104)
               +- Exchange (103)
                  +- * HashAggregate (102)
                     +- * HashAggregate (101)
                        +- ReusedExchange (100)


(1) CometScan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometScan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(5) CometFilter
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Condition : (isnotnull(sr_item_sk#9) AND isnotnull(sr_ticket_number#10))

(6) CometProject
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]

(7) CometExchange
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: hashpartitioning(sr_item_sk#9, sr_ticket_number#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(8) CometHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#9, sr_ticket_number#10], LeftOuter, BuildRight

(9) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]

(10) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(11) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(12) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(13) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(14) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#7], [d_date_sk#14], Inner, BuildRight

(15) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]

(16) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_store_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(17) CometFilter
Input [2]: [s_store_sk#16, s_store_id#17]
Condition : isnotnull(s_store_sk#16)

(18) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_store_id#17]
Arguments: [s_store_sk#16, s_store_id#17]

(19) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]
Right output [2]: [s_store_sk#16, s_store_id#17]
Arguments: [ss_store_sk#2], [s_store_sk#16], Inner, BuildRight

(20) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_sk#16, s_store_id#17]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(21) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_current_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(22) CometFilter
Input [2]: [i_item_sk#18, i_current_price#19]
Condition : ((isnotnull(i_current_price#19) AND (i_current_price#19 > 50.00)) AND isnotnull(i_item_sk#18))

(23) CometProject
Input [2]: [i_item_sk#18, i_current_price#19]
Arguments: [i_item_sk#18], [i_item_sk#18]

(24) CometBroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: [i_item_sk#18]

(25) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Right output [1]: [i_item_sk#18]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(26) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17, i_item_sk#18]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(27) CometScan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#20, p_channel_tv#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(28) CometFilter
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Condition : ((isnotnull(p_channel_tv#21) AND (p_channel_tv#21 = N)) AND isnotnull(p_promo_sk#20))

(29) CometProject
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Arguments: [p_promo_sk#20], [p_promo_sk#20]

(30) CometBroadcastExchange
Input [1]: [p_promo_sk#20]
Arguments: [p_promo_sk#20]

(31) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Right output [1]: [p_promo_sk#20]
Arguments: [ss_promo_sk#3], [p_promo_sk#20], Inner, BuildRight

(32) CometProject
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17, p_promo_sk#20]
Arguments: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(33) CometHashAggregate
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Keys [1]: [s_store_id#17]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]

(34) CometExchange
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Arguments: hashpartitioning(s_store_id#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(35) ColumnarToRow [codegen id : 1]
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]

(36) HashAggregate [codegen id : 1]
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Keys [1]: [s_store_id#17]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#27, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#28, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#29]
Results [5]: [store channel AS channel#30, concat(store, s_store_id#17) AS id#31, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#27,17,2) AS sales#32, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#28 AS returns#33, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#29 AS profit#34]

(37) CometScan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#41), dynamicpruningexpression(cs_sold_date_sk#41 IN dynamicpruning#42)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(38) CometFilter
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Condition : ((isnotnull(cs_catalog_page_sk#35) AND isnotnull(cs_item_sk#36)) AND isnotnull(cs_promo_sk#37))

(39) CometExchange
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Arguments: hashpartitioning(cs_item_sk#36, cs_order_number#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(40) CometScan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(41) CometFilter
Input [5]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]
Condition : (isnotnull(cr_item_sk#43) AND isnotnull(cr_order_number#44))

(42) CometProject
Input [5]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]
Arguments: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46], [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]

(43) CometExchange
Input [4]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]
Arguments: hashpartitioning(cr_item_sk#43, cr_order_number#44, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(44) CometHashJoin
Left output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Right output [4]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]
Arguments: [cs_item_sk#36, cs_order_number#38], [cr_item_sk#43, cr_order_number#44], LeftOuter, BuildRight

(45) CometProject
Input [11]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46], [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46]

(46) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#48]

(47) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46]
Right output [1]: [d_date_sk#48]
Arguments: [cs_sold_date_sk#41], [d_date_sk#48], Inner, BuildRight

(48) CometProject
Input [9]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46, d_date_sk#48]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46], [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46]

(49) CometScan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(50) CometFilter
Input [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Condition : isnotnull(cp_catalog_page_sk#49)

(51) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Arguments: [cp_catalog_page_sk#49, cp_catalog_page_id#50]

(52) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46]
Right output [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Arguments: [cs_catalog_page_sk#35], [cp_catalog_page_sk#49], Inner, BuildRight

(53) CometProject
Input [9]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_sk#49, cp_catalog_page_id#50]
Arguments: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50], [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]

(54) ReusedExchange [Reuses operator id: 24]
Output [1]: [i_item_sk#51]

(55) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]
Right output [1]: [i_item_sk#51]
Arguments: [cs_item_sk#36], [i_item_sk#51], Inner, BuildRight

(56) CometProject
Input [8]: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50, i_item_sk#51]
Arguments: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50], [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]

(57) ReusedExchange [Reuses operator id: 30]
Output [1]: [p_promo_sk#52]

(58) CometBroadcastHashJoin
Left output [6]: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]
Right output [1]: [p_promo_sk#52]
Arguments: [cs_promo_sk#37], [p_promo_sk#52], Inner, BuildRight

(59) CometProject
Input [7]: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50, p_promo_sk#52]
Arguments: [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50], [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]

(60) CometHashAggregate
Input [5]: [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]
Keys [1]: [cp_catalog_page_id#50]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#39)), partial_sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))]

(61) CometExchange
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Arguments: hashpartitioning(cp_catalog_page_id#50, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(62) ColumnarToRow [codegen id : 2]
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]

(63) HashAggregate [codegen id : 2]
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Keys [1]: [cp_catalog_page_id#50]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#39)), sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00)), sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#39))#58, sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00))#59, sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))#60]
Results [5]: [catalog channel AS channel#61, concat(catalog_page, cp_catalog_page_id#50) AS id#62, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#39))#58,17,2) AS sales#63, sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00))#59 AS returns#64, sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))#60 AS profit#65]

(64) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#72), dynamicpruningexpression(ws_sold_date_sk#72 IN dynamicpruning#73)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(65) CometFilter
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Condition : ((isnotnull(ws_web_site_sk#67) AND isnotnull(ws_item_sk#66)) AND isnotnull(ws_promo_sk#68))

(66) CometExchange
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Arguments: hashpartitioning(ws_item_sk#66, ws_order_number#69, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(67) CometScan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77, wr_returned_date_sk#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(68) CometFilter
Input [5]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77, wr_returned_date_sk#78]
Condition : (isnotnull(wr_item_sk#74) AND isnotnull(wr_order_number#75))

(69) CometProject
Input [5]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77, wr_returned_date_sk#78]
Arguments: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77], [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]

(70) CometExchange
Input [4]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]
Arguments: hashpartitioning(wr_item_sk#74, wr_order_number#75, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(71) CometHashJoin
Left output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Right output [4]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]
Arguments: [ws_item_sk#66, ws_order_number#69], [wr_item_sk#74, wr_order_number#75], LeftOuter, BuildRight

(72) CometProject
Input [11]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77], [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77]

(73) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#79]

(74) CometBroadcastHashJoin
Left output [8]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77]
Right output [1]: [d_date_sk#79]
Arguments: [ws_sold_date_sk#72], [d_date_sk#79], Inner, BuildRight

(75) CometProject
Input [9]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77, d_date_sk#79]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77], [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77]

(76) CometScan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#80, web_site_id#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(77) CometFilter
Input [2]: [web_site_sk#80, web_site_id#81]
Condition : isnotnull(web_site_sk#80)

(78) CometBroadcastExchange
Input [2]: [web_site_sk#80, web_site_id#81]
Arguments: [web_site_sk#80, web_site_id#81]

(79) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77]
Right output [2]: [web_site_sk#80, web_site_id#81]
Arguments: [ws_web_site_sk#67], [web_site_sk#80], Inner, BuildRight

(80) CometProject
Input [9]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_sk#80, web_site_id#81]
Arguments: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81], [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]

(81) ReusedExchange [Reuses operator id: 24]
Output [1]: [i_item_sk#82]

(82) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]
Right output [1]: [i_item_sk#82]
Arguments: [ws_item_sk#66], [i_item_sk#82], Inner, BuildRight

(83) CometProject
Input [8]: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81, i_item_sk#82]
Arguments: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81], [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]

(84) ReusedExchange [Reuses operator id: 30]
Output [1]: [p_promo_sk#83]

(85) CometBroadcastHashJoin
Left output [6]: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]
Right output [1]: [p_promo_sk#83]
Arguments: [ws_promo_sk#68], [p_promo_sk#83], Inner, BuildRight

(86) CometProject
Input [7]: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81, p_promo_sk#83]
Arguments: [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81], [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]

(87) CometHashAggregate
Input [5]: [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]
Keys [1]: [web_site_id#81]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#70)), partial_sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))]

(88) CometExchange
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]
Arguments: hashpartitioning(web_site_id#81, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(89) ColumnarToRow [codegen id : 3]
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]

(90) HashAggregate [codegen id : 3]
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]
Keys [1]: [web_site_id#81]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#70)), sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00)), sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#70))#89, sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00))#90, sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))#91]
Results [5]: [web channel AS channel#92, concat(web_site, web_site_id#81) AS id#93, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#70))#89,17,2) AS sales#94, sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00))#90 AS returns#95, sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))#91 AS profit#96]

(91) Union

(92) HashAggregate [codegen id : 4]
Input [5]: [channel#30, id#31, sales#32, returns#33, profit#34]
Keys [2]: [channel#30, id#31]
Functions [3]: [partial_sum(sales#32), partial_sum(returns#33), partial_sum(profit#34)]
Aggregate Attributes [6]: [sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102]
Results [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(93) Exchange
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Arguments: hashpartitioning(channel#30, id#31, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(94) HashAggregate [codegen id : 5]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [2]: [channel#30, id#31]
Functions [3]: [sum(sales#32), sum(returns#33), sum(profit#34)]
Aggregate Attributes [3]: [sum(sales#32)#109, sum(returns#33)#110, sum(profit#34)#111]
Results [5]: [channel#30, id#31, cast(sum(sales#32)#109 as decimal(37,2)) AS sales#112, cast(sum(returns#33)#110 as decimal(38,2)) AS returns#113, cast(sum(profit#34)#111 as decimal(38,2)) AS profit#114]

(95) ReusedExchange [Reuses operator id: 93]
Output [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(96) HashAggregate [codegen id : 10]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [2]: [channel#30, id#31]
Functions [3]: [sum(sales#32), sum(returns#33), sum(profit#34)]
Aggregate Attributes [3]: [sum(sales#32)#109, sum(returns#33)#110, sum(profit#34)#111]
Results [4]: [channel#30, sum(sales#32)#109 AS sales#115, sum(returns#33)#110 AS returns#116, sum(profit#34)#111 AS profit#117]

(97) HashAggregate [codegen id : 10]
Input [4]: [channel#30, sales#115, returns#116, profit#117]
Keys [1]: [channel#30]
Functions [3]: [partial_sum(sales#115), partial_sum(returns#116), partial_sum(profit#117)]
Aggregate Attributes [6]: [sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Results [7]: [channel#30, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(98) Exchange
Input [7]: [channel#30, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Arguments: hashpartitioning(channel#30, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(99) HashAggregate [codegen id : 11]
Input [7]: [channel#30, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [1]: [channel#30]
Functions [3]: [sum(sales#115), sum(returns#116), sum(profit#117)]
Aggregate Attributes [3]: [sum(sales#115)#130, sum(returns#116)#131, sum(profit#117)#132]
Results [5]: [channel#30, null AS id#133, sum(sales#115)#130 AS sales#134, sum(returns#116)#131 AS returns#135, sum(profit#117)#132 AS profit#136]

(100) ReusedExchange [Reuses operator id: 93]
Output [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(101) HashAggregate [codegen id : 16]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [2]: [channel#30, id#31]
Functions [3]: [sum(sales#32), sum(returns#33), sum(profit#34)]
Aggregate Attributes [3]: [sum(sales#32)#109, sum(returns#33)#110, sum(profit#34)#111]
Results [3]: [sum(sales#32)#109 AS sales#115, sum(returns#33)#110 AS returns#116, sum(profit#34)#111 AS profit#117]

(102) HashAggregate [codegen id : 16]
Input [3]: [sales#115, returns#116, profit#117]
Keys: []
Functions [3]: [partial_sum(sales#115), partial_sum(returns#116), partial_sum(profit#117)]
Aggregate Attributes [6]: [sum#137, isEmpty#138, sum#139, isEmpty#140, sum#141, isEmpty#142]
Results [6]: [sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]

(103) Exchange
Input [6]: [sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(104) HashAggregate [codegen id : 17]
Input [6]: [sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]
Keys: []
Functions [3]: [sum(sales#115), sum(returns#116), sum(profit#117)]
Aggregate Attributes [3]: [sum(sales#115)#149, sum(returns#116)#150, sum(profit#117)#151]
Results [5]: [null AS channel#152, null AS id#153, sum(sales#115)#149 AS sales#154, sum(returns#116)#150 AS returns#155, sum(profit#117)#151 AS profit#156]

(105) Union

(106) HashAggregate [codegen id : 18]
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Keys [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#30, id#31, sales#112, returns#113, profit#114]

(107) Exchange
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Arguments: hashpartitioning(channel#30, id#31, sales#112, returns#113, profit#114, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(108) HashAggregate [codegen id : 19]
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Keys [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#30, id#31, sales#112, returns#113, profit#114]

(109) TakeOrderedAndProject
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Arguments: 100, [channel#30 ASC NULLS FIRST, id#31 ASC NULLS FIRST], [channel#30, id#31, sales#112, returns#113, profit#114]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (114)
+- * ColumnarToRow (113)
   +- CometProject (112)
      +- CometFilter (111)
         +- CometScan parquet spark_catalog.default.date_dim (110)


(110) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(111) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(112) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(113) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(114) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 37 Hosting Expression = cs_sold_date_sk#41 IN dynamicpruning#8

Subquery:3 Hosting operator id = 64 Hosting Expression = ws_sold_date_sk#72 IN dynamicpruning#8


