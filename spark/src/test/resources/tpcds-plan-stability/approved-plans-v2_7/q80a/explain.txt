== Physical Plan ==
TakeOrderedAndProject (115)
+- * HashAggregate (114)
   +- Exchange (113)
      +- * HashAggregate (112)
         +- Union (111)
            :- * HashAggregate (100)
            :  +- Exchange (99)
            :     +- * HashAggregate (98)
            :        +- Union (97)
            :           :- * HashAggregate (38)
            :           :  +- * ColumnarToRow (37)
            :           :     +- CometExchange (36)
            :           :        +- CometHashAggregate (35)
            :           :           +- CometProject (34)
            :           :              +- CometBroadcastHashJoin (33)
            :           :                 :- CometProject (28)
            :           :                 :  +- CometBroadcastHashJoin (27)
            :           :                 :     :- CometProject (22)
            :           :                 :     :  +- CometBroadcastHashJoin (21)
            :           :                 :     :     :- CometProject (17)
            :           :                 :     :     :  +- CometBroadcastHashJoin (16)
            :           :                 :     :     :     :- CometProject (11)
            :           :                 :     :     :     :  +- CometSortMergeJoin (10)
            :           :                 :     :     :     :     :- CometSort (4)
            :           :                 :     :     :     :     :  +- CometExchange (3)
            :           :                 :     :     :     :     :     +- CometFilter (2)
            :           :                 :     :     :     :     :        +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :                 :     :     :     :     +- CometSort (9)
            :           :                 :     :     :     :        +- CometExchange (8)
            :           :                 :     :     :     :           +- CometProject (7)
            :           :                 :     :     :     :              +- CometFilter (6)
            :           :                 :     :     :     :                 +- CometScan parquet spark_catalog.default.store_returns (5)
            :           :                 :     :     :     +- CometBroadcastExchange (15)
            :           :                 :     :     :        +- CometProject (14)
            :           :                 :     :     :           +- CometFilter (13)
            :           :                 :     :     :              +- CometScan parquet spark_catalog.default.date_dim (12)
            :           :                 :     :     +- CometBroadcastExchange (20)
            :           :                 :     :        +- CometFilter (19)
            :           :                 :     :           +- CometScan parquet spark_catalog.default.store (18)
            :           :                 :     +- CometBroadcastExchange (26)
            :           :                 :        +- CometProject (25)
            :           :                 :           +- CometFilter (24)
            :           :                 :              +- CometScan parquet spark_catalog.default.item (23)
            :           :                 +- CometBroadcastExchange (32)
            :           :                    +- CometProject (31)
            :           :                       +- CometFilter (30)
            :           :                          +- CometScan parquet spark_catalog.default.promotion (29)
            :           :- * HashAggregate (67)
            :           :  +- * ColumnarToRow (66)
            :           :     +- CometExchange (65)
            :           :        +- CometHashAggregate (64)
            :           :           +- CometProject (63)
            :           :              +- CometBroadcastHashJoin (62)
            :           :                 :- CometProject (60)
            :           :                 :  +- CometBroadcastHashJoin (59)
            :           :                 :     :- CometProject (57)
            :           :                 :     :  +- CometBroadcastHashJoin (56)
            :           :                 :     :     :- CometProject (52)
            :           :                 :     :     :  +- CometBroadcastHashJoin (51)
            :           :                 :     :     :     :- CometProject (49)
            :           :                 :     :     :     :  +- CometSortMergeJoin (48)
            :           :                 :     :     :     :     :- CometSort (42)
            :           :                 :     :     :     :     :  +- CometExchange (41)
            :           :                 :     :     :     :     :     +- CometFilter (40)
            :           :                 :     :     :     :     :        +- CometScan parquet spark_catalog.default.catalog_sales (39)
            :           :                 :     :     :     :     +- CometSort (47)
            :           :                 :     :     :     :        +- CometExchange (46)
            :           :                 :     :     :     :           +- CometProject (45)
            :           :                 :     :     :     :              +- CometFilter (44)
            :           :                 :     :     :     :                 +- CometScan parquet spark_catalog.default.catalog_returns (43)
            :           :                 :     :     :     +- ReusedExchange (50)
            :           :                 :     :     +- CometBroadcastExchange (55)
            :           :                 :     :        +- CometFilter (54)
            :           :                 :     :           +- CometScan parquet spark_catalog.default.catalog_page (53)
            :           :                 :     +- ReusedExchange (58)
            :           :                 +- ReusedExchange (61)
            :           +- * HashAggregate (96)
            :              +- * ColumnarToRow (95)
            :                 +- CometExchange (94)
            :                    +- CometHashAggregate (93)
            :                       +- CometProject (92)
            :                          +- CometBroadcastHashJoin (91)
            :                             :- CometProject (89)
            :                             :  +- CometBroadcastHashJoin (88)
            :                             :     :- CometProject (86)
            :                             :     :  +- CometBroadcastHashJoin (85)
            :                             :     :     :- CometProject (81)
            :                             :     :     :  +- CometBroadcastHashJoin (80)
            :                             :     :     :     :- CometProject (78)
            :                             :     :     :     :  +- CometSortMergeJoin (77)
            :                             :     :     :     :     :- CometSort (71)
            :                             :     :     :     :     :  +- CometExchange (70)
            :                             :     :     :     :     :     +- CometFilter (69)
            :                             :     :     :     :     :        +- CometScan parquet spark_catalog.default.web_sales (68)
            :                             :     :     :     :     +- CometSort (76)
            :                             :     :     :     :        +- CometExchange (75)
            :                             :     :     :     :           +- CometProject (74)
            :                             :     :     :     :              +- CometFilter (73)
            :                             :     :     :     :                 +- CometScan parquet spark_catalog.default.web_returns (72)
            :                             :     :     :     +- ReusedExchange (79)
            :                             :     :     +- CometBroadcastExchange (84)
            :                             :     :        +- CometFilter (83)
            :                             :     :           +- CometScan parquet spark_catalog.default.web_site (82)
            :                             :     +- ReusedExchange (87)
            :                             +- ReusedExchange (90)
            :- * HashAggregate (105)
            :  +- Exchange (104)
            :     +- * HashAggregate (103)
            :        +- * HashAggregate (102)
            :           +- ReusedExchange (101)
            +- * HashAggregate (110)
               +- Exchange (109)
                  +- * HashAggregate (108)
                     +- * HashAggregate (107)
                        +- ReusedExchange (106)


(1) Scan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7], [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST]

(5) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) CometFilter
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Condition : (isnotnull(sr_item_sk#9) AND isnotnull(sr_ticket_number#10))

(7) CometProject
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]

(8) CometExchange
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: hashpartitioning(sr_item_sk#9, sr_ticket_number#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#10 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#9, sr_ticket_number#10], LeftOuter

(11) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]

(12) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(14) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(16) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#7], [d_date_sk#14], Inner, BuildRight

(17) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]

(18) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_store_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(19) CometFilter
Input [2]: [s_store_sk#16, s_store_id#17]
Condition : isnotnull(s_store_sk#16)

(20) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_store_id#17]
Arguments: [s_store_sk#16, s_store_id#17]

(21) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]
Right output [2]: [s_store_sk#16, s_store_id#17]
Arguments: [ss_store_sk#2], [s_store_sk#16], Inner, BuildRight

(22) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_sk#16, s_store_id#17]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(23) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_current_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(24) CometFilter
Input [2]: [i_item_sk#18, i_current_price#19]
Condition : ((isnotnull(i_current_price#19) AND (i_current_price#19 > 50.00)) AND isnotnull(i_item_sk#18))

(25) CometProject
Input [2]: [i_item_sk#18, i_current_price#19]
Arguments: [i_item_sk#18], [i_item_sk#18]

(26) CometBroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: [i_item_sk#18]

(27) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Right output [1]: [i_item_sk#18]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(28) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17, i_item_sk#18]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(29) Scan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#20, p_channel_tv#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(30) CometFilter
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Condition : ((isnotnull(p_channel_tv#21) AND (p_channel_tv#21 = N)) AND isnotnull(p_promo_sk#20))

(31) CometProject
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Arguments: [p_promo_sk#20], [p_promo_sk#20]

(32) CometBroadcastExchange
Input [1]: [p_promo_sk#20]
Arguments: [p_promo_sk#20]

(33) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Right output [1]: [p_promo_sk#20]
Arguments: [ss_promo_sk#3], [p_promo_sk#20], Inner, BuildRight

(34) CometProject
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17, p_promo_sk#20]
Arguments: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(35) CometHashAggregate
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Keys [1]: [s_store_id#17]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]

(36) CometExchange
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Arguments: hashpartitioning(s_store_id#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(37) ColumnarToRow [codegen id : 1]
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]

(38) HashAggregate [codegen id : 1]
Input [6]: [s_store_id#17, sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Keys [1]: [s_store_id#17]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#27, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#28, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#29]
Results [5]: [store channel AS channel#30, concat(store, s_store_id#17) AS id#31, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#27,17,2) AS sales#32, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#28 AS returns#33, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#29 AS profit#34]

(39) Scan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#41), dynamicpruningexpression(cs_sold_date_sk#41 IN dynamicpruning#42)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(40) CometFilter
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Condition : ((isnotnull(cs_catalog_page_sk#35) AND isnotnull(cs_item_sk#36)) AND isnotnull(cs_promo_sk#37))

(41) CometExchange
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Arguments: hashpartitioning(cs_item_sk#36, cs_order_number#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(42) CometSort
Input [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41], [cs_item_sk#36 ASC NULLS FIRST, cs_order_number#38 ASC NULLS FIRST]

(43) Scan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(44) CometFilter
Input [5]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]
Condition : (isnotnull(cr_item_sk#43) AND isnotnull(cr_order_number#44))

(45) CometProject
Input [5]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46, cr_returned_date_sk#47]
Arguments: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46], [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]

(46) CometExchange
Input [4]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]
Arguments: hashpartitioning(cr_item_sk#43, cr_order_number#44, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(47) CometSort
Input [4]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]
Arguments: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46], [cr_item_sk#43 ASC NULLS FIRST, cr_order_number#44 ASC NULLS FIRST]

(48) CometSortMergeJoin
Left output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41]
Right output [4]: [cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]
Arguments: [cs_item_sk#36, cs_order_number#38], [cr_item_sk#43, cr_order_number#44], LeftOuter

(49) CometProject
Input [11]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_order_number#38, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_item_sk#43, cr_order_number#44, cr_return_amount#45, cr_net_loss#46]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46], [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46]

(50) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#48]

(51) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46]
Right output [1]: [d_date_sk#48]
Arguments: [cs_sold_date_sk#41], [d_date_sk#48], Inner, BuildRight

(52) CometProject
Input [9]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cs_sold_date_sk#41, cr_return_amount#45, cr_net_loss#46, d_date_sk#48]
Arguments: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46], [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46]

(53) Scan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(54) CometFilter
Input [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Condition : isnotnull(cp_catalog_page_sk#49)

(55) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Arguments: [cp_catalog_page_sk#49, cp_catalog_page_id#50]

(56) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46]
Right output [2]: [cp_catalog_page_sk#49, cp_catalog_page_id#50]
Arguments: [cs_catalog_page_sk#35], [cp_catalog_page_sk#49], Inner, BuildRight

(57) CometProject
Input [9]: [cs_catalog_page_sk#35, cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_sk#49, cp_catalog_page_id#50]
Arguments: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50], [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]

(58) ReusedExchange [Reuses operator id: 26]
Output [1]: [i_item_sk#51]

(59) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]
Right output [1]: [i_item_sk#51]
Arguments: [cs_item_sk#36], [i_item_sk#51], Inner, BuildRight

(60) CometProject
Input [8]: [cs_item_sk#36, cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50, i_item_sk#51]
Arguments: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50], [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]

(61) ReusedExchange [Reuses operator id: 32]
Output [1]: [p_promo_sk#52]

(62) CometBroadcastHashJoin
Left output [6]: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]
Right output [1]: [p_promo_sk#52]
Arguments: [cs_promo_sk#37], [p_promo_sk#52], Inner, BuildRight

(63) CometProject
Input [7]: [cs_promo_sk#37, cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50, p_promo_sk#52]
Arguments: [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50], [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]

(64) CometHashAggregate
Input [5]: [cs_ext_sales_price#39, cs_net_profit#40, cr_return_amount#45, cr_net_loss#46, cp_catalog_page_id#50]
Keys [1]: [cp_catalog_page_id#50]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#39)), partial_sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))]

(65) CometExchange
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Arguments: hashpartitioning(cp_catalog_page_id#50, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(66) ColumnarToRow [codegen id : 2]
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]

(67) HashAggregate [codegen id : 2]
Input [6]: [cp_catalog_page_id#50, sum#53, sum#54, isEmpty#55, sum#56, isEmpty#57]
Keys [1]: [cp_catalog_page_id#50]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#39)), sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00)), sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#39))#58, sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00))#59, sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))#60]
Results [5]: [catalog channel AS channel#61, concat(catalog_page, cp_catalog_page_id#50) AS id#62, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#39))#58,17,2) AS sales#63, sum(coalesce(cast(cr_return_amount#45 as decimal(12,2)), 0.00))#59 AS returns#64, sum((cs_net_profit#40 - coalesce(cast(cr_net_loss#46 as decimal(12,2)), 0.00)))#60 AS profit#65]

(68) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#72), dynamicpruningexpression(ws_sold_date_sk#72 IN dynamicpruning#73)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(69) CometFilter
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Condition : ((isnotnull(ws_web_site_sk#67) AND isnotnull(ws_item_sk#66)) AND isnotnull(ws_promo_sk#68))

(70) CometExchange
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Arguments: hashpartitioning(ws_item_sk#66, ws_order_number#69, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(71) CometSort
Input [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72], [ws_item_sk#66 ASC NULLS FIRST, ws_order_number#69 ASC NULLS FIRST]

(72) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77, wr_returned_date_sk#78]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(73) CometFilter
Input [5]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77, wr_returned_date_sk#78]
Condition : (isnotnull(wr_item_sk#74) AND isnotnull(wr_order_number#75))

(74) CometProject
Input [5]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77, wr_returned_date_sk#78]
Arguments: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77], [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]

(75) CometExchange
Input [4]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]
Arguments: hashpartitioning(wr_item_sk#74, wr_order_number#75, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(76) CometSort
Input [4]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]
Arguments: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77], [wr_item_sk#74 ASC NULLS FIRST, wr_order_number#75 ASC NULLS FIRST]

(77) CometSortMergeJoin
Left output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72]
Right output [4]: [wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]
Arguments: [ws_item_sk#66, ws_order_number#69], [wr_item_sk#74, wr_order_number#75], LeftOuter

(78) CometProject
Input [11]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_order_number#69, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_item_sk#74, wr_order_number#75, wr_return_amt#76, wr_net_loss#77]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77], [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77]

(79) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#79]

(80) CometBroadcastHashJoin
Left output [8]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77]
Right output [1]: [d_date_sk#79]
Arguments: [ws_sold_date_sk#72], [d_date_sk#79], Inner, BuildRight

(81) CometProject
Input [9]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, ws_sold_date_sk#72, wr_return_amt#76, wr_net_loss#77, d_date_sk#79]
Arguments: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77], [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77]

(82) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#80, web_site_id#81]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(83) CometFilter
Input [2]: [web_site_sk#80, web_site_id#81]
Condition : isnotnull(web_site_sk#80)

(84) CometBroadcastExchange
Input [2]: [web_site_sk#80, web_site_id#81]
Arguments: [web_site_sk#80, web_site_id#81]

(85) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77]
Right output [2]: [web_site_sk#80, web_site_id#81]
Arguments: [ws_web_site_sk#67], [web_site_sk#80], Inner, BuildRight

(86) CometProject
Input [9]: [ws_item_sk#66, ws_web_site_sk#67, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_sk#80, web_site_id#81]
Arguments: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81], [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]

(87) ReusedExchange [Reuses operator id: 26]
Output [1]: [i_item_sk#82]

(88) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]
Right output [1]: [i_item_sk#82]
Arguments: [ws_item_sk#66], [i_item_sk#82], Inner, BuildRight

(89) CometProject
Input [8]: [ws_item_sk#66, ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81, i_item_sk#82]
Arguments: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81], [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]

(90) ReusedExchange [Reuses operator id: 32]
Output [1]: [p_promo_sk#83]

(91) CometBroadcastHashJoin
Left output [6]: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]
Right output [1]: [p_promo_sk#83]
Arguments: [ws_promo_sk#68], [p_promo_sk#83], Inner, BuildRight

(92) CometProject
Input [7]: [ws_promo_sk#68, ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81, p_promo_sk#83]
Arguments: [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81], [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]

(93) CometHashAggregate
Input [5]: [ws_ext_sales_price#70, ws_net_profit#71, wr_return_amt#76, wr_net_loss#77, web_site_id#81]
Keys [1]: [web_site_id#81]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#70)), partial_sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))]

(94) CometExchange
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]
Arguments: hashpartitioning(web_site_id#81, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(95) ColumnarToRow [codegen id : 3]
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]

(96) HashAggregate [codegen id : 3]
Input [6]: [web_site_id#81, sum#84, sum#85, isEmpty#86, sum#87, isEmpty#88]
Keys [1]: [web_site_id#81]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#70)), sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00)), sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#70))#89, sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00))#90, sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))#91]
Results [5]: [web channel AS channel#92, concat(web_site, web_site_id#81) AS id#93, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#70))#89,17,2) AS sales#94, sum(coalesce(cast(wr_return_amt#76 as decimal(12,2)), 0.00))#90 AS returns#95, sum((ws_net_profit#71 - coalesce(cast(wr_net_loss#77 as decimal(12,2)), 0.00)))#91 AS profit#96]

(97) Union

(98) HashAggregate [codegen id : 4]
Input [5]: [channel#30, id#31, sales#32, returns#33, profit#34]
Keys [2]: [channel#30, id#31]
Functions [3]: [partial_sum(sales#32), partial_sum(returns#33), partial_sum(profit#34)]
Aggregate Attributes [6]: [sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102]
Results [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(99) Exchange
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Arguments: hashpartitioning(channel#30, id#31, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(100) HashAggregate [codegen id : 5]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [2]: [channel#30, id#31]
Functions [3]: [sum(sales#32), sum(returns#33), sum(profit#34)]
Aggregate Attributes [3]: [sum(sales#32)#109, sum(returns#33)#110, sum(profit#34)#111]
Results [5]: [channel#30, id#31, cast(sum(sales#32)#109 as decimal(37,2)) AS sales#112, cast(sum(returns#33)#110 as decimal(38,2)) AS returns#113, cast(sum(profit#34)#111 as decimal(38,2)) AS profit#114]

(101) ReusedExchange [Reuses operator id: 99]
Output [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(102) HashAggregate [codegen id : 10]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [2]: [channel#30, id#31]
Functions [3]: [sum(sales#32), sum(returns#33), sum(profit#34)]
Aggregate Attributes [3]: [sum(sales#32)#109, sum(returns#33)#110, sum(profit#34)#111]
Results [4]: [channel#30, sum(sales#32)#109 AS sales#115, sum(returns#33)#110 AS returns#116, sum(profit#34)#111 AS profit#117]

(103) HashAggregate [codegen id : 10]
Input [4]: [channel#30, sales#115, returns#116, profit#117]
Keys [1]: [channel#30]
Functions [3]: [partial_sum(sales#115), partial_sum(returns#116), partial_sum(profit#117)]
Aggregate Attributes [6]: [sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Results [7]: [channel#30, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]

(104) Exchange
Input [7]: [channel#30, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Arguments: hashpartitioning(channel#30, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(105) HashAggregate [codegen id : 11]
Input [7]: [channel#30, sum#124, isEmpty#125, sum#126, isEmpty#127, sum#128, isEmpty#129]
Keys [1]: [channel#30]
Functions [3]: [sum(sales#115), sum(returns#116), sum(profit#117)]
Aggregate Attributes [3]: [sum(sales#115)#130, sum(returns#116)#131, sum(profit#117)#132]
Results [5]: [channel#30, null AS id#133, sum(sales#115)#130 AS sales#134, sum(returns#116)#131 AS returns#135, sum(profit#117)#132 AS profit#136]

(106) ReusedExchange [Reuses operator id: 99]
Output [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(107) HashAggregate [codegen id : 16]
Input [8]: [channel#30, id#31, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [2]: [channel#30, id#31]
Functions [3]: [sum(sales#32), sum(returns#33), sum(profit#34)]
Aggregate Attributes [3]: [sum(sales#32)#109, sum(returns#33)#110, sum(profit#34)#111]
Results [3]: [sum(sales#32)#109 AS sales#115, sum(returns#33)#110 AS returns#116, sum(profit#34)#111 AS profit#117]

(108) HashAggregate [codegen id : 16]
Input [3]: [sales#115, returns#116, profit#117]
Keys: []
Functions [3]: [partial_sum(sales#115), partial_sum(returns#116), partial_sum(profit#117)]
Aggregate Attributes [6]: [sum#137, isEmpty#138, sum#139, isEmpty#140, sum#141, isEmpty#142]
Results [6]: [sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]

(109) Exchange
Input [6]: [sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(110) HashAggregate [codegen id : 17]
Input [6]: [sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]
Keys: []
Functions [3]: [sum(sales#115), sum(returns#116), sum(profit#117)]
Aggregate Attributes [3]: [sum(sales#115)#149, sum(returns#116)#150, sum(profit#117)#151]
Results [5]: [null AS channel#152, null AS id#153, sum(sales#115)#149 AS sales#154, sum(returns#116)#150 AS returns#155, sum(profit#117)#151 AS profit#156]

(111) Union

(112) HashAggregate [codegen id : 18]
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Keys [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#30, id#31, sales#112, returns#113, profit#114]

(113) Exchange
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Arguments: hashpartitioning(channel#30, id#31, sales#112, returns#113, profit#114, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(114) HashAggregate [codegen id : 19]
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Keys [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#30, id#31, sales#112, returns#113, profit#114]

(115) TakeOrderedAndProject
Input [5]: [channel#30, id#31, sales#112, returns#113, profit#114]
Arguments: 100, [channel#30 ASC NULLS FIRST, id#31 ASC NULLS FIRST], [channel#30, id#31, sales#112, returns#113, profit#114]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (120)
+- * ColumnarToRow (119)
   +- CometProject (118)
      +- CometFilter (117)
         +- CometScan parquet spark_catalog.default.date_dim (116)


(116) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(117) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(118) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(119) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(120) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 39 Hosting Expression = cs_sold_date_sk#41 IN dynamicpruning#8

Subquery:3 Hosting operator id = 68 Hosting Expression = ws_sold_date_sk#72 IN dynamicpruning#8


