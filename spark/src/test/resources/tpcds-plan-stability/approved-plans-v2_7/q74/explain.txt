== Physical Plan ==
* ColumnarToRow (68)
+- CometTakeOrderedAndProject (67)
   +- CometProject (66)
      +- CometBroadcastHashJoin (65)
         :- CometProject (50)
         :  +- CometBroadcastHashJoin (49)
         :     :- CometBroadcastHashJoin (33)
         :     :  :- CometFilter (16)
         :     :  :  +- CometHashAggregate (15)
         :     :  :     +- CometExchange (14)
         :     :  :        +- CometHashAggregate (13)
         :     :  :           +- CometProject (12)
         :     :  :              +- CometBroadcastHashJoin (11)
         :     :  :                 :- CometProject (7)
         :     :  :                 :  +- CometBroadcastHashJoin (6)
         :     :  :                 :     :- CometFilter (2)
         :     :  :                 :     :  +- CometScan parquet spark_catalog.default.customer (1)
         :     :  :                 :     +- CometBroadcastExchange (5)
         :     :  :                 :        +- CometFilter (4)
         :     :  :                 :           +- CometScan parquet spark_catalog.default.store_sales (3)
         :     :  :                 +- CometBroadcastExchange (10)
         :     :  :                    +- CometFilter (9)
         :     :  :                       +- CometScan parquet spark_catalog.default.date_dim (8)
         :     :  +- CometBroadcastExchange (32)
         :     :     +- CometHashAggregate (31)
         :     :        +- CometExchange (30)
         :     :           +- CometHashAggregate (29)
         :     :              +- CometProject (28)
         :     :                 +- CometBroadcastHashJoin (27)
         :     :                    :- CometProject (23)
         :     :                    :  +- CometBroadcastHashJoin (22)
         :     :                    :     :- CometFilter (18)
         :     :                    :     :  +- CometScan parquet spark_catalog.default.customer (17)
         :     :                    :     +- CometBroadcastExchange (21)
         :     :                    :        +- CometFilter (20)
         :     :                    :           +- CometScan parquet spark_catalog.default.store_sales (19)
         :     :                    +- CometBroadcastExchange (26)
         :     :                       +- CometFilter (25)
         :     :                          +- CometScan parquet spark_catalog.default.date_dim (24)
         :     +- CometBroadcastExchange (48)
         :        +- CometFilter (47)
         :           +- CometHashAggregate (46)
         :              +- CometExchange (45)
         :                 +- CometHashAggregate (44)
         :                    +- CometProject (43)
         :                       +- CometBroadcastHashJoin (42)
         :                          :- CometProject (40)
         :                          :  +- CometBroadcastHashJoin (39)
         :                          :     :- CometFilter (35)
         :                          :     :  +- CometScan parquet spark_catalog.default.customer (34)
         :                          :     +- CometBroadcastExchange (38)
         :                          :        +- CometFilter (37)
         :                          :           +- CometScan parquet spark_catalog.default.web_sales (36)
         :                          +- ReusedExchange (41)
         +- CometBroadcastExchange (64)
            +- CometHashAggregate (63)
               +- CometExchange (62)
                  +- CometHashAggregate (61)
                     +- CometProject (60)
                        +- CometBroadcastHashJoin (59)
                           :- CometProject (57)
                           :  +- CometBroadcastHashJoin (56)
                           :     :- CometFilter (52)
                           :     :  +- CometScan parquet spark_catalog.default.customer (51)
                           :     +- CometBroadcastExchange (55)
                           :        +- CometFilter (54)
                           :           +- CometScan parquet spark_catalog.default.web_sales (53)
                           +- ReusedExchange (58)


(1) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(2) CometFilter
Input [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(c_customer_id#2))

(3) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(4) CometFilter
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_customer_sk#5)

(5) CometBroadcastExchange
Input [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]

(6) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4]
Right output [3]: [ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: [c_customer_sk#1], [ss_customer_sk#5], Inner, BuildRight

(7) CometProject
Input [7]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, ss_customer_sk#5, ss_net_paid#6, ss_sold_date_sk#7]
Arguments: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7], [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]

(8) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(9) CometFilter
Input [2]: [d_date_sk#9, d_year#10]
Condition : (((isnotnull(d_year#10) AND (d_year#10 = 2001)) AND d_year#10 IN (2001,2002)) AND isnotnull(d_date_sk#9))

(10) CometBroadcastExchange
Input [2]: [d_date_sk#9, d_year#10]
Arguments: [d_date_sk#9, d_year#10]

(11) CometBroadcastHashJoin
Left output [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7]
Right output [2]: [d_date_sk#9, d_year#10]
Arguments: [ss_sold_date_sk#7], [d_date_sk#9], Inner, BuildRight

(12) CometProject
Input [7]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, ss_sold_date_sk#7, d_date_sk#9, d_year#10]
Arguments: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10], [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10]

(13) CometHashAggregate
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, ss_net_paid#6, d_year#10]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#6))]

(14) CometExchange
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#11]
Arguments: hashpartitioning(c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(15) CometHashAggregate
Input [5]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10, sum#11]
Keys [4]: [c_customer_id#2, c_first_name#3, c_last_name#4, d_year#10]
Functions [1]: [sum(UnscaledValue(ss_net_paid#6))]

(16) CometFilter
Input [2]: [customer_id#12, year_total#13]
Condition : (isnotnull(year_total#13) AND (year_total#13 > 0.00))

(17) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(18) CometFilter
Input [4]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17]
Condition : (isnotnull(c_customer_sk#14) AND isnotnull(c_customer_id#15))

(19) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#20), dynamicpruningexpression(ss_sold_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_net_paid:decimal(7,2)>

(20) CometFilter
Input [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Condition : isnotnull(ss_customer_sk#18)

(21) CometBroadcastExchange
Input [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Arguments: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]

(22) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17]
Right output [3]: [ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Arguments: [c_customer_sk#14], [ss_customer_sk#18], Inner, BuildRight

(23) CometProject
Input [7]: [c_customer_sk#14, c_customer_id#15, c_first_name#16, c_last_name#17, ss_customer_sk#18, ss_net_paid#19, ss_sold_date_sk#20]
Arguments: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20], [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20]

(24) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(25) CometFilter
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 = 2002)) AND d_year#23 IN (2001,2002)) AND isnotnull(d_date_sk#22))

(26) CometBroadcastExchange
Input [2]: [d_date_sk#22, d_year#23]
Arguments: [d_date_sk#22, d_year#23]

(27) CometBroadcastHashJoin
Left output [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20]
Right output [2]: [d_date_sk#22, d_year#23]
Arguments: [ss_sold_date_sk#20], [d_date_sk#22], Inner, BuildRight

(28) CometProject
Input [7]: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, ss_sold_date_sk#20, d_date_sk#22, d_year#23]
Arguments: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, d_year#23], [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, d_year#23]

(29) CometHashAggregate
Input [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, ss_net_paid#19, d_year#23]
Keys [4]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#19))]

(30) CometExchange
Input [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23, sum#24]
Arguments: hashpartitioning(c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(31) CometHashAggregate
Input [5]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23, sum#24]
Keys [4]: [c_customer_id#15, c_first_name#16, c_last_name#17, d_year#23]
Functions [1]: [sum(UnscaledValue(ss_net_paid#19))]

(32) CometBroadcastExchange
Input [4]: [customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]
Arguments: [customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]

(33) CometBroadcastHashJoin
Left output [2]: [customer_id#12, year_total#13]
Right output [4]: [customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]
Arguments: [customer_id#12], [customer_id#25], Inner, BuildRight

(34) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(35) CometFilter
Input [4]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32]
Condition : (isnotnull(c_customer_sk#29) AND isnotnull(c_customer_id#30))

(36) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(37) CometFilter
Input [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Condition : isnotnull(ws_bill_customer_sk#33)

(38) CometBroadcastExchange
Input [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Arguments: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]

(39) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32]
Right output [3]: [ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Arguments: [c_customer_sk#29], [ws_bill_customer_sk#33], Inner, BuildRight

(40) CometProject
Input [7]: [c_customer_sk#29, c_customer_id#30, c_first_name#31, c_last_name#32, ws_bill_customer_sk#33, ws_net_paid#34, ws_sold_date_sk#35]
Arguments: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35], [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35]

(41) ReusedExchange [Reuses operator id: 10]
Output [2]: [d_date_sk#37, d_year#38]

(42) CometBroadcastHashJoin
Left output [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35]
Right output [2]: [d_date_sk#37, d_year#38]
Arguments: [ws_sold_date_sk#35], [d_date_sk#37], Inner, BuildRight

(43) CometProject
Input [7]: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, ws_sold_date_sk#35, d_date_sk#37, d_year#38]
Arguments: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, d_year#38], [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, d_year#38]

(44) CometHashAggregate
Input [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, ws_net_paid#34, d_year#38]
Keys [4]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#34))]

(45) CometExchange
Input [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38, sum#39]
Arguments: hashpartitioning(c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(46) CometHashAggregate
Input [5]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38, sum#39]
Keys [4]: [c_customer_id#30, c_first_name#31, c_last_name#32, d_year#38]
Functions [1]: [sum(UnscaledValue(ws_net_paid#34))]

(47) CometFilter
Input [2]: [customer_id#40, year_total#41]
Condition : (isnotnull(year_total#41) AND (year_total#41 > 0.00))

(48) CometBroadcastExchange
Input [2]: [customer_id#40, year_total#41]
Arguments: [customer_id#40, year_total#41]

(49) CometBroadcastHashJoin
Left output [6]: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28]
Right output [2]: [customer_id#40, year_total#41]
Arguments: [customer_id#12], [customer_id#40], Inner, BuildRight

(50) CometProject
Input [8]: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, customer_id#40, year_total#41]
Arguments: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41], [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41]

(51) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_customer_id)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string>

(52) CometFilter
Input [4]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45]
Condition : (isnotnull(c_customer_sk#42) AND isnotnull(c_customer_id#43))

(53) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#48), dynamicpruningexpression(ws_sold_date_sk#48 IN dynamicpruning#49)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_net_paid:decimal(7,2)>

(54) CometFilter
Input [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Condition : isnotnull(ws_bill_customer_sk#46)

(55) CometBroadcastExchange
Input [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Arguments: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]

(56) CometBroadcastHashJoin
Left output [4]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45]
Right output [3]: [ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Arguments: [c_customer_sk#42], [ws_bill_customer_sk#46], Inner, BuildRight

(57) CometProject
Input [7]: [c_customer_sk#42, c_customer_id#43, c_first_name#44, c_last_name#45, ws_bill_customer_sk#46, ws_net_paid#47, ws_sold_date_sk#48]
Arguments: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48], [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48]

(58) ReusedExchange [Reuses operator id: 26]
Output [2]: [d_date_sk#50, d_year#51]

(59) CometBroadcastHashJoin
Left output [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48]
Right output [2]: [d_date_sk#50, d_year#51]
Arguments: [ws_sold_date_sk#48], [d_date_sk#50], Inner, BuildRight

(60) CometProject
Input [7]: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, ws_sold_date_sk#48, d_date_sk#50, d_year#51]
Arguments: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, d_year#51], [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, d_year#51]

(61) CometHashAggregate
Input [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, ws_net_paid#47, d_year#51]
Keys [4]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#47))]

(62) CometExchange
Input [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51, sum#52]
Arguments: hashpartitioning(c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(63) CometHashAggregate
Input [5]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51, sum#52]
Keys [4]: [c_customer_id#43, c_first_name#44, c_last_name#45, d_year#51]
Functions [1]: [sum(UnscaledValue(ws_net_paid#47))]

(64) CometBroadcastExchange
Input [2]: [customer_id#53, year_total#54]
Arguments: [customer_id#53, year_total#54]

(65) CometBroadcastHashJoin
Left output [7]: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41]
Right output [2]: [customer_id#53, year_total#54]
Arguments: [customer_id#12], [customer_id#53], Inner, (CASE WHEN (year_total#41 > 0.00) THEN (year_total#54 / year_total#41) END > CASE WHEN (year_total#13 > 0.00) THEN (year_total#28 / year_total#13) END), BuildRight

(66) CometProject
Input [9]: [customer_id#12, year_total#13, customer_id#25, customer_first_name#26, customer_last_name#27, year_total#28, year_total#41, customer_id#53, year_total#54]
Arguments: [customer_id#25, customer_first_name#26, customer_last_name#27], [customer_id#25, customer_first_name#26, customer_last_name#27]

(67) CometTakeOrderedAndProject
Input [3]: [customer_id#25, customer_first_name#26, customer_last_name#27]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[customer_first_name#26 ASC NULLS FIRST,customer_id#25 ASC NULLS FIRST,customer_last_name#27 ASC NULLS FIRST], output=[customer_id#25,customer_first_name#26,customer_last_name#27]), [customer_id#25, customer_first_name#26, customer_last_name#27], 100, [customer_first_name#26 ASC NULLS FIRST, customer_id#25 ASC NULLS FIRST, customer_last_name#27 ASC NULLS FIRST], [customer_id#25, customer_first_name#26, customer_last_name#27]

(68) ColumnarToRow [codegen id : 1]
Input [3]: [customer_id#25, customer_first_name#26, customer_last_name#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (72)
+- * ColumnarToRow (71)
   +- CometFilter (70)
      +- CometScan parquet spark_catalog.default.date_dim (69)


(69) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(70) CometFilter
Input [2]: [d_date_sk#9, d_year#10]
Condition : (((isnotnull(d_year#10) AND (d_year#10 = 2001)) AND d_year#10 IN (2001,2002)) AND isnotnull(d_date_sk#9))

(71) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#10]

(72) BroadcastExchange
Input [2]: [d_date_sk#9, d_year#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

Subquery:2 Hosting operator id = 19 Hosting Expression = ss_sold_date_sk#20 IN dynamicpruning#21
BroadcastExchange (76)
+- * ColumnarToRow (75)
   +- CometFilter (74)
      +- CometScan parquet spark_catalog.default.date_dim (73)


(73) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#22, d_year#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), In(d_year, [2001,2002]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(74) CometFilter
Input [2]: [d_date_sk#22, d_year#23]
Condition : (((isnotnull(d_year#23) AND (d_year#23 = 2002)) AND d_year#23 IN (2001,2002)) AND isnotnull(d_date_sk#22))

(75) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#22, d_year#23]

(76) BroadcastExchange
Input [2]: [d_date_sk#22, d_year#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

Subquery:3 Hosting operator id = 36 Hosting Expression = ws_sold_date_sk#35 IN dynamicpruning#8

Subquery:4 Hosting operator id = 53 Hosting Expression = ws_sold_date_sk#48 IN dynamicpruning#21


