== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- Window (41)
      +- * CometColumnarToRow (40)
         +- CometSort (39)
            +- CometExchange (38)
               +- CometHashAggregate (37)
                  +- CometExchange (36)
                     +- CometHashAggregate (35)
                        +- CometUnion (34)
                           :- CometHashAggregate (23)
                           :  +- CometExchange (22)
                           :     +- CometHashAggregate (21)
                           :        +- CometProject (20)
                           :           +- CometBroadcastHashJoin (19)
                           :              :- CometProject (14)
                           :              :  +- CometBroadcastHashJoin (13)
                           :              :     :- CometProject (8)
                           :              :     :  +- CometBroadcastHashJoin (7)
                           :              :     :     :- CometFilter (2)
                           :              :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                           :              :     :     +- CometBroadcastExchange (6)
                           :              :     :        +- CometProject (5)
                           :              :     :           +- CometFilter (4)
                           :              :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
                           :              :     +- CometBroadcastExchange (12)
                           :              :        +- CometProject (11)
                           :              :           +- CometFilter (10)
                           :              :              +- CometScan parquet spark_catalog.default.item (9)
                           :              +- CometBroadcastExchange (18)
                           :                 +- CometProject (17)
                           :                    +- CometFilter (16)
                           :                       +- CometScan parquet spark_catalog.default.store (15)
                           :- CometHashAggregate (28)
                           :  +- CometExchange (27)
                           :     +- CometHashAggregate (26)
                           :        +- CometHashAggregate (25)
                           :           +- ReusedExchange (24)
                           +- CometHashAggregate (33)
                              +- CometExchange (32)
                                 +- CometHashAggregate (31)
                                    +- CometHashAggregate (30)
                                       +- ReusedExchange (29)


(1) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(5) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#5], [d_date_sk#7], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Condition : isnotnull(i_item_sk#9)

(11) CometProject
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Arguments: [i_item_sk#9, i_class#12, i_category#13], [i_item_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#10, 50, true, false, true) AS i_class#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#11, 50, true, false, true) AS i_category#13]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: [i_item_sk#9, i_class#12, i_category#13]

(13) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: [ss_item_sk#1], [i_item_sk#9], Inner, BuildRight

(14) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#9, i_class#12, i_category#13]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]

(15) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#15, 2, true, false, true) = TN) AND isnotnull(s_store_sk#14))

(17) CometProject
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14], [s_store_sk#14]

(18) CometBroadcastExchange
Input [1]: [s_store_sk#14]
Arguments: [s_store_sk#14]

(19) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]
Right output [1]: [s_store_sk#14]
Arguments: [ss_store_sk#2], [s_store_sk#14], Inner, BuildRight

(20) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13, s_store_sk#14]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13], [ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]

(21) CometHashAggregate
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]

(22) CometExchange
Input [4]: [i_category#13, i_class#12, sum#16, sum#17]
Arguments: hashpartitioning(i_category#13, i_class#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(23) CometHashAggregate
Input [4]: [i_category#13, i_class#12, sum#16, sum#17]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]

(24) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#13, i_class#12, sum#18, sum#19]

(25) CometHashAggregate
Input [4]: [i_category#13, i_class#12, sum#18, sum#19]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [sum(UnscaledValue(ss_net_profit#20)), sum(UnscaledValue(ss_ext_sales_price#21))]

(26) CometHashAggregate
Input [3]: [ss_net_profit#22, ss_ext_sales_price#23, i_category#13]
Keys [1]: [i_category#13]
Functions [2]: [partial_sum(ss_net_profit#22), partial_sum(ss_ext_sales_price#23)]

(27) CometExchange
Input [5]: [i_category#13, sum#24, isEmpty#25, sum#26, isEmpty#27]
Arguments: hashpartitioning(i_category#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(28) CometHashAggregate
Input [5]: [i_category#13, sum#24, isEmpty#25, sum#26, isEmpty#27]
Keys [1]: [i_category#13]
Functions [2]: [sum(ss_net_profit#22), sum(ss_ext_sales_price#23)]

(29) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#13, i_class#12, sum#28, sum#29]

(30) CometHashAggregate
Input [4]: [i_category#13, i_class#12, sum#28, sum#29]
Keys [2]: [i_category#13, i_class#12]
Functions [2]: [sum(UnscaledValue(ss_net_profit#30)), sum(UnscaledValue(ss_ext_sales_price#31))]

(31) CometHashAggregate
Input [2]: [ss_net_profit#22, ss_ext_sales_price#23]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#22), partial_sum(ss_ext_sales_price#23)]

(32) CometExchange
Input [4]: [sum#32, isEmpty#33, sum#34, isEmpty#35]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(33) CometHashAggregate
Input [4]: [sum#32, isEmpty#33, sum#34, isEmpty#35]
Keys: []
Functions [2]: [sum(ss_net_profit#22), sum(ss_ext_sales_price#23)]

(34) CometUnion
Child 0 Input [6]: [gross_margin#36, i_category#37, i_class#38, t_category#39, t_class#40, lochierarchy#41]
Child 1 Input [6]: [gross_margin#42, i_category#13, i_class#43, t_category#44, t_class#45, lochierarchy#46]
Child 2 Input [6]: [gross_margin#47, i_category#48, i_class#49, t_category#50, t_class#51, lochierarchy#52]

(35) CometHashAggregate
Input [6]: [gross_margin#36, i_category#37, i_class#38, t_category#39, t_class#40, lochierarchy#41]
Keys [6]: [gross_margin#36, i_category#37, i_class#38, t_category#39, t_class#40, lochierarchy#41]
Functions: []

(36) CometExchange
Input [6]: [gross_margin#36, i_category#37, i_class#38, t_category#39, t_class#40, lochierarchy#41]
Arguments: hashpartitioning(gross_margin#36, i_category#37, i_class#38, t_category#39, t_class#40, lochierarchy#41, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(37) CometHashAggregate
Input [6]: [gross_margin#36, i_category#37, i_class#38, t_category#39, t_class#40, lochierarchy#41]
Keys [6]: [gross_margin#36, i_category#37, i_class#38, t_category#39, t_class#40, lochierarchy#41]
Functions: []

(38) CometExchange
Input [5]: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, _w0#53]
Arguments: hashpartitioning(lochierarchy#41, _w0#53, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(39) CometSort
Input [5]: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, _w0#53]
Arguments: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, _w0#53], [lochierarchy#41 ASC NULLS FIRST, _w0#53 ASC NULLS FIRST, gross_margin#36 ASC NULLS FIRST]

(40) CometColumnarToRow [codegen id : 1]
Input [5]: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, _w0#53]

(41) Window
Input [5]: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, _w0#53]
Arguments: [rank(gross_margin#36) windowspecdefinition(lochierarchy#41, _w0#53, gross_margin#36 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#54], [lochierarchy#41, _w0#53], [gross_margin#36 ASC NULLS FIRST]

(42) Project [codegen id : 2]
Output [5]: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, rank_within_parent#54]
Input [6]: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, _w0#53, rank_within_parent#54]

(43) TakeOrderedAndProject
Input [5]: [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, rank_within_parent#54]
Arguments: 100, [lochierarchy#41 DESC NULLS LAST, CASE WHEN (lochierarchy#41 = 0) THEN i_category#37 END ASC NULLS FIRST, rank_within_parent#54 ASC NULLS FIRST], [gross_margin#36, i_category#37, i_class#38, lochierarchy#41, rank_within_parent#54]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (48)
+- * CometColumnarToRow (47)
   +- CometProject (46)
      +- CometFilter (45)
         +- CometScan parquet spark_catalog.default.date_dim (44)


(44) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(45) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(46) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(47) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(48) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


