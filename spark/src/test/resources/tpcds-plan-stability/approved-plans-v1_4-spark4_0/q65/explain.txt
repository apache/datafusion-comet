== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- * BroadcastHashJoin Inner BuildRight (46)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :- * Project (21)
      :     :  +- * BroadcastHashJoin Inner BuildRight (20)
      :     :     :- * ColumnarToRow (3)
      :     :     :  +- CometFilter (2)
      :     :     :     +- CometScan parquet spark_catalog.default.store (1)
      :     :     +- BroadcastExchange (19)
      :     :        +- * Filter (18)
      :     :           +- * HashAggregate (17)
      :     :              +- * ColumnarToRow (16)
      :     :                 +- CometColumnarExchange (15)
      :     :                    +- RowToColumnar (14)
      :     :                       +- * HashAggregate (13)
      :     :                          +- * ColumnarToRow (12)
      :     :                             +- CometProject (11)
      :     :                                +- CometBroadcastHashJoin (10)
      :     :                                   :- CometFilter (5)
      :     :                                   :  +- CometScan parquet spark_catalog.default.store_sales (4)
      :     :                                   +- CometBroadcastExchange (9)
      :     :                                      +- CometProject (8)
      :     :                                         +- CometFilter (7)
      :     :                                            +- CometScan parquet spark_catalog.default.date_dim (6)
      :     +- BroadcastExchange (25)
      :        +- * ColumnarToRow (24)
      :           +- CometFilter (23)
      :              +- CometScan parquet spark_catalog.default.item (22)
      +- BroadcastExchange (45)
         +- * Filter (44)
            +- * HashAggregate (43)
               +- * ColumnarToRow (42)
                  +- CometColumnarExchange (41)
                     +- RowToColumnar (40)
                        +- * HashAggregate (39)
                           +- * HashAggregate (38)
                              +- * ColumnarToRow (37)
                                 +- CometColumnarExchange (36)
                                    +- RowToColumnar (35)
                                       +- * HashAggregate (34)
                                          +- * ColumnarToRow (33)
                                             +- CometProject (32)
                                                +- CometBroadcastHashJoin (31)
                                                   :- CometFilter (29)
                                                   :  +- CometScan parquet spark_catalog.default.store_sales (28)
                                                   +- ReusedExchange (30)


(1) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) CometFilter
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) ColumnarToRow [codegen id : 7]
Input [2]: [s_store_sk#1, s_store_name#2]

(4) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#6), dynamicpruningexpression(ss_sold_date_sk#6 IN dynamicpruning#7)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(6) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(7) CometFilter
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1176)) AND (d_month_seq#9 <= 1187)) AND isnotnull(d_date_sk#8))

(8) CometProject
Input [2]: [d_date_sk#8, d_month_seq#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(9) CometBroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: [d_date_sk#8]

(10) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [d_date_sk#8]
Arguments: [ss_sold_date_sk#6], [d_date_sk#8], Inner, BuildRight

(11) CometProject
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#8]
Arguments: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5], [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]

(12) ColumnarToRow [codegen id : 1]
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]

(13) HashAggregate [codegen id : 1]
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum#10]
Results [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]

(14) RowToColumnar
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]

(15) CometColumnarExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(16) ColumnarToRow [codegen id : 2]
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]

(17) HashAggregate [codegen id : 2]
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#11]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#5))#12]
Results [3]: [ss_store_sk#4, ss_item_sk#3, MakeDecimal(sum(UnscaledValue(ss_sales_price#5))#12,17,2) AS revenue#13]

(18) Filter [codegen id : 2]
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#13]
Condition : isnotnull(revenue#13)

(19) BroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(20) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#4]
Join type: Inner
Join condition: None

(21) Project [codegen id : 7]
Output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#13]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#13]

(22) Scan parquet spark_catalog.default.item
Output [5]: [i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(23) CometFilter
Input [5]: [i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Condition : isnotnull(i_item_sk#14)

(24) ColumnarToRow [codegen id : 3]
Input [5]: [i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]

(25) BroadcastExchange
Input [5]: [i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(26) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_item_sk#3]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(27) Project [codegen id : 7]
Output [7]: [s_store_name#2, ss_store_sk#4, revenue#13, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#13, i_item_sk#14, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18]

(28) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21, ss_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#22), dynamicpruningexpression(ss_sold_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(29) CometFilter
Input [4]: [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21, ss_sold_date_sk#22]
Condition : isnotnull(ss_store_sk#20)

(30) ReusedExchange [Reuses operator id: 9]
Output [1]: [d_date_sk#24]

(31) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21, ss_sold_date_sk#22]
Right output [1]: [d_date_sk#24]
Arguments: [ss_sold_date_sk#22], [d_date_sk#24], Inner, BuildRight

(32) CometProject
Input [5]: [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21, ss_sold_date_sk#22, d_date_sk#24]
Arguments: [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21], [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21]

(33) ColumnarToRow [codegen id : 4]
Input [3]: [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21]

(34) HashAggregate [codegen id : 4]
Input [3]: [ss_item_sk#19, ss_store_sk#20, ss_sales_price#21]
Keys [2]: [ss_store_sk#20, ss_item_sk#19]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#21))]
Aggregate Attributes [1]: [sum#25]
Results [3]: [ss_store_sk#20, ss_item_sk#19, sum#26]

(35) RowToColumnar
Input [3]: [ss_store_sk#20, ss_item_sk#19, sum#26]

(36) CometColumnarExchange
Input [3]: [ss_store_sk#20, ss_item_sk#19, sum#26]
Arguments: hashpartitioning(ss_store_sk#20, ss_item_sk#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(37) ColumnarToRow [codegen id : 5]
Input [3]: [ss_store_sk#20, ss_item_sk#19, sum#26]

(38) HashAggregate [codegen id : 5]
Input [3]: [ss_store_sk#20, ss_item_sk#19, sum#26]
Keys [2]: [ss_store_sk#20, ss_item_sk#19]
Functions [1]: [sum(UnscaledValue(ss_sales_price#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#21))#27]
Results [2]: [ss_store_sk#20, MakeDecimal(sum(UnscaledValue(ss_sales_price#21))#27,17,2) AS revenue#28]

(39) HashAggregate [codegen id : 5]
Input [2]: [ss_store_sk#20, revenue#28]
Keys [1]: [ss_store_sk#20]
Functions [1]: [partial_avg(revenue#28)]
Aggregate Attributes [2]: [sum#29, count#30]
Results [3]: [ss_store_sk#20, sum#31, count#32]

(40) RowToColumnar
Input [3]: [ss_store_sk#20, sum#31, count#32]

(41) CometColumnarExchange
Input [3]: [ss_store_sk#20, sum#31, count#32]
Arguments: hashpartitioning(ss_store_sk#20, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(42) ColumnarToRow [codegen id : 6]
Input [3]: [ss_store_sk#20, sum#31, count#32]

(43) HashAggregate [codegen id : 6]
Input [3]: [ss_store_sk#20, sum#31, count#32]
Keys [1]: [ss_store_sk#20]
Functions [1]: [avg(revenue#28)]
Aggregate Attributes [1]: [avg(revenue#28)#33]
Results [2]: [ss_store_sk#20, avg(revenue#28)#33 AS ave#34]

(44) Filter [codegen id : 6]
Input [2]: [ss_store_sk#20, ave#34]
Condition : isnotnull(ave#34)

(45) BroadcastExchange
Input [2]: [ss_store_sk#20, ave#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(46) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [ss_store_sk#20]
Join type: Inner
Join condition: (cast(revenue#13 as decimal(23,7)) <= (0.1 * ave#34))

(47) Project [codegen id : 7]
Output [6]: [s_store_name#2, i_item_desc#15, revenue#13, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#13, i_item_desc#15, i_current_price#16, i_wholesale_cost#17, i_brand#18, ss_store_sk#20, ave#34]

(48) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#15, revenue#13, i_current_price#16, i_wholesale_cost#17, i_brand#18]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#15 ASC NULLS FIRST], [s_store_name#2, i_item_desc#15, revenue#13, i_current_price#16, i_wholesale_cost#17, i_brand#18]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#6 IN dynamicpruning#7
BroadcastExchange (53)
+- * ColumnarToRow (52)
   +- CometProject (51)
      +- CometFilter (50)
         +- CometScan parquet spark_catalog.default.date_dim (49)


(49) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_month_seq#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(50) CometFilter
Input [2]: [d_date_sk#8, d_month_seq#9]
Condition : (((isnotnull(d_month_seq#9) AND (d_month_seq#9 >= 1176)) AND (d_month_seq#9 <= 1187)) AND isnotnull(d_date_sk#8))

(51) CometProject
Input [2]: [d_date_sk#8, d_month_seq#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(52) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#8]

(53) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 28 Hosting Expression = ss_sold_date_sk#22 IN dynamicpruning#7


