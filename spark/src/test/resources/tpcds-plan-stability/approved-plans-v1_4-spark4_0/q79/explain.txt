== Physical Plan ==
TakeOrderedAndProject (31)
+- * Project (30)
   +- * BroadcastHashJoin Inner BuildRight (29)
      :- * HashAggregate (24)
      :  +- Exchange (23)
      :     +- * HashAggregate (22)
      :        +- * ColumnarToRow (21)
      :           +- CometProject (20)
      :              +- CometBroadcastHashJoin (19)
      :                 :- CometProject (14)
      :                 :  +- CometBroadcastHashJoin (13)
      :                 :     :- CometProject (8)
      :                 :     :  +- CometBroadcastHashJoin (7)
      :                 :     :     :- CometFilter (2)
      :                 :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
      :                 :     :     +- CometBroadcastExchange (6)
      :                 :     :        +- CometProject (5)
      :                 :     :           +- CometFilter (4)
      :                 :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
      :                 :     +- CometBroadcastExchange (12)
      :                 :        +- CometProject (11)
      :                 :           +- CometFilter (10)
      :                 :              +- CometScan parquet spark_catalog.default.store (9)
      :                 +- CometBroadcastExchange (18)
      :                    +- CometProject (17)
      :                       +- CometFilter (16)
      :                          +- CometScan parquet spark_catalog.default.household_demographics (15)
      +- BroadcastExchange (28)
         +- * ColumnarToRow (27)
            +- CometFilter (26)
               +- CometScan parquet spark_catalog.default.customer (25)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_customer_sk#1))

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_dow#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(4) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Condition : (((isnotnull(d_dow#12) AND (d_dow#12 = 1)) AND d_year#11 IN (1999,2000,2001)) AND isnotnull(d_date_sk#10))

(5) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: [d_date_sk#10]

(7) CometBroadcastHashJoin
Left output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#10]
Arguments: [ss_sold_date_sk#8], [d_date_sk#10], Inner, BuildRight

(8) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8, d_date_sk#10]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(9) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#13, s_number_employees#14, s_city#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_number_employees,295), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>

(10) CometFilter
Input [3]: [s_store_sk#13, s_number_employees#14, s_city#15]
Condition : (((isnotnull(s_number_employees#14) AND (s_number_employees#14 >= 200)) AND (s_number_employees#14 <= 295)) AND isnotnull(s_store_sk#13))

(11) CometProject
Input [3]: [s_store_sk#13, s_number_employees#14, s_city#15]
Arguments: [s_store_sk#13, s_city#15], [s_store_sk#13, s_city#15]

(12) CometBroadcastExchange
Input [2]: [s_store_sk#13, s_city#15]
Arguments: [s_store_sk#13, s_city#15]

(13) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [2]: [s_store_sk#13, s_city#15]
Arguments: [ss_store_sk#4], [s_store_sk#13], Inner, BuildRight

(14) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_store_sk#13, s_city#15]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15]

(15) Scan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,6),GreaterThan(hd_vehicle_count,2)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(16) CometFilter
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Condition : (((hd_dep_count#17 = 6) OR (hd_vehicle_count#18 > 2)) AND isnotnull(hd_demo_sk#16))

(17) CometProject
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Arguments: [hd_demo_sk#16], [hd_demo_sk#16]

(18) CometBroadcastExchange
Input [1]: [hd_demo_sk#16]
Arguments: [hd_demo_sk#16]

(19) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15]
Right output [1]: [hd_demo_sk#16]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#16], Inner, BuildRight

(20) CometProject
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15, hd_demo_sk#16]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15]

(21) ColumnarToRow [codegen id : 1]
Input [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15]

(22) HashAggregate [codegen id : 1]
Input [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#15]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#15]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#6)), partial_sum(UnscaledValue(ss_net_profit#7))]
Aggregate Attributes [2]: [sum#19, sum#20]
Results [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#15, sum#21, sum#22]

(23) Exchange
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#15, sum#21, sum#22]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#15, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(24) HashAggregate [codegen id : 3]
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#15, sum#21, sum#22]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#15]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#6)), sum(UnscaledValue(ss_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#6))#23, sum(UnscaledValue(ss_net_profit#7))#24]
Results [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#15, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#6))#23,17,2) AS amt#25, MakeDecimal(sum(UnscaledValue(ss_net_profit#7))#24,17,2) AS profit#26]

(25) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(26) CometFilter
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Condition : isnotnull(c_customer_sk#27)

(27) ColumnarToRow [codegen id : 2]
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]

(28) BroadcastExchange
Input [3]: [c_customer_sk#27, c_first_name#28, c_last_name#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(29) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#27]
Join type: Inner
Join condition: None

(30) Project [codegen id : 3]
Output [7]: [c_last_name#29, c_first_name#28, substr(s_city#15, 1, 30) AS substr(s_city, 1, 30)#30, ss_ticket_number#5, amt#25, profit#26, s_city#15]
Input [8]: [ss_ticket_number#5, ss_customer_sk#1, s_city#15, amt#25, profit#26, c_customer_sk#27, c_first_name#28, c_last_name#29]

(31) TakeOrderedAndProject
Input [7]: [c_last_name#29, c_first_name#28, substr(s_city, 1, 30)#30, ss_ticket_number#5, amt#25, profit#26, s_city#15]
Arguments: 100, [c_last_name#29 ASC NULLS FIRST, c_first_name#28 ASC NULLS FIRST, substr(s_city#15, 1, 30) ASC NULLS FIRST, profit#26 ASC NULLS FIRST], [c_last_name#29, c_first_name#28, substr(s_city, 1, 30)#30, ss_ticket_number#5, amt#25, profit#26]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (36)
+- * ColumnarToRow (35)
   +- CometProject (34)
      +- CometFilter (33)
         +- CometScan parquet spark_catalog.default.date_dim (32)


(32) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_dow#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(33) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Condition : (((isnotnull(d_dow#12) AND (d_dow#12 = 1)) AND d_year#11 IN (1999,2000,2001)) AND isnotnull(d_date_sk#10))

(34) CometProject
Input [3]: [d_date_sk#10, d_year#11, d_dow#12]
Arguments: [d_date_sk#10], [d_date_sk#10]

(35) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#10]

(36) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]


