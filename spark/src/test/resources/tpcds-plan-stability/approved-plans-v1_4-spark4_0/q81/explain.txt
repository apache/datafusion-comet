== Physical Plan ==
TakeOrderedAndProject (54)
+- * Project (53)
   +- * BroadcastHashJoin Inner BuildRight (52)
      :- * Project (46)
      :  +- * BroadcastHashJoin Inner BuildRight (45)
      :     :- * Project (39)
      :     :  +- * BroadcastHashJoin Inner BuildRight (38)
      :     :     :- * Filter (19)
      :     :     :  +- * HashAggregate (18)
      :     :     :     +- * CometColumnarToRow (17)
      :     :     :        +- CometExchange (16)
      :     :     :           +- CometHashAggregate (15)
      :     :     :              +- CometProject (14)
      :     :     :                 +- CometBroadcastHashJoin (13)
      :     :     :                    :- CometProject (8)
      :     :     :                    :  +- CometBroadcastHashJoin (7)
      :     :     :                    :     :- CometFilter (2)
      :     :     :                    :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_returns (1)
      :     :     :                    :     +- CometBroadcastExchange (6)
      :     :     :                    :        +- CometProject (5)
      :     :     :                    :           +- CometFilter (4)
      :     :     :                    :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (3)
      :     :     :                    +- CometBroadcastExchange (12)
      :     :     :                       +- CometProject (11)
      :     :     :                          +- CometFilter (10)
      :     :     :                             +- CometScan [native_iceberg_compat] parquet spark_catalog.default.customer_address (9)
      :     :     +- BroadcastExchange (37)
      :     :        +- * Filter (36)
      :     :           +- * HashAggregate (35)
      :     :              +- * CometColumnarToRow (34)
      :     :                 +- CometColumnarExchange (33)
      :     :                    +- * HashAggregate (32)
      :     :                       +- * HashAggregate (31)
      :     :                          +- * CometColumnarToRow (30)
      :     :                             +- CometExchange (29)
      :     :                                +- CometHashAggregate (28)
      :     :                                   +- CometProject (27)
      :     :                                      +- CometBroadcastHashJoin (26)
      :     :                                         :- CometProject (24)
      :     :                                         :  +- CometBroadcastHashJoin (23)
      :     :                                         :     :- CometFilter (21)
      :     :                                         :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_returns (20)
      :     :                                         :     +- ReusedExchange (22)
      :     :                                         +- ReusedExchange (25)
      :     +- BroadcastExchange (44)
      :        +- * CometColumnarToRow (43)
      :           +- CometProject (42)
      :              +- CometFilter (41)
      :                 +- CometScan [native_iceberg_compat] parquet spark_catalog.default.customer (40)
      +- BroadcastExchange (51)
         +- * CometColumnarToRow (50)
            +- CometProject (49)
               +- CometFilter (48)
                  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.customer_address (47)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(cr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) CometFilter
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : (isnotnull(cr_returning_addr_sk#2) AND isnotnull(cr_returning_customer_sk#1))

(3) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [cr_returned_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]
Arguments: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3], [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]

(9) CometScan [native_iceberg_compat] parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(10) CometFilter
Input [2]: [ca_address_sk#8, ca_state#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_state#9, 2))))

(11) CometProject
Input [2]: [ca_address_sk#8, ca_state#9]
Arguments: [ca_address_sk#8, ca_state#10], [ca_address_sk#8, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_state#9, 2)) AS ca_state#10]

(12) CometBroadcastExchange
Input [2]: [ca_address_sk#8, ca_state#10]
Arguments: [ca_address_sk#8, ca_state#10]

(13) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Right output [2]: [ca_address_sk#8, ca_state#10]
Arguments: [cr_returning_addr_sk#2], [ca_address_sk#8], Inner, BuildRight

(14) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#8, ca_state#10]
Arguments: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10], [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]

(15) CometHashAggregate
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#10]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]

(16) CometExchange
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#11]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(17) CometColumnarToRow [codegen id : 5]
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#11]

(18) HashAggregate [codegen id : 5]
Input [3]: [cr_returning_customer_sk#1, ca_state#10, sum#11]
Keys [2]: [cr_returning_customer_sk#1, ca_state#10]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))#12]
Results [3]: [cr_returning_customer_sk#1 AS ctr_customer_sk#13, ca_state#10 AS ctr_state#14, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#3))#12,17,2) AS ctr_total_return#15]

(19) Filter [codegen id : 5]
Input [3]: [ctr_customer_sk#13, ctr_state#14, ctr_total_return#15]
Condition : isnotnull(ctr_total_return#15)

(20) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#19), dynamicpruningexpression(cr_returned_date_sk#19 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(21) CometFilter
Input [4]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19]
Condition : isnotnull(cr_returning_addr_sk#17)

(22) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#21]

(23) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19]
Right output [1]: [d_date_sk#21]
Arguments: [cr_returned_date_sk#19], [d_date_sk#21], Inner, BuildRight

(24) CometProject
Input [5]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19, d_date_sk#21]
Arguments: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18], [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18]

(25) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#22, ca_state#23]

(26) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18]
Right output [2]: [ca_address_sk#22, ca_state#23]
Arguments: [cr_returning_addr_sk#17], [ca_address_sk#22], Inner, BuildRight

(27) CometProject
Input [5]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, ca_address_sk#22, ca_state#23]
Arguments: [cr_returning_customer_sk#16, cr_return_amt_inc_tax#18, ca_state#23], [cr_returning_customer_sk#16, cr_return_amt_inc_tax#18, ca_state#23]

(28) CometHashAggregate
Input [3]: [cr_returning_customer_sk#16, cr_return_amt_inc_tax#18, ca_state#23]
Keys [2]: [cr_returning_customer_sk#16, ca_state#23]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#18))]

(29) CometExchange
Input [3]: [cr_returning_customer_sk#16, ca_state#23, sum#24]
Arguments: hashpartitioning(cr_returning_customer_sk#16, ca_state#23, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(30) CometColumnarToRow [codegen id : 1]
Input [3]: [cr_returning_customer_sk#16, ca_state#23, sum#24]

(31) HashAggregate [codegen id : 1]
Input [3]: [cr_returning_customer_sk#16, ca_state#23, sum#24]
Keys [2]: [cr_returning_customer_sk#16, ca_state#23]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#18))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#18))#12]
Results [2]: [ca_state#23 AS ctr_state#25, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#18))#12,17,2) AS ctr_total_return#26]

(32) HashAggregate [codegen id : 1]
Input [2]: [ctr_state#25, ctr_total_return#26]
Keys [1]: [ctr_state#25]
Functions [1]: [partial_avg(ctr_total_return#26)]
Aggregate Attributes [2]: [sum#27, count#28]
Results [3]: [ctr_state#25, sum#29, count#30]

(33) CometColumnarExchange
Input [3]: [ctr_state#25, sum#29, count#30]
Arguments: hashpartitioning(ctr_state#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(34) CometColumnarToRow [codegen id : 2]
Input [3]: [ctr_state#25, sum#29, count#30]

(35) HashAggregate [codegen id : 2]
Input [3]: [ctr_state#25, sum#29, count#30]
Keys [1]: [ctr_state#25]
Functions [1]: [avg(ctr_total_return#26)]
Aggregate Attributes [1]: [avg(ctr_total_return#26)#31]
Results [2]: [(avg(ctr_total_return#26)#31 * 1.2) AS (avg(ctr_total_return) * 1.2)#32, ctr_state#25]

(36) Filter [codegen id : 2]
Input [2]: [(avg(ctr_total_return) * 1.2)#32, ctr_state#25]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#32)

(37) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#32, ctr_state#25]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=4]

(38) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ctr_state#14]
Right keys [1]: [ctr_state#25]
Join type: Inner
Join condition: (cast(ctr_total_return#15 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#32)

(39) Project [codegen id : 5]
Output [2]: [ctr_customer_sk#13, ctr_total_return#15]
Input [5]: [ctr_customer_sk#13, ctr_state#14, ctr_total_return#15, (avg(ctr_total_return) * 1.2)#32, ctr_state#25]

(40) CometScan [native_iceberg_compat] parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#33, c_customer_id#34, c_current_addr_sk#35, c_salutation#36, c_first_name#37, c_last_name#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(41) CometFilter
Input [6]: [c_customer_sk#33, c_customer_id#34, c_current_addr_sk#35, c_salutation#36, c_first_name#37, c_last_name#38]
Condition : (isnotnull(c_customer_sk#33) AND isnotnull(c_current_addr_sk#35))

(42) CometProject
Input [6]: [c_customer_sk#33, c_customer_id#34, c_current_addr_sk#35, c_salutation#36, c_first_name#37, c_last_name#38]
Arguments: [c_customer_sk#33, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42], [c_customer_sk#33, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#34, 16)) AS c_customer_id#39, c_current_addr_sk#35, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_salutation#36, 10)) AS c_salutation#40, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#37, 20)) AS c_first_name#41, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#38, 30)) AS c_last_name#42]

(43) CometColumnarToRow [codegen id : 3]
Input [6]: [c_customer_sk#33, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42]

(44) BroadcastExchange
Input [6]: [c_customer_sk#33, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(45) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ctr_customer_sk#13]
Right keys [1]: [c_customer_sk#33]
Join type: Inner
Join condition: None

(46) Project [codegen id : 5]
Output [6]: [ctr_total_return#15, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42]
Input [8]: [ctr_customer_sk#13, ctr_total_return#15, c_customer_sk#33, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42]

(47) CometScan [native_iceberg_compat] parquet spark_catalog.default.customer_address
Output [12]: [ca_address_sk#43, ca_street_number#44, ca_street_name#45, ca_street_type#46, ca_suite_number#47, ca_city#48, ca_county#49, ca_state#50, ca_zip#51, ca_country#52, ca_gmt_offset#53, ca_location_type#54]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(48) CometFilter
Input [12]: [ca_address_sk#43, ca_street_number#44, ca_street_name#45, ca_street_type#46, ca_suite_number#47, ca_city#48, ca_county#49, ca_state#50, ca_zip#51, ca_country#52, ca_gmt_offset#53, ca_location_type#54]
Condition : ((isnotnull(ca_state#50) AND (static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_state#50, 2)) = GA)) AND isnotnull(ca_address_sk#43))

(49) CometProject
Input [12]: [ca_address_sk#43, ca_street_number#44, ca_street_name#45, ca_street_type#46, ca_suite_number#47, ca_city#48, ca_county#49, ca_state#50, ca_zip#51, ca_country#52, ca_gmt_offset#53, ca_location_type#54]
Arguments: [ca_address_sk#43, ca_street_number#55, ca_street_name#45, ca_street_type#56, ca_suite_number#57, ca_city#48, ca_county#49, ca_state#58, ca_zip#59, ca_country#52, ca_gmt_offset#53, ca_location_type#60], [ca_address_sk#43, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_street_number#44, 10)) AS ca_street_number#55, ca_street_name#45, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_street_type#46, 15)) AS ca_street_type#56, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_suite_number#47, 10)) AS ca_suite_number#57, ca_city#48, ca_county#49, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_state#50, 2)) AS ca_state#58, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_zip#51, 10)) AS ca_zip#59, ca_country#52, ca_gmt_offset#53, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_location_type#54, 20)) AS ca_location_type#60]

(50) CometColumnarToRow [codegen id : 4]
Input [12]: [ca_address_sk#43, ca_street_number#55, ca_street_name#45, ca_street_type#56, ca_suite_number#57, ca_city#48, ca_county#49, ca_state#58, ca_zip#59, ca_country#52, ca_gmt_offset#53, ca_location_type#60]

(51) BroadcastExchange
Input [12]: [ca_address_sk#43, ca_street_number#55, ca_street_name#45, ca_street_type#56, ca_suite_number#57, ca_city#48, ca_county#49, ca_state#58, ca_zip#59, ca_country#52, ca_gmt_offset#53, ca_location_type#60]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(52) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [c_current_addr_sk#35]
Right keys [1]: [ca_address_sk#43]
Join type: Inner
Join condition: None

(53) Project [codegen id : 5]
Output [16]: [c_customer_id#39, c_salutation#40, c_first_name#41, c_last_name#42, ca_street_number#55, ca_street_name#45, ca_street_type#56, ca_suite_number#57, ca_city#48, ca_county#49, ca_state#58, ca_zip#59, ca_country#52, ca_gmt_offset#53, ca_location_type#60, ctr_total_return#15]
Input [18]: [ctr_total_return#15, c_customer_id#39, c_current_addr_sk#35, c_salutation#40, c_first_name#41, c_last_name#42, ca_address_sk#43, ca_street_number#55, ca_street_name#45, ca_street_type#56, ca_suite_number#57, ca_city#48, ca_county#49, ca_state#58, ca_zip#59, ca_country#52, ca_gmt_offset#53, ca_location_type#60]

(54) TakeOrderedAndProject
Input [16]: [c_customer_id#39, c_salutation#40, c_first_name#41, c_last_name#42, ca_street_number#55, ca_street_name#45, ca_street_type#56, ca_suite_number#57, ca_city#48, ca_county#49, ca_state#58, ca_zip#59, ca_country#52, ca_gmt_offset#53, ca_location_type#60, ctr_total_return#15]
Arguments: 100, [c_customer_id#39 ASC NULLS FIRST, c_salutation#40 ASC NULLS FIRST, c_first_name#41 ASC NULLS FIRST, c_last_name#42 ASC NULLS FIRST, ca_street_number#55 ASC NULLS FIRST, ca_street_name#45 ASC NULLS FIRST, ca_street_type#56 ASC NULLS FIRST, ca_suite_number#57 ASC NULLS FIRST, ca_city#48 ASC NULLS FIRST, ca_county#49 ASC NULLS FIRST, ca_state#58 ASC NULLS FIRST, ca_zip#59 ASC NULLS FIRST, ca_country#52 ASC NULLS FIRST, ca_gmt_offset#53 ASC NULLS FIRST, ca_location_type#60 ASC NULLS FIRST, ctr_total_return#15 ASC NULLS FIRST], [c_customer_id#39, c_salutation#40, c_first_name#41, c_last_name#42, ca_street_number#55, ca_street_name#45, ca_street_type#56, ca_suite_number#57, ca_city#48, ca_county#49, ca_state#58, ca_zip#59, ca_country#52, ca_gmt_offset#53, ca_location_type#60, ctr_total_return#15]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (59)
+- * CometColumnarToRow (58)
   +- CometProject (57)
      +- CometFilter (56)
         +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (55)


(55) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(56) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(57) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(58) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(59) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 20 Hosting Expression = cr_returned_date_sk#19 IN dynamicpruning#5


