== Physical Plan ==
TakeOrderedAndProject (50)
+- * Project (49)
   +- * BroadcastHashJoin Inner BuildRight (48)
      :- * Project (43)
      :  +- * BroadcastHashJoin Inner BuildRight (42)
      :     :- * Project (37)
      :     :  +- * BroadcastHashJoin Inner BuildRight (36)
      :     :     :- * Filter (18)
      :     :     :  +- * HashAggregate (17)
      :     :     :     +- Exchange (16)
      :     :     :        +- * HashAggregate (15)
      :     :     :           +- * ColumnarToRow (14)
      :     :     :              +- CometProject (13)
      :     :     :                 +- CometBroadcastHashJoin (12)
      :     :     :                    :- CometProject (8)
      :     :     :                    :  +- CometBroadcastHashJoin (7)
      :     :     :                    :     :- CometFilter (2)
      :     :     :                    :     :  +- CometScan parquet spark_catalog.default.catalog_returns (1)
      :     :     :                    :     +- CometBroadcastExchange (6)
      :     :     :                    :        +- CometProject (5)
      :     :     :                    :           +- CometFilter (4)
      :     :     :                    :              +- CometScan parquet spark_catalog.default.date_dim (3)
      :     :     :                    +- CometBroadcastExchange (11)
      :     :     :                       +- CometFilter (10)
      :     :     :                          +- CometScan parquet spark_catalog.default.customer_address (9)
      :     :     +- BroadcastExchange (35)
      :     :        +- * Filter (34)
      :     :           +- * HashAggregate (33)
      :     :              +- Exchange (32)
      :     :                 +- * HashAggregate (31)
      :     :                    +- * HashAggregate (30)
      :     :                       +- Exchange (29)
      :     :                          +- * HashAggregate (28)
      :     :                             +- * ColumnarToRow (27)
      :     :                                +- CometProject (26)
      :     :                                   +- CometBroadcastHashJoin (25)
      :     :                                      :- CometProject (23)
      :     :                                      :  +- CometBroadcastHashJoin (22)
      :     :                                      :     :- CometFilter (20)
      :     :                                      :     :  +- CometScan parquet spark_catalog.default.catalog_returns (19)
      :     :                                      :     +- ReusedExchange (21)
      :     :                                      +- ReusedExchange (24)
      :     +- BroadcastExchange (41)
      :        +- * ColumnarToRow (40)
      :           +- CometFilter (39)
      :              +- CometScan parquet spark_catalog.default.customer (38)
      +- BroadcastExchange (47)
         +- * ColumnarToRow (46)
            +- CometFilter (45)
               +- CometScan parquet spark_catalog.default.customer_address (44)


(1) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#4), dynamicpruningexpression(cr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(cr_returning_addr_sk), IsNotNull(cr_returning_customer_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(2) CometFilter
Input [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Condition : (isnotnull(cr_returning_addr_sk#2) AND isnotnull(cr_returning_customer_sk#1))

(3) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [cr_returned_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, cr_returned_date_sk#4, d_date_sk#6]
Arguments: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3], [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]

(9) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_state)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(10) CometFilter
Input [2]: [ca_address_sk#8, ca_state#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(ca_state#9))

(11) CometBroadcastExchange
Input [2]: [ca_address_sk#8, ca_state#9]
Arguments: [ca_address_sk#8, ca_state#9]

(12) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3]
Right output [2]: [ca_address_sk#8, ca_state#9]
Arguments: [cr_returning_addr_sk#2], [ca_address_sk#8], Inner, BuildRight

(13) CometProject
Input [5]: [cr_returning_customer_sk#1, cr_returning_addr_sk#2, cr_return_amt_inc_tax#3, ca_address_sk#8, ca_state#9]
Arguments: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#9], [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#9]

(14) ColumnarToRow [codegen id : 1]
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#9]

(15) HashAggregate [codegen id : 1]
Input [3]: [cr_returning_customer_sk#1, cr_return_amt_inc_tax#3, ca_state#9]
Keys [2]: [cr_returning_customer_sk#1, ca_state#9]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum#10]
Results [3]: [cr_returning_customer_sk#1, ca_state#9, sum#11]

(16) Exchange
Input [3]: [cr_returning_customer_sk#1, ca_state#9, sum#11]
Arguments: hashpartitioning(cr_returning_customer_sk#1, ca_state#9, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(17) HashAggregate [codegen id : 7]
Input [3]: [cr_returning_customer_sk#1, ca_state#9, sum#11]
Keys [2]: [cr_returning_customer_sk#1, ca_state#9]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#3))#12]
Results [3]: [cr_returning_customer_sk#1 AS ctr_customer_sk#13, ca_state#9 AS ctr_state#14, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#3))#12,17,2) AS ctr_total_return#15]

(18) Filter [codegen id : 7]
Input [3]: [ctr_customer_sk#13, ctr_state#14, ctr_total_return#15]
Condition : isnotnull(ctr_total_return#15)

(19) Scan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#19), dynamicpruningexpression(cr_returned_date_sk#19 IN dynamicpruning#20)]
PushedFilters: [IsNotNull(cr_returning_addr_sk)]
ReadSchema: struct<cr_returning_customer_sk:int,cr_returning_addr_sk:int,cr_return_amt_inc_tax:decimal(7,2)>

(20) CometFilter
Input [4]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19]
Condition : isnotnull(cr_returning_addr_sk#17)

(21) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#21]

(22) CometBroadcastHashJoin
Left output [4]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19]
Right output [1]: [d_date_sk#21]
Arguments: [cr_returned_date_sk#19], [d_date_sk#21], Inner, BuildRight

(23) CometProject
Input [5]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, cr_returned_date_sk#19, d_date_sk#21]
Arguments: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18], [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18]

(24) ReusedExchange [Reuses operator id: 11]
Output [2]: [ca_address_sk#22, ca_state#23]

(25) CometBroadcastHashJoin
Left output [3]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18]
Right output [2]: [ca_address_sk#22, ca_state#23]
Arguments: [cr_returning_addr_sk#17], [ca_address_sk#22], Inner, BuildRight

(26) CometProject
Input [5]: [cr_returning_customer_sk#16, cr_returning_addr_sk#17, cr_return_amt_inc_tax#18, ca_address_sk#22, ca_state#23]
Arguments: [cr_returning_customer_sk#16, cr_return_amt_inc_tax#18, ca_state#23], [cr_returning_customer_sk#16, cr_return_amt_inc_tax#18, ca_state#23]

(27) ColumnarToRow [codegen id : 2]
Input [3]: [cr_returning_customer_sk#16, cr_return_amt_inc_tax#18, ca_state#23]

(28) HashAggregate [codegen id : 2]
Input [3]: [cr_returning_customer_sk#16, cr_return_amt_inc_tax#18, ca_state#23]
Keys [2]: [cr_returning_customer_sk#16, ca_state#23]
Functions [1]: [partial_sum(UnscaledValue(cr_return_amt_inc_tax#18))]
Aggregate Attributes [1]: [sum#24]
Results [3]: [cr_returning_customer_sk#16, ca_state#23, sum#25]

(29) Exchange
Input [3]: [cr_returning_customer_sk#16, ca_state#23, sum#25]
Arguments: hashpartitioning(cr_returning_customer_sk#16, ca_state#23, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(30) HashAggregate [codegen id : 3]
Input [3]: [cr_returning_customer_sk#16, ca_state#23, sum#25]
Keys [2]: [cr_returning_customer_sk#16, ca_state#23]
Functions [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#18))]
Aggregate Attributes [1]: [sum(UnscaledValue(cr_return_amt_inc_tax#18))#12]
Results [2]: [ca_state#23 AS ctr_state#26, MakeDecimal(sum(UnscaledValue(cr_return_amt_inc_tax#18))#12,17,2) AS ctr_total_return#27]

(31) HashAggregate [codegen id : 3]
Input [2]: [ctr_state#26, ctr_total_return#27]
Keys [1]: [ctr_state#26]
Functions [1]: [partial_avg(ctr_total_return#27)]
Aggregate Attributes [2]: [sum#28, count#29]
Results [3]: [ctr_state#26, sum#30, count#31]

(32) Exchange
Input [3]: [ctr_state#26, sum#30, count#31]
Arguments: hashpartitioning(ctr_state#26, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(33) HashAggregate [codegen id : 4]
Input [3]: [ctr_state#26, sum#30, count#31]
Keys [1]: [ctr_state#26]
Functions [1]: [avg(ctr_total_return#27)]
Aggregate Attributes [1]: [avg(ctr_total_return#27)#32]
Results [2]: [(avg(ctr_total_return#27)#32 * 1.2) AS (avg(ctr_total_return) * 1.2)#33, ctr_state#26]

(34) Filter [codegen id : 4]
Input [2]: [(avg(ctr_total_return) * 1.2)#33, ctr_state#26]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#33)

(35) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#33, ctr_state#26]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=4]

(36) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ctr_state#14]
Right keys [1]: [ctr_state#26]
Join type: Inner
Join condition: (cast(ctr_total_return#15 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#33)

(37) Project [codegen id : 7]
Output [2]: [ctr_customer_sk#13, ctr_total_return#15]
Input [5]: [ctr_customer_sk#13, ctr_state#14, ctr_total_return#15, (avg(ctr_total_return) * 1.2)#33, ctr_state#26]

(38) Scan parquet spark_catalog.default.customer
Output [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string>

(39) CometFilter
Input [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Condition : (isnotnull(c_customer_sk#34) AND isnotnull(c_current_addr_sk#36))

(40) ColumnarToRow [codegen id : 5]
Input [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]

(41) BroadcastExchange
Input [6]: [c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=5]

(42) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ctr_customer_sk#13]
Right keys [1]: [c_customer_sk#34]
Join type: Inner
Join condition: None

(43) Project [codegen id : 7]
Output [6]: [ctr_total_return#15, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]
Input [8]: [ctr_customer_sk#13, ctr_total_return#15, c_customer_sk#34, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39]

(44) Scan parquet spark_catalog.default.customer_address
Output [12]: [ca_address_sk#40, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,GA), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_street_number:string,ca_street_name:string,ca_street_type:string,ca_suite_number:string,ca_city:string,ca_county:string,ca_state:string,ca_zip:string,ca_country:string,ca_gmt_offset:decimal(5,2),ca_location_type:string>

(45) CometFilter
Input [12]: [ca_address_sk#40, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51]
Condition : ((isnotnull(ca_state#47) AND (ca_state#47 = GA)) AND isnotnull(ca_address_sk#40))

(46) ColumnarToRow [codegen id : 6]
Input [12]: [ca_address_sk#40, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51]

(47) BroadcastExchange
Input [12]: [ca_address_sk#40, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(48) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#36]
Right keys [1]: [ca_address_sk#40]
Join type: Inner
Join condition: None

(49) Project [codegen id : 7]
Output [16]: [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51, ctr_total_return#15]
Input [18]: [ctr_total_return#15, c_customer_id#35, c_current_addr_sk#36, c_salutation#37, c_first_name#38, c_last_name#39, ca_address_sk#40, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51]

(50) TakeOrderedAndProject
Input [16]: [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51, ctr_total_return#15]
Arguments: 100, [c_customer_id#35 ASC NULLS FIRST, c_salutation#37 ASC NULLS FIRST, c_first_name#38 ASC NULLS FIRST, c_last_name#39 ASC NULLS FIRST, ca_street_number#41 ASC NULLS FIRST, ca_street_name#42 ASC NULLS FIRST, ca_street_type#43 ASC NULLS FIRST, ca_suite_number#44 ASC NULLS FIRST, ca_city#45 ASC NULLS FIRST, ca_county#46 ASC NULLS FIRST, ca_state#47 ASC NULLS FIRST, ca_zip#48 ASC NULLS FIRST, ca_country#49 ASC NULLS FIRST, ca_gmt_offset#50 ASC NULLS FIRST, ca_location_type#51 ASC NULLS FIRST, ctr_total_return#15 ASC NULLS FIRST], [c_customer_id#35, c_salutation#37, c_first_name#38, c_last_name#39, ca_street_number#41, ca_street_name#42, ca_street_type#43, ca_suite_number#44, ca_city#45, ca_county#46, ca_state#47, ca_zip#48, ca_country#49, ca_gmt_offset#50, ca_location_type#51, ctr_total_return#15]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (55)
+- * ColumnarToRow (54)
   +- CometProject (53)
      +- CometFilter (52)
         +- CometScan parquet spark_catalog.default.date_dim (51)


(51) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(52) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2000)) AND isnotnull(d_date_sk#6))

(53) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(54) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(55) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 19 Hosting Expression = cr_returned_date_sk#19 IN dynamicpruning#5


