== Physical Plan ==
TakeOrderedAndProject (49)
+- * HashAggregate (48)
   +- * CometColumnarToRow (47)
      +- CometColumnarExchange (46)
         +- * HashAggregate (45)
            +- * CometColumnarToRow (44)
               +- CometProject (43)
                  +- CometBroadcastHashJoin (42)
                     :- CometProject (37)
                     :  +- CometBroadcastHashJoin (36)
                     :     :- CometProject (31)
                     :     :  +- CometBroadcastHashJoin (30)
                     :     :     :- CometProject (25)
                     :     :     :  +- CometBroadcastHashJoin (24)
                     :     :     :     :- CometProject (19)
                     :     :     :     :  +- CometBroadcastHashJoin (18)
                     :     :     :     :     :- CometProject (13)
                     :     :     :     :     :  +- CometBroadcastHashJoin (12)
                     :     :     :     :     :     :- CometProject (8)
                     :     :     :     :     :     :  +- CometBroadcastHashJoin (7)
                     :     :     :     :     :     :     :- CometBroadcastExchange (3)
                     :     :     :     :     :     :     :  +- CometFilter (2)
                     :     :     :     :     :     :     :     +- CometScan parquet spark_catalog.default.web_sales (1)
                     :     :     :     :     :     :     +- CometProject (6)
                     :     :     :     :     :     :        +- CometFilter (5)
                     :     :     :     :     :     :           +- CometScan parquet spark_catalog.default.web_returns (4)
                     :     :     :     :     :     +- CometBroadcastExchange (11)
                     :     :     :     :     :        +- CometFilter (10)
                     :     :     :     :     :           +- CometScan parquet spark_catalog.default.web_page (9)
                     :     :     :     :     +- CometBroadcastExchange (17)
                     :     :     :     :        +- CometProject (16)
                     :     :     :     :           +- CometFilter (15)
                     :     :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (14)
                     :     :     :     +- CometBroadcastExchange (23)
                     :     :     :        +- CometProject (22)
                     :     :     :           +- CometFilter (21)
                     :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (20)
                     :     :     +- CometBroadcastExchange (29)
                     :     :        +- CometProject (28)
                     :     :           +- CometFilter (27)
                     :     :              +- CometScan parquet spark_catalog.default.customer_address (26)
                     :     +- CometBroadcastExchange (35)
                     :        +- CometProject (34)
                     :           +- CometFilter (33)
                     :              +- CometScan parquet spark_catalog.default.date_dim (32)
                     +- CometBroadcastExchange (41)
                        +- CometProject (40)
                           +- CometFilter (39)
                              +- CometScan parquet spark_catalog.default.reason (38)


(1) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((((isnotnull(ws_item_sk#1) AND isnotnull(ws_order_number#3)) AND isnotnull(ws_web_page_sk#2)) AND ((((ws_sales_price#5 >= 100.00) AND (ws_sales_price#5 <= 150.00)) OR ((ws_sales_price#5 >= 50.00) AND (ws_sales_price#5 <= 100.00))) OR ((ws_sales_price#5 >= 150.00) AND (ws_sales_price#5 <= 200.00)))) AND ((((ws_net_profit#6 >= 100.00) AND (ws_net_profit#6 <= 200.00)) OR ((ws_net_profit#6 >= 150.00) AND (ws_net_profit#6 <= 300.00))) OR ((ws_net_profit#6 >= 50.00) AND (ws_net_profit#6 <= 250.00))))

(3) CometBroadcastExchange
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]

(4) CometScan parquet spark_catalog.default.web_returns
Output [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:int,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(5) CometFilter
Input [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Condition : (((((isnotnull(wr_item_sk#9) AND isnotnull(wr_order_number#14)) AND isnotnull(wr_refunded_cdemo_sk#10)) AND isnotnull(wr_returning_cdemo_sk#12)) AND isnotnull(wr_refunded_addr_sk#11)) AND isnotnull(wr_reason_sk#13))

(6) CometProject
Input [9]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16, wr_returned_date_sk#17]
Arguments: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16], [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]

(7) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Right output [8]: [wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: [ws_item_sk#1, ws_order_number#3], [wr_item_sk#9, wr_order_number#14], Inner, BuildLeft

(8) CometProject
Input [15]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_item_sk#9, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_order_number#14, wr_fee#15, wr_refunded_cash#16]
Arguments: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(9) CometScan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(10) CometFilter
Input [1]: [wp_web_page_sk#18]
Condition : isnotnull(wp_web_page_sk#18)

(11) CometBroadcastExchange
Input [1]: [wp_web_page_sk#18]
Arguments: [wp_web_page_sk#18]

(12) CometBroadcastHashJoin
Left output [11]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Right output [1]: [wp_web_page_sk#18]
Arguments: [ws_web_page_sk#2], [wp_web_page_sk#18], Inner, BuildRight

(13) CometProject
Input [12]: [ws_web_page_sk#2, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, wp_web_page_sk#18]
Arguments: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(14) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(15) CometFilter
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Condition : (((isnotnull(cd_demo_sk#19) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true))) AND ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = Advanced Degree     )) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = S) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = College             ))) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = W) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = 2 yr Degree         ))))

(16) CometProject
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Arguments: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23], [cd_demo_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) AS cd_marital_status#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) AS cd_education_status#23]

(17) CometBroadcastExchange
Input [3]: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]

(18) CometBroadcastHashJoin
Left output [10]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Right output [3]: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [wr_refunded_cdemo_sk#10], [cd_demo_sk#19], Inner, ((((((cd_marital_status#22 = M) AND (cd_education_status#23 = Advanced Degree     )) AND (ws_sales_price#5 >= 100.00)) AND (ws_sales_price#5 <= 150.00)) OR ((((cd_marital_status#22 = S) AND (cd_education_status#23 = College             )) AND (ws_sales_price#5 >= 50.00)) AND (ws_sales_price#5 <= 100.00))) OR ((((cd_marital_status#22 = W) AND (cd_education_status#23 = 2 yr Degree         )) AND (ws_sales_price#5 >= 150.00)) AND (ws_sales_price#5 <= 200.00))), BuildRight

(19) CometProject
Input [13]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#10, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23], [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23]

(20) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(21) CometFilter
Input [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Condition : ((isnotnull(cd_demo_sk#24) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#25, 1, true, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#26, 20, true, false, true)))

(22) CometProject
Input [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Arguments: [cd_demo_sk#24, cd_marital_status#27, cd_education_status#28], [cd_demo_sk#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#25, 1, true, false, true) AS cd_marital_status#27, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#26, 20, true, false, true) AS cd_education_status#28]

(23) CometBroadcastExchange
Input [3]: [cd_demo_sk#24, cd_marital_status#27, cd_education_status#28]
Arguments: [cd_demo_sk#24, cd_marital_status#27, cd_education_status#28]

(24) CometBroadcastHashJoin
Left output [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23]
Right output [3]: [cd_demo_sk#24, cd_marital_status#27, cd_education_status#28]
Arguments: [wr_returning_cdemo_sk#12, cd_marital_status#22, cd_education_status#23], [cd_demo_sk#24, cd_marital_status#27, cd_education_status#28], Inner, BuildRight

(25) CometProject
Input [13]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_returning_cdemo_sk#12, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, cd_marital_status#22, cd_education_status#23, cd_demo_sk#24, cd_marital_status#27, cd_education_status#28]
Arguments: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(26) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#29, ca_state#30, ca_country#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(27) CometFilter
Input [3]: [ca_address_sk#29, ca_state#30, ca_country#31]
Condition : (((isnotnull(ca_country#31) AND (ca_country#31 = United States)) AND isnotnull(ca_address_sk#29)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#30, 2, true, false, true) IN (IN,OH,NJ) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#30, 2, true, false, true) IN (WI,CT,KY)) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#30, 2, true, false, true) IN (LA,IA,AR)))

(28) CometProject
Input [3]: [ca_address_sk#29, ca_state#30, ca_country#31]
Arguments: [ca_address_sk#29, ca_state#32], [ca_address_sk#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#30, 2, true, false, true) AS ca_state#32]

(29) CometBroadcastExchange
Input [2]: [ca_address_sk#29, ca_state#32]
Arguments: [ca_address_sk#29, ca_state#32]

(30) CometBroadcastHashJoin
Left output [7]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Right output [2]: [ca_address_sk#29, ca_state#32]
Arguments: [wr_refunded_addr_sk#11], [ca_address_sk#29], Inner, ((((ca_state#32 IN (IN,OH,NJ) AND (ws_net_profit#6 >= 100.00)) AND (ws_net_profit#6 <= 200.00)) OR ((ca_state#32 IN (WI,CT,KY) AND (ws_net_profit#6 >= 150.00)) AND (ws_net_profit#6 <= 300.00))) OR ((ca_state#32 IN (LA,IA,AR) AND (ws_net_profit#6 >= 50.00)) AND (ws_net_profit#6 <= 250.00))), BuildRight

(31) CometProject
Input [9]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#11, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, ca_address_sk#29, ca_state#32]
Arguments: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(32) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#33, d_year#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(33) CometFilter
Input [2]: [d_date_sk#33, d_year#34]
Condition : ((isnotnull(d_year#34) AND (d_year#34 = 2000)) AND isnotnull(d_date_sk#33))

(34) CometProject
Input [2]: [d_date_sk#33, d_year#34]
Arguments: [d_date_sk#33], [d_date_sk#33]

(35) CometBroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: [d_date_sk#33]

(36) CometBroadcastHashJoin
Left output [5]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Right output [1]: [d_date_sk#33]
Arguments: [ws_sold_date_sk#7], [d_date_sk#33], Inner, BuildRight

(37) CometProject
Input [6]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, d_date_sk#33]
Arguments: [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16], [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]

(38) CometScan parquet spark_catalog.default.reason
Output [2]: [r_reason_sk#35, r_reason_desc#36]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(39) CometFilter
Input [2]: [r_reason_sk#35, r_reason_desc#36]
Condition : isnotnull(r_reason_sk#35)

(40) CometProject
Input [2]: [r_reason_sk#35, r_reason_desc#36]
Arguments: [r_reason_sk#35, r_reason_desc#37], [r_reason_sk#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, r_reason_desc#36, 100, true, false, true) AS r_reason_desc#37]

(41) CometBroadcastExchange
Input [2]: [r_reason_sk#35, r_reason_desc#37]
Arguments: [r_reason_sk#35, r_reason_desc#37]

(42) CometBroadcastHashJoin
Left output [4]: [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16]
Right output [2]: [r_reason_sk#35, r_reason_desc#37]
Arguments: [wr_reason_sk#13], [r_reason_sk#35], Inner, BuildRight

(43) CometProject
Input [6]: [ws_quantity#4, wr_reason_sk#13, wr_fee#15, wr_refunded_cash#16, r_reason_sk#35, r_reason_desc#37]
Arguments: [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#37], [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#37]

(44) CometColumnarToRow [codegen id : 1]
Input [4]: [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#37]

(45) HashAggregate [codegen id : 1]
Input [4]: [ws_quantity#4, wr_fee#15, wr_refunded_cash#16, r_reason_desc#37]
Keys [1]: [r_reason_desc#37]
Functions [3]: [partial_avg(ws_quantity#4), partial_avg(UnscaledValue(wr_refunded_cash#16)), partial_avg(UnscaledValue(wr_fee#15))]
Aggregate Attributes [6]: [sum#38, count#39, sum#40, count#41, sum#42, count#43]
Results [7]: [r_reason_desc#37, sum#44, count#45, sum#46, count#47, sum#48, count#49]

(46) CometColumnarExchange
Input [7]: [r_reason_desc#37, sum#44, count#45, sum#46, count#47, sum#48, count#49]
Arguments: hashpartitioning(r_reason_desc#37, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(47) CometColumnarToRow [codegen id : 2]
Input [7]: [r_reason_desc#37, sum#44, count#45, sum#46, count#47, sum#48, count#49]

(48) HashAggregate [codegen id : 2]
Input [7]: [r_reason_desc#37, sum#44, count#45, sum#46, count#47, sum#48, count#49]
Keys [1]: [r_reason_desc#37]
Functions [3]: [avg(ws_quantity#4), avg(UnscaledValue(wr_refunded_cash#16)), avg(UnscaledValue(wr_fee#15))]
Aggregate Attributes [3]: [avg(ws_quantity#4)#50, avg(UnscaledValue(wr_refunded_cash#16))#51, avg(UnscaledValue(wr_fee#15))#52]
Results [4]: [substr(r_reason_desc#37, 1, 20) AS substr(r_reason_desc, 1, 20)#53, avg(ws_quantity#4)#50 AS avg(ws_quantity)#54, cast((avg(UnscaledValue(wr_refunded_cash#16))#51 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#55, cast((avg(UnscaledValue(wr_fee#15))#52 / 100.0) as decimal(11,6)) AS avg(wr_fee)#56]

(49) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#53, avg(ws_quantity)#54, avg(wr_refunded_cash)#55, avg(wr_fee)#56]
Arguments: 100, [substr(r_reason_desc, 1, 20)#53 ASC NULLS FIRST, avg(ws_quantity)#54 ASC NULLS FIRST, avg(wr_refunded_cash)#55 ASC NULLS FIRST, avg(wr_fee)#56 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#53, avg(ws_quantity)#54, avg(wr_refunded_cash)#55, avg(wr_fee)#56]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (54)
+- * CometColumnarToRow (53)
   +- CometProject (52)
      +- CometFilter (51)
         +- CometScan parquet spark_catalog.default.date_dim (50)


(50) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#33, d_year#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(51) CometFilter
Input [2]: [d_date_sk#33, d_year#34]
Condition : ((isnotnull(d_year#34) AND (d_year#34 = 2000)) AND isnotnull(d_date_sk#33))

(52) CometProject
Input [2]: [d_date_sk#33, d_year#34]
Arguments: [d_date_sk#33], [d_date_sk#33]

(53) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#33]

(54) BroadcastExchange
Input [1]: [d_date_sk#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]


