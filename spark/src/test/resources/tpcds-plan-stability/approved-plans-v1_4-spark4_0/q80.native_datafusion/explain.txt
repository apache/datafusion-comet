== Physical Plan ==
TakeOrderedAndProject (70)
+- * HashAggregate (69)
   +- Exchange (68)
      +- * HashAggregate (67)
         +- * Expand (66)
            +- Union (65)
               :- * HashAggregate (38)
               :  +- Exchange (37)
               :     +- * HashAggregate (36)
               :        +- * ColumnarToRow (35)
               :           +- CometProject (34)
               :              +- CometBroadcastHashJoin (33)
               :                 :- CometProject (28)
               :                 :  +- CometBroadcastHashJoin (27)
               :                 :     :- CometProject (22)
               :                 :     :  +- CometBroadcastHashJoin (21)
               :                 :     :     :- CometProject (17)
               :                 :     :     :  +- CometBroadcastHashJoin (16)
               :                 :     :     :     :- CometProject (11)
               :                 :     :     :     :  +- CometSortMergeJoin (10)
               :                 :     :     :     :     :- CometSort (4)
               :                 :     :     :     :     :  +- CometExchange (3)
               :                 :     :     :     :     :     +- CometFilter (2)
               :                 :     :     :     :     :        +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (1)
               :                 :     :     :     :     +- CometSort (9)
               :                 :     :     :     :        +- CometExchange (8)
               :                 :     :     :     :           +- CometProject (7)
               :                 :     :     :     :              +- CometFilter (6)
               :                 :     :     :     :                 +- CometNativeScan: `spark_catalog`.`default`.`store_returns` (5)
               :                 :     :     :     +- CometBroadcastExchange (15)
               :                 :     :     :        +- CometProject (14)
               :                 :     :     :           +- CometFilter (13)
               :                 :     :     :              +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (12)
               :                 :     :     +- CometBroadcastExchange (20)
               :                 :     :        +- CometFilter (19)
               :                 :     :           +- CometNativeScan: `spark_catalog`.`default`.`store` (18)
               :                 :     +- CometBroadcastExchange (26)
               :                 :        +- CometProject (25)
               :                 :           +- CometFilter (24)
               :                 :              +- CometNativeScan: `spark_catalog`.`default`.`item` (23)
               :                 +- CometBroadcastExchange (32)
               :                    +- CometProject (31)
               :                       +- CometFilter (30)
               :                          +- CometNativeScan: `spark_catalog`.`default`.`promotion` (29)
               :- * HashAggregate (62)
               :  +- Exchange (61)
               :     +- * HashAggregate (60)
               :        +- * ColumnarToRow (59)
               :           +- CometProject (58)
               :              +- CometBroadcastHashJoin (57)
               :                 :- CometProject (55)
               :                 :  +- CometBroadcastHashJoin (54)
               :                 :     :- CometProject (52)
               :                 :     :  +- CometBroadcastHashJoin (51)
               :                 :     :     :- CometProject (49)
               :                 :     :     :  +- CometBroadcastHashJoin (48)
               :                 :     :     :     :- CometProject (46)
               :                 :     :     :     :  +- CometSortMergeJoin (45)
               :                 :     :     :     :     :- CometSort (42)
               :                 :     :     :     :     :  +- CometExchange (41)
               :                 :     :     :     :     :     +- CometFilter (40)
               :                 :     :     :     :     :        +- CometNativeScan: `spark_catalog`.`default`.`catalog_sales` (39)
               :                 :     :     :     :     +- CometSort (44)
               :                 :     :     :     :        +- ReusedExchange (43)
               :                 :     :     :     +- ReusedExchange (47)
               :                 :     :     +- ReusedExchange (50)
               :                 :     +- ReusedExchange (53)
               :                 +- ReusedExchange (56)
               +- * HashAggregate (64)
                  +- ReusedExchange (63)


(1) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7], [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST]

(5) CometNativeScan: `spark_catalog`.`default`.`store_returns`
Output [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]

(6) CometFilter
Input [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Condition : (isnotnull(sr_item_sk#8) AND isnotnull(sr_ticket_number#9))

(7) CometProject
Input [5]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11, sr_returned_date_sk#12]
Arguments: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11], [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]

(8) CometExchange
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: hashpartitioning(sr_item_sk#8, sr_ticket_number#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11], [sr_item_sk#8 ASC NULLS FIRST, sr_ticket_number#9 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#8, sr_ticket_number#9], LeftOuter

(11) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#8, sr_ticket_number#9, sr_return_amt#10, sr_net_loss#11]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11]

(12) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#13, d_date#14]
Arguments: [d_date_sk#13, d_date#14]

(13) CometFilter
Input [2]: [d_date_sk#13, d_date#14]
Condition : (((isnotnull(d_date#14) AND (d_date#14 >= 2000-08-23)) AND (d_date#14 <= 2000-09-22)) AND isnotnull(d_date_sk#13))

(14) CometProject
Input [2]: [d_date_sk#13, d_date#14]
Arguments: [d_date_sk#13], [d_date_sk#13]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: [d_date_sk#13]

(16) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11]
Right output [1]: [d_date_sk#13]
Arguments: [ss_sold_date_sk#7], [d_date_sk#13], Inner, BuildRight

(17) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#10, sr_net_loss#11, d_date_sk#13]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11]

(18) CometNativeScan: `spark_catalog`.`default`.`store`
Output [2]: [s_store_sk#15, s_store_id#16]
Arguments: [s_store_sk#15, s_store_id#16]

(19) CometFilter
Input [2]: [s_store_sk#15, s_store_id#16]
Condition : isnotnull(s_store_sk#15)

(20) CometBroadcastExchange
Input [2]: [s_store_sk#15, s_store_id#16]
Arguments: [s_store_sk#15, s_store_id#16]

(21) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11]
Right output [2]: [s_store_sk#15, s_store_id#16]
Arguments: [ss_store_sk#2], [s_store_sk#15], Inner, BuildRight

(22) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_sk#15, s_store_id#16]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16]

(23) CometNativeScan: `spark_catalog`.`default`.`item`
Output [2]: [i_item_sk#17, i_current_price#18]
Arguments: [i_item_sk#17, i_current_price#18]

(24) CometFilter
Input [2]: [i_item_sk#17, i_current_price#18]
Condition : ((isnotnull(i_current_price#18) AND (i_current_price#18 > 50.00)) AND isnotnull(i_item_sk#17))

(25) CometProject
Input [2]: [i_item_sk#17, i_current_price#18]
Arguments: [i_item_sk#17], [i_item_sk#17]

(26) CometBroadcastExchange
Input [1]: [i_item_sk#17]
Arguments: [i_item_sk#17]

(27) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16]
Right output [1]: [i_item_sk#17]
Arguments: [ss_item_sk#1], [i_item_sk#17], Inner, BuildRight

(28) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16, i_item_sk#17]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16]

(29) CometNativeScan: `spark_catalog`.`default`.`promotion`
Output [2]: [p_promo_sk#19, p_channel_tv#20]
Arguments: [p_promo_sk#19, p_channel_tv#20]

(30) CometFilter
Input [2]: [p_promo_sk#19, p_channel_tv#20]
Condition : ((isnotnull(p_channel_tv#20) AND (p_channel_tv#20 = N)) AND isnotnull(p_promo_sk#19))

(31) CometProject
Input [2]: [p_promo_sk#19, p_channel_tv#20]
Arguments: [p_promo_sk#19], [p_promo_sk#19]

(32) CometBroadcastExchange
Input [1]: [p_promo_sk#19]
Arguments: [p_promo_sk#19]

(33) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16]
Right output [1]: [p_promo_sk#19]
Arguments: [ss_promo_sk#3], [p_promo_sk#19], Inner, BuildRight

(34) CometProject
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16, p_promo_sk#19]
Arguments: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16], [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16]

(35) ColumnarToRow [codegen id : 1]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16]

(36) HashAggregate [codegen id : 1]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#10, sr_net_loss#11, s_store_id#16]
Keys [1]: [s_store_id#16]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#21, sum#22, isEmpty#23, sum#24, isEmpty#25]
Results [6]: [s_store_id#16, sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]

(37) Exchange
Input [6]: [s_store_id#16, sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]
Arguments: hashpartitioning(s_store_id#16, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(38) HashAggregate [codegen id : 2]
Input [6]: [s_store_id#16, sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]
Keys [1]: [s_store_id#16]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#31, sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00))#32, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))#33]
Results [5]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#31,17,2) AS sales#34, sum(coalesce(cast(sr_return_amt#10 as decimal(12,2)), 0.00))#32 AS returns#35, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#11 as decimal(12,2)), 0.00)))#33 AS profit#36, store channel AS channel#37, concat(store, s_store_id#16) AS id#38]

(39) CometNativeScan: `spark_catalog`.`default`.`catalog_sales`
Output [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Arguments: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]

(40) CometFilter
Input [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Condition : ((isnotnull(cs_catalog_page_sk#39) AND isnotnull(cs_item_sk#40)) AND isnotnull(cs_promo_sk#41))

(41) CometExchange
Input [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Arguments: hashpartitioning(cs_item_sk#40, cs_order_number#42, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(42) CometSort
Input [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Arguments: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45], [cs_item_sk#40 ASC NULLS FIRST, cs_order_number#42 ASC NULLS FIRST]

(43) ReusedExchange [Reuses operator id: 8]
Output [4]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]

(44) CometSort
Input [4]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]
Arguments: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49], [cr_item_sk#46 ASC NULLS FIRST, cr_order_number#47 ASC NULLS FIRST]

(45) CometSortMergeJoin
Left output [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Right output [4]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]
Arguments: [cs_item_sk#40, cs_order_number#42], [cr_item_sk#46, cr_order_number#47], LeftOuter

(46) CometProject
Input [11]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]
Arguments: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49], [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49]

(47) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#50]

(48) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49]
Right output [1]: [d_date_sk#50]
Arguments: [cs_sold_date_sk#45], [d_date_sk#50], Inner, BuildRight

(49) CometProject
Input [9]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49, d_date_sk#50]
Arguments: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49], [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49]

(50) ReusedExchange [Reuses operator id: 20]
Output [2]: [cp_catalog_page_sk#51, cp_catalog_page_id#52]

(51) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49]
Right output [2]: [cp_catalog_page_sk#51, cp_catalog_page_id#52]
Arguments: [cs_catalog_page_sk#39], [cp_catalog_page_sk#51], Inner, BuildRight

(52) CometProject
Input [9]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_sk#51, cp_catalog_page_id#52]
Arguments: [cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52], [cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52]

(53) ReusedExchange [Reuses operator id: 26]
Output [1]: [i_item_sk#53]

(54) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52]
Right output [1]: [i_item_sk#53]
Arguments: [cs_item_sk#40], [i_item_sk#53], Inner, BuildRight

(55) CometProject
Input [8]: [cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52, i_item_sk#53]
Arguments: [cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52], [cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52]

(56) ReusedExchange [Reuses operator id: 32]
Output [1]: [p_promo_sk#54]

(57) CometBroadcastHashJoin
Left output [6]: [cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52]
Right output [1]: [p_promo_sk#54]
Arguments: [cs_promo_sk#41], [p_promo_sk#54], Inner, BuildRight

(58) CometProject
Input [7]: [cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52, p_promo_sk#54]
Arguments: [cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52], [cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52]

(59) ColumnarToRow [codegen id : 3]
Input [5]: [cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52]

(60) HashAggregate [codegen id : 3]
Input [5]: [cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#52]
Keys [1]: [cp_catalog_page_id#52]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#43)), partial_sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#55, sum#56, isEmpty#57, sum#58, isEmpty#59]
Results [6]: [cp_catalog_page_id#52, sum#60, sum#61, isEmpty#62, sum#63, isEmpty#64]

(61) Exchange
Input [6]: [cp_catalog_page_id#52, sum#60, sum#61, isEmpty#62, sum#63, isEmpty#64]
Arguments: hashpartitioning(cp_catalog_page_id#52, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(62) HashAggregate [codegen id : 4]
Input [6]: [cp_catalog_page_id#52, sum#60, sum#61, isEmpty#62, sum#63, isEmpty#64]
Keys [1]: [cp_catalog_page_id#52]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#43)), sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00)), sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#43))#65, sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00))#66, sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))#67]
Results [5]: [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#43))#65,17,2) AS sales#68, sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00))#66 AS returns#69, sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))#67 AS profit#70, catalog channel AS channel#71, concat(catalog_page, cp_catalog_page_id#52) AS id#72]

(63) ReusedExchange [Reuses operator id: 37]
Output [6]: [web_site_id#73, sum#74, sum#75, isEmpty#76, sum#77, isEmpty#78]

(64) HashAggregate [codegen id : 6]
Input [6]: [web_site_id#73, sum#74, sum#75, isEmpty#76, sum#77, isEmpty#78]
Keys [1]: [web_site_id#73]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#79)), sum(coalesce(cast(wr_return_amt#80 as decimal(12,2)), 0.00)), sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#82 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#79))#83, sum(coalesce(cast(wr_return_amt#80 as decimal(12,2)), 0.00))#84, sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#82 as decimal(12,2)), 0.00)))#85]
Results [5]: [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#79))#83,17,2) AS sales#86, sum(coalesce(cast(wr_return_amt#80 as decimal(12,2)), 0.00))#84 AS returns#87, sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#82 as decimal(12,2)), 0.00)))#85 AS profit#88, web channel AS channel#89, concat(web_site, web_site_id#73) AS id#90]

(65) Union

(66) Expand [codegen id : 7]
Input [5]: [sales#34, returns#35, profit#36, channel#37, id#38]
Arguments: [[sales#34, returns#35, profit#36, channel#37, id#38, 0], [sales#34, returns#35, profit#36, channel#37, null, 1], [sales#34, returns#35, profit#36, null, null, 3]], [sales#34, returns#35, profit#36, channel#91, id#92, spark_grouping_id#93]

(67) HashAggregate [codegen id : 7]
Input [6]: [sales#34, returns#35, profit#36, channel#91, id#92, spark_grouping_id#93]
Keys [3]: [channel#91, id#92, spark_grouping_id#93]
Functions [3]: [partial_sum(sales#34), partial_sum(returns#35), partial_sum(profit#36)]
Aggregate Attributes [6]: [sum#94, isEmpty#95, sum#96, isEmpty#97, sum#98, isEmpty#99]
Results [9]: [channel#91, id#92, spark_grouping_id#93, sum#100, isEmpty#101, sum#102, isEmpty#103, sum#104, isEmpty#105]

(68) Exchange
Input [9]: [channel#91, id#92, spark_grouping_id#93, sum#100, isEmpty#101, sum#102, isEmpty#103, sum#104, isEmpty#105]
Arguments: hashpartitioning(channel#91, id#92, spark_grouping_id#93, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(69) HashAggregate [codegen id : 8]
Input [9]: [channel#91, id#92, spark_grouping_id#93, sum#100, isEmpty#101, sum#102, isEmpty#103, sum#104, isEmpty#105]
Keys [3]: [channel#91, id#92, spark_grouping_id#93]
Functions [3]: [sum(sales#34), sum(returns#35), sum(profit#36)]
Aggregate Attributes [3]: [sum(sales#34)#106, sum(returns#35)#107, sum(profit#36)#108]
Results [5]: [channel#91, id#92, sum(sales#34)#106 AS sales#109, sum(returns#35)#107 AS returns#110, sum(profit#36)#108 AS profit#111]

(70) TakeOrderedAndProject
Input [5]: [channel#91, id#92, sales#109, returns#110, profit#111]
Arguments: 100, [channel#91 ASC NULLS FIRST, id#92 ASC NULLS FIRST], [channel#91, id#92, sales#109, returns#110, profit#111]

