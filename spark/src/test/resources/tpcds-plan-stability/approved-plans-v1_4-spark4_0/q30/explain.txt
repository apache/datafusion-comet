== Physical Plan ==
TakeOrderedAndProject (56)
+- * Project (55)
   +- * BroadcastHashJoin Inner BuildRight (54)
      :- * Project (48)
      :  +- * BroadcastHashJoin Inner BuildRight (47)
      :     :- * Project (41)
      :     :  +- * BroadcastHashJoin Inner BuildRight (40)
      :     :     :- * Filter (20)
      :     :     :  +- * HashAggregate (19)
      :     :     :     +- * CometColumnarToRow (18)
      :     :     :        +- CometColumnarExchange (17)
      :     :     :           +- * HashAggregate (16)
      :     :     :              +- * CometColumnarToRow (15)
      :     :     :                 +- CometProject (14)
      :     :     :                    +- CometBroadcastHashJoin (13)
      :     :     :                       :- CometProject (8)
      :     :     :                       :  +- CometBroadcastHashJoin (7)
      :     :     :                       :     :- CometFilter (2)
      :     :     :                       :     :  +- CometScan parquet spark_catalog.default.web_returns (1)
      :     :     :                       :     +- CometBroadcastExchange (6)
      :     :     :                       :        +- CometProject (5)
      :     :     :                       :           +- CometFilter (4)
      :     :     :                       :              +- CometScan parquet spark_catalog.default.date_dim (3)
      :     :     :                       +- CometBroadcastExchange (12)
      :     :     :                          +- CometProject (11)
      :     :     :                             +- CometFilter (10)
      :     :     :                                +- CometScan parquet spark_catalog.default.customer_address (9)
      :     :     +- BroadcastExchange (39)
      :     :        +- * Filter (38)
      :     :           +- * HashAggregate (37)
      :     :              +- * CometColumnarToRow (36)
      :     :                 +- CometColumnarExchange (35)
      :     :                    +- * HashAggregate (34)
      :     :                       +- * HashAggregate (33)
      :     :                          +- * CometColumnarToRow (32)
      :     :                             +- CometColumnarExchange (31)
      :     :                                +- * HashAggregate (30)
      :     :                                   +- * CometColumnarToRow (29)
      :     :                                      +- CometProject (28)
      :     :                                         +- CometBroadcastHashJoin (27)
      :     :                                            :- CometProject (25)
      :     :                                            :  +- CometBroadcastHashJoin (24)
      :     :                                            :     :- CometFilter (22)
      :     :                                            :     :  +- CometScan parquet spark_catalog.default.web_returns (21)
      :     :                                            :     +- ReusedExchange (23)
      :     :                                            +- ReusedExchange (26)
      :     +- BroadcastExchange (46)
      :        +- * CometColumnarToRow (45)
      :           +- CometProject (44)
      :              +- CometFilter (43)
      :                 +- CometScan parquet spark_catalog.default.customer (42)
      +- BroadcastExchange (53)
         +- * CometColumnarToRow (52)
            +- CometProject (51)
               +- CometFilter (50)
                  +- CometScan parquet spark_catalog.default.customer_address (49)


(1) CometScan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#4), dynamicpruningexpression(wr_returned_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(wr_returning_addr_sk), IsNotNull(wr_returning_customer_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(2) CometFilter
Input [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Condition : (isnotnull(wr_returning_addr_sk#2) AND isnotnull(wr_returning_customer_sk#1))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2002)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [wr_returned_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, wr_returned_date_sk#4, d_date_sk#6]
Arguments: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3], [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]

(9) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(10) CometFilter
Input [2]: [ca_address_sk#8, ca_state#9]
Condition : (isnotnull(ca_address_sk#8) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#9, 2, true, false, true)))

(11) CometProject
Input [2]: [ca_address_sk#8, ca_state#9]
Arguments: [ca_address_sk#8, ca_state#10], [ca_address_sk#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#9, 2, true, false, true) AS ca_state#10]

(12) CometBroadcastExchange
Input [2]: [ca_address_sk#8, ca_state#10]
Arguments: [ca_address_sk#8, ca_state#10]

(13) CometBroadcastHashJoin
Left output [3]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3]
Right output [2]: [ca_address_sk#8, ca_state#10]
Arguments: [wr_returning_addr_sk#2], [ca_address_sk#8], Inner, BuildRight

(14) CometProject
Input [5]: [wr_returning_customer_sk#1, wr_returning_addr_sk#2, wr_return_amt#3, ca_address_sk#8, ca_state#10]
Arguments: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#10], [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#10]

(15) CometColumnarToRow [codegen id : 1]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#10]

(16) HashAggregate [codegen id : 1]
Input [3]: [wr_returning_customer_sk#1, wr_return_amt#3, ca_state#10]
Keys [2]: [wr_returning_customer_sk#1, ca_state#10]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum#11]
Results [3]: [wr_returning_customer_sk#1, ca_state#10, sum#12]

(17) CometColumnarExchange
Input [3]: [wr_returning_customer_sk#1, ca_state#10, sum#12]
Arguments: hashpartitioning(wr_returning_customer_sk#1, ca_state#10, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(18) CometColumnarToRow [codegen id : 7]
Input [3]: [wr_returning_customer_sk#1, ca_state#10, sum#12]

(19) HashAggregate [codegen id : 7]
Input [3]: [wr_returning_customer_sk#1, ca_state#10, sum#12]
Keys [2]: [wr_returning_customer_sk#1, ca_state#10]
Functions [1]: [sum(UnscaledValue(wr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#3))#13]
Results [3]: [wr_returning_customer_sk#1 AS ctr_customer_sk#14, ca_state#10 AS ctr_state#15, MakeDecimal(sum(UnscaledValue(wr_return_amt#3))#13,17,2) AS ctr_total_return#16]

(20) Filter [codegen id : 7]
Input [3]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16]
Condition : isnotnull(ctr_total_return#16)

(21) CometScan parquet spark_catalog.default.web_returns
Output [4]: [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19, wr_returned_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#20), dynamicpruningexpression(wr_returned_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(wr_returning_addr_sk)]
ReadSchema: struct<wr_returning_customer_sk:int,wr_returning_addr_sk:int,wr_return_amt:decimal(7,2)>

(22) CometFilter
Input [4]: [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19, wr_returned_date_sk#20]
Condition : isnotnull(wr_returning_addr_sk#18)

(23) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#22]

(24) CometBroadcastHashJoin
Left output [4]: [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19, wr_returned_date_sk#20]
Right output [1]: [d_date_sk#22]
Arguments: [wr_returned_date_sk#20], [d_date_sk#22], Inner, BuildRight

(25) CometProject
Input [5]: [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19, wr_returned_date_sk#20, d_date_sk#22]
Arguments: [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19], [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19]

(26) ReusedExchange [Reuses operator id: 12]
Output [2]: [ca_address_sk#23, ca_state#24]

(27) CometBroadcastHashJoin
Left output [3]: [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19]
Right output [2]: [ca_address_sk#23, ca_state#24]
Arguments: [wr_returning_addr_sk#18], [ca_address_sk#23], Inner, BuildRight

(28) CometProject
Input [5]: [wr_returning_customer_sk#17, wr_returning_addr_sk#18, wr_return_amt#19, ca_address_sk#23, ca_state#24]
Arguments: [wr_returning_customer_sk#17, wr_return_amt#19, ca_state#24], [wr_returning_customer_sk#17, wr_return_amt#19, ca_state#24]

(29) CometColumnarToRow [codegen id : 2]
Input [3]: [wr_returning_customer_sk#17, wr_return_amt#19, ca_state#24]

(30) HashAggregate [codegen id : 2]
Input [3]: [wr_returning_customer_sk#17, wr_return_amt#19, ca_state#24]
Keys [2]: [wr_returning_customer_sk#17, ca_state#24]
Functions [1]: [partial_sum(UnscaledValue(wr_return_amt#19))]
Aggregate Attributes [1]: [sum#25]
Results [3]: [wr_returning_customer_sk#17, ca_state#24, sum#26]

(31) CometColumnarExchange
Input [3]: [wr_returning_customer_sk#17, ca_state#24, sum#26]
Arguments: hashpartitioning(wr_returning_customer_sk#17, ca_state#24, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(32) CometColumnarToRow [codegen id : 3]
Input [3]: [wr_returning_customer_sk#17, ca_state#24, sum#26]

(33) HashAggregate [codegen id : 3]
Input [3]: [wr_returning_customer_sk#17, ca_state#24, sum#26]
Keys [2]: [wr_returning_customer_sk#17, ca_state#24]
Functions [1]: [sum(UnscaledValue(wr_return_amt#19))]
Aggregate Attributes [1]: [sum(UnscaledValue(wr_return_amt#19))#13]
Results [2]: [ca_state#24 AS ctr_state#27, MakeDecimal(sum(UnscaledValue(wr_return_amt#19))#13,17,2) AS ctr_total_return#28]

(34) HashAggregate [codegen id : 3]
Input [2]: [ctr_state#27, ctr_total_return#28]
Keys [1]: [ctr_state#27]
Functions [1]: [partial_avg(ctr_total_return#28)]
Aggregate Attributes [2]: [sum#29, count#30]
Results [3]: [ctr_state#27, sum#31, count#32]

(35) CometColumnarExchange
Input [3]: [ctr_state#27, sum#31, count#32]
Arguments: hashpartitioning(ctr_state#27, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(36) CometColumnarToRow [codegen id : 4]
Input [3]: [ctr_state#27, sum#31, count#32]

(37) HashAggregate [codegen id : 4]
Input [3]: [ctr_state#27, sum#31, count#32]
Keys [1]: [ctr_state#27]
Functions [1]: [avg(ctr_total_return#28)]
Aggregate Attributes [1]: [avg(ctr_total_return#28)#33]
Results [2]: [(avg(ctr_total_return#28)#33 * 1.2) AS (avg(ctr_total_return) * 1.2)#34, ctr_state#27]

(38) Filter [codegen id : 4]
Input [2]: [(avg(ctr_total_return) * 1.2)#34, ctr_state#27]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#34)

(39) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#34, ctr_state#27]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=4]

(40) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ctr_state#15]
Right keys [1]: [ctr_state#27]
Join type: Inner
Join condition: (cast(ctr_total_return#16 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#34)

(41) Project [codegen id : 7]
Output [2]: [ctr_customer_sk#14, ctr_total_return#16]
Input [5]: [ctr_customer_sk#14, ctr_state#15, ctr_total_return#16, (avg(ctr_total_return) * 1.2)#34, ctr_state#27]

(42) CometScan parquet spark_catalog.default.customer
Output [14]: [c_customer_sk#35, c_customer_id#36, c_current_addr_sk#37, c_salutation#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#46, c_email_address#47, c_last_review_date#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_current_addr_sk:int,c_salutation:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_day:int,c_birth_month:int,c_birth_year:int,c_birth_country:string,c_login:string,c_email_address:string,c_last_review_date:int>

(43) CometFilter
Input [14]: [c_customer_sk#35, c_customer_id#36, c_current_addr_sk#37, c_salutation#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#46, c_email_address#47, c_last_review_date#48]
Condition : (isnotnull(c_customer_sk#35) AND isnotnull(c_current_addr_sk#37))

(44) CometProject
Input [14]: [c_customer_sk#35, c_customer_id#36, c_current_addr_sk#37, c_salutation#38, c_first_name#39, c_last_name#40, c_preferred_cust_flag#41, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#46, c_email_address#47, c_last_review_date#48]
Arguments: [c_customer_sk#35, c_customer_id#49, c_current_addr_sk#37, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48], [c_customer_sk#35, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#36, 16, true, false, true) AS c_customer_id#49, c_current_addr_sk#37, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_salutation#38, 10, true, false, true) AS c_salutation#50, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#39, 20, true, false, true) AS c_first_name#51, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#40, 30, true, false, true) AS c_last_name#52, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_preferred_cust_flag#41, 1, true, false, true) AS c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_login#46, 13, true, false, true) AS c_login#54, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_email_address#47, 50, true, false, true) AS c_email_address#55, c_last_review_date#48]

(45) CometColumnarToRow [codegen id : 5]
Input [14]: [c_customer_sk#35, c_customer_id#49, c_current_addr_sk#37, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48]

(46) BroadcastExchange
Input [14]: [c_customer_sk#35, c_customer_id#49, c_current_addr_sk#37, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(47) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ctr_customer_sk#14]
Right keys [1]: [c_customer_sk#35]
Join type: Inner
Join condition: None

(48) Project [codegen id : 7]
Output [14]: [ctr_total_return#16, c_customer_id#49, c_current_addr_sk#37, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48]
Input [16]: [ctr_customer_sk#14, ctr_total_return#16, c_customer_sk#35, c_customer_id#49, c_current_addr_sk#37, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48]

(49) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#56, ca_state#57]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(50) CometFilter
Input [2]: [ca_address_sk#56, ca_state#57]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#57, 2, true, false, true) = GA) AND isnotnull(ca_address_sk#56))

(51) CometProject
Input [2]: [ca_address_sk#56, ca_state#57]
Arguments: [ca_address_sk#56], [ca_address_sk#56]

(52) CometColumnarToRow [codegen id : 6]
Input [1]: [ca_address_sk#56]

(53) BroadcastExchange
Input [1]: [ca_address_sk#56]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(54) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#37]
Right keys [1]: [ca_address_sk#56]
Join type: Inner
Join condition: None

(55) Project [codegen id : 7]
Output [13]: [c_customer_id#49, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48, ctr_total_return#16]
Input [15]: [ctr_total_return#16, c_customer_id#49, c_current_addr_sk#37, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48, ca_address_sk#56]

(56) TakeOrderedAndProject
Input [13]: [c_customer_id#49, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48, ctr_total_return#16]
Arguments: 100, [c_customer_id#49 ASC NULLS FIRST, c_salutation#50 ASC NULLS FIRST, c_first_name#51 ASC NULLS FIRST, c_last_name#52 ASC NULLS FIRST, c_preferred_cust_flag#53 ASC NULLS FIRST, c_birth_day#42 ASC NULLS FIRST, c_birth_month#43 ASC NULLS FIRST, c_birth_year#44 ASC NULLS FIRST, c_birth_country#45 ASC NULLS FIRST, c_login#54 ASC NULLS FIRST, c_email_address#55 ASC NULLS FIRST, c_last_review_date#48 ASC NULLS FIRST, ctr_total_return#16 ASC NULLS FIRST], [c_customer_id#49, c_salutation#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_day#42, c_birth_month#43, c_birth_year#44, c_birth_country#45, c_login#54, c_email_address#55, c_last_review_date#48, ctr_total_return#16]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = wr_returned_date_sk#4 IN dynamicpruning#5
BroadcastExchange (61)
+- * CometColumnarToRow (60)
   +- CometProject (59)
      +- CometFilter (58)
         +- CometScan parquet spark_catalog.default.date_dim (57)


(57) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(58) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2002)) AND isnotnull(d_date_sk#6))

(59) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(60) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(61) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:2 Hosting operator id = 21 Hosting Expression = wr_returned_date_sk#20 IN dynamicpruning#5


