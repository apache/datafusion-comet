== Physical Plan ==
TakeOrderedAndProject (31)
+- * Project (30)
   +- * Filter (29)
      +- Window (28)
         +- * CometColumnarToRow (27)
            +- CometSort (26)
               +- CometColumnarExchange (25)
                  +- * HashAggregate (24)
                     +- * CometColumnarToRow (23)
                        +- CometColumnarExchange (22)
                           +- * HashAggregate (21)
                              +- * CometColumnarToRow (20)
                                 +- CometProject (19)
                                    +- CometBroadcastHashJoin (18)
                                       :- CometProject (14)
                                       :  +- CometBroadcastHashJoin (13)
                                       :     :- CometProject (8)
                                       :     :  +- CometBroadcastHashJoin (7)
                                       :     :     :- CometProject (3)
                                       :     :     :  +- CometFilter (2)
                                       :     :     :     +- CometScan parquet spark_catalog.default.item (1)
                                       :     :     +- CometBroadcastExchange (6)
                                       :     :        +- CometFilter (5)
                                       :     :           +- CometScan parquet spark_catalog.default.store_sales (4)
                                       :     +- CometBroadcastExchange (12)
                                       :        +- CometProject (11)
                                       :           +- CometFilter (10)
                                       :              +- CometScan parquet spark_catalog.default.date_dim (9)
                                       +- CometBroadcastExchange (17)
                                          +- CometFilter (16)
                                             +- CometScan parquet spark_catalog.default.store (15)


(1) CometScan parquet spark_catalog.default.item
Output [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [Or(And(And(In(i_category, [Books                                             ,Children                                          ,Electronics                                       ]),In(i_class, [personal                                          ,portable                                          ,refernece                                         ,self-help                                         ])),In(i_brand, [exportiunivamalg #6                               ,scholaramalgamalg #7                             ,scholaramalgamalg #8                              ,scholaramalgamalg #6                              ])),And(And(In(i_category, [Men                                               ,Music                                             ,Women                                             ]),In(i_class, [accessories                                       ,classical                                         ,fragrances                                        ,pants                                             ])),In(i_brand, [amalgimporto #9                                   ,edu packscholar #9                                ,exportiimporto #9                                 ,importoamalg #9                                   ]))), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_manager_id:int>

(2) CometFilter
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Condition : ((((i_category#4 IN (Books                                             ,Children                                          ,Electronics                                       ) AND i_class#3 IN (personal                                          ,portable                                          ,refernece                                         ,self-help                                         )) AND i_brand#2 IN (scholaramalgamalg #7                             ,scholaramalgamalg #8                              ,exportiunivamalg #6                               ,scholaramalgamalg #6                              )) OR ((i_category#4 IN (Women                                             ,Music                                             ,Men                                               ) AND i_class#3 IN (accessories                                       ,classical                                         ,fragrances                                        ,pants                                             )) AND i_brand#2 IN (amalgimporto #9                                   ,edu packscholar #9                                ,exportiimporto #9                                 ,importoamalg #9                                   ))) AND isnotnull(i_item_sk#1))

(3) CometProject
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Arguments: [i_item_sk#1, i_manager_id#5], [i_item_sk#1, i_manager_id#5]

(4) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#13), dynamicpruningexpression(ss_sold_date_sk#13 IN dynamicpruning#14)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Condition : (isnotnull(ss_item_sk#10) AND isnotnull(ss_store_sk#11))

(6) CometBroadcastExchange
Input [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Arguments: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]

(7) CometBroadcastHashJoin
Left output [2]: [i_item_sk#1, i_manager_id#5]
Right output [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Arguments: [i_item_sk#1], [ss_item_sk#10], Inner, BuildRight

(8) CometProject
Input [6]: [i_item_sk#1, i_manager_id#5, ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Arguments: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13], [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]

(9) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#15, d_month_seq#16, d_moy#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_month_seq, [1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_moy:int>

(10) CometFilter
Input [3]: [d_date_sk#15, d_month_seq#16, d_moy#17]
Condition : (d_month_seq#16 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211 AND isnotnull(d_date_sk#15))

(11) CometProject
Input [3]: [d_date_sk#15, d_month_seq#16, d_moy#17]
Arguments: [d_date_sk#15, d_moy#17], [d_date_sk#15, d_moy#17]

(12) CometBroadcastExchange
Input [2]: [d_date_sk#15, d_moy#17]
Arguments: [d_date_sk#15, d_moy#17]

(13) CometBroadcastHashJoin
Left output [4]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Right output [2]: [d_date_sk#15, d_moy#17]
Arguments: [ss_sold_date_sk#13], [d_date_sk#15], Inner, BuildRight

(14) CometProject
Input [6]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13, d_date_sk#15, d_moy#17]
Arguments: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#17], [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#17]

(15) CometScan parquet spark_catalog.default.store
Output [1]: [s_store_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(16) CometFilter
Input [1]: [s_store_sk#18]
Condition : isnotnull(s_store_sk#18)

(17) CometBroadcastExchange
Input [1]: [s_store_sk#18]
Arguments: [s_store_sk#18]

(18) CometBroadcastHashJoin
Left output [4]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#17]
Right output [1]: [s_store_sk#18]
Arguments: [ss_store_sk#11], [s_store_sk#18], Inner, BuildRight

(19) CometProject
Input [5]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#17, s_store_sk#18]
Arguments: [i_manager_id#5, ss_sales_price#12, d_moy#17], [i_manager_id#5, ss_sales_price#12, d_moy#17]

(20) CometColumnarToRow [codegen id : 1]
Input [3]: [i_manager_id#5, ss_sales_price#12, d_moy#17]

(21) HashAggregate [codegen id : 1]
Input [3]: [i_manager_id#5, ss_sales_price#12, d_moy#17]
Keys [2]: [i_manager_id#5, d_moy#17]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#12))]
Aggregate Attributes [1]: [sum#19]
Results [3]: [i_manager_id#5, d_moy#17, sum#20]

(22) CometColumnarExchange
Input [3]: [i_manager_id#5, d_moy#17, sum#20]
Arguments: hashpartitioning(i_manager_id#5, d_moy#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(23) CometColumnarToRow [codegen id : 2]
Input [3]: [i_manager_id#5, d_moy#17, sum#20]

(24) HashAggregate [codegen id : 2]
Input [3]: [i_manager_id#5, d_moy#17, sum#20]
Keys [2]: [i_manager_id#5, d_moy#17]
Functions [1]: [sum(UnscaledValue(ss_sales_price#12))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#12))#21]
Results [3]: [i_manager_id#5, MakeDecimal(sum(UnscaledValue(ss_sales_price#12))#21,17,2) AS sum_sales#22, MakeDecimal(sum(UnscaledValue(ss_sales_price#12))#21,17,2) AS _w0#23]

(25) CometColumnarExchange
Input [3]: [i_manager_id#5, sum_sales#22, _w0#23]
Arguments: hashpartitioning(i_manager_id#5, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(26) CometSort
Input [3]: [i_manager_id#5, sum_sales#22, _w0#23]
Arguments: [i_manager_id#5, sum_sales#22, _w0#23], [i_manager_id#5 ASC NULLS FIRST]

(27) CometColumnarToRow [codegen id : 3]
Input [3]: [i_manager_id#5, sum_sales#22, _w0#23]

(28) Window
Input [3]: [i_manager_id#5, sum_sales#22, _w0#23]
Arguments: [avg(_w0#23) windowspecdefinition(i_manager_id#5, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#24], [i_manager_id#5]

(29) Filter [codegen id : 4]
Input [4]: [i_manager_id#5, sum_sales#22, _w0#23, avg_monthly_sales#24]
Condition : CASE WHEN (avg_monthly_sales#24 > 0.000000) THEN ((abs((sum_sales#22 - avg_monthly_sales#24)) / avg_monthly_sales#24) > 0.1000000000000000) ELSE false END

(30) Project [codegen id : 4]
Output [3]: [i_manager_id#5, sum_sales#22, avg_monthly_sales#24]
Input [4]: [i_manager_id#5, sum_sales#22, _w0#23, avg_monthly_sales#24]

(31) TakeOrderedAndProject
Input [3]: [i_manager_id#5, sum_sales#22, avg_monthly_sales#24]
Arguments: 100, [i_manager_id#5 ASC NULLS FIRST, avg_monthly_sales#24 ASC NULLS FIRST, sum_sales#22 ASC NULLS FIRST], [i_manager_id#5, sum_sales#22, avg_monthly_sales#24]

===== Subqueries =====

Subquery:1 Hosting operator id = 4 Hosting Expression = ss_sold_date_sk#13 IN dynamicpruning#14
BroadcastExchange (36)
+- * CometColumnarToRow (35)
   +- CometProject (34)
      +- CometFilter (33)
         +- CometScan parquet spark_catalog.default.date_dim (32)


(32) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#15, d_month_seq#16, d_moy#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_month_seq, [1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_moy:int>

(33) CometFilter
Input [3]: [d_date_sk#15, d_month_seq#16, d_moy#17]
Condition : (d_month_seq#16 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211 AND isnotnull(d_date_sk#15))

(34) CometProject
Input [3]: [d_date_sk#15, d_month_seq#16, d_moy#17]
Arguments: [d_date_sk#15, d_moy#17], [d_date_sk#15, d_moy#17]

(35) CometColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#15, d_moy#17]

(36) BroadcastExchange
Input [2]: [d_date_sk#15, d_moy#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]


