== Physical Plan ==
TakeOrderedAndProject (45)
+- * Project (44)
   +- * BroadcastHashJoin Inner BuildRight (43)
      :- * Project (37)
      :  +- * BroadcastHashJoin Inner BuildRight (36)
      :     :- * Project (30)
      :     :  +- * BroadcastHashJoin Inner BuildRight (29)
      :     :     :- * Filter (13)
      :     :     :  +- * HashAggregate (12)
      :     :     :     +- * CometColumnarToRow (11)
      :     :     :        +- CometExchange (10)
      :     :     :           +- CometHashAggregate (9)
      :     :     :              +- CometProject (8)
      :     :     :                 +- CometBroadcastHashJoin (7)
      :     :     :                    :- CometFilter (2)
      :     :     :                    :  +- CometNativeScan parquet spark_catalog.default.store_returns (1)
      :     :     :                    +- CometBroadcastExchange (6)
      :     :     :                       +- CometProject (5)
      :     :     :                          +- CometFilter (4)
      :     :     :                             +- CometNativeScan parquet spark_catalog.default.date_dim (3)
      :     :     +- BroadcastExchange (28)
      :     :        +- * Filter (27)
      :     :           +- * HashAggregate (26)
      :     :              +- * CometColumnarToRow (25)
      :     :                 +- CometColumnarExchange (24)
      :     :                    +- * HashAggregate (23)
      :     :                       +- * HashAggregate (22)
      :     :                          +- * CometColumnarToRow (21)
      :     :                             +- CometExchange (20)
      :     :                                +- CometHashAggregate (19)
      :     :                                   +- CometProject (18)
      :     :                                      +- CometBroadcastHashJoin (17)
      :     :                                         :- CometFilter (15)
      :     :                                         :  +- CometNativeScan parquet spark_catalog.default.store_returns (14)
      :     :                                         +- ReusedExchange (16)
      :     +- BroadcastExchange (35)
      :        +- * CometColumnarToRow (34)
      :           +- CometProject (33)
      :              +- CometFilter (32)
      :                 +- CometNativeScan parquet spark_catalog.default.store (31)
      +- BroadcastExchange (42)
         +- * CometColumnarToRow (41)
            +- CometProject (40)
               +- CometFilter (39)
                  +- CometNativeScan parquet spark_catalog.default.customer (38)


(1) CometNativeScan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(sr_returned_date_sk#4)]
PushedFilters: [IsNotNull(sr_store_sk), IsNotNull(sr_customer_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(2) CometFilter
Input [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Condition : (isnotnull(sr_store_sk#2) AND isnotnull(sr_customer_sk#1))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_year#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_year#6]
Condition : ((isnotnull(d_year#6) AND (d_year#6 = 2000)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_year#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [4]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4]
Right output [1]: [d_date_sk#5]
Arguments: [sr_returned_date_sk#4], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3, sr_returned_date_sk#4, d_date_sk#5]
Arguments: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3], [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]

(9) CometHashAggregate
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sr_return_amt#3]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#3))]

(10) CometExchange
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#7]
Arguments: hashpartitioning(sr_customer_sk#1, sr_store_sk#2, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(11) CometColumnarToRow [codegen id : 5]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#7]

(12) HashAggregate [codegen id : 5]
Input [3]: [sr_customer_sk#1, sr_store_sk#2, sum#7]
Keys [2]: [sr_customer_sk#1, sr_store_sk#2]
Functions [1]: [sum(UnscaledValue(sr_return_amt#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#3))#8]
Results [3]: [sr_customer_sk#1 AS ctr_customer_sk#9, sr_store_sk#2 AS ctr_store_sk#10, MakeDecimal(sum(UnscaledValue(sr_return_amt#3))#8,17,2) AS ctr_total_return#11]

(13) Filter [codegen id : 5]
Input [3]: [ctr_customer_sk#9, ctr_store_sk#10, ctr_total_return#11]
Condition : isnotnull(ctr_total_return#11)

(14) CometNativeScan parquet spark_catalog.default.store_returns
Output [4]: [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14, sr_returned_date_sk#15]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(sr_returned_date_sk#15)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_customer_sk:int,sr_store_sk:int,sr_return_amt:decimal(7,2)>

(15) CometFilter
Input [4]: [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14, sr_returned_date_sk#15]
Condition : isnotnull(sr_store_sk#13)

(16) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#16]

(17) CometBroadcastHashJoin
Left output [4]: [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14, sr_returned_date_sk#15]
Right output [1]: [d_date_sk#16]
Arguments: [sr_returned_date_sk#15], [d_date_sk#16], Inner, BuildRight

(18) CometProject
Input [5]: [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14, sr_returned_date_sk#15, d_date_sk#16]
Arguments: [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14], [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]

(19) CometHashAggregate
Input [3]: [sr_customer_sk#12, sr_store_sk#13, sr_return_amt#14]
Keys [2]: [sr_customer_sk#12, sr_store_sk#13]
Functions [1]: [partial_sum(UnscaledValue(sr_return_amt#14))]

(20) CometExchange
Input [3]: [sr_customer_sk#12, sr_store_sk#13, sum#17]
Arguments: hashpartitioning(sr_customer_sk#12, sr_store_sk#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(21) CometColumnarToRow [codegen id : 1]
Input [3]: [sr_customer_sk#12, sr_store_sk#13, sum#17]

(22) HashAggregate [codegen id : 1]
Input [3]: [sr_customer_sk#12, sr_store_sk#13, sum#17]
Keys [2]: [sr_customer_sk#12, sr_store_sk#13]
Functions [1]: [sum(UnscaledValue(sr_return_amt#14))]
Aggregate Attributes [1]: [sum(UnscaledValue(sr_return_amt#14))#8]
Results [2]: [sr_store_sk#13 AS ctr_store_sk#18, MakeDecimal(sum(UnscaledValue(sr_return_amt#14))#8,17,2) AS ctr_total_return#19]

(23) HashAggregate [codegen id : 1]
Input [2]: [ctr_store_sk#18, ctr_total_return#19]
Keys [1]: [ctr_store_sk#18]
Functions [1]: [partial_avg(ctr_total_return#19)]
Aggregate Attributes [2]: [sum#20, count#21]
Results [3]: [ctr_store_sk#18, sum#22, count#23]

(24) CometColumnarExchange
Input [3]: [ctr_store_sk#18, sum#22, count#23]
Arguments: hashpartitioning(ctr_store_sk#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(25) CometColumnarToRow [codegen id : 2]
Input [3]: [ctr_store_sk#18, sum#22, count#23]

(26) HashAggregate [codegen id : 2]
Input [3]: [ctr_store_sk#18, sum#22, count#23]
Keys [1]: [ctr_store_sk#18]
Functions [1]: [avg(ctr_total_return#19)]
Aggregate Attributes [1]: [avg(ctr_total_return#19)#24]
Results [2]: [(avg(ctr_total_return#19)#24 * 1.2) AS (avg(ctr_total_return) * 1.2)#25, ctr_store_sk#18]

(27) Filter [codegen id : 2]
Input [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_store_sk#18]
Condition : isnotnull((avg(ctr_total_return) * 1.2)#25)

(28) BroadcastExchange
Input [2]: [(avg(ctr_total_return) * 1.2)#25, ctr_store_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=4]

(29) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ctr_store_sk#10]
Right keys [1]: [ctr_store_sk#18]
Join type: Inner
Join condition: (cast(ctr_total_return#11 as decimal(24,7)) > (avg(ctr_total_return) * 1.2)#25)

(30) Project [codegen id : 5]
Output [2]: [ctr_customer_sk#9, ctr_store_sk#10]
Input [5]: [ctr_customer_sk#9, ctr_store_sk#10, ctr_total_return#11, (avg(ctr_total_return) * 1.2)#25, ctr_store_sk#18]

(31) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#26, s_state#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(32) CometFilter
Input [2]: [s_store_sk#26, s_state#27]
Condition : ((isnotnull(s_state#27) AND (static_invoke(CharVarcharCodegenUtils.readSidePadding(s_state#27, 2)) = TN)) AND isnotnull(s_store_sk#26))

(33) CometProject
Input [2]: [s_store_sk#26, s_state#27]
Arguments: [s_store_sk#26], [s_store_sk#26]

(34) CometColumnarToRow [codegen id : 3]
Input [1]: [s_store_sk#26]

(35) BroadcastExchange
Input [1]: [s_store_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(36) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ctr_store_sk#10]
Right keys [1]: [s_store_sk#26]
Join type: Inner
Join condition: None

(37) Project [codegen id : 5]
Output [1]: [ctr_customer_sk#9]
Input [3]: [ctr_customer_sk#9, ctr_store_sk#10, s_store_sk#26]

(38) CometNativeScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#28, c_customer_id#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string>

(39) CometFilter
Input [2]: [c_customer_sk#28, c_customer_id#29]
Condition : isnotnull(c_customer_sk#28)

(40) CometProject
Input [2]: [c_customer_sk#28, c_customer_id#29]
Arguments: [c_customer_sk#28, c_customer_id#30], [c_customer_sk#28, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#29, 16)) AS c_customer_id#30]

(41) CometColumnarToRow [codegen id : 4]
Input [2]: [c_customer_sk#28, c_customer_id#30]

(42) BroadcastExchange
Input [2]: [c_customer_sk#28, c_customer_id#30]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(43) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ctr_customer_sk#9]
Right keys [1]: [c_customer_sk#28]
Join type: Inner
Join condition: None

(44) Project [codegen id : 5]
Output [1]: [c_customer_id#30]
Input [3]: [ctr_customer_sk#9, c_customer_sk#28, c_customer_id#30]

(45) TakeOrderedAndProject
Input [1]: [c_customer_id#30]
Arguments: 100, [c_customer_id#30 ASC NULLS FIRST], [c_customer_id#30]

