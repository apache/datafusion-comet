== Physical Plan ==
TakeOrderedAndProject (86)
+- * BroadcastHashJoin Inner BuildRight (85)
   :- * Filter (65)
   :  +- * HashAggregate (64)
   :     +- Exchange (63)
   :        +- * HashAggregate (62)
   :           +- * ColumnarToRow (61)
   :              +- CometProject (60)
   :                 +- CometBroadcastHashJoin (59)
   :                    :- CometProject (54)
   :                    :  +- CometBroadcastHashJoin (53)
   :                    :     :- CometBroadcastHashJoin (47)
   :                    :     :  :- CometFilter (2)
   :                    :     :  :  +- CometScan parquet spark_catalog.default.store_sales (1)
   :                    :     :  +- CometBroadcastExchange (46)
   :                    :     :     +- CometProject (45)
   :                    :     :        +- CometBroadcastHashJoin (44)
   :                    :     :           :- CometFilter (4)
   :                    :     :           :  +- CometScan parquet spark_catalog.default.item (3)
   :                    :     :           +- CometBroadcastExchange (43)
   :                    :     :              +- CometBroadcastHashJoin (42)
   :                    :     :                 :- CometHashAggregate (32)
   :                    :     :                 :  +- CometExchange (31)
   :                    :     :                 :     +- CometHashAggregate (30)
   :                    :     :                 :        +- CometProject (29)
   :                    :     :                 :           +- CometBroadcastHashJoin (28)
   :                    :     :                 :              :- CometProject (26)
   :                    :     :                 :              :  +- CometBroadcastHashJoin (25)
   :                    :     :                 :              :     :- CometFilter (6)
   :                    :     :                 :              :     :  +- CometScan parquet spark_catalog.default.store_sales (5)
   :                    :     :                 :              :     +- CometBroadcastExchange (24)
   :                    :     :                 :              :        +- CometBroadcastHashJoin (23)
   :                    :     :                 :              :           :- CometFilter (8)
   :                    :     :                 :              :           :  +- CometScan parquet spark_catalog.default.item (7)
   :                    :     :                 :              :           +- CometBroadcastExchange (22)
   :                    :     :                 :              :              +- CometProject (21)
   :                    :     :                 :              :                 +- CometBroadcastHashJoin (20)
   :                    :     :                 :              :                    :- CometProject (15)
   :                    :     :                 :              :                    :  +- CometBroadcastHashJoin (14)
   :                    :     :                 :              :                    :     :- CometFilter (10)
   :                    :     :                 :              :                    :     :  +- CometScan parquet spark_catalog.default.catalog_sales (9)
   :                    :     :                 :              :                    :     +- CometBroadcastExchange (13)
   :                    :     :                 :              :                    :        +- CometFilter (12)
   :                    :     :                 :              :                    :           +- CometScan parquet spark_catalog.default.item (11)
   :                    :     :                 :              :                    +- CometBroadcastExchange (19)
   :                    :     :                 :              :                       +- CometProject (18)
   :                    :     :                 :              :                          +- CometFilter (17)
   :                    :     :                 :              :                             +- CometScan parquet spark_catalog.default.date_dim (16)
   :                    :     :                 :              +- ReusedExchange (27)
   :                    :     :                 +- CometBroadcastExchange (41)
   :                    :     :                    +- CometProject (40)
   :                    :     :                       +- CometBroadcastHashJoin (39)
   :                    :     :                          :- CometProject (37)
   :                    :     :                          :  +- CometBroadcastHashJoin (36)
   :                    :     :                          :     :- CometFilter (34)
   :                    :     :                          :     :  +- CometScan parquet spark_catalog.default.web_sales (33)
   :                    :     :                          :     +- ReusedExchange (35)
   :                    :     :                          +- ReusedExchange (38)
   :                    :     +- CometBroadcastExchange (52)
   :                    :        +- CometBroadcastHashJoin (51)
   :                    :           :- CometFilter (49)
   :                    :           :  +- CometScan parquet spark_catalog.default.item (48)
   :                    :           +- ReusedExchange (50)
   :                    +- CometBroadcastExchange (58)
   :                       +- CometProject (57)
   :                          +- CometFilter (56)
   :                             +- CometScan parquet spark_catalog.default.date_dim (55)
   +- BroadcastExchange (84)
      +- * Filter (83)
         +- * HashAggregate (82)
            +- Exchange (81)
               +- * HashAggregate (80)
                  +- * ColumnarToRow (79)
                     +- CometProject (78)
                        +- CometBroadcastHashJoin (77)
                           :- CometProject (72)
                           :  +- CometBroadcastHashJoin (71)
                           :     :- CometBroadcastHashJoin (69)
                           :     :  :- CometFilter (67)
                           :     :  :  +- CometScan parquet spark_catalog.default.store_sales (66)
                           :     :  +- ReusedExchange (68)
                           :     +- ReusedExchange (70)
                           +- CometBroadcastExchange (76)
                              +- CometProject (75)
                                 +- CometFilter (74)
                                    +- CometScan parquet spark_catalog.default.date_dim (73)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_item_sk#1)

(3) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(4) CometFilter
Input [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Condition : ((isnotnull(i_brand_id#7) AND isnotnull(i_class_id#8)) AND isnotnull(i_category_id#9))

(5) Scan parquet spark_catalog.default.store_sales
Output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#11), dynamicpruningexpression(ss_sold_date_sk#11 IN dynamicpruning#12)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int>

(6) CometFilter
Input [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_item_sk#10)

(7) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(8) CometFilter
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Condition : (((isnotnull(i_item_sk#13) AND isnotnull(i_brand_id#14)) AND isnotnull(i_class_id#15)) AND isnotnull(i_category_id#16))

(9) Scan parquet spark_catalog.default.catalog_sales
Output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#18), dynamicpruningexpression(cs_sold_date_sk#18 IN dynamicpruning#19)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int>

(10) CometFilter
Input [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Condition : isnotnull(cs_item_sk#17)

(11) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(12) CometFilter
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Condition : isnotnull(i_item_sk#20)

(13) CometBroadcastExchange
Input [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]

(14) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#17, cs_sold_date_sk#18]
Right output [4]: [i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_item_sk#17], [i_item_sk#20], Inner, BuildRight

(15) CometProject
Input [6]: [cs_item_sk#17, cs_sold_date_sk#18, i_item_sk#20, i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23], [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]

(16) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#24, d_year#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(17) CometFilter
Input [2]: [d_date_sk#24, d_year#25]
Condition : (((isnotnull(d_year#25) AND (d_year#25 >= 1999)) AND (d_year#25 <= 2001)) AND isnotnull(d_date_sk#24))

(18) CometProject
Input [2]: [d_date_sk#24, d_year#25]
Arguments: [d_date_sk#24], [d_date_sk#24]

(19) CometBroadcastExchange
Input [1]: [d_date_sk#24]
Arguments: [d_date_sk#24]

(20) CometBroadcastHashJoin
Left output [4]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#18], [d_date_sk#24], Inner, BuildRight

(21) CometProject
Input [5]: [cs_sold_date_sk#18, i_brand_id#21, i_class_id#22, i_category_id#23, d_date_sk#24]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23], [i_brand_id#21, i_class_id#22, i_category_id#23]

(22) CometBroadcastExchange
Input [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [i_brand_id#21, i_class_id#22, i_category_id#23]

(23) CometBroadcastHashJoin
Left output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [3]: [i_brand_id#21, i_class_id#22, i_category_id#23]
Arguments: [coalesce(i_brand_id#14, 0), isnull(i_brand_id#14), coalesce(i_class_id#15, 0), isnull(i_class_id#15), coalesce(i_category_id#16, 0), isnull(i_category_id#16)], [coalesce(i_brand_id#21, 0), isnull(i_brand_id#21), coalesce(i_class_id#22, 0), isnull(i_class_id#22), coalesce(i_category_id#23, 0), isnull(i_category_id#23)], LeftSemi, BuildRight

(24) CometBroadcastExchange
Input [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]

(25) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#10, ss_sold_date_sk#11]
Right output [4]: [i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_item_sk#10], [i_item_sk#13], Inner, BuildRight

(26) CometProject
Input [6]: [ss_item_sk#10, ss_sold_date_sk#11, i_item_sk#13, i_brand_id#14, i_class_id#15, i_category_id#16]
Arguments: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16], [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]

(27) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#26]

(28) CometBroadcastHashJoin
Left output [4]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16]
Right output [1]: [d_date_sk#26]
Arguments: [ss_sold_date_sk#11], [d_date_sk#26], Inner, BuildRight

(29) CometProject
Input [5]: [ss_sold_date_sk#11, i_brand_id#14, i_class_id#15, i_category_id#16, d_date_sk#26]
Arguments: [brand_id#27, class_id#28, category_id#29], [i_brand_id#14 AS brand_id#27, i_class_id#15 AS class_id#28, i_category_id#16 AS category_id#29]

(30) CometHashAggregate
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []

(31) CometExchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: hashpartitioning(brand_id#27, class_id#28, category_id#29, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(32) CometHashAggregate
Input [3]: [brand_id#27, class_id#28, category_id#29]
Keys [3]: [brand_id#27, class_id#28, category_id#29]
Functions: []

(33) Scan parquet spark_catalog.default.web_sales
Output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#31), dynamicpruningexpression(ws_sold_date_sk#31 IN dynamicpruning#32)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int>

(34) CometFilter
Input [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Condition : isnotnull(ws_item_sk#30)

(35) ReusedExchange [Reuses operator id: 13]
Output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]

(36) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#30, ws_sold_date_sk#31]
Right output [4]: [i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_item_sk#30], [i_item_sk#33], Inner, BuildRight

(37) CometProject
Input [6]: [ws_item_sk#30, ws_sold_date_sk#31, i_item_sk#33, i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36], [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]

(38) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#37]

(39) CometBroadcastHashJoin
Left output [4]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36]
Right output [1]: [d_date_sk#37]
Arguments: [ws_sold_date_sk#31], [d_date_sk#37], Inner, BuildRight

(40) CometProject
Input [5]: [ws_sold_date_sk#31, i_brand_id#34, i_class_id#35, i_category_id#36, d_date_sk#37]
Arguments: [i_brand_id#34, i_class_id#35, i_category_id#36], [i_brand_id#34, i_class_id#35, i_category_id#36]

(41) CometBroadcastExchange
Input [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [i_brand_id#34, i_class_id#35, i_category_id#36]

(42) CometBroadcastHashJoin
Left output [3]: [brand_id#27, class_id#28, category_id#29]
Right output [3]: [i_brand_id#34, i_class_id#35, i_category_id#36]
Arguments: [coalesce(brand_id#27, 0), isnull(brand_id#27), coalesce(class_id#28, 0), isnull(class_id#28), coalesce(category_id#29, 0), isnull(category_id#29)], [coalesce(i_brand_id#34, 0), isnull(i_brand_id#34), coalesce(i_class_id#35, 0), isnull(i_class_id#35), coalesce(i_category_id#36, 0), isnull(i_category_id#36)], LeftSemi, BuildRight

(43) CometBroadcastExchange
Input [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: [brand_id#27, class_id#28, category_id#29]

(44) CometBroadcastHashJoin
Left output [4]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9]
Right output [3]: [brand_id#27, class_id#28, category_id#29]
Arguments: [i_brand_id#7, i_class_id#8, i_category_id#9], [brand_id#27, class_id#28, category_id#29], Inner, BuildRight

(45) CometProject
Input [7]: [i_item_sk#6, i_brand_id#7, i_class_id#8, i_category_id#9, brand_id#27, class_id#28, category_id#29]
Arguments: [ss_item_sk#38], [i_item_sk#6 AS ss_item_sk#38]

(46) CometBroadcastExchange
Input [1]: [ss_item_sk#38]
Arguments: [ss_item_sk#38]

(47) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Right output [1]: [ss_item_sk#38]
Arguments: [ss_item_sk#1], [ss_item_sk#38], LeftSemi, BuildRight

(48) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_brand_id), IsNotNull(i_class_id), IsNotNull(i_category_id)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_class_id:int,i_category_id:int>

(49) CometFilter
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Condition : (((isnotnull(i_item_sk#39) AND isnotnull(i_brand_id#40)) AND isnotnull(i_class_id#41)) AND isnotnull(i_category_id#42))

(50) ReusedExchange [Reuses operator id: 46]
Output [1]: [ss_item_sk#38]

(51) CometBroadcastHashJoin
Left output [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Right output [1]: [ss_item_sk#38]
Arguments: [i_item_sk#39], [ss_item_sk#38], LeftSemi, BuildRight

(52) CometBroadcastExchange
Input [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]

(53) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4]
Right output [4]: [i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: [ss_item_sk#1], [i_item_sk#39], Inner, BuildRight

(54) CometProject
Input [8]: [ss_item_sk#1, ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_item_sk#39, i_brand_id#40, i_class_id#41, i_category_id#42]
Arguments: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42], [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42]

(55) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#43, d_week_seq#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#45), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(56) CometFilter
Input [2]: [d_date_sk#43, d_week_seq#44]
Condition : ((isnotnull(d_week_seq#44) AND (d_week_seq#44 = ReusedSubquery Subquery scalar-subquery#45, [id=#46])) AND isnotnull(d_date_sk#43))

(57) CometProject
Input [2]: [d_date_sk#43, d_week_seq#44]
Arguments: [d_date_sk#43], [d_date_sk#43]

(58) CometBroadcastExchange
Input [1]: [d_date_sk#43]
Arguments: [d_date_sk#43]

(59) CometBroadcastHashJoin
Left output [6]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42]
Right output [1]: [d_date_sk#43]
Arguments: [ss_sold_date_sk#4], [d_date_sk#43], Inner, BuildRight

(60) CometProject
Input [7]: [ss_quantity#2, ss_list_price#3, ss_sold_date_sk#4, i_brand_id#40, i_class_id#41, i_category_id#42, d_date_sk#43]
Arguments: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42], [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]

(61) ColumnarToRow [codegen id : 1]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]

(62) HashAggregate [codegen id : 1]
Input [5]: [ss_quantity#2, ss_list_price#3, i_brand_id#40, i_class_id#41, i_category_id#42]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [partial_sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), partial_count(1)]
Aggregate Attributes [3]: [sum#47, isEmpty#48, count#49]
Results [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#50, isEmpty#51, count#52]

(63) Exchange
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#50, isEmpty#51, count#52]
Arguments: hashpartitioning(i_brand_id#40, i_class_id#41, i_category_id#42, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(64) HashAggregate [codegen id : 4]
Input [6]: [i_brand_id#40, i_class_id#41, i_category_id#42, sum#50, isEmpty#51, count#52]
Keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Functions [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#53, count(1)#54]
Results [6]: [store AS channel#55, i_brand_id#40, i_class_id#41, i_category_id#42, sum((cast(ss_quantity#2 as decimal(10,0)) * ss_list_price#3))#53 AS sales#56, count(1)#54 AS number_sales#57]

(65) Filter [codegen id : 4]
Input [6]: [channel#55, i_brand_id#40, i_class_id#41, i_category_id#42, sales#56, number_sales#57]
Condition : (isnotnull(sales#56) AND (cast(sales#56 as decimal(32,6)) > cast(Subquery scalar-subquery#58, [id=#59] as decimal(32,6))))

(66) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#60, ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#63), dynamicpruningexpression(ss_sold_date_sk#63 IN dynamicpruning#64)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_quantity:int,ss_list_price:decimal(7,2)>

(67) CometFilter
Input [4]: [ss_item_sk#60, ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63]
Condition : isnotnull(ss_item_sk#60)

(68) ReusedExchange [Reuses operator id: 46]
Output [1]: [ss_item_sk#65]

(69) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#60, ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63]
Right output [1]: [ss_item_sk#65]
Arguments: [ss_item_sk#60], [ss_item_sk#65], LeftSemi, BuildRight

(70) ReusedExchange [Reuses operator id: 52]
Output [4]: [i_item_sk#66, i_brand_id#67, i_class_id#68, i_category_id#69]

(71) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#60, ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63]
Right output [4]: [i_item_sk#66, i_brand_id#67, i_class_id#68, i_category_id#69]
Arguments: [ss_item_sk#60], [i_item_sk#66], Inner, BuildRight

(72) CometProject
Input [8]: [ss_item_sk#60, ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63, i_item_sk#66, i_brand_id#67, i_class_id#68, i_category_id#69]
Arguments: [ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63, i_brand_id#67, i_class_id#68, i_category_id#69], [ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63, i_brand_id#67, i_class_id#68, i_category_id#69]

(73) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#70, d_week_seq#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#72), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(74) CometFilter
Input [2]: [d_date_sk#70, d_week_seq#71]
Condition : ((isnotnull(d_week_seq#71) AND (d_week_seq#71 = ReusedSubquery Subquery scalar-subquery#72, [id=#73])) AND isnotnull(d_date_sk#70))

(75) CometProject
Input [2]: [d_date_sk#70, d_week_seq#71]
Arguments: [d_date_sk#70], [d_date_sk#70]

(76) CometBroadcastExchange
Input [1]: [d_date_sk#70]
Arguments: [d_date_sk#70]

(77) CometBroadcastHashJoin
Left output [6]: [ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63, i_brand_id#67, i_class_id#68, i_category_id#69]
Right output [1]: [d_date_sk#70]
Arguments: [ss_sold_date_sk#63], [d_date_sk#70], Inner, BuildRight

(78) CometProject
Input [7]: [ss_quantity#61, ss_list_price#62, ss_sold_date_sk#63, i_brand_id#67, i_class_id#68, i_category_id#69, d_date_sk#70]
Arguments: [ss_quantity#61, ss_list_price#62, i_brand_id#67, i_class_id#68, i_category_id#69], [ss_quantity#61, ss_list_price#62, i_brand_id#67, i_class_id#68, i_category_id#69]

(79) ColumnarToRow [codegen id : 2]
Input [5]: [ss_quantity#61, ss_list_price#62, i_brand_id#67, i_class_id#68, i_category_id#69]

(80) HashAggregate [codegen id : 2]
Input [5]: [ss_quantity#61, ss_list_price#62, i_brand_id#67, i_class_id#68, i_category_id#69]
Keys [3]: [i_brand_id#67, i_class_id#68, i_category_id#69]
Functions [2]: [partial_sum((cast(ss_quantity#61 as decimal(10,0)) * ss_list_price#62)), partial_count(1)]
Aggregate Attributes [3]: [sum#74, isEmpty#75, count#76]
Results [6]: [i_brand_id#67, i_class_id#68, i_category_id#69, sum#77, isEmpty#78, count#79]

(81) Exchange
Input [6]: [i_brand_id#67, i_class_id#68, i_category_id#69, sum#77, isEmpty#78, count#79]
Arguments: hashpartitioning(i_brand_id#67, i_class_id#68, i_category_id#69, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(82) HashAggregate [codegen id : 3]
Input [6]: [i_brand_id#67, i_class_id#68, i_category_id#69, sum#77, isEmpty#78, count#79]
Keys [3]: [i_brand_id#67, i_class_id#68, i_category_id#69]
Functions [2]: [sum((cast(ss_quantity#61 as decimal(10,0)) * ss_list_price#62)), count(1)]
Aggregate Attributes [2]: [sum((cast(ss_quantity#61 as decimal(10,0)) * ss_list_price#62))#80, count(1)#81]
Results [6]: [store AS channel#82, i_brand_id#67, i_class_id#68, i_category_id#69, sum((cast(ss_quantity#61 as decimal(10,0)) * ss_list_price#62))#80 AS sales#83, count(1)#81 AS number_sales#84]

(83) Filter [codegen id : 3]
Input [6]: [channel#82, i_brand_id#67, i_class_id#68, i_category_id#69, sales#83, number_sales#84]
Condition : (isnotnull(sales#83) AND (cast(sales#83 as decimal(32,6)) > cast(ReusedSubquery Subquery scalar-subquery#58, [id=#59] as decimal(32,6))))

(84) BroadcastExchange
Input [6]: [channel#82, i_brand_id#67, i_class_id#68, i_category_id#69, sales#83, number_sales#84]
Arguments: HashedRelationBroadcastMode(List(input[1, int, true], input[2, int, true], input[3, int, true]),false), [plan_id=4]

(85) BroadcastHashJoin [codegen id : 4]
Left keys [3]: [i_brand_id#40, i_class_id#41, i_category_id#42]
Right keys [3]: [i_brand_id#67, i_class_id#68, i_category_id#69]
Join type: Inner
Join condition: None

(86) TakeOrderedAndProject
Input [12]: [channel#55, i_brand_id#40, i_class_id#41, i_category_id#42, sales#56, number_sales#57, channel#82, i_brand_id#67, i_class_id#68, i_category_id#69, sales#83, number_sales#84]
Arguments: 100, [i_brand_id#40 ASC NULLS FIRST, i_class_id#41 ASC NULLS FIRST, i_category_id#42 ASC NULLS FIRST], [channel#55, i_brand_id#40, i_class_id#41, i_category_id#42, sales#56, number_sales#57, channel#82, i_brand_id#67, i_class_id#68, i_category_id#69, sales#83, number_sales#84]

===== Subqueries =====

Subquery:1 Hosting operator id = 65 Hosting Expression = Subquery scalar-subquery#58, [id=#59]
* HashAggregate (103)
+- Exchange (102)
   +- * HashAggregate (101)
      +- * ColumnarToRow (100)
         +- CometUnion (99)
            :- CometProject (90)
            :  +- CometBroadcastHashJoin (89)
            :     :- CometScan parquet spark_catalog.default.store_sales (87)
            :     +- ReusedExchange (88)
            :- CometProject (94)
            :  +- CometBroadcastHashJoin (93)
            :     :- CometScan parquet spark_catalog.default.catalog_sales (91)
            :     +- ReusedExchange (92)
            +- CometProject (98)
               +- CometBroadcastHashJoin (97)
                  :- CometScan parquet spark_catalog.default.web_sales (95)
                  +- ReusedExchange (96)


(87) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_quantity#85, ss_list_price#86, ss_sold_date_sk#87]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#87), dynamicpruningexpression(ss_sold_date_sk#87 IN dynamicpruning#88)]
ReadSchema: struct<ss_quantity:int,ss_list_price:decimal(7,2)>

(88) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#89]

(89) CometBroadcastHashJoin
Left output [3]: [ss_quantity#85, ss_list_price#86, ss_sold_date_sk#87]
Right output [1]: [d_date_sk#89]
Arguments: [ss_sold_date_sk#87], [d_date_sk#89], Inner, BuildRight

(90) CometProject
Input [4]: [ss_quantity#85, ss_list_price#86, ss_sold_date_sk#87, d_date_sk#89]
Arguments: [quantity#90, list_price#91], [ss_quantity#85 AS quantity#90, ss_list_price#86 AS list_price#91]

(91) Scan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_quantity#92, cs_list_price#93, cs_sold_date_sk#94]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#94), dynamicpruningexpression(cs_sold_date_sk#94 IN dynamicpruning#95)]
ReadSchema: struct<cs_quantity:int,cs_list_price:decimal(7,2)>

(92) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#96]

(93) CometBroadcastHashJoin
Left output [3]: [cs_quantity#92, cs_list_price#93, cs_sold_date_sk#94]
Right output [1]: [d_date_sk#96]
Arguments: [cs_sold_date_sk#94], [d_date_sk#96], Inner, BuildRight

(94) CometProject
Input [4]: [cs_quantity#92, cs_list_price#93, cs_sold_date_sk#94, d_date_sk#96]
Arguments: [quantity#97, list_price#98], [cs_quantity#92 AS quantity#97, cs_list_price#93 AS list_price#98]

(95) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_quantity#99, ws_list_price#100, ws_sold_date_sk#101]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#101), dynamicpruningexpression(ws_sold_date_sk#101 IN dynamicpruning#102)]
ReadSchema: struct<ws_quantity:int,ws_list_price:decimal(7,2)>

(96) ReusedExchange [Reuses operator id: 19]
Output [1]: [d_date_sk#103]

(97) CometBroadcastHashJoin
Left output [3]: [ws_quantity#99, ws_list_price#100, ws_sold_date_sk#101]
Right output [1]: [d_date_sk#103]
Arguments: [ws_sold_date_sk#101], [d_date_sk#103], Inner, BuildRight

(98) CometProject
Input [4]: [ws_quantity#99, ws_list_price#100, ws_sold_date_sk#101, d_date_sk#103]
Arguments: [quantity#104, list_price#105], [ws_quantity#99 AS quantity#104, ws_list_price#100 AS list_price#105]

(99) CometUnion
Child 0 Input [2]: [quantity#90, list_price#91]
Child 1 Input [2]: [quantity#97, list_price#98]
Child 2 Input [2]: [quantity#104, list_price#105]

(100) ColumnarToRow [codegen id : 1]
Input [2]: [quantity#90, list_price#91]

(101) HashAggregate [codegen id : 1]
Input [2]: [quantity#90, list_price#91]
Keys: []
Functions [1]: [partial_avg((cast(quantity#90 as decimal(10,0)) * list_price#91))]
Aggregate Attributes [2]: [sum#106, count#107]
Results [2]: [sum#108, count#109]

(102) Exchange
Input [2]: [sum#108, count#109]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=5]

(103) HashAggregate [codegen id : 2]
Input [2]: [sum#108, count#109]
Keys: []
Functions [1]: [avg((cast(quantity#90 as decimal(10,0)) * list_price#91))]
Aggregate Attributes [1]: [avg((cast(quantity#90 as decimal(10,0)) * list_price#91))#110]
Results [1]: [avg((cast(quantity#90 as decimal(10,0)) * list_price#91))#110 AS average_sales#111]

Subquery:2 Hosting operator id = 87 Hosting Expression = ss_sold_date_sk#87 IN dynamicpruning#12

Subquery:3 Hosting operator id = 91 Hosting Expression = cs_sold_date_sk#94 IN dynamicpruning#12

Subquery:4 Hosting operator id = 95 Hosting Expression = ws_sold_date_sk#101 IN dynamicpruning#12

Subquery:5 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (108)
+- * ColumnarToRow (107)
   +- CometProject (106)
      +- CometFilter (105)
         +- CometScan parquet spark_catalog.default.date_dim (104)


(104) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#43, d_week_seq#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#45), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(105) CometFilter
Input [2]: [d_date_sk#43, d_week_seq#44]
Condition : ((isnotnull(d_week_seq#44) AND (d_week_seq#44 = ReusedSubquery Subquery scalar-subquery#45, [id=#46])) AND isnotnull(d_date_sk#43))

(106) CometProject
Input [2]: [d_date_sk#43, d_week_seq#44]
Arguments: [d_date_sk#43], [d_date_sk#43]

(107) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#43]

(108) BroadcastExchange
Input [1]: [d_date_sk#43]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:6 Hosting operator id = 105 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:7 Hosting operator id = 104 Hosting Expression = Subquery scalar-subquery#45, [id=#46]
* ColumnarToRow (112)
+- CometProject (111)
   +- CometFilter (110)
      +- CometScan parquet spark_catalog.default.date_dim (109)


(109) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#112, d_year#113, d_moy#114, d_dom#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,2000), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(110) CometFilter
Input [4]: [d_week_seq#112, d_year#113, d_moy#114, d_dom#115]
Condition : (((((isnotnull(d_year#113) AND isnotnull(d_moy#114)) AND isnotnull(d_dom#115)) AND (d_year#113 = 2000)) AND (d_moy#114 = 12)) AND (d_dom#115 = 11))

(111) CometProject
Input [4]: [d_week_seq#112, d_year#113, d_moy#114, d_dom#115]
Arguments: [d_week_seq#112], [d_week_seq#112]

(112) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#112]

Subquery:8 Hosting operator id = 5 Hosting Expression = ss_sold_date_sk#11 IN dynamicpruning#12
BroadcastExchange (117)
+- * ColumnarToRow (116)
   +- CometProject (115)
      +- CometFilter (114)
         +- CometScan parquet spark_catalog.default.date_dim (113)


(113) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#26, d_year#116]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), GreaterThanOrEqual(d_year,1999), LessThanOrEqual(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(114) CometFilter
Input [2]: [d_date_sk#26, d_year#116]
Condition : (((isnotnull(d_year#116) AND (d_year#116 >= 1999)) AND (d_year#116 <= 2001)) AND isnotnull(d_date_sk#26))

(115) CometProject
Input [2]: [d_date_sk#26, d_year#116]
Arguments: [d_date_sk#26], [d_date_sk#26]

(116) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#26]

(117) BroadcastExchange
Input [1]: [d_date_sk#26]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]

Subquery:9 Hosting operator id = 9 Hosting Expression = cs_sold_date_sk#18 IN dynamicpruning#12

Subquery:10 Hosting operator id = 33 Hosting Expression = ws_sold_date_sk#31 IN dynamicpruning#12

Subquery:11 Hosting operator id = 56 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:12 Hosting operator id = 55 Hosting Expression = ReusedSubquery Subquery scalar-subquery#45, [id=#46]

Subquery:13 Hosting operator id = 83 Hosting Expression = ReusedSubquery Subquery scalar-subquery#58, [id=#59]

Subquery:14 Hosting operator id = 66 Hosting Expression = ss_sold_date_sk#63 IN dynamicpruning#64
BroadcastExchange (122)
+- * ColumnarToRow (121)
   +- CometProject (120)
      +- CometFilter (119)
         +- CometScan parquet spark_catalog.default.date_dim (118)


(118) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#70, d_week_seq#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#72), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int>

(119) CometFilter
Input [2]: [d_date_sk#70, d_week_seq#71]
Condition : ((isnotnull(d_week_seq#71) AND (d_week_seq#71 = ReusedSubquery Subquery scalar-subquery#72, [id=#73])) AND isnotnull(d_date_sk#70))

(120) CometProject
Input [2]: [d_date_sk#70, d_week_seq#71]
Arguments: [d_date_sk#70], [d_date_sk#70]

(121) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#70]

(122) BroadcastExchange
Input [1]: [d_date_sk#70]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:15 Hosting operator id = 119 Hosting Expression = ReusedSubquery Subquery scalar-subquery#72, [id=#73]

Subquery:16 Hosting operator id = 118 Hosting Expression = Subquery scalar-subquery#72, [id=#73]
* ColumnarToRow (126)
+- CometProject (125)
   +- CometFilter (124)
      +- CometScan parquet spark_catalog.default.date_dim (123)


(123) Scan parquet spark_catalog.default.date_dim
Output [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), IsNotNull(d_dom), EqualTo(d_year,1999), EqualTo(d_moy,12), EqualTo(d_dom,11)]
ReadSchema: struct<d_week_seq:int,d_year:int,d_moy:int,d_dom:int>

(124) CometFilter
Input [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Condition : (((((isnotnull(d_year#118) AND isnotnull(d_moy#119)) AND isnotnull(d_dom#120)) AND (d_year#118 = 1999)) AND (d_moy#119 = 12)) AND (d_dom#120 = 11))

(125) CometProject
Input [4]: [d_week_seq#117, d_year#118, d_moy#119, d_dom#120]
Arguments: [d_week_seq#117], [d_week_seq#117]

(126) ColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#117]

Subquery:17 Hosting operator id = 74 Hosting Expression = ReusedSubquery Subquery scalar-subquery#72, [id=#73]

Subquery:18 Hosting operator id = 73 Hosting Expression = ReusedSubquery Subquery scalar-subquery#72, [id=#73]


