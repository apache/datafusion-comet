== Physical Plan ==
TakeOrderedAndProject (44)
+- * Filter (43)
   +- * HashAggregate (42)
      +- * CometColumnarToRow (41)
         +- CometColumnarExchange (40)
            +- * HashAggregate (39)
               +- * Project (38)
                  +- * BroadcastHashJoin Inner BuildRight (37)
                     :- * CometColumnarToRow (20)
                     :  +- CometProject (19)
                     :     +- CometBroadcastHashJoin (18)
                     :        :- CometProject (13)
                     :        :  +- CometBroadcastHashJoin (12)
                     :        :     :- CometProject (8)
                     :        :     :  +- CometBroadcastHashJoin (7)
                     :        :     :     :- CometProject (3)
                     :        :     :     :  +- CometFilter (2)
                     :        :     :     :     +- CometScan parquet spark_catalog.default.customer_address (1)
                     :        :     :     +- CometBroadcastExchange (6)
                     :        :     :        +- CometFilter (5)
                     :        :     :           +- CometScan parquet spark_catalog.default.customer (4)
                     :        :     +- CometBroadcastExchange (11)
                     :        :        +- CometFilter (10)
                     :        :           +- CometScan parquet spark_catalog.default.store_sales (9)
                     :        +- CometBroadcastExchange (17)
                     :           +- CometProject (16)
                     :              +- CometFilter (15)
                     :                 +- CometScan parquet spark_catalog.default.date_dim (14)
                     +- BroadcastExchange (36)
                        +- * Project (35)
                           +- * BroadcastHashJoin Inner BuildRight (34)
                              :- * CometColumnarToRow (23)
                              :  +- CometFilter (22)
                              :     +- CometScan parquet spark_catalog.default.item (21)
                              +- BroadcastExchange (33)
                                 +- * Filter (32)
                                    +- * HashAggregate (31)
                                       +- * CometColumnarToRow (30)
                                          +- CometColumnarExchange (29)
                                             +- * HashAggregate (28)
                                                +- * CometColumnarToRow (27)
                                                   +- CometProject (26)
                                                      +- CometFilter (25)
                                                         +- CometScan parquet spark_catalog.default.item (24)


(1) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#1, ca_state#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(2) CometFilter
Input [2]: [ca_address_sk#1, ca_state#2]
Condition : isnotnull(ca_address_sk#1)

(3) CometProject
Input [2]: [ca_address_sk#1, ca_state#2]
Arguments: [ca_address_sk#1, ca_state#3], [ca_address_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#2, 2, true, false, true) AS ca_state#3]

(4) CometScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#4, c_current_addr_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_current_addr_sk), IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(5) CometFilter
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Condition : (isnotnull(c_current_addr_sk#5) AND isnotnull(c_customer_sk#4))

(6) CometBroadcastExchange
Input [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: [c_customer_sk#4, c_current_addr_sk#5]

(7) CometBroadcastHashJoin
Left output [2]: [ca_address_sk#1, ca_state#3]
Right output [2]: [c_customer_sk#4, c_current_addr_sk#5]
Arguments: [ca_address_sk#1], [c_current_addr_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ca_address_sk#1, ca_state#3, c_customer_sk#4, c_current_addr_sk#5]
Arguments: [ca_state#3, c_customer_sk#4], [ca_state#3, c_customer_sk#4]

(9) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_customer_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int>

(10) CometFilter
Input [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Condition : (isnotnull(ss_customer_sk#7) AND isnotnull(ss_item_sk#6))

(11) CometBroadcastExchange
Input [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Arguments: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]

(12) CometBroadcastHashJoin
Left output [2]: [ca_state#3, c_customer_sk#4]
Right output [3]: [ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Arguments: [c_customer_sk#4], [ss_customer_sk#7], Inner, BuildRight

(13) CometProject
Input [5]: [ca_state#3, c_customer_sk#4, ss_item_sk#6, ss_customer_sk#7, ss_sold_date_sk#8]
Arguments: [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8], [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8]

(14) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#10, d_month_seq#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), EqualTo(d_month_seq,ScalarSubquery#12), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(15) CometFilter
Input [2]: [d_date_sk#10, d_month_seq#11]
Condition : ((isnotnull(d_month_seq#11) AND (d_month_seq#11 = ReusedSubquery Subquery scalar-subquery#12, [id=#13])) AND isnotnull(d_date_sk#10))

(16) CometProject
Input [2]: [d_date_sk#10, d_month_seq#11]
Arguments: [d_date_sk#10], [d_date_sk#10]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: [d_date_sk#10]

(18) CometBroadcastHashJoin
Left output [3]: [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#10]
Arguments: [ss_sold_date_sk#8], [d_date_sk#10], Inner, BuildRight

(19) CometProject
Input [4]: [ca_state#3, ss_item_sk#6, ss_sold_date_sk#8, d_date_sk#10]
Arguments: [ca_state#3, ss_item_sk#6], [ca_state#3, ss_item_sk#6]

(20) CometColumnarToRow [codegen id : 4]
Input [2]: [ca_state#3, ss_item_sk#6]

(21) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#14, i_current_price#15, i_category#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_category:string>

(22) CometFilter
Input [3]: [i_item_sk#14, i_current_price#15, i_category#16]
Condition : (isnotnull(i_current_price#15) AND isnotnull(i_item_sk#14))

(23) CometColumnarToRow [codegen id : 3]
Input [3]: [i_item_sk#14, i_current_price#15, i_category#16]

(24) CometScan parquet spark_catalog.default.item
Output [2]: [i_current_price#17, i_category#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
ReadSchema: struct<i_current_price:decimal(7,2),i_category:string>

(25) CometFilter
Input [2]: [i_current_price#17, i_category#18]
Condition : isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#18, 50, true, false, true))

(26) CometProject
Input [2]: [i_current_price#17, i_category#18]
Arguments: [i_category#19, i_current_price#17], [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#18, 50, true, false, true) AS i_category#19, i_current_price#17]

(27) CometColumnarToRow [codegen id : 1]
Input [2]: [i_category#19, i_current_price#17]

(28) HashAggregate [codegen id : 1]
Input [2]: [i_category#19, i_current_price#17]
Keys [1]: [i_category#19]
Functions [1]: [partial_avg(UnscaledValue(i_current_price#17))]
Aggregate Attributes [2]: [sum#20, count#21]
Results [3]: [i_category#19, sum#22, count#23]

(29) CometColumnarExchange
Input [3]: [i_category#19, sum#22, count#23]
Arguments: hashpartitioning(i_category#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(30) CometColumnarToRow [codegen id : 2]
Input [3]: [i_category#19, sum#22, count#23]

(31) HashAggregate [codegen id : 2]
Input [3]: [i_category#19, sum#22, count#23]
Keys [1]: [i_category#19]
Functions [1]: [avg(UnscaledValue(i_current_price#17))]
Aggregate Attributes [1]: [avg(UnscaledValue(i_current_price#17))#24]
Results [2]: [cast((avg(UnscaledValue(i_current_price#17))#24 / 100.0) as decimal(11,6)) AS avg(i_current_price)#25, i_category#19]

(32) Filter [codegen id : 2]
Input [2]: [avg(i_current_price)#25, i_category#19]
Condition : isnotnull(avg(i_current_price)#25)

(33) BroadcastExchange
Input [2]: [avg(i_current_price)#25, i_category#19]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true]),false), [plan_id=2]

(34) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#16, 50, true, false, true)]
Right keys [1]: [i_category#19]
Join type: Inner
Join condition: (cast(i_current_price#15 as decimal(14,7)) > (1.2 * avg(i_current_price)#25))

(35) Project [codegen id : 3]
Output [1]: [i_item_sk#14]
Input [5]: [i_item_sk#14, i_current_price#15, i_category#16, avg(i_current_price)#25, i_category#19]

(36) BroadcastExchange
Input [1]: [i_item_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(37) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#6]
Right keys [1]: [i_item_sk#14]
Join type: Inner
Join condition: None

(38) Project [codegen id : 4]
Output [1]: [ca_state#3]
Input [3]: [ca_state#3, ss_item_sk#6, i_item_sk#14]

(39) HashAggregate [codegen id : 4]
Input [1]: [ca_state#3]
Keys [1]: [ca_state#3]
Functions [1]: [partial_count(1)]
Aggregate Attributes [1]: [count#26]
Results [2]: [ca_state#3, count#27]

(40) CometColumnarExchange
Input [2]: [ca_state#3, count#27]
Arguments: hashpartitioning(ca_state#3, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(41) CometColumnarToRow [codegen id : 5]
Input [2]: [ca_state#3, count#27]

(42) HashAggregate [codegen id : 5]
Input [2]: [ca_state#3, count#27]
Keys [1]: [ca_state#3]
Functions [1]: [count(1)]
Aggregate Attributes [1]: [count(1)#28]
Results [2]: [ca_state#3 AS state#29, count(1)#28 AS cnt#30]

(43) Filter [codegen id : 5]
Input [2]: [state#29, cnt#30]
Condition : (cnt#30 >= 10)

(44) TakeOrderedAndProject
Input [2]: [state#29, cnt#30]
Arguments: 100, [cnt#30 ASC NULLS FIRST], [state#29, cnt#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 9 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (49)
+- * CometColumnarToRow (48)
   +- CometProject (47)
      +- CometFilter (46)
         +- CometScan parquet spark_catalog.default.date_dim (45)


(45) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#10, d_month_seq#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), EqualTo(d_month_seq,ScalarSubquery#12), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(46) CometFilter
Input [2]: [d_date_sk#10, d_month_seq#11]
Condition : ((isnotnull(d_month_seq#11) AND (d_month_seq#11 = ReusedSubquery Subquery scalar-subquery#12, [id=#13])) AND isnotnull(d_date_sk#10))

(47) CometProject
Input [2]: [d_date_sk#10, d_month_seq#11]
Arguments: [d_date_sk#10], [d_date_sk#10]

(48) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#10]

(49) BroadcastExchange
Input [1]: [d_date_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

Subquery:2 Hosting operator id = 46 Hosting Expression = ReusedSubquery Subquery scalar-subquery#12, [id=#13]

Subquery:3 Hosting operator id = 45 Hosting Expression = Subquery scalar-subquery#12, [id=#13]
* CometColumnarToRow (56)
+- CometHashAggregate (55)
   +- CometExchange (54)
      +- CometHashAggregate (53)
         +- CometProject (52)
            +- CometFilter (51)
               +- CometScan parquet spark_catalog.default.date_dim (50)


(50) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_month_seq#31, d_year#32, d_moy#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,2000), EqualTo(d_moy,1)]
ReadSchema: struct<d_month_seq:int,d_year:int,d_moy:int>

(51) CometFilter
Input [3]: [d_month_seq#31, d_year#32, d_moy#33]
Condition : (((isnotnull(d_year#32) AND isnotnull(d_moy#33)) AND (d_year#32 = 2000)) AND (d_moy#33 = 1))

(52) CometProject
Input [3]: [d_month_seq#31, d_year#32, d_moy#33]
Arguments: [d_month_seq#31], [d_month_seq#31]

(53) CometHashAggregate
Input [1]: [d_month_seq#31]
Keys [1]: [d_month_seq#31]
Functions: []

(54) CometExchange
Input [1]: [d_month_seq#31]
Arguments: hashpartitioning(d_month_seq#31, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(55) CometHashAggregate
Input [1]: [d_month_seq#31]
Keys [1]: [d_month_seq#31]
Functions: []

(56) CometColumnarToRow [codegen id : 1]
Input [1]: [d_month_seq#31]

Subquery:4 Hosting operator id = 15 Hosting Expression = ReusedSubquery Subquery scalar-subquery#12, [id=#13]

Subquery:5 Hosting operator id = 14 Hosting Expression = ReusedSubquery Subquery scalar-subquery#12, [id=#13]


