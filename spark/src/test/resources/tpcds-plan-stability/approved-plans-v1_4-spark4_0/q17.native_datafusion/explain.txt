== Physical Plan ==
TakeOrderedAndProject (42)
+- * HashAggregate (41)
   +- Exchange (40)
      +- * HashAggregate (39)
         +- * ColumnarToRow (38)
            +- CometProject (37)
               +- CometBroadcastHashJoin (36)
                  :- CometProject (32)
                  :  +- CometBroadcastHashJoin (31)
                  :     :- CometProject (27)
                  :     :  +- CometBroadcastHashJoin (26)
                  :     :     :- CometProject (24)
                  :     :     :  +- CometBroadcastHashJoin (23)
                  :     :     :     :- CometProject (18)
                  :     :     :     :  +- CometBroadcastHashJoin (17)
                  :     :     :     :     :- CometProject (12)
                  :     :     :     :     :  +- CometBroadcastHashJoin (11)
                  :     :     :     :     :     :- CometProject (7)
                  :     :     :     :     :     :  +- CometBroadcastHashJoin (6)
                  :     :     :     :     :     :     :- CometFilter (2)
                  :     :     :     :     :     :     :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (1)
                  :     :     :     :     :     :     +- CometBroadcastExchange (5)
                  :     :     :     :     :     :        +- CometFilter (4)
                  :     :     :     :     :     :           +- CometNativeScan: `spark_catalog`.`default`.`store_returns` (3)
                  :     :     :     :     :     +- CometBroadcastExchange (10)
                  :     :     :     :     :        +- CometFilter (9)
                  :     :     :     :     :           +- CometNativeScan: `spark_catalog`.`default`.`catalog_sales` (8)
                  :     :     :     :     +- CometBroadcastExchange (16)
                  :     :     :     :        +- CometProject (15)
                  :     :     :     :           +- CometFilter (14)
                  :     :     :     :              +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (13)
                  :     :     :     +- CometBroadcastExchange (22)
                  :     :     :        +- CometProject (21)
                  :     :     :           +- CometFilter (20)
                  :     :     :              +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (19)
                  :     :     +- ReusedExchange (25)
                  :     +- CometBroadcastExchange (30)
                  :        +- CometFilter (29)
                  :           +- CometNativeScan: `spark_catalog`.`default`.`store` (28)
                  +- CometBroadcastExchange (35)
                     +- CometFilter (34)
                        +- CometNativeScan: `spark_catalog`.`default`.`item` (33)


(1) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_customer_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_ticket_number#4)) AND isnotnull(ss_store_sk#3))

(3) CometNativeScan: `spark_catalog`.`default`.`store_returns`
Output [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Arguments: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]

(4) CometFilter
Input [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Condition : ((isnotnull(sr_customer_sk#8) AND isnotnull(sr_item_sk#7)) AND isnotnull(sr_ticket_number#9))

(5) CometBroadcastExchange
Input [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Arguments: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]

(6) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6]
Right output [5]: [sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Arguments: [ss_customer_sk#2, ss_item_sk#1, ss_ticket_number#4], [sr_customer_sk#8, sr_item_sk#7, sr_ticket_number#9], Inner, BuildRight

(7) CometProject
Input [11]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_ticket_number#9, sr_return_quantity#10, sr_returned_date_sk#11]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_return_quantity#10, sr_returned_date_sk#11], [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_return_quantity#10, sr_returned_date_sk#11]

(8) CometNativeScan: `spark_catalog`.`default`.`catalog_sales`
Output [4]: [cs_bill_customer_sk#12, cs_item_sk#13, cs_quantity#14, cs_sold_date_sk#15]
Arguments: [cs_bill_customer_sk#12, cs_item_sk#13, cs_quantity#14, cs_sold_date_sk#15]

(9) CometFilter
Input [4]: [cs_bill_customer_sk#12, cs_item_sk#13, cs_quantity#14, cs_sold_date_sk#15]
Condition : (isnotnull(cs_bill_customer_sk#12) AND isnotnull(cs_item_sk#13))

(10) CometBroadcastExchange
Input [4]: [cs_bill_customer_sk#12, cs_item_sk#13, cs_quantity#14, cs_sold_date_sk#15]
Arguments: [cs_bill_customer_sk#12, cs_item_sk#13, cs_quantity#14, cs_sold_date_sk#15]

(11) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_return_quantity#10, sr_returned_date_sk#11]
Right output [4]: [cs_bill_customer_sk#12, cs_item_sk#13, cs_quantity#14, cs_sold_date_sk#15]
Arguments: [sr_customer_sk#8, sr_item_sk#7], [cs_bill_customer_sk#12, cs_item_sk#13], Inner, BuildRight

(12) CometProject
Input [12]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_item_sk#7, sr_customer_sk#8, sr_return_quantity#10, sr_returned_date_sk#11, cs_bill_customer_sk#12, cs_item_sk#13, cs_quantity#14, cs_sold_date_sk#15]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15], [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15]

(13) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#16, d_quarter_name#17]
Arguments: [d_date_sk#16, d_quarter_name#17]

(14) CometFilter
Input [2]: [d_date_sk#16, d_quarter_name#17]
Condition : ((isnotnull(d_quarter_name#17) AND (d_quarter_name#17 = 2001Q1)) AND isnotnull(d_date_sk#16))

(15) CometProject
Input [2]: [d_date_sk#16, d_quarter_name#17]
Arguments: [d_date_sk#16], [d_date_sk#16]

(16) CometBroadcastExchange
Input [1]: [d_date_sk#16]
Arguments: [d_date_sk#16]

(17) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15]
Right output [1]: [d_date_sk#16]
Arguments: [ss_sold_date_sk#6], [d_date_sk#16], Inner, BuildRight

(18) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, ss_sold_date_sk#6, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15, d_date_sk#16]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15], [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15]

(19) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#18, d_quarter_name#19]
Arguments: [d_date_sk#18, d_quarter_name#19]

(20) CometFilter
Input [2]: [d_date_sk#18, d_quarter_name#19]
Condition : (d_quarter_name#19 IN (2001Q1,2001Q2,2001Q3) AND isnotnull(d_date_sk#18))

(21) CometProject
Input [2]: [d_date_sk#18, d_quarter_name#19]
Arguments: [d_date_sk#18], [d_date_sk#18]

(22) CometBroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: [d_date_sk#18]

(23) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15]
Right output [1]: [d_date_sk#18]
Arguments: [sr_returned_date_sk#11], [d_date_sk#18], Inner, BuildRight

(24) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, sr_returned_date_sk#11, cs_quantity#14, cs_sold_date_sk#15, d_date_sk#18]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, cs_sold_date_sk#15], [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, cs_sold_date_sk#15]

(25) ReusedExchange [Reuses operator id: 22]
Output [1]: [d_date_sk#20]

(26) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, cs_sold_date_sk#15]
Right output [1]: [d_date_sk#20]
Arguments: [cs_sold_date_sk#15], [d_date_sk#20], Inner, BuildRight

(27) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, cs_sold_date_sk#15, d_date_sk#20]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14], [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14]

(28) CometNativeScan: `spark_catalog`.`default`.`store`
Output [2]: [s_store_sk#21, s_state#22]
Arguments: [s_store_sk#21, s_state#22]

(29) CometFilter
Input [2]: [s_store_sk#21, s_state#22]
Condition : isnotnull(s_store_sk#21)

(30) CometBroadcastExchange
Input [2]: [s_store_sk#21, s_state#22]
Arguments: [s_store_sk#21, s_state#22]

(31) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14]
Right output [2]: [s_store_sk#21, s_state#22]
Arguments: [ss_store_sk#3], [s_store_sk#21], Inner, BuildRight

(32) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_store_sk#21, s_state#22]
Arguments: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22], [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22]

(33) CometNativeScan: `spark_catalog`.`default`.`item`
Output [3]: [i_item_sk#23, i_item_id#24, i_item_desc#25]
Arguments: [i_item_sk#23, i_item_id#24, i_item_desc#25]

(34) CometFilter
Input [3]: [i_item_sk#23, i_item_id#24, i_item_desc#25]
Condition : isnotnull(i_item_sk#23)

(35) CometBroadcastExchange
Input [3]: [i_item_sk#23, i_item_id#24, i_item_desc#25]
Arguments: [i_item_sk#23, i_item_id#24, i_item_desc#25]

(36) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22]
Right output [3]: [i_item_sk#23, i_item_id#24, i_item_desc#25]
Arguments: [ss_item_sk#1], [i_item_sk#23], Inner, BuildRight

(37) CometProject
Input [8]: [ss_item_sk#1, ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22, i_item_sk#23, i_item_id#24, i_item_desc#25]
Arguments: [ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22, i_item_id#24, i_item_desc#25], [ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22, i_item_id#24, i_item_desc#25]

(38) ColumnarToRow [codegen id : 1]
Input [6]: [ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22, i_item_id#24, i_item_desc#25]

(39) HashAggregate [codegen id : 1]
Input [6]: [ss_quantity#5, sr_return_quantity#10, cs_quantity#14, s_state#22, i_item_id#24, i_item_desc#25]
Keys [3]: [i_item_id#24, i_item_desc#25, s_state#22]
Functions [9]: [partial_count(ss_quantity#5), partial_avg(ss_quantity#5), partial_stddev_samp(cast(ss_quantity#5 as double)), partial_count(sr_return_quantity#10), partial_avg(sr_return_quantity#10), partial_stddev_samp(cast(sr_return_quantity#10 as double)), partial_count(cs_quantity#14), partial_avg(cs_quantity#14), partial_stddev_samp(cast(cs_quantity#14 as double))]
Aggregate Attributes [18]: [count#26, sum#27, count#28, n#29, avg#30, m2#31, count#32, sum#33, count#34, n#35, avg#36, m2#37, count#38, sum#39, count#40, n#41, avg#42, m2#43]
Results [21]: [i_item_id#24, i_item_desc#25, s_state#22, count#44, sum#45, count#46, n#47, avg#48, m2#49, count#50, sum#51, count#52, n#53, avg#54, m2#55, count#56, sum#57, count#58, n#59, avg#60, m2#61]

(40) Exchange
Input [21]: [i_item_id#24, i_item_desc#25, s_state#22, count#44, sum#45, count#46, n#47, avg#48, m2#49, count#50, sum#51, count#52, n#53, avg#54, m2#55, count#56, sum#57, count#58, n#59, avg#60, m2#61]
Arguments: hashpartitioning(i_item_id#24, i_item_desc#25, s_state#22, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(41) HashAggregate [codegen id : 2]
Input [21]: [i_item_id#24, i_item_desc#25, s_state#22, count#44, sum#45, count#46, n#47, avg#48, m2#49, count#50, sum#51, count#52, n#53, avg#54, m2#55, count#56, sum#57, count#58, n#59, avg#60, m2#61]
Keys [3]: [i_item_id#24, i_item_desc#25, s_state#22]
Functions [9]: [count(ss_quantity#5), avg(ss_quantity#5), stddev_samp(cast(ss_quantity#5 as double)), count(sr_return_quantity#10), avg(sr_return_quantity#10), stddev_samp(cast(sr_return_quantity#10 as double)), count(cs_quantity#14), avg(cs_quantity#14), stddev_samp(cast(cs_quantity#14 as double))]
Aggregate Attributes [9]: [count(ss_quantity#5)#62, avg(ss_quantity#5)#63, stddev_samp(cast(ss_quantity#5 as double))#64, count(sr_return_quantity#10)#65, avg(sr_return_quantity#10)#66, stddev_samp(cast(sr_return_quantity#10 as double))#67, count(cs_quantity#14)#68, avg(cs_quantity#14)#69, stddev_samp(cast(cs_quantity#14 as double))#70]
Results [15]: [i_item_id#24, i_item_desc#25, s_state#22, count(ss_quantity#5)#62 AS store_sales_quantitycount#71, avg(ss_quantity#5)#63 AS store_sales_quantityave#72, stddev_samp(cast(ss_quantity#5 as double))#64 AS store_sales_quantitystdev#73, (stddev_samp(cast(ss_quantity#5 as double))#64 / avg(ss_quantity#5)#63) AS store_sales_quantitycov#74, count(sr_return_quantity#10)#65 AS as_store_returns_quantitycount#75, avg(sr_return_quantity#10)#66 AS as_store_returns_quantityave#76, stddev_samp(cast(sr_return_quantity#10 as double))#67 AS as_store_returns_quantitystdev#77, (stddev_samp(cast(sr_return_quantity#10 as double))#67 / avg(sr_return_quantity#10)#66) AS store_returns_quantitycov#78, count(cs_quantity#14)#68 AS catalog_sales_quantitycount#79, avg(cs_quantity#14)#69 AS catalog_sales_quantityave#80, (stddev_samp(cast(cs_quantity#14 as double))#70 / avg(cs_quantity#14)#69) AS catalog_sales_quantitystdev#81, (stddev_samp(cast(cs_quantity#14 as double))#70 / avg(cs_quantity#14)#69) AS catalog_sales_quantitycov#82]

(42) TakeOrderedAndProject
Input [15]: [i_item_id#24, i_item_desc#25, s_state#22, store_sales_quantitycount#71, store_sales_quantityave#72, store_sales_quantitystdev#73, store_sales_quantitycov#74, as_store_returns_quantitycount#75, as_store_returns_quantityave#76, as_store_returns_quantitystdev#77, store_returns_quantitycov#78, catalog_sales_quantitycount#79, catalog_sales_quantityave#80, catalog_sales_quantitystdev#81, catalog_sales_quantitycov#82]
Arguments: 100, [i_item_id#24 ASC NULLS FIRST, i_item_desc#25 ASC NULLS FIRST, s_state#22 ASC NULLS FIRST], [i_item_id#24, i_item_desc#25, s_state#22, store_sales_quantitycount#71, store_sales_quantityave#72, store_sales_quantitystdev#73, store_sales_quantitycov#74, as_store_returns_quantitycount#75, as_store_returns_quantityave#76, as_store_returns_quantitystdev#77, store_returns_quantitycov#78, catalog_sales_quantitycount#79, catalog_sales_quantityave#80, catalog_sales_quantitystdev#81, catalog_sales_quantitycov#82]

