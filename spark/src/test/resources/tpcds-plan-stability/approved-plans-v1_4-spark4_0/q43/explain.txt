== Physical Plan ==
TakeOrderedAndProject (20)
+- * HashAggregate (19)
   +- * CometColumnarToRow (18)
      +- CometColumnarExchange (17)
         +- * HashAggregate (16)
            +- * CometColumnarToRow (15)
               +- CometProject (14)
                  +- CometBroadcastHashJoin (13)
                     :- CometProject (8)
                     :  +- CometBroadcastHashJoin (7)
                     :     :- CometProject (3)
                     :     :  +- CometFilter (2)
                     :     :     +- CometScan parquet spark_catalog.default.date_dim (1)
                     :     +- CometBroadcastExchange (6)
                     :        +- CometFilter (5)
                     :           +- CometScan parquet spark_catalog.default.store_sales (4)
                     +- CometBroadcastExchange (12)
                        +- CometProject (11)
                           +- CometFilter (10)
                              +- CometScan parquet spark_catalog.default.store (9)


(1) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_day_name#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_day_name:string>

(2) CometFilter
Input [3]: [d_date_sk#1, d_year#2, d_day_name#3]
Condition : ((isnotnull(d_year#2) AND (d_year#2 = 2000)) AND isnotnull(d_date_sk#1))

(3) CometProject
Input [3]: [d_date_sk#1, d_year#2, d_day_name#3]
Arguments: [d_date_sk#1, d_day_name#4], [d_date_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, d_day_name#3, 9, true, false, true) AS d_day_name#4]

(4) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#5, ss_sales_price#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) CometFilter
Input [3]: [ss_store_sk#5, ss_sales_price#6, ss_sold_date_sk#7]
Condition : isnotnull(ss_store_sk#5)

(6) CometBroadcastExchange
Input [3]: [ss_store_sk#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [ss_store_sk#5, ss_sales_price#6, ss_sold_date_sk#7]

(7) CometBroadcastHashJoin
Left output [2]: [d_date_sk#1, d_day_name#4]
Right output [3]: [ss_store_sk#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [d_date_sk#1], [ss_sold_date_sk#7], Inner, BuildRight

(8) CometProject
Input [5]: [d_date_sk#1, d_day_name#4, ss_store_sk#5, ss_sales_price#6, ss_sold_date_sk#7]
Arguments: [d_day_name#4, ss_store_sk#5, ss_sales_price#6], [d_day_name#4, ss_store_sk#5, ss_sales_price#6]

(9) CometScan parquet spark_catalog.default.store
Output [4]: [s_store_sk#8, s_store_id#9, s_store_name#10, s_gmt_offset#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_gmt_offset), EqualTo(s_gmt_offset,-5.00), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string,s_gmt_offset:decimal(5,2)>

(10) CometFilter
Input [4]: [s_store_sk#8, s_store_id#9, s_store_name#10, s_gmt_offset#11]
Condition : ((isnotnull(s_gmt_offset#11) AND (s_gmt_offset#11 = -5.00)) AND isnotnull(s_store_sk#8))

(11) CometProject
Input [4]: [s_store_sk#8, s_store_id#9, s_store_name#10, s_gmt_offset#11]
Arguments: [s_store_sk#8, s_store_id#12, s_store_name#10], [s_store_sk#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#9, 16, true, false, true) AS s_store_id#12, s_store_name#10]

(12) CometBroadcastExchange
Input [3]: [s_store_sk#8, s_store_id#12, s_store_name#10]
Arguments: [s_store_sk#8, s_store_id#12, s_store_name#10]

(13) CometBroadcastHashJoin
Left output [3]: [d_day_name#4, ss_store_sk#5, ss_sales_price#6]
Right output [3]: [s_store_sk#8, s_store_id#12, s_store_name#10]
Arguments: [ss_store_sk#5], [s_store_sk#8], Inner, BuildRight

(14) CometProject
Input [6]: [d_day_name#4, ss_store_sk#5, ss_sales_price#6, s_store_sk#8, s_store_id#12, s_store_name#10]
Arguments: [d_day_name#4, ss_sales_price#6, s_store_id#12, s_store_name#10], [d_day_name#4, ss_sales_price#6, s_store_id#12, s_store_name#10]

(15) CometColumnarToRow [codegen id : 1]
Input [4]: [d_day_name#4, ss_sales_price#6, s_store_id#12, s_store_name#10]

(16) HashAggregate [codegen id : 1]
Input [4]: [d_day_name#4, ss_sales_price#6, s_store_id#12, s_store_name#10]
Keys [2]: [s_store_name#10, s_store_id#12]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#4 = Sunday   ) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#4 = Monday   ) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#4 = Tuesday  ) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#4 = Wednesday) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#4 = Thursday ) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#4 = Friday   ) THEN ss_sales_price#6 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#4 = Saturday ) THEN ss_sales_price#6 END))]
Aggregate Attributes [7]: [sum#13, sum#14, sum#15, sum#16, sum#17, sum#18, sum#19]
Results [9]: [s_store_name#10, s_store_id#12, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25, sum#26]

(17) CometColumnarExchange
Input [9]: [s_store_name#10, s_store_id#12, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25, sum#26]
Arguments: hashpartitioning(s_store_name#10, s_store_id#12, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(18) CometColumnarToRow [codegen id : 2]
Input [9]: [s_store_name#10, s_store_id#12, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25, sum#26]

(19) HashAggregate [codegen id : 2]
Input [9]: [s_store_name#10, s_store_id#12, sum#20, sum#21, sum#22, sum#23, sum#24, sum#25, sum#26]
Keys [2]: [s_store_name#10, s_store_id#12]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#4 = Sunday   ) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#4 = Monday   ) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#4 = Tuesday  ) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#4 = Wednesday) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#4 = Thursday ) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#4 = Friday   ) THEN ss_sales_price#6 END)), sum(UnscaledValue(CASE WHEN (d_day_name#4 = Saturday ) THEN ss_sales_price#6 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#4 = Sunday   ) THEN ss_sales_price#6 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#4 = Monday   ) THEN ss_sales_price#6 END))#28, sum(UnscaledValue(CASE WHEN (d_day_name#4 = Tuesday  ) THEN ss_sales_price#6 END))#29, sum(UnscaledValue(CASE WHEN (d_day_name#4 = Wednesday) THEN ss_sales_price#6 END))#30, sum(UnscaledValue(CASE WHEN (d_day_name#4 = Thursday ) THEN ss_sales_price#6 END))#31, sum(UnscaledValue(CASE WHEN (d_day_name#4 = Friday   ) THEN ss_sales_price#6 END))#32, sum(UnscaledValue(CASE WHEN (d_day_name#4 = Saturday ) THEN ss_sales_price#6 END))#33]
Results [9]: [s_store_name#10, s_store_id#12, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#4 = Sunday   ) THEN ss_sales_price#6 END))#27,17,2) AS sun_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#4 = Monday   ) THEN ss_sales_price#6 END))#28,17,2) AS mon_sales#35, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#4 = Tuesday  ) THEN ss_sales_price#6 END))#29,17,2) AS tue_sales#36, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#4 = Wednesday) THEN ss_sales_price#6 END))#30,17,2) AS wed_sales#37, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#4 = Thursday ) THEN ss_sales_price#6 END))#31,17,2) AS thu_sales#38, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#4 = Friday   ) THEN ss_sales_price#6 END))#32,17,2) AS fri_sales#39, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#4 = Saturday ) THEN ss_sales_price#6 END))#33,17,2) AS sat_sales#40]

(20) TakeOrderedAndProject
Input [9]: [s_store_name#10, s_store_id#12, sun_sales#34, mon_sales#35, tue_sales#36, wed_sales#37, thu_sales#38, fri_sales#39, sat_sales#40]
Arguments: 100, [s_store_name#10 ASC NULLS FIRST, s_store_id#12 ASC NULLS FIRST, sun_sales#34 ASC NULLS FIRST, mon_sales#35 ASC NULLS FIRST, tue_sales#36 ASC NULLS FIRST, wed_sales#37 ASC NULLS FIRST, thu_sales#38 ASC NULLS FIRST, fri_sales#39 ASC NULLS FIRST, sat_sales#40 ASC NULLS FIRST], [s_store_name#10, s_store_id#12, sun_sales#34, mon_sales#35, tue_sales#36, wed_sales#37, thu_sales#38, fri_sales#39, sat_sales#40]

