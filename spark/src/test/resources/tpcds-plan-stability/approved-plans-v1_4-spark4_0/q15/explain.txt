== Physical Plan ==
TakeOrderedAndProject (25)
+- * HashAggregate (24)
   +- * CometColumnarToRow (23)
      +- CometColumnarExchange (22)
         +- * HashAggregate (21)
            +- * CometColumnarToRow (20)
               +- CometProject (19)
                  +- CometBroadcastHashJoin (18)
                     :- CometProject (13)
                     :  +- CometBroadcastHashJoin (12)
                     :     :- CometProject (7)
                     :     :  +- CometBroadcastHashJoin (6)
                     :     :     :- CometFilter (2)
                     :     :     :  +- CometScan parquet spark_catalog.default.catalog_sales (1)
                     :     :     +- CometBroadcastExchange (5)
                     :     :        +- CometFilter (4)
                     :     :           +- CometScan parquet spark_catalog.default.customer (3)
                     :     +- CometBroadcastExchange (11)
                     :        +- CometProject (10)
                     :           +- CometFilter (9)
                     :              +- CometScan parquet spark_catalog.default.customer_address (8)
                     +- CometBroadcastExchange (17)
                        +- CometProject (16)
                           +- CometFilter (15)
                              +- CometScan parquet spark_catalog.default.date_dim (14)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#3), dynamicpruningexpression(cs_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(cs_bill_customer_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Condition : isnotnull(cs_bill_customer_sk#1)

(3) CometScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(4) CometFilter
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Condition : (isnotnull(c_customer_sk#5) AND isnotnull(c_current_addr_sk#6))

(5) CometBroadcastExchange
Input [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: [c_customer_sk#5, c_current_addr_sk#6]

(6) CometBroadcastHashJoin
Left output [3]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3]
Right output [2]: [c_customer_sk#5, c_current_addr_sk#6]
Arguments: [cs_bill_customer_sk#1], [c_customer_sk#5], Inner, BuildRight

(7) CometProject
Input [5]: [cs_bill_customer_sk#1, cs_sales_price#2, cs_sold_date_sk#3, c_customer_sk#5, c_current_addr_sk#6]
Arguments: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6], [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6]

(8) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string>

(9) CometFilter
Input [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Condition : isnotnull(ca_address_sk#7)

(10) CometProject
Input [3]: [ca_address_sk#7, ca_state#8, ca_zip#9]
Arguments: [ca_address_sk#7, ca_state#10, ca_zip#11], [ca_address_sk#7, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#8, 2, true, false, true) AS ca_state#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_zip#9, 10, true, false, true) AS ca_zip#11]

(11) CometBroadcastExchange
Input [3]: [ca_address_sk#7, ca_state#10, ca_zip#11]
Arguments: [ca_address_sk#7, ca_state#10, ca_zip#11]

(12) CometBroadcastHashJoin
Left output [3]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6]
Right output [3]: [ca_address_sk#7, ca_state#10, ca_zip#11]
Arguments: [c_current_addr_sk#6], [ca_address_sk#7], Inner, ((substr(ca_zip#11, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR ca_state#10 IN (CA,WA,GA)) OR (cs_sales_price#2 > 500.00)), BuildRight

(13) CometProject
Input [6]: [cs_sales_price#2, cs_sold_date_sk#3, c_current_addr_sk#6, ca_address_sk#7, ca_state#10, ca_zip#11]
Arguments: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11], [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11]

(14) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(15) CometFilter
Input [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Condition : ((((isnotnull(d_qoy#14) AND isnotnull(d_year#13)) AND (d_qoy#14 = 2)) AND (d_year#13 = 2001)) AND isnotnull(d_date_sk#12))

(16) CometProject
Input [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Arguments: [d_date_sk#12], [d_date_sk#12]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: [d_date_sk#12]

(18) CometBroadcastHashJoin
Left output [3]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11]
Right output [1]: [d_date_sk#12]
Arguments: [cs_sold_date_sk#3], [d_date_sk#12], Inner, BuildRight

(19) CometProject
Input [4]: [cs_sales_price#2, cs_sold_date_sk#3, ca_zip#11, d_date_sk#12]
Arguments: [cs_sales_price#2, ca_zip#11], [cs_sales_price#2, ca_zip#11]

(20) CometColumnarToRow [codegen id : 1]
Input [2]: [cs_sales_price#2, ca_zip#11]

(21) HashAggregate [codegen id : 1]
Input [2]: [cs_sales_price#2, ca_zip#11]
Keys [1]: [ca_zip#11]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [ca_zip#11, sum#16]

(22) CometColumnarExchange
Input [2]: [ca_zip#11, sum#16]
Arguments: hashpartitioning(ca_zip#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(23) CometColumnarToRow [codegen id : 2]
Input [2]: [ca_zip#11, sum#16]

(24) HashAggregate [codegen id : 2]
Input [2]: [ca_zip#11, sum#16]
Keys [1]: [ca_zip#11]
Functions [1]: [sum(UnscaledValue(cs_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_sales_price#2))#17]
Results [2]: [ca_zip#11, MakeDecimal(sum(UnscaledValue(cs_sales_price#2))#17,17,2) AS sum(cs_sales_price)#18]

(25) TakeOrderedAndProject
Input [2]: [ca_zip#11, sum(cs_sales_price)#18]
Arguments: 100, [ca_zip#11 ASC NULLS FIRST], [ca_zip#11, sum(cs_sales_price)#18]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (30)
+- * CometColumnarToRow (29)
   +- CometProject (28)
      +- CometFilter (27)
         +- CometScan parquet spark_catalog.default.date_dim (26)


(26) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(27) CometFilter
Input [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Condition : ((((isnotnull(d_qoy#14) AND isnotnull(d_year#13)) AND (d_qoy#14 = 2)) AND (d_year#13 = 2001)) AND isnotnull(d_date_sk#12))

(28) CometProject
Input [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Arguments: [d_date_sk#12], [d_date_sk#12]

(29) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#12]

(30) BroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]


