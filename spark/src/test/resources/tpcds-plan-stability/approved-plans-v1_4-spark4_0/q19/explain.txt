== Physical Plan ==
TakeOrderedAndProject (37)
+- * HashAggregate (36)
   +- * CometColumnarToRow (35)
      +- CometColumnarExchange (34)
         +- * HashAggregate (33)
            +- * CometColumnarToRow (32)
               +- CometProject (31)
                  +- CometBroadcastHashJoin (30)
                     :- CometProject (25)
                     :  +- CometBroadcastHashJoin (24)
                     :     :- CometProject (19)
                     :     :  +- CometBroadcastHashJoin (18)
                     :     :     :- CometProject (14)
                     :     :     :  +- CometBroadcastHashJoin (13)
                     :     :     :     :- CometProject (8)
                     :     :     :     :  +- CometBroadcastHashJoin (7)
                     :     :     :     :     :- CometProject (3)
                     :     :     :     :     :  +- CometFilter (2)
                     :     :     :     :     :     +- CometScan parquet spark_catalog.default.date_dim (1)
                     :     :     :     :     +- CometBroadcastExchange (6)
                     :     :     :     :        +- CometFilter (5)
                     :     :     :     :           +- CometScan parquet spark_catalog.default.store_sales (4)
                     :     :     :     +- CometBroadcastExchange (12)
                     :     :     :        +- CometProject (11)
                     :     :     :           +- CometFilter (10)
                     :     :     :              +- CometScan parquet spark_catalog.default.item (9)
                     :     :     +- CometBroadcastExchange (17)
                     :     :        +- CometFilter (16)
                     :     :           +- CometScan parquet spark_catalog.default.customer (15)
                     :     +- CometBroadcastExchange (23)
                     :        +- CometProject (22)
                     :           +- CometFilter (21)
                     :              +- CometScan parquet spark_catalog.default.customer_address (20)
                     +- CometBroadcastExchange (29)
                        +- CometProject (28)
                           +- CometFilter (27)
                              +- CometScan parquet spark_catalog.default.store (26)


(1) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#1, d_year#2, d_moy#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(2) CometFilter
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Condition : ((((isnotnull(d_moy#3) AND isnotnull(d_year#2)) AND (d_moy#3 = 11)) AND (d_year#2 = 1998)) AND isnotnull(d_date_sk#1))

(3) CometProject
Input [3]: [d_date_sk#1, d_year#2, d_moy#3]
Arguments: [d_date_sk#1], [d_date_sk#1]

(4) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(true)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(5) CometFilter
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_item_sk#4) AND isnotnull(ss_customer_sk#5)) AND isnotnull(ss_store_sk#6))

(6) CometBroadcastExchange
Input [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]

(7) CometBroadcastHashJoin
Left output [1]: [d_date_sk#1]
Right output [5]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Arguments: [d_date_sk#1], [ss_sold_date_sk#8], Inner, BuildRight

(8) CometProject
Input [6]: [d_date_sk#1, ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, ss_sold_date_sk#8]
Arguments: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7], [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7]

(9) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(10) CometFilter
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]
Condition : ((isnotnull(i_manager_id#14) AND (i_manager_id#14 = 8)) AND isnotnull(i_item_sk#9))

(11) CometProject
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]
Arguments: [i_item_sk#9, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16], [i_item_sk#9, i_brand_id#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_brand#11, 50, true, false, true) AS i_brand#15, i_manufact_id#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_manufact#13, 50, true, false, true) AS i_manufact#16]

(12) CometBroadcastExchange
Input [5]: [i_item_sk#9, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]
Arguments: [i_item_sk#9, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]

(13) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7]
Right output [5]: [i_item_sk#9, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]
Arguments: [ss_item_sk#4], [i_item_sk#9], Inner, BuildRight

(14) CometProject
Input [9]: [ss_item_sk#4, ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_item_sk#9, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]
Arguments: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16], [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]

(15) CometScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#17, c_current_addr_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(16) CometFilter
Input [2]: [c_customer_sk#17, c_current_addr_sk#18]
Condition : (isnotnull(c_customer_sk#17) AND isnotnull(c_current_addr_sk#18))

(17) CometBroadcastExchange
Input [2]: [c_customer_sk#17, c_current_addr_sk#18]
Arguments: [c_customer_sk#17, c_current_addr_sk#18]

(18) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]
Right output [2]: [c_customer_sk#17, c_current_addr_sk#18]
Arguments: [ss_customer_sk#5], [c_customer_sk#17], Inner, BuildRight

(19) CometProject
Input [9]: [ss_customer_sk#5, ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, c_customer_sk#17, c_current_addr_sk#18]
Arguments: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, c_current_addr_sk#18], [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, c_current_addr_sk#18]

(20) CometScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#19, ca_zip#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(21) CometFilter
Input [2]: [ca_address_sk#19, ca_zip#20]
Condition : (isnotnull(ca_address_sk#19) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_zip#20, 10, true, false, true)))

(22) CometProject
Input [2]: [ca_address_sk#19, ca_zip#20]
Arguments: [ca_address_sk#19, ca_zip#21], [ca_address_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_zip#20, 10, true, false, true) AS ca_zip#21]

(23) CometBroadcastExchange
Input [2]: [ca_address_sk#19, ca_zip#21]
Arguments: [ca_address_sk#19, ca_zip#21]

(24) CometBroadcastHashJoin
Left output [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, c_current_addr_sk#18]
Right output [2]: [ca_address_sk#19, ca_zip#21]
Arguments: [c_current_addr_sk#18], [ca_address_sk#19], Inner, BuildRight

(25) CometProject
Input [9]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, c_current_addr_sk#18, ca_address_sk#19, ca_zip#21]
Arguments: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, ca_zip#21], [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, ca_zip#21]

(26) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#22, s_zip#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(27) CometFilter
Input [2]: [s_store_sk#22, s_zip#23]
Condition : (isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_zip#23, 10, true, false, true)) AND isnotnull(s_store_sk#22))

(28) CometProject
Input [2]: [s_store_sk#22, s_zip#23]
Arguments: [s_store_sk#22, s_zip#24], [s_store_sk#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_zip#23, 10, true, false, true) AS s_zip#24]

(29) CometBroadcastExchange
Input [2]: [s_store_sk#22, s_zip#24]
Arguments: [s_store_sk#22, s_zip#24]

(30) CometBroadcastHashJoin
Left output [7]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, ca_zip#21]
Right output [2]: [s_store_sk#22, s_zip#24]
Arguments: [ss_store_sk#6], [s_store_sk#22], Inner, NOT (substr(ca_zip#21, 1, 5) = substr(s_zip#24, 1, 5)), BuildRight

(31) CometProject
Input [9]: [ss_store_sk#6, ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16, ca_zip#21, s_store_sk#22, s_zip#24]
Arguments: [ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16], [ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]

(32) CometColumnarToRow [codegen id : 1]
Input [5]: [ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]

(33) HashAggregate [codegen id : 1]
Input [5]: [ss_ext_sales_price#7, i_brand_id#10, i_brand#15, i_manufact_id#12, i_manufact#16]
Keys [4]: [i_brand#15, i_brand_id#10, i_manufact_id#12, i_manufact#16]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#7))]
Aggregate Attributes [1]: [sum#25]
Results [5]: [i_brand#15, i_brand_id#10, i_manufact_id#12, i_manufact#16, sum#26]

(34) CometColumnarExchange
Input [5]: [i_brand#15, i_brand_id#10, i_manufact_id#12, i_manufact#16, sum#26]
Arguments: hashpartitioning(i_brand#15, i_brand_id#10, i_manufact_id#12, i_manufact#16, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(35) CometColumnarToRow [codegen id : 2]
Input [5]: [i_brand#15, i_brand_id#10, i_manufact_id#12, i_manufact#16, sum#26]

(36) HashAggregate [codegen id : 2]
Input [5]: [i_brand#15, i_brand_id#10, i_manufact_id#12, i_manufact#16, sum#26]
Keys [4]: [i_brand#15, i_brand_id#10, i_manufact_id#12, i_manufact#16]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#7))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#7))#27]
Results [5]: [i_brand_id#10 AS brand_id#28, i_brand#15 AS brand#29, i_manufact_id#12, i_manufact#16, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#7))#27,17,2) AS ext_price#30]

(37) TakeOrderedAndProject
Input [5]: [brand_id#28, brand#29, i_manufact_id#12, i_manufact#16, ext_price#30]
Arguments: 100, [ext_price#30 DESC NULLS LAST, brand#29 ASC NULLS FIRST, brand_id#28 ASC NULLS FIRST, i_manufact_id#12 ASC NULLS FIRST, i_manufact#16 ASC NULLS FIRST], [brand_id#28, brand#29, i_manufact_id#12, i_manufact#16, ext_price#30]

