== Physical Plan ==
TakeOrderedAndProject (32)
+- * HashAggregate (31)
   +- * CometColumnarToRow (30)
      +- CometColumnarExchange (29)
         +- * HashAggregate (28)
            +- * CometColumnarToRow (27)
               +- CometProject (26)
                  +- CometBroadcastHashJoin (25)
                     :- CometProject (20)
                     :  +- CometBroadcastHashJoin (19)
                     :     :- CometProject (14)
                     :     :  +- CometBroadcastHashJoin (13)
                     :     :     :- CometProject (8)
                     :     :     :  +- CometBroadcastHashJoin (7)
                     :     :     :     :- CometFilter (2)
                     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                     :     :     :     +- CometBroadcastExchange (6)
                     :     :     :        +- CometProject (5)
                     :     :     :           +- CometFilter (4)
                     :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (3)
                     :     :     +- CometBroadcastExchange (12)
                     :     :        +- CometProject (11)
                     :     :           +- CometFilter (10)
                     :     :              +- CometScan parquet spark_catalog.default.date_dim (9)
                     :     +- CometBroadcastExchange (18)
                     :        +- CometProject (17)
                     :           +- CometFilter (16)
                     :              +- CometScan parquet spark_catalog.default.item (15)
                     +- CometBroadcastExchange (24)
                        +- CometProject (23)
                           +- CometFilter (22)
                              +- CometScan parquet spark_catalog.default.promotion (21)


(1) CometScan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_promo_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometScan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(4) CometFilter
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_gender#11, 1, true, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#12, 1, true, false, true) = S)) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#13, 20, true, false, true) = College             )) AND isnotnull(cd_demo_sk#10))

(5) CometProject
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Arguments: [cd_demo_sk#10], [cd_demo_sk#10]

(6) CometBroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: [cd_demo_sk#10]

(7) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [cd_demo_sk#10]
Arguments: [ss_cdemo_sk#2], [cd_demo_sk#10], Inner, BuildRight

(8) CometProject
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8], [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(9) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 2000)) AND isnotnull(d_date_sk#14))

(11) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(13) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#8], [d_date_sk#14], Inner, BuildRight

(14) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7], [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]

(15) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#16, i_item_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(16) CometFilter
Input [2]: [i_item_sk#16, i_item_id#17]
Condition : isnotnull(i_item_sk#16)

(17) CometProject
Input [2]: [i_item_sk#16, i_item_id#17]
Arguments: [i_item_sk#16, i_item_id#18], [i_item_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#17, 16, true, false, true) AS i_item_id#18]

(18) CometBroadcastExchange
Input [2]: [i_item_sk#16, i_item_id#18]
Arguments: [i_item_sk#16, i_item_id#18]

(19) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Right output [2]: [i_item_sk#16, i_item_id#18]
Arguments: [ss_item_sk#1], [i_item_sk#16], Inner, BuildRight

(20) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#16, i_item_id#18]
Arguments: [ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18], [ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18]

(21) CometScan parquet spark_catalog.default.promotion
Output [3]: [p_promo_sk#19, p_channel_email#20, p_channel_event#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_email:string,p_channel_event:string>

(22) CometFilter
Input [3]: [p_promo_sk#19, p_channel_email#20, p_channel_event#21]
Condition : (((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, p_channel_email#20, 1, true, false, true) = N) OR (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, p_channel_event#21, 1, true, false, true) = N)) AND isnotnull(p_promo_sk#19))

(23) CometProject
Input [3]: [p_promo_sk#19, p_channel_email#20, p_channel_event#21]
Arguments: [p_promo_sk#19], [p_promo_sk#19]

(24) CometBroadcastExchange
Input [1]: [p_promo_sk#19]
Arguments: [p_promo_sk#19]

(25) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18]
Right output [1]: [p_promo_sk#19]
Arguments: [ss_promo_sk#3], [p_promo_sk#19], Inner, BuildRight

(26) CometProject
Input [7]: [ss_promo_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18, p_promo_sk#19]
Arguments: [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18], [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18]

(27) CometColumnarToRow [codegen id : 1]
Input [5]: [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18]

(28) HashAggregate [codegen id : 1]
Input [5]: [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#18]
Keys [1]: [i_item_id#18]
Functions [4]: [partial_avg(ss_quantity#4), partial_avg(UnscaledValue(ss_list_price#5)), partial_avg(UnscaledValue(ss_coupon_amt#7)), partial_avg(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [8]: [sum#22, count#23, sum#24, count#25, sum#26, count#27, sum#28, count#29]
Results [9]: [i_item_id#18, sum#30, count#31, sum#32, count#33, sum#34, count#35, sum#36, count#37]

(29) CometColumnarExchange
Input [9]: [i_item_id#18, sum#30, count#31, sum#32, count#33, sum#34, count#35, sum#36, count#37]
Arguments: hashpartitioning(i_item_id#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(30) CometColumnarToRow [codegen id : 2]
Input [9]: [i_item_id#18, sum#30, count#31, sum#32, count#33, sum#34, count#35, sum#36, count#37]

(31) HashAggregate [codegen id : 2]
Input [9]: [i_item_id#18, sum#30, count#31, sum#32, count#33, sum#34, count#35, sum#36, count#37]
Keys [1]: [i_item_id#18]
Functions [4]: [avg(ss_quantity#4), avg(UnscaledValue(ss_list_price#5)), avg(UnscaledValue(ss_coupon_amt#7)), avg(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [4]: [avg(ss_quantity#4)#38, avg(UnscaledValue(ss_list_price#5))#39, avg(UnscaledValue(ss_coupon_amt#7))#40, avg(UnscaledValue(ss_sales_price#6))#41]
Results [5]: [i_item_id#18, avg(ss_quantity#4)#38 AS agg1#42, cast((avg(UnscaledValue(ss_list_price#5))#39 / 100.0) as decimal(11,6)) AS agg2#43, cast((avg(UnscaledValue(ss_coupon_amt#7))#40 / 100.0) as decimal(11,6)) AS agg3#44, cast((avg(UnscaledValue(ss_sales_price#6))#41 / 100.0) as decimal(11,6)) AS agg4#45]

(32) TakeOrderedAndProject
Input [5]: [i_item_id#18, agg1#42, agg2#43, agg3#44, agg4#45]
Arguments: 100, [i_item_id#18 ASC NULLS FIRST], [i_item_id#18, agg1#42, agg2#43, agg3#44, agg4#45]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (37)
+- * CometColumnarToRow (36)
   +- CometProject (35)
      +- CometFilter (34)
         +- CometScan parquet spark_catalog.default.date_dim (33)


(33) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(34) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 2000)) AND isnotnull(d_date_sk#14))

(35) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(36) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(37) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]


