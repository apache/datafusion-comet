== Physical Plan ==
TakeOrderedAndProject (50)
+- * Project (49)
   +- * BroadcastHashJoin Inner BuildRight (48)
      :- * Project (41)
      :  +- * BroadcastHashJoin Inner BuildRight (40)
      :     :- * Project (30)
      :     :  +- * Filter (29)
      :     :     +- Window (28)
      :     :        +- * Filter (27)
      :     :           +- Window (26)
      :     :              +- * CometColumnarToRow (25)
      :     :                 +- CometSort (24)
      :     :                    +- CometColumnarExchange (23)
      :     :                       +- * HashAggregate (22)
      :     :                          +- * CometColumnarToRow (21)
      :     :                             +- CometExchange (20)
      :     :                                +- CometHashAggregate (19)
      :     :                                   +- CometProject (18)
      :     :                                      +- CometBroadcastHashJoin (17)
      :     :                                         :- CometProject (13)
      :     :                                         :  +- CometBroadcastHashJoin (12)
      :     :                                         :     :- CometProject (8)
      :     :                                         :     :  +- CometBroadcastHashJoin (7)
      :     :                                         :     :     :- CometProject (3)
      :     :                                         :     :     :  +- CometFilter (2)
      :     :                                         :     :     :     +- CometNativeScan parquet spark_catalog.default.item (1)
      :     :                                         :     :     +- CometBroadcastExchange (6)
      :     :                                         :     :        +- CometFilter (5)
      :     :                                         :     :           +- CometNativeScan parquet spark_catalog.default.store_sales (4)
      :     :                                         :     +- CometBroadcastExchange (11)
      :     :                                         :        +- CometFilter (10)
      :     :                                         :           +- CometNativeScan parquet spark_catalog.default.date_dim (9)
      :     :                                         +- CometBroadcastExchange (16)
      :     :                                            +- CometFilter (15)
      :     :                                               +- CometNativeScan parquet spark_catalog.default.store (14)
      :     +- BroadcastExchange (39)
      :        +- * Project (38)
      :           +- Window (37)
      :              +- * CometColumnarToRow (36)
      :                 +- CometSort (35)
      :                    +- CometColumnarExchange (34)
      :                       +- * HashAggregate (33)
      :                          +- * CometColumnarToRow (32)
      :                             +- ReusedExchange (31)
      +- BroadcastExchange (47)
         +- * Project (46)
            +- Window (45)
               +- * CometColumnarToRow (44)
                  +- CometSort (43)
                     +- ReusedExchange (42)


(1) CometNativeScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) CometFilter
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#3, 50)))) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(i_brand#2, 50))))

(3) CometProject
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Arguments: [i_item_sk#1, i_brand#4, i_category#5], [i_item_sk#1, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_brand#2, 50)) AS i_brand#4, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#3, 50)) AS i_category#5]

(4) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#6, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#9)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_item_sk#6, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]
Condition : (isnotnull(ss_item_sk#6) AND isnotnull(ss_store_sk#7))

(6) CometBroadcastExchange
Input [4]: [ss_item_sk#6, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]
Arguments: [ss_item_sk#6, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]

(7) CometBroadcastHashJoin
Left output [3]: [i_item_sk#1, i_brand#4, i_category#5]
Right output [4]: [ss_item_sk#6, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]
Arguments: [i_item_sk#1], [ss_item_sk#6], Inner, BuildRight

(8) CometProject
Input [7]: [i_item_sk#1, i_brand#4, i_category#5, ss_item_sk#6, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]
Arguments: [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9], [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((d_year#11 = 1999) OR ((d_year#11 = 1998) AND (d_moy#12 = 12))) OR ((d_year#11 = 2000) AND (d_moy#12 = 1))) AND isnotnull(d_date_sk#10))

(11) CometBroadcastExchange
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10, d_year#11, d_moy#12]

(12) CometBroadcastHashJoin
Left output [5]: [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9]
Right output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [ss_sold_date_sk#9], [d_date_sk#10], Inner, BuildRight

(13) CometProject
Input [8]: [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, ss_sold_date_sk#9, d_date_sk#10, d_year#11, d_moy#12]
Arguments: [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, d_year#11, d_moy#12], [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, d_year#11, d_moy#12]

(14) CometNativeScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk), IsNotNull(s_store_name), IsNotNull(s_company_name)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_company_name:string>

(15) CometFilter
Input [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Condition : ((isnotnull(s_store_sk#13) AND isnotnull(s_store_name#14)) AND isnotnull(s_company_name#15))

(16) CometBroadcastExchange
Input [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Arguments: [s_store_sk#13, s_store_name#14, s_company_name#15]

(17) CometBroadcastHashJoin
Left output [6]: [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, d_year#11, d_moy#12]
Right output [3]: [s_store_sk#13, s_store_name#14, s_company_name#15]
Arguments: [ss_store_sk#7], [s_store_sk#13], Inner, BuildRight

(18) CometProject
Input [9]: [i_brand#4, i_category#5, ss_store_sk#7, ss_sales_price#8, d_year#11, d_moy#12, s_store_sk#13, s_store_name#14, s_company_name#15]
Arguments: [i_brand#4, i_category#5, ss_sales_price#8, d_year#11, d_moy#12, s_store_name#14, s_company_name#15], [i_brand#4, i_category#5, ss_sales_price#8, d_year#11, d_moy#12, s_store_name#14, s_company_name#15]

(19) CometHashAggregate
Input [7]: [i_brand#4, i_category#5, ss_sales_price#8, d_year#11, d_moy#12, s_store_name#14, s_company_name#15]
Keys [6]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#8))]

(20) CometExchange
Input [7]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum#16]
Arguments: hashpartitioning(i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(21) CometColumnarToRow [codegen id : 1]
Input [7]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum#16]

(22) HashAggregate [codegen id : 1]
Input [7]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum#16]
Keys [6]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12]
Functions [1]: [sum(UnscaledValue(ss_sales_price#8))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#8))#17]
Results [8]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, MakeDecimal(sum(UnscaledValue(ss_sales_price#8))#17,17,2) AS sum_sales#18, MakeDecimal(sum(UnscaledValue(ss_sales_price#8))#17,17,2) AS _w0#19]

(23) CometColumnarExchange
Input [8]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19]
Arguments: hashpartitioning(i_category#5, i_brand#4, s_store_name#14, s_company_name#15, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(24) CometSort
Input [8]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19]
Arguments: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19], [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, s_store_name#14 ASC NULLS FIRST, s_company_name#15 ASC NULLS FIRST, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST]

(25) CometColumnarToRow [codegen id : 2]
Input [8]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19]

(26) Window
Input [8]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19]
Arguments: [rank(d_year#11, d_moy#12) windowspecdefinition(i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#20], [i_category#5, i_brand#4, s_store_name#14, s_company_name#15], [d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST]

(27) Filter [codegen id : 3]
Input [9]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19, rn#20]
Condition : (isnotnull(d_year#11) AND (d_year#11 = 1999))

(28) Window
Input [9]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19, rn#20]
Arguments: [avg(_w0#19) windowspecdefinition(i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#21], [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11]

(29) Filter [codegen id : 10]
Input [10]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19, rn#20, avg_monthly_sales#21]
Condition : ((isnotnull(avg_monthly_sales#21) AND (avg_monthly_sales#21 > 0.000000)) AND CASE WHEN (avg_monthly_sales#21 > 0.000000) THEN ((abs((sum_sales#18 - avg_monthly_sales#21)) / avg_monthly_sales#21) > 0.1000000000000000) END)

(30) Project [codegen id : 10]
Output [9]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, avg_monthly_sales#21, rn#20]
Input [10]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, _w0#19, rn#20, avg_monthly_sales#21]

(31) ReusedExchange [Reuses operator id: 20]
Output [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum#28]

(32) CometColumnarToRow [codegen id : 4]
Input [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum#28]

(33) HashAggregate [codegen id : 4]
Input [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum#28]
Keys [6]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27]
Functions [1]: [sum(UnscaledValue(ss_sales_price#29))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#29))#17]
Results [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, MakeDecimal(sum(UnscaledValue(ss_sales_price#29))#17,17,2) AS sum_sales#30]

(34) CometColumnarExchange
Input [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum_sales#30]
Arguments: hashpartitioning(i_category#22, i_brand#23, s_store_name#24, s_company_name#25, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(35) CometSort
Input [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum_sales#30]
Arguments: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum_sales#30], [i_category#22 ASC NULLS FIRST, i_brand#23 ASC NULLS FIRST, s_store_name#24 ASC NULLS FIRST, s_company_name#25 ASC NULLS FIRST, d_year#26 ASC NULLS FIRST, d_moy#27 ASC NULLS FIRST]

(36) CometColumnarToRow [codegen id : 5]
Input [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum_sales#30]

(37) Window
Input [7]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum_sales#30]
Arguments: [rank(d_year#26, d_moy#27) windowspecdefinition(i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26 ASC NULLS FIRST, d_moy#27 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#31], [i_category#22, i_brand#23, s_store_name#24, s_company_name#25], [d_year#26 ASC NULLS FIRST, d_moy#27 ASC NULLS FIRST]

(38) Project [codegen id : 6]
Output [6]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, sum_sales#30, rn#31]
Input [8]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, d_year#26, d_moy#27, sum_sales#30, rn#31]

(39) BroadcastExchange
Input [6]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, sum_sales#30, rn#31]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], input[3, string, true], (input[5, int, false] + 1)),false), [plan_id=4]

(40) BroadcastHashJoin [codegen id : 10]
Left keys [5]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, rn#20]
Right keys [5]: [i_category#22, i_brand#23, s_store_name#24, s_company_name#25, (rn#31 + 1)]
Join type: Inner
Join condition: None

(41) Project [codegen id : 10]
Output [10]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, avg_monthly_sales#21, rn#20, sum_sales#30]
Input [15]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, avg_monthly_sales#21, rn#20, i_category#22, i_brand#23, s_store_name#24, s_company_name#25, sum_sales#30, rn#31]

(42) ReusedExchange [Reuses operator id: 34]
Output [7]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, d_year#36, d_moy#37, sum_sales#38]

(43) CometSort
Input [7]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, d_year#36, d_moy#37, sum_sales#38]
Arguments: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, d_year#36, d_moy#37, sum_sales#38], [i_category#32 ASC NULLS FIRST, i_brand#33 ASC NULLS FIRST, s_store_name#34 ASC NULLS FIRST, s_company_name#35 ASC NULLS FIRST, d_year#36 ASC NULLS FIRST, d_moy#37 ASC NULLS FIRST]

(44) CometColumnarToRow [codegen id : 8]
Input [7]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, d_year#36, d_moy#37, sum_sales#38]

(45) Window
Input [7]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, d_year#36, d_moy#37, sum_sales#38]
Arguments: [rank(d_year#36, d_moy#37) windowspecdefinition(i_category#32, i_brand#33, s_store_name#34, s_company_name#35, d_year#36 ASC NULLS FIRST, d_moy#37 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#39], [i_category#32, i_brand#33, s_store_name#34, s_company_name#35], [d_year#36 ASC NULLS FIRST, d_moy#37 ASC NULLS FIRST]

(46) Project [codegen id : 9]
Output [6]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, sum_sales#38, rn#39]
Input [8]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, d_year#36, d_moy#37, sum_sales#38, rn#39]

(47) BroadcastExchange
Input [6]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, sum_sales#38, rn#39]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], input[3, string, true], (input[5, int, false] - 1)),false), [plan_id=5]

(48) BroadcastHashJoin [codegen id : 10]
Left keys [5]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, rn#20]
Right keys [5]: [i_category#32, i_brand#33, s_store_name#34, s_company_name#35, (rn#39 - 1)]
Join type: Inner
Join condition: None

(49) Project [codegen id : 10]
Output [10]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, avg_monthly_sales#21, sum_sales#18, sum_sales#30 AS psum#40, sum_sales#38 AS nsum#41]
Input [16]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, sum_sales#18, avg_monthly_sales#21, rn#20, sum_sales#30, i_category#32, i_brand#33, s_store_name#34, s_company_name#35, sum_sales#38, rn#39]

(50) TakeOrderedAndProject
Input [10]: [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, avg_monthly_sales#21, sum_sales#18, psum#40, nsum#41]
Arguments: 100, [(sum_sales#18 - avg_monthly_sales#21) ASC NULLS FIRST, s_store_name#14 ASC NULLS FIRST], [i_category#5, i_brand#4, s_store_name#14, s_company_name#15, d_year#11, d_moy#12, avg_monthly_sales#21, sum_sales#18, psum#40, nsum#41]

