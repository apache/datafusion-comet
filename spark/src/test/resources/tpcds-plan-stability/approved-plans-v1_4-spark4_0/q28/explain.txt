== Physical Plan ==
* BroadcastNestedLoopJoin Inner BuildRight (82)
:- * BroadcastNestedLoopJoin Inner BuildRight (68)
:  :- * BroadcastNestedLoopJoin Inner BuildRight (54)
:  :  :- * BroadcastNestedLoopJoin Inner BuildRight (40)
:  :  :  :- * BroadcastNestedLoopJoin Inner BuildRight (26)
:  :  :  :  :- * HashAggregate (12)
:  :  :  :  :  +- * CometColumnarToRow (11)
:  :  :  :  :     +- CometColumnarExchange (10)
:  :  :  :  :        +- * HashAggregate (9)
:  :  :  :  :           +- * HashAggregate (8)
:  :  :  :  :              +- * CometColumnarToRow (7)
:  :  :  :  :                 +- CometColumnarExchange (6)
:  :  :  :  :                    +- * HashAggregate (5)
:  :  :  :  :                       +- * CometColumnarToRow (4)
:  :  :  :  :                          +- CometProject (3)
:  :  :  :  :                             +- CometFilter (2)
:  :  :  :  :                                +- CometScan parquet spark_catalog.default.store_sales (1)
:  :  :  :  +- BroadcastExchange (25)
:  :  :  :     +- * HashAggregate (24)
:  :  :  :        +- * CometColumnarToRow (23)
:  :  :  :           +- CometColumnarExchange (22)
:  :  :  :              +- * HashAggregate (21)
:  :  :  :                 +- * HashAggregate (20)
:  :  :  :                    +- * CometColumnarToRow (19)
:  :  :  :                       +- CometColumnarExchange (18)
:  :  :  :                          +- * HashAggregate (17)
:  :  :  :                             +- * CometColumnarToRow (16)
:  :  :  :                                +- CometProject (15)
:  :  :  :                                   +- CometFilter (14)
:  :  :  :                                      +- CometScan parquet spark_catalog.default.store_sales (13)
:  :  :  +- BroadcastExchange (39)
:  :  :     +- * HashAggregate (38)
:  :  :        +- * CometColumnarToRow (37)
:  :  :           +- CometColumnarExchange (36)
:  :  :              +- * HashAggregate (35)
:  :  :                 +- * HashAggregate (34)
:  :  :                    +- * CometColumnarToRow (33)
:  :  :                       +- CometColumnarExchange (32)
:  :  :                          +- * HashAggregate (31)
:  :  :                             +- * CometColumnarToRow (30)
:  :  :                                +- CometProject (29)
:  :  :                                   +- CometFilter (28)
:  :  :                                      +- CometScan parquet spark_catalog.default.store_sales (27)
:  :  +- BroadcastExchange (53)
:  :     +- * HashAggregate (52)
:  :        +- * CometColumnarToRow (51)
:  :           +- CometColumnarExchange (50)
:  :              +- * HashAggregate (49)
:  :                 +- * HashAggregate (48)
:  :                    +- * CometColumnarToRow (47)
:  :                       +- CometColumnarExchange (46)
:  :                          +- * HashAggregate (45)
:  :                             +- * CometColumnarToRow (44)
:  :                                +- CometProject (43)
:  :                                   +- CometFilter (42)
:  :                                      +- CometScan parquet spark_catalog.default.store_sales (41)
:  +- BroadcastExchange (67)
:     +- * HashAggregate (66)
:        +- * CometColumnarToRow (65)
:           +- CometColumnarExchange (64)
:              +- * HashAggregate (63)
:                 +- * HashAggregate (62)
:                    +- * CometColumnarToRow (61)
:                       +- CometColumnarExchange (60)
:                          +- * HashAggregate (59)
:                             +- * CometColumnarToRow (58)
:                                +- CometProject (57)
:                                   +- CometFilter (56)
:                                      +- CometScan parquet spark_catalog.default.store_sales (55)
+- BroadcastExchange (81)
   +- * HashAggregate (80)
      +- * CometColumnarToRow (79)
         +- CometColumnarExchange (78)
            +- * HashAggregate (77)
               +- * HashAggregate (76)
                  +- * CometColumnarToRow (75)
                     +- CometColumnarExchange (74)
                        +- * HashAggregate (73)
                           +- * CometColumnarToRow (72)
                              +- CometProject (71)
                                 +- CometFilter (70)
                                    +- CometScan parquet spark_catalog.default.store_sales (69)


(1) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_quantity#1, ss_wholesale_cost#2, ss_list_price#3, ss_coupon_amt#4, ss_sold_date_sk#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,0), LessThanOrEqual(ss_quantity,5), Or(Or(And(GreaterThanOrEqual(ss_list_price,8.00),LessThanOrEqual(ss_list_price,18.00)),And(GreaterThanOrEqual(ss_coupon_amt,459.00),LessThanOrEqual(ss_coupon_amt,1459.00))),And(GreaterThanOrEqual(ss_wholesale_cost,57.00),LessThanOrEqual(ss_wholesale_cost,77.00)))]
ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_quantity#1, ss_wholesale_cost#2, ss_list_price#3, ss_coupon_amt#4, ss_sold_date_sk#5]
Condition : (((isnotnull(ss_quantity#1) AND (ss_quantity#1 >= 0)) AND (ss_quantity#1 <= 5)) AND ((((ss_list_price#3 >= 8.00) AND (ss_list_price#3 <= 18.00)) OR ((ss_coupon_amt#4 >= 459.00) AND (ss_coupon_amt#4 <= 1459.00))) OR ((ss_wholesale_cost#2 >= 57.00) AND (ss_wholesale_cost#2 <= 77.00))))

(3) CometProject
Input [5]: [ss_quantity#1, ss_wholesale_cost#2, ss_list_price#3, ss_coupon_amt#4, ss_sold_date_sk#5]
Arguments: [ss_list_price#3], [ss_list_price#3]

(4) CometColumnarToRow [codegen id : 1]
Input [1]: [ss_list_price#3]

(5) HashAggregate [codegen id : 1]
Input [1]: [ss_list_price#3]
Keys [1]: [ss_list_price#3]
Functions [2]: [partial_avg(UnscaledValue(ss_list_price#3)), partial_count(ss_list_price#3)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#3))#6, count(ss_list_price#3)#7]
Results [4]: [ss_list_price#3, sum#8, count#9, count#10]

(6) CometColumnarExchange
Input [4]: [ss_list_price#3, sum#8, count#9, count#10]
Arguments: hashpartitioning(ss_list_price#3, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(7) CometColumnarToRow [codegen id : 2]
Input [4]: [ss_list_price#3, sum#8, count#9, count#10]

(8) HashAggregate [codegen id : 2]
Input [4]: [ss_list_price#3, sum#8, count#9, count#10]
Keys [1]: [ss_list_price#3]
Functions [2]: [merge_avg(UnscaledValue(ss_list_price#3)), merge_count(ss_list_price#3)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#3))#6, count(ss_list_price#3)#7]
Results [4]: [ss_list_price#3, sum#8, count#9, count#10]

(9) HashAggregate [codegen id : 2]
Input [4]: [ss_list_price#3, sum#8, count#9, count#10]
Keys: []
Functions [3]: [merge_avg(UnscaledValue(ss_list_price#3)), merge_count(ss_list_price#3), partial_count(distinct ss_list_price#3)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#3))#6, count(ss_list_price#3)#7, count(ss_list_price#3)#11]
Results [4]: [sum#8, count#9, count#10, count#12]

(10) CometColumnarExchange
Input [4]: [sum#8, count#9, count#10, count#12]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(11) CometColumnarToRow [codegen id : 18]
Input [4]: [sum#8, count#9, count#10, count#12]

(12) HashAggregate [codegen id : 18]
Input [4]: [sum#8, count#9, count#10, count#12]
Keys: []
Functions [3]: [avg(UnscaledValue(ss_list_price#3)), count(ss_list_price#3), count(distinct ss_list_price#3)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#3))#6, count(ss_list_price#3)#7, count(ss_list_price#3)#11]
Results [3]: [cast((avg(UnscaledValue(ss_list_price#3))#6 / 100.0) as decimal(11,6)) AS B1_LP#13, count(ss_list_price#3)#7 AS B1_CNT#14, count(ss_list_price#3)#11 AS B1_CNTD#15]

(13) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_quantity#16, ss_wholesale_cost#17, ss_list_price#18, ss_coupon_amt#19, ss_sold_date_sk#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,6), LessThanOrEqual(ss_quantity,10), Or(Or(And(GreaterThanOrEqual(ss_list_price,90.00),LessThanOrEqual(ss_list_price,100.00)),And(GreaterThanOrEqual(ss_coupon_amt,2323.00),LessThanOrEqual(ss_coupon_amt,3323.00))),And(GreaterThanOrEqual(ss_wholesale_cost,31.00),LessThanOrEqual(ss_wholesale_cost,51.00)))]
ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(14) CometFilter
Input [5]: [ss_quantity#16, ss_wholesale_cost#17, ss_list_price#18, ss_coupon_amt#19, ss_sold_date_sk#20]
Condition : (((isnotnull(ss_quantity#16) AND (ss_quantity#16 >= 6)) AND (ss_quantity#16 <= 10)) AND ((((ss_list_price#18 >= 90.00) AND (ss_list_price#18 <= 100.00)) OR ((ss_coupon_amt#19 >= 2323.00) AND (ss_coupon_amt#19 <= 3323.00))) OR ((ss_wholesale_cost#17 >= 31.00) AND (ss_wholesale_cost#17 <= 51.00))))

(15) CometProject
Input [5]: [ss_quantity#16, ss_wholesale_cost#17, ss_list_price#18, ss_coupon_amt#19, ss_sold_date_sk#20]
Arguments: [ss_list_price#18], [ss_list_price#18]

(16) CometColumnarToRow [codegen id : 3]
Input [1]: [ss_list_price#18]

(17) HashAggregate [codegen id : 3]
Input [1]: [ss_list_price#18]
Keys [1]: [ss_list_price#18]
Functions [2]: [partial_avg(UnscaledValue(ss_list_price#18)), partial_count(ss_list_price#18)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#18))#21, count(ss_list_price#18)#22]
Results [4]: [ss_list_price#18, sum#23, count#24, count#25]

(18) CometColumnarExchange
Input [4]: [ss_list_price#18, sum#23, count#24, count#25]
Arguments: hashpartitioning(ss_list_price#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(19) CometColumnarToRow [codegen id : 4]
Input [4]: [ss_list_price#18, sum#23, count#24, count#25]

(20) HashAggregate [codegen id : 4]
Input [4]: [ss_list_price#18, sum#23, count#24, count#25]
Keys [1]: [ss_list_price#18]
Functions [2]: [merge_avg(UnscaledValue(ss_list_price#18)), merge_count(ss_list_price#18)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#18))#21, count(ss_list_price#18)#22]
Results [4]: [ss_list_price#18, sum#23, count#24, count#25]

(21) HashAggregate [codegen id : 4]
Input [4]: [ss_list_price#18, sum#23, count#24, count#25]
Keys: []
Functions [3]: [merge_avg(UnscaledValue(ss_list_price#18)), merge_count(ss_list_price#18), partial_count(distinct ss_list_price#18)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#18))#21, count(ss_list_price#18)#22, count(ss_list_price#18)#26]
Results [4]: [sum#23, count#24, count#25, count#27]

(22) CometColumnarExchange
Input [4]: [sum#23, count#24, count#25, count#27]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(23) CometColumnarToRow [codegen id : 5]
Input [4]: [sum#23, count#24, count#25, count#27]

(24) HashAggregate [codegen id : 5]
Input [4]: [sum#23, count#24, count#25, count#27]
Keys: []
Functions [3]: [avg(UnscaledValue(ss_list_price#18)), count(ss_list_price#18), count(distinct ss_list_price#18)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#18))#21, count(ss_list_price#18)#22, count(ss_list_price#18)#26]
Results [3]: [cast((avg(UnscaledValue(ss_list_price#18))#21 / 100.0) as decimal(11,6)) AS B2_LP#28, count(ss_list_price#18)#22 AS B2_CNT#29, count(ss_list_price#18)#26 AS B2_CNTD#30]

(25) BroadcastExchange
Input [3]: [B2_LP#28, B2_CNT#29, B2_CNTD#30]
Arguments: IdentityBroadcastMode, [plan_id=5]

(26) BroadcastNestedLoopJoin [codegen id : 18]
Join type: Inner
Join condition: None

(27) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_quantity#31, ss_wholesale_cost#32, ss_list_price#33, ss_coupon_amt#34, ss_sold_date_sk#35]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,11), LessThanOrEqual(ss_quantity,15), Or(Or(And(GreaterThanOrEqual(ss_list_price,142.00),LessThanOrEqual(ss_list_price,152.00)),And(GreaterThanOrEqual(ss_coupon_amt,12214.00),LessThanOrEqual(ss_coupon_amt,13214.00))),And(GreaterThanOrEqual(ss_wholesale_cost,79.00),LessThanOrEqual(ss_wholesale_cost,99.00)))]
ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(28) CometFilter
Input [5]: [ss_quantity#31, ss_wholesale_cost#32, ss_list_price#33, ss_coupon_amt#34, ss_sold_date_sk#35]
Condition : (((isnotnull(ss_quantity#31) AND (ss_quantity#31 >= 11)) AND (ss_quantity#31 <= 15)) AND ((((ss_list_price#33 >= 142.00) AND (ss_list_price#33 <= 152.00)) OR ((ss_coupon_amt#34 >= 12214.00) AND (ss_coupon_amt#34 <= 13214.00))) OR ((ss_wholesale_cost#32 >= 79.00) AND (ss_wholesale_cost#32 <= 99.00))))

(29) CometProject
Input [5]: [ss_quantity#31, ss_wholesale_cost#32, ss_list_price#33, ss_coupon_amt#34, ss_sold_date_sk#35]
Arguments: [ss_list_price#33], [ss_list_price#33]

(30) CometColumnarToRow [codegen id : 6]
Input [1]: [ss_list_price#33]

(31) HashAggregate [codegen id : 6]
Input [1]: [ss_list_price#33]
Keys [1]: [ss_list_price#33]
Functions [2]: [partial_avg(UnscaledValue(ss_list_price#33)), partial_count(ss_list_price#33)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#33))#36, count(ss_list_price#33)#37]
Results [4]: [ss_list_price#33, sum#38, count#39, count#40]

(32) CometColumnarExchange
Input [4]: [ss_list_price#33, sum#38, count#39, count#40]
Arguments: hashpartitioning(ss_list_price#33, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(33) CometColumnarToRow [codegen id : 7]
Input [4]: [ss_list_price#33, sum#38, count#39, count#40]

(34) HashAggregate [codegen id : 7]
Input [4]: [ss_list_price#33, sum#38, count#39, count#40]
Keys [1]: [ss_list_price#33]
Functions [2]: [merge_avg(UnscaledValue(ss_list_price#33)), merge_count(ss_list_price#33)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#33))#36, count(ss_list_price#33)#37]
Results [4]: [ss_list_price#33, sum#38, count#39, count#40]

(35) HashAggregate [codegen id : 7]
Input [4]: [ss_list_price#33, sum#38, count#39, count#40]
Keys: []
Functions [3]: [merge_avg(UnscaledValue(ss_list_price#33)), merge_count(ss_list_price#33), partial_count(distinct ss_list_price#33)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#33))#36, count(ss_list_price#33)#37, count(ss_list_price#33)#41]
Results [4]: [sum#38, count#39, count#40, count#42]

(36) CometColumnarExchange
Input [4]: [sum#38, count#39, count#40, count#42]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(37) CometColumnarToRow [codegen id : 8]
Input [4]: [sum#38, count#39, count#40, count#42]

(38) HashAggregate [codegen id : 8]
Input [4]: [sum#38, count#39, count#40, count#42]
Keys: []
Functions [3]: [avg(UnscaledValue(ss_list_price#33)), count(ss_list_price#33), count(distinct ss_list_price#33)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#33))#36, count(ss_list_price#33)#37, count(ss_list_price#33)#41]
Results [3]: [cast((avg(UnscaledValue(ss_list_price#33))#36 / 100.0) as decimal(11,6)) AS B3_LP#43, count(ss_list_price#33)#37 AS B3_CNT#44, count(ss_list_price#33)#41 AS B3_CNTD#45]

(39) BroadcastExchange
Input [3]: [B3_LP#43, B3_CNT#44, B3_CNTD#45]
Arguments: IdentityBroadcastMode, [plan_id=8]

(40) BroadcastNestedLoopJoin [codegen id : 18]
Join type: Inner
Join condition: None

(41) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_quantity#46, ss_wholesale_cost#47, ss_list_price#48, ss_coupon_amt#49, ss_sold_date_sk#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,16), LessThanOrEqual(ss_quantity,20), Or(Or(And(GreaterThanOrEqual(ss_list_price,135.00),LessThanOrEqual(ss_list_price,145.00)),And(GreaterThanOrEqual(ss_coupon_amt,6071.00),LessThanOrEqual(ss_coupon_amt,7071.00))),And(GreaterThanOrEqual(ss_wholesale_cost,38.00),LessThanOrEqual(ss_wholesale_cost,58.00)))]
ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(42) CometFilter
Input [5]: [ss_quantity#46, ss_wholesale_cost#47, ss_list_price#48, ss_coupon_amt#49, ss_sold_date_sk#50]
Condition : (((isnotnull(ss_quantity#46) AND (ss_quantity#46 >= 16)) AND (ss_quantity#46 <= 20)) AND ((((ss_list_price#48 >= 135.00) AND (ss_list_price#48 <= 145.00)) OR ((ss_coupon_amt#49 >= 6071.00) AND (ss_coupon_amt#49 <= 7071.00))) OR ((ss_wholesale_cost#47 >= 38.00) AND (ss_wholesale_cost#47 <= 58.00))))

(43) CometProject
Input [5]: [ss_quantity#46, ss_wholesale_cost#47, ss_list_price#48, ss_coupon_amt#49, ss_sold_date_sk#50]
Arguments: [ss_list_price#48], [ss_list_price#48]

(44) CometColumnarToRow [codegen id : 9]
Input [1]: [ss_list_price#48]

(45) HashAggregate [codegen id : 9]
Input [1]: [ss_list_price#48]
Keys [1]: [ss_list_price#48]
Functions [2]: [partial_avg(UnscaledValue(ss_list_price#48)), partial_count(ss_list_price#48)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#48))#51, count(ss_list_price#48)#52]
Results [4]: [ss_list_price#48, sum#53, count#54, count#55]

(46) CometColumnarExchange
Input [4]: [ss_list_price#48, sum#53, count#54, count#55]
Arguments: hashpartitioning(ss_list_price#48, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(47) CometColumnarToRow [codegen id : 10]
Input [4]: [ss_list_price#48, sum#53, count#54, count#55]

(48) HashAggregate [codegen id : 10]
Input [4]: [ss_list_price#48, sum#53, count#54, count#55]
Keys [1]: [ss_list_price#48]
Functions [2]: [merge_avg(UnscaledValue(ss_list_price#48)), merge_count(ss_list_price#48)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#48))#51, count(ss_list_price#48)#52]
Results [4]: [ss_list_price#48, sum#53, count#54, count#55]

(49) HashAggregate [codegen id : 10]
Input [4]: [ss_list_price#48, sum#53, count#54, count#55]
Keys: []
Functions [3]: [merge_avg(UnscaledValue(ss_list_price#48)), merge_count(ss_list_price#48), partial_count(distinct ss_list_price#48)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#48))#51, count(ss_list_price#48)#52, count(ss_list_price#48)#56]
Results [4]: [sum#53, count#54, count#55, count#57]

(50) CometColumnarExchange
Input [4]: [sum#53, count#54, count#55, count#57]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(51) CometColumnarToRow [codegen id : 11]
Input [4]: [sum#53, count#54, count#55, count#57]

(52) HashAggregate [codegen id : 11]
Input [4]: [sum#53, count#54, count#55, count#57]
Keys: []
Functions [3]: [avg(UnscaledValue(ss_list_price#48)), count(ss_list_price#48), count(distinct ss_list_price#48)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#48))#51, count(ss_list_price#48)#52, count(ss_list_price#48)#56]
Results [3]: [cast((avg(UnscaledValue(ss_list_price#48))#51 / 100.0) as decimal(11,6)) AS B4_LP#58, count(ss_list_price#48)#52 AS B4_CNT#59, count(ss_list_price#48)#56 AS B4_CNTD#60]

(53) BroadcastExchange
Input [3]: [B4_LP#58, B4_CNT#59, B4_CNTD#60]
Arguments: IdentityBroadcastMode, [plan_id=11]

(54) BroadcastNestedLoopJoin [codegen id : 18]
Join type: Inner
Join condition: None

(55) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_quantity#61, ss_wholesale_cost#62, ss_list_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,21), LessThanOrEqual(ss_quantity,25), Or(Or(And(GreaterThanOrEqual(ss_list_price,122.00),LessThanOrEqual(ss_list_price,132.00)),And(GreaterThanOrEqual(ss_coupon_amt,836.00),LessThanOrEqual(ss_coupon_amt,1836.00))),And(GreaterThanOrEqual(ss_wholesale_cost,17.00),LessThanOrEqual(ss_wholesale_cost,37.00)))]
ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(56) CometFilter
Input [5]: [ss_quantity#61, ss_wholesale_cost#62, ss_list_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]
Condition : (((isnotnull(ss_quantity#61) AND (ss_quantity#61 >= 21)) AND (ss_quantity#61 <= 25)) AND ((((ss_list_price#63 >= 122.00) AND (ss_list_price#63 <= 132.00)) OR ((ss_coupon_amt#64 >= 836.00) AND (ss_coupon_amt#64 <= 1836.00))) OR ((ss_wholesale_cost#62 >= 17.00) AND (ss_wholesale_cost#62 <= 37.00))))

(57) CometProject
Input [5]: [ss_quantity#61, ss_wholesale_cost#62, ss_list_price#63, ss_coupon_amt#64, ss_sold_date_sk#65]
Arguments: [ss_list_price#63], [ss_list_price#63]

(58) CometColumnarToRow [codegen id : 12]
Input [1]: [ss_list_price#63]

(59) HashAggregate [codegen id : 12]
Input [1]: [ss_list_price#63]
Keys [1]: [ss_list_price#63]
Functions [2]: [partial_avg(UnscaledValue(ss_list_price#63)), partial_count(ss_list_price#63)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#63))#66, count(ss_list_price#63)#67]
Results [4]: [ss_list_price#63, sum#68, count#69, count#70]

(60) CometColumnarExchange
Input [4]: [ss_list_price#63, sum#68, count#69, count#70]
Arguments: hashpartitioning(ss_list_price#63, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(61) CometColumnarToRow [codegen id : 13]
Input [4]: [ss_list_price#63, sum#68, count#69, count#70]

(62) HashAggregate [codegen id : 13]
Input [4]: [ss_list_price#63, sum#68, count#69, count#70]
Keys [1]: [ss_list_price#63]
Functions [2]: [merge_avg(UnscaledValue(ss_list_price#63)), merge_count(ss_list_price#63)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#63))#66, count(ss_list_price#63)#67]
Results [4]: [ss_list_price#63, sum#68, count#69, count#70]

(63) HashAggregate [codegen id : 13]
Input [4]: [ss_list_price#63, sum#68, count#69, count#70]
Keys: []
Functions [3]: [merge_avg(UnscaledValue(ss_list_price#63)), merge_count(ss_list_price#63), partial_count(distinct ss_list_price#63)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#63))#66, count(ss_list_price#63)#67, count(ss_list_price#63)#71]
Results [4]: [sum#68, count#69, count#70, count#72]

(64) CometColumnarExchange
Input [4]: [sum#68, count#69, count#70, count#72]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(65) CometColumnarToRow [codegen id : 14]
Input [4]: [sum#68, count#69, count#70, count#72]

(66) HashAggregate [codegen id : 14]
Input [4]: [sum#68, count#69, count#70, count#72]
Keys: []
Functions [3]: [avg(UnscaledValue(ss_list_price#63)), count(ss_list_price#63), count(distinct ss_list_price#63)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#63))#66, count(ss_list_price#63)#67, count(ss_list_price#63)#71]
Results [3]: [cast((avg(UnscaledValue(ss_list_price#63))#66 / 100.0) as decimal(11,6)) AS B5_LP#73, count(ss_list_price#63)#67 AS B5_CNT#74, count(ss_list_price#63)#71 AS B5_CNTD#75]

(67) BroadcastExchange
Input [3]: [B5_LP#73, B5_CNT#74, B5_CNTD#75]
Arguments: IdentityBroadcastMode, [plan_id=14]

(68) BroadcastNestedLoopJoin [codegen id : 18]
Join type: Inner
Join condition: None

(69) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_quantity#76, ss_wholesale_cost#77, ss_list_price#78, ss_coupon_amt#79, ss_sold_date_sk#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_quantity), GreaterThanOrEqual(ss_quantity,26), LessThanOrEqual(ss_quantity,30), Or(Or(And(GreaterThanOrEqual(ss_list_price,154.00),LessThanOrEqual(ss_list_price,164.00)),And(GreaterThanOrEqual(ss_coupon_amt,7326.00),LessThanOrEqual(ss_coupon_amt,8326.00))),And(GreaterThanOrEqual(ss_wholesale_cost,7.00),LessThanOrEqual(ss_wholesale_cost,27.00)))]
ReadSchema: struct<ss_quantity:int,ss_wholesale_cost:decimal(7,2),ss_list_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(70) CometFilter
Input [5]: [ss_quantity#76, ss_wholesale_cost#77, ss_list_price#78, ss_coupon_amt#79, ss_sold_date_sk#80]
Condition : (((isnotnull(ss_quantity#76) AND (ss_quantity#76 >= 26)) AND (ss_quantity#76 <= 30)) AND ((((ss_list_price#78 >= 154.00) AND (ss_list_price#78 <= 164.00)) OR ((ss_coupon_amt#79 >= 7326.00) AND (ss_coupon_amt#79 <= 8326.00))) OR ((ss_wholesale_cost#77 >= 7.00) AND (ss_wholesale_cost#77 <= 27.00))))

(71) CometProject
Input [5]: [ss_quantity#76, ss_wholesale_cost#77, ss_list_price#78, ss_coupon_amt#79, ss_sold_date_sk#80]
Arguments: [ss_list_price#78], [ss_list_price#78]

(72) CometColumnarToRow [codegen id : 15]
Input [1]: [ss_list_price#78]

(73) HashAggregate [codegen id : 15]
Input [1]: [ss_list_price#78]
Keys [1]: [ss_list_price#78]
Functions [2]: [partial_avg(UnscaledValue(ss_list_price#78)), partial_count(ss_list_price#78)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#78))#81, count(ss_list_price#78)#82]
Results [4]: [ss_list_price#78, sum#83, count#84, count#85]

(74) CometColumnarExchange
Input [4]: [ss_list_price#78, sum#83, count#84, count#85]
Arguments: hashpartitioning(ss_list_price#78, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=15]

(75) CometColumnarToRow [codegen id : 16]
Input [4]: [ss_list_price#78, sum#83, count#84, count#85]

(76) HashAggregate [codegen id : 16]
Input [4]: [ss_list_price#78, sum#83, count#84, count#85]
Keys [1]: [ss_list_price#78]
Functions [2]: [merge_avg(UnscaledValue(ss_list_price#78)), merge_count(ss_list_price#78)]
Aggregate Attributes [2]: [avg(UnscaledValue(ss_list_price#78))#81, count(ss_list_price#78)#82]
Results [4]: [ss_list_price#78, sum#83, count#84, count#85]

(77) HashAggregate [codegen id : 16]
Input [4]: [ss_list_price#78, sum#83, count#84, count#85]
Keys: []
Functions [3]: [merge_avg(UnscaledValue(ss_list_price#78)), merge_count(ss_list_price#78), partial_count(distinct ss_list_price#78)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#78))#81, count(ss_list_price#78)#82, count(ss_list_price#78)#86]
Results [4]: [sum#83, count#84, count#85, count#87]

(78) CometColumnarExchange
Input [4]: [sum#83, count#84, count#85, count#87]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=16]

(79) CometColumnarToRow [codegen id : 17]
Input [4]: [sum#83, count#84, count#85, count#87]

(80) HashAggregate [codegen id : 17]
Input [4]: [sum#83, count#84, count#85, count#87]
Keys: []
Functions [3]: [avg(UnscaledValue(ss_list_price#78)), count(ss_list_price#78), count(distinct ss_list_price#78)]
Aggregate Attributes [3]: [avg(UnscaledValue(ss_list_price#78))#81, count(ss_list_price#78)#82, count(ss_list_price#78)#86]
Results [3]: [cast((avg(UnscaledValue(ss_list_price#78))#81 / 100.0) as decimal(11,6)) AS B6_LP#88, count(ss_list_price#78)#82 AS B6_CNT#89, count(ss_list_price#78)#86 AS B6_CNTD#90]

(81) BroadcastExchange
Input [3]: [B6_LP#88, B6_CNT#89, B6_CNTD#90]
Arguments: IdentityBroadcastMode, [plan_id=17]

(82) BroadcastNestedLoopJoin [codegen id : 18]
Join type: Inner
Join condition: None

