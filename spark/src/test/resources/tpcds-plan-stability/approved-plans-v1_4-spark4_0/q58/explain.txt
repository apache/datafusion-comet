== Physical Plan ==
TakeOrderedAndProject (56)
+- * Project (55)
   +- * BroadcastHashJoin Inner BuildRight (54)
      :- * Project (38)
      :  +- * BroadcastHashJoin Inner BuildRight (37)
      :     :- * Filter (21)
      :     :  +- * HashAggregate (20)
      :     :     +- * CometColumnarToRow (19)
      :     :        +- CometColumnarExchange (18)
      :     :           +- * HashAggregate (17)
      :     :              +- * CometColumnarToRow (16)
      :     :                 +- CometProject (15)
      :     :                    +- CometBroadcastHashJoin (14)
      :     :                       :- CometProject (7)
      :     :                       :  +- CometBroadcastHashJoin (6)
      :     :                       :     :- CometFilter (2)
      :     :                       :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
      :     :                       :     +- CometBroadcastExchange (5)
      :     :                       :        +- CometFilter (4)
      :     :                       :           +- CometScan parquet spark_catalog.default.item (3)
      :     :                       +- CometBroadcastExchange (13)
      :     :                          +- CometProject (12)
      :     :                             +- CometBroadcastHashJoin (11)
      :     :                                :- CometFilter (9)
      :     :                                :  +- CometScan parquet spark_catalog.default.date_dim (8)
      :     :                                +- ReusedExchange (10)
      :     +- BroadcastExchange (36)
      :        +- * Filter (35)
      :           +- * HashAggregate (34)
      :              +- * CometColumnarToRow (33)
      :                 +- CometColumnarExchange (32)
      :                    +- * HashAggregate (31)
      :                       +- * CometColumnarToRow (30)
      :                          +- CometProject (29)
      :                             +- CometBroadcastHashJoin (28)
      :                                :- CometProject (26)
      :                                :  +- CometBroadcastHashJoin (25)
      :                                :     :- CometFilter (23)
      :                                :     :  +- CometScan parquet spark_catalog.default.catalog_sales (22)
      :                                :     +- ReusedExchange (24)
      :                                +- ReusedExchange (27)
      +- BroadcastExchange (53)
         +- * Filter (52)
            +- * HashAggregate (51)
               +- * CometColumnarToRow (50)
                  +- CometColumnarExchange (49)
                     +- * HashAggregate (48)
                        +- * CometColumnarToRow (47)
                           +- CometProject (46)
                              +- CometBroadcastHashJoin (45)
                                 :- CometProject (43)
                                 :  +- CometBroadcastHashJoin (42)
                                 :     :- CometFilter (40)
                                 :     :  +- CometScan parquet spark_catalog.default.web_sales (39)
                                 :     +- ReusedExchange (41)
                                 +- ReusedExchange (44)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk), IsNotNull(i_item_id)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(i_item_id#6))

(5) CometBroadcastExchange
Input [2]: [i_item_sk#5, i_item_id#6]
Arguments: [i_item_sk#5, i_item_id#6]

(6) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#5, i_item_id#6]
Arguments: [ss_item_sk#1], [i_item_sk#5], Inner, BuildRight

(7) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#5, i_item_id#6]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]

(8) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(9) CometFilter
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(10) ReusedExchange [Reuses operator id: 62]
Output [1]: [d_date#9]

(11) CometBroadcastHashJoin
Left output [2]: [d_date_sk#7, d_date#8]
Right output [1]: [d_date#9]
Arguments: [d_date#8], [d_date#9], LeftSemi, BuildRight

(12) CometProject
Input [2]: [d_date_sk#7, d_date#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(13) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(14) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#7], Inner, BuildRight

(15) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#6, d_date_sk#7]
Arguments: [ss_ext_sales_price#2, i_item_id#6], [ss_ext_sales_price#2, i_item_id#6]

(16) CometColumnarToRow [codegen id : 1]
Input [2]: [ss_ext_sales_price#2, i_item_id#6]

(17) HashAggregate [codegen id : 1]
Input [2]: [ss_ext_sales_price#2, i_item_id#6]
Keys [1]: [i_item_id#6]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#10]
Results [2]: [i_item_id#6, sum#11]

(18) CometColumnarExchange
Input [2]: [i_item_id#6, sum#11]
Arguments: hashpartitioning(i_item_id#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(19) CometColumnarToRow [codegen id : 6]
Input [2]: [i_item_id#6, sum#11]

(20) HashAggregate [codegen id : 6]
Input [2]: [i_item_id#6, sum#11]
Keys [1]: [i_item_id#6]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#12]
Results [2]: [i_item_id#6 AS item_id#13, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#12,17,2) AS ss_item_rev#14]

(21) Filter [codegen id : 6]
Input [2]: [item_id#13, ss_item_rev#14]
Condition : isnotnull(ss_item_rev#14)

(22) CometScan parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#17), dynamicpruningexpression(cs_sold_date_sk#17 IN dynamicpruning#18)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(23) CometFilter
Input [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Condition : isnotnull(cs_item_sk#15)

(24) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#19, i_item_id#20]

(25) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Right output [2]: [i_item_sk#19, i_item_id#20]
Arguments: [cs_item_sk#15], [i_item_sk#19], Inner, BuildRight

(26) CometProject
Input [5]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_sk#19, i_item_id#20]
Arguments: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20], [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20]

(27) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#21]

(28) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20]
Right output [1]: [d_date_sk#21]
Arguments: [cs_sold_date_sk#17], [d_date_sk#21], Inner, BuildRight

(29) CometProject
Input [4]: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20, d_date_sk#21]
Arguments: [cs_ext_sales_price#16, i_item_id#20], [cs_ext_sales_price#16, i_item_id#20]

(30) CometColumnarToRow [codegen id : 2]
Input [2]: [cs_ext_sales_price#16, i_item_id#20]

(31) HashAggregate [codegen id : 2]
Input [2]: [cs_ext_sales_price#16, i_item_id#20]
Keys [1]: [i_item_id#20]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#16))]
Aggregate Attributes [1]: [sum#22]
Results [2]: [i_item_id#20, sum#23]

(32) CometColumnarExchange
Input [2]: [i_item_id#20, sum#23]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(33) CometColumnarToRow [codegen id : 3]
Input [2]: [i_item_id#20, sum#23]

(34) HashAggregate [codegen id : 3]
Input [2]: [i_item_id#20, sum#23]
Keys [1]: [i_item_id#20]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#16))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#16))#24]
Results [2]: [i_item_id#20 AS item_id#25, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#16))#24,17,2) AS cs_item_rev#26]

(35) Filter [codegen id : 3]
Input [2]: [item_id#25, cs_item_rev#26]
Condition : isnotnull(cs_item_rev#26)

(36) BroadcastExchange
Input [2]: [item_id#25, cs_item_rev#26]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(37) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#25]
Join type: Inner
Join condition: ((((cast(ss_item_rev#14 as decimal(19,3)) >= (0.9 * cs_item_rev#26)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= (1.1 * cs_item_rev#26))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= (0.9 * ss_item_rev#14))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= (1.1 * ss_item_rev#14)))

(38) Project [codegen id : 6]
Output [3]: [item_id#13, ss_item_rev#14, cs_item_rev#26]
Input [4]: [item_id#13, ss_item_rev#14, item_id#25, cs_item_rev#26]

(39) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#29), dynamicpruningexpression(ws_sold_date_sk#29 IN dynamicpruning#30)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(40) CometFilter
Input [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Condition : isnotnull(ws_item_sk#27)

(41) ReusedExchange [Reuses operator id: 5]
Output [2]: [i_item_sk#31, i_item_id#32]

(42) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29]
Right output [2]: [i_item_sk#31, i_item_id#32]
Arguments: [ws_item_sk#27], [i_item_sk#31], Inner, BuildRight

(43) CometProject
Input [5]: [ws_item_sk#27, ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_sk#31, i_item_id#32]
Arguments: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32], [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32]

(44) ReusedExchange [Reuses operator id: 13]
Output [1]: [d_date_sk#33]

(45) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32]
Right output [1]: [d_date_sk#33]
Arguments: [ws_sold_date_sk#29], [d_date_sk#33], Inner, BuildRight

(46) CometProject
Input [4]: [ws_ext_sales_price#28, ws_sold_date_sk#29, i_item_id#32, d_date_sk#33]
Arguments: [ws_ext_sales_price#28, i_item_id#32], [ws_ext_sales_price#28, i_item_id#32]

(47) CometColumnarToRow [codegen id : 4]
Input [2]: [ws_ext_sales_price#28, i_item_id#32]

(48) HashAggregate [codegen id : 4]
Input [2]: [ws_ext_sales_price#28, i_item_id#32]
Keys [1]: [i_item_id#32]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#28))]
Aggregate Attributes [1]: [sum#34]
Results [2]: [i_item_id#32, sum#35]

(49) CometColumnarExchange
Input [2]: [i_item_id#32, sum#35]
Arguments: hashpartitioning(i_item_id#32, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(50) CometColumnarToRow [codegen id : 5]
Input [2]: [i_item_id#32, sum#35]

(51) HashAggregate [codegen id : 5]
Input [2]: [i_item_id#32, sum#35]
Keys [1]: [i_item_id#32]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#28))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#28))#36]
Results [2]: [i_item_id#32 AS item_id#37, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#28))#36,17,2) AS ws_item_rev#38]

(52) Filter [codegen id : 5]
Input [2]: [item_id#37, ws_item_rev#38]
Condition : isnotnull(ws_item_rev#38)

(53) BroadcastExchange
Input [2]: [item_id#37, ws_item_rev#38]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(54) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#37]
Join type: Inner
Join condition: ((((((((cast(ss_item_rev#14 as decimal(19,3)) >= (0.9 * ws_item_rev#38)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= (1.1 * ws_item_rev#38))) AND (cast(cs_item_rev#26 as decimal(19,3)) >= (0.9 * ws_item_rev#38))) AND (cast(cs_item_rev#26 as decimal(20,3)) <= (1.1 * ws_item_rev#38))) AND (cast(ws_item_rev#38 as decimal(19,3)) >= (0.9 * ss_item_rev#14))) AND (cast(ws_item_rev#38 as decimal(20,3)) <= (1.1 * ss_item_rev#14))) AND (cast(ws_item_rev#38 as decimal(19,3)) >= (0.9 * cs_item_rev#26))) AND (cast(ws_item_rev#38 as decimal(20,3)) <= (1.1 * cs_item_rev#26)))

(55) Project [codegen id : 6]
Output [8]: [item_id#13, ss_item_rev#14, (((ss_item_rev#14 / ((ss_item_rev#14 + cs_item_rev#26) + ws_item_rev#38)) / 3) * 100) AS ss_dev#39, cs_item_rev#26, (((cs_item_rev#26 / ((ss_item_rev#14 + cs_item_rev#26) + ws_item_rev#38)) / 3) * 100) AS cs_dev#40, ws_item_rev#38, (((ws_item_rev#38 / ((ss_item_rev#14 + cs_item_rev#26) + ws_item_rev#38)) / 3) * 100) AS ws_dev#41, (((ss_item_rev#14 + cs_item_rev#26) + ws_item_rev#38) / 3) AS average#42]
Input [5]: [item_id#13, ss_item_rev#14, cs_item_rev#26, item_id#37, ws_item_rev#38]

(56) TakeOrderedAndProject
Input [8]: [item_id#13, ss_item_rev#14, ss_dev#39, cs_item_rev#26, cs_dev#40, ws_item_rev#38, ws_dev#41, average#42]
Arguments: 100, [item_id#13 ASC NULLS FIRST, ss_item_rev#14 ASC NULLS FIRST], [item_id#13, ss_item_rev#14, ss_dev#39, cs_item_rev#26, cs_dev#40, ws_item_rev#38, ws_dev#41, average#42]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (66)
+- * CometColumnarToRow (65)
   +- CometProject (64)
      +- CometBroadcastHashJoin (63)
         :- CometFilter (58)
         :  +- CometScan parquet spark_catalog.default.date_dim (57)
         +- CometBroadcastExchange (62)
            +- CometProject (61)
               +- CometFilter (60)
                  +- CometScan parquet spark_catalog.default.date_dim (59)


(57) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_date#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(58) CometFilter
Input [2]: [d_date_sk#7, d_date#8]
Condition : isnotnull(d_date_sk#7)

(59) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#9, d_week_seq#43]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#44)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(60) CometFilter
Input [2]: [d_date#9, d_week_seq#43]
Condition : (isnotnull(d_week_seq#43) AND (d_week_seq#43 = ReusedSubquery Subquery scalar-subquery#44, [id=#45]))

(61) CometProject
Input [2]: [d_date#9, d_week_seq#43]
Arguments: [d_date#9], [d_date#9]

(62) CometBroadcastExchange
Input [1]: [d_date#9]
Arguments: [d_date#9]

(63) CometBroadcastHashJoin
Left output [2]: [d_date_sk#7, d_date#8]
Right output [1]: [d_date#9]
Arguments: [d_date#8], [d_date#9], LeftSemi, BuildRight

(64) CometProject
Input [2]: [d_date_sk#7, d_date#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(65) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(66) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 60 Hosting Expression = ReusedSubquery Subquery scalar-subquery#44, [id=#45]

Subquery:3 Hosting operator id = 59 Hosting Expression = Subquery scalar-subquery#44, [id=#45]
* CometColumnarToRow (70)
+- CometProject (69)
   +- CometFilter (68)
      +- CometScan parquet spark_catalog.default.date_dim (67)


(67) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date#46, d_week_seq#47]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(68) CometFilter
Input [2]: [d_date#46, d_week_seq#47]
Condition : (isnotnull(d_date#46) AND (d_date#46 = 2000-01-03))

(69) CometProject
Input [2]: [d_date#46, d_week_seq#47]
Arguments: [d_week_seq#47], [d_week_seq#47]

(70) CometColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#47]

Subquery:4 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#17 IN dynamicpruning#4

Subquery:5 Hosting operator id = 39 Hosting Expression = ws_sold_date_sk#29 IN dynamicpruning#4


