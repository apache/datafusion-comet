== Physical Plan ==
* CometColumnarToRow (28)
+- CometProject (27)
   +- CometSort (26)
      +- CometColumnarExchange (25)
         +- * Project (24)
            +- Window (23)
               +- * CometColumnarToRow (22)
                  +- CometSort (21)
                     +- CometColumnarExchange (20)
                        +- * HashAggregate (19)
                           +- * CometColumnarToRow (18)
                              +- CometColumnarExchange (17)
                                 +- * HashAggregate (16)
                                    +- * CometColumnarToRow (15)
                                       +- CometProject (14)
                                          +- CometBroadcastHashJoin (13)
                                             :- CometProject (8)
                                             :  +- CometBroadcastHashJoin (7)
                                             :     :- CometFilter (2)
                                             :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                                             :     +- CometBroadcastExchange (6)
                                             :        +- CometProject (5)
                                             :           +- CometFilter (4)
                                             :              +- CometScan parquet spark_catalog.default.item (3)
                                             +- CometBroadcastExchange (12)
                                                +- CometProject (11)
                                                   +- CometFilter (10)
                                                      +- CometScan parquet spark_catalog.default.date_dim (9)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_item_desc:string,i_current_price:decimal(7,2),i_class:string,i_category:string>

(4) CometFilter
Input [6]: [i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Condition : (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#10, 50, true, false, true) IN (Sports                                            ,Books                                             ,Home                                              ) AND isnotnull(i_item_sk#5))

(5) CometProject
Input [6]: [i_item_sk#5, i_item_id#6, i_item_desc#7, i_current_price#8, i_class#9, i_category#10]
Arguments: [i_item_sk#5, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13], [i_item_sk#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#6, 16, true, false, true) AS i_item_id#11, i_item_desc#7, i_current_price#8, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#9, 50, true, false, true) AS i_class#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#10, 50, true, false, true) AS i_category#13]

(6) CometBroadcastExchange
Input [6]: [i_item_sk#5, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]
Arguments: [i_item_sk#5, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]

(7) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [6]: [i_item_sk#5, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]
Arguments: [ss_item_sk#1], [i_item_sk#5], Inner, BuildRight

(8) CometProject
Input [9]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#5, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]

(9) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(10) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1999-02-22)) AND (d_date#15 <= 1999-03-24)) AND isnotnull(d_date_sk#14))

(11) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(13) CometBroadcastHashJoin
Left output [7]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#3], [d_date_sk#14], Inner, BuildRight

(14) CometProject
Input [8]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13, d_date_sk#14]
Arguments: [ss_ext_sales_price#2, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13], [ss_ext_sales_price#2, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]

(15) CometColumnarToRow [codegen id : 1]
Input [6]: [ss_ext_sales_price#2, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]

(16) HashAggregate [codegen id : 1]
Input [6]: [ss_ext_sales_price#2, i_item_id#11, i_item_desc#7, i_current_price#8, i_class#12, i_category#13]
Keys [5]: [i_item_id#11, i_item_desc#7, i_category#13, i_class#12, i_current_price#8]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#16]
Results [6]: [i_item_id#11, i_item_desc#7, i_category#13, i_class#12, i_current_price#8, sum#17]

(17) CometColumnarExchange
Input [6]: [i_item_id#11, i_item_desc#7, i_category#13, i_class#12, i_current_price#8, sum#17]
Arguments: hashpartitioning(i_item_id#11, i_item_desc#7, i_category#13, i_class#12, i_current_price#8, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(18) CometColumnarToRow [codegen id : 2]
Input [6]: [i_item_id#11, i_item_desc#7, i_category#13, i_class#12, i_current_price#8, sum#17]

(19) HashAggregate [codegen id : 2]
Input [6]: [i_item_id#11, i_item_desc#7, i_category#13, i_class#12, i_current_price#8, sum#17]
Keys [5]: [i_item_id#11, i_item_desc#7, i_category#13, i_class#12, i_current_price#8]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#18]
Results [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#18,17,2) AS itemrevenue#19, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#18,17,2) AS _w0#20, i_item_id#11]

(20) CometColumnarExchange
Input [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, _w0#20, i_item_id#11]
Arguments: hashpartitioning(i_class#12, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(21) CometSort
Input [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, _w0#20, i_item_id#11]
Arguments: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, _w0#20, i_item_id#11], [i_class#12 ASC NULLS FIRST]

(22) CometColumnarToRow [codegen id : 3]
Input [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, _w0#20, i_item_id#11]

(23) Window
Input [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, _w0#20, i_item_id#11]
Arguments: [sum(_w0#20) windowspecdefinition(i_class#12, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS _we0#21], [i_class#12]

(24) Project [codegen id : 4]
Output [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, ((_w0#20 * 100) / _we0#21) AS revenueratio#22, i_item_id#11]
Input [8]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, _w0#20, i_item_id#11, _we0#21]

(25) CometColumnarExchange
Input [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, revenueratio#22, i_item_id#11]
Arguments: rangepartitioning(i_category#13 ASC NULLS FIRST, i_class#12 ASC NULLS FIRST, i_item_id#11 ASC NULLS FIRST, i_item_desc#7 ASC NULLS FIRST, revenueratio#22 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(26) CometSort
Input [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, revenueratio#22, i_item_id#11]
Arguments: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, revenueratio#22, i_item_id#11], [i_category#13 ASC NULLS FIRST, i_class#12 ASC NULLS FIRST, i_item_id#11 ASC NULLS FIRST, i_item_desc#7 ASC NULLS FIRST, revenueratio#22 ASC NULLS FIRST]

(27) CometProject
Input [7]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, revenueratio#22, i_item_id#11]
Arguments: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, revenueratio#22], [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, revenueratio#22]

(28) CometColumnarToRow [codegen id : 5]
Input [6]: [i_item_desc#7, i_category#13, i_class#12, i_current_price#8, itemrevenue#19, revenueratio#22]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (33)
+- * CometColumnarToRow (32)
   +- CometProject (31)
      +- CometFilter (30)
         +- CometScan parquet spark_catalog.default.date_dim (29)


(29) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-22), LessThanOrEqual(d_date,1999-03-24), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(30) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1999-02-22)) AND (d_date#15 <= 1999-03-24)) AND isnotnull(d_date_sk#14))

(31) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(32) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(33) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]


