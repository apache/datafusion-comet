== Physical Plan ==
TakeOrderedAndProject (65)
+- * HashAggregate (64)
   +- * CometColumnarToRow (63)
      +- CometColumnarExchange (62)
         +- * HashAggregate (61)
            +- Union (60)
               :- * HashAggregate (29)
               :  +- * CometColumnarToRow (28)
               :     +- CometExchange (27)
               :        +- CometHashAggregate (26)
               :           +- CometProject (25)
               :              +- CometBroadcastHashJoin (24)
               :                 :- CometProject (14)
               :                 :  +- CometBroadcastHashJoin (13)
               :                 :     :- CometProject (8)
               :                 :     :  +- CometBroadcastHashJoin (7)
               :                 :     :     :- CometFilter (2)
               :                 :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
               :                 :     :     +- CometBroadcastExchange (6)
               :                 :     :        +- CometProject (5)
               :                 :     :           +- CometFilter (4)
               :                 :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
               :                 :     +- CometBroadcastExchange (12)
               :                 :        +- CometProject (11)
               :                 :           +- CometFilter (10)
               :                 :              +- CometNativeScan parquet spark_catalog.default.customer_address (9)
               :                 +- CometBroadcastExchange (23)
               :                    +- CometProject (22)
               :                       +- CometBroadcastHashJoin (21)
               :                          :- CometFilter (16)
               :                          :  +- CometNativeScan parquet spark_catalog.default.item (15)
               :                          +- CometBroadcastExchange (20)
               :                             +- CometProject (19)
               :                                +- CometFilter (18)
               :                                   +- CometNativeScan parquet spark_catalog.default.item (17)
               :- * HashAggregate (44)
               :  +- * CometColumnarToRow (43)
               :     +- CometExchange (42)
               :        +- CometHashAggregate (41)
               :           +- CometProject (40)
               :              +- CometBroadcastHashJoin (39)
               :                 :- CometProject (37)
               :                 :  +- CometBroadcastHashJoin (36)
               :                 :     :- CometProject (34)
               :                 :     :  +- CometBroadcastHashJoin (33)
               :                 :     :     :- CometFilter (31)
               :                 :     :     :  +- CometNativeScan parquet spark_catalog.default.catalog_sales (30)
               :                 :     :     +- ReusedExchange (32)
               :                 :     +- ReusedExchange (35)
               :                 +- ReusedExchange (38)
               +- * HashAggregate (59)
                  +- * CometColumnarToRow (58)
                     +- CometExchange (57)
                        +- CometHashAggregate (56)
                           +- CometProject (55)
                              +- CometBroadcastHashJoin (54)
                                 :- CometProject (52)
                                 :  +- CometBroadcastHashJoin (51)
                                 :     :- CometProject (49)
                                 :     :  +- CometBroadcastHashJoin (48)
                                 :     :     :- CometFilter (46)
                                 :     :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (45)
                                 :     :     +- ReusedExchange (47)
                                 :     +- ReusedExchange (50)
                                 +- ReusedExchange (53)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#4)]
PushedFilters: [IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_addr_sk#2) AND isnotnull(ss_item_sk#1))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_year#6, d_moy#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,9), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(4) CometFilter
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Condition : ((((isnotnull(d_year#6) AND isnotnull(d_moy#7)) AND (d_year#6 = 1998)) AND (d_moy#7 = 9)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [3]: [d_date_sk#5, d_year#6, d_moy#7]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#4], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, d_date_sk#5]
Arguments: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3], [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]

(9) CometNativeScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#8, ca_gmt_offset#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(10) CometFilter
Input [2]: [ca_address_sk#8, ca_gmt_offset#9]
Condition : ((isnotnull(ca_gmt_offset#9) AND (ca_gmt_offset#9 = -5.00)) AND isnotnull(ca_address_sk#8))

(11) CometProject
Input [2]: [ca_address_sk#8, ca_gmt_offset#9]
Arguments: [ca_address_sk#8], [ca_address_sk#8]

(12) CometBroadcastExchange
Input [1]: [ca_address_sk#8]
Arguments: [ca_address_sk#8]

(13) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]
Right output [1]: [ca_address_sk#8]
Arguments: [ss_addr_sk#2], [ca_address_sk#8], Inner, BuildRight

(14) CometProject
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ca_address_sk#8]
Arguments: [ss_item_sk#1, ss_ext_sales_price#3], [ss_item_sk#1, ss_ext_sales_price#3]

(15) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#10, i_item_id#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(16) CometFilter
Input [2]: [i_item_sk#10, i_item_id#11]
Condition : isnotnull(i_item_sk#10)

(17) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_id#12, i_category#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category)]
ReadSchema: struct<i_item_id:string,i_category:string>

(18) CometFilter
Input [2]: [i_item_id#12, i_category#13]
Condition : (isnotnull(i_category#13) AND (static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#13, 50)) = Music                                             ))

(19) CometProject
Input [2]: [i_item_id#12, i_category#13]
Arguments: [i_item_id#14], [static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#12, 16)) AS i_item_id#14]

(20) CometBroadcastExchange
Input [1]: [i_item_id#14]
Arguments: [i_item_id#14]

(21) CometBroadcastHashJoin
Left output [2]: [i_item_sk#10, i_item_id#11]
Right output [1]: [i_item_id#14]
Arguments: [static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#11, 16))], [i_item_id#14], LeftSemi, BuildRight

(22) CometProject
Input [2]: [i_item_sk#10, i_item_id#11]
Arguments: [i_item_sk#10, i_item_id#15], [i_item_sk#10, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#11, 16)) AS i_item_id#15]

(23) CometBroadcastExchange
Input [2]: [i_item_sk#10, i_item_id#15]
Arguments: [i_item_sk#10, i_item_id#15]

(24) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#1, ss_ext_sales_price#3]
Right output [2]: [i_item_sk#10, i_item_id#15]
Arguments: [ss_item_sk#1], [i_item_sk#10], Inner, BuildRight

(25) CometProject
Input [4]: [ss_item_sk#1, ss_ext_sales_price#3, i_item_sk#10, i_item_id#15]
Arguments: [ss_ext_sales_price#3, i_item_id#15], [ss_ext_sales_price#3, i_item_id#15]

(26) CometHashAggregate
Input [2]: [ss_ext_sales_price#3, i_item_id#15]
Keys [1]: [i_item_id#15]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]

(27) CometExchange
Input [2]: [i_item_id#15, sum#16]
Arguments: hashpartitioning(i_item_id#15, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(28) CometColumnarToRow [codegen id : 1]
Input [2]: [i_item_id#15, sum#16]

(29) HashAggregate [codegen id : 1]
Input [2]: [i_item_id#15, sum#16]
Keys [1]: [i_item_id#15]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#17]
Results [2]: [i_item_id#15 AS i_item_id#18, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#17,17,2) AS total_sales#19]

(30) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#23)]
PushedFilters: [IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(31) CometFilter
Input [4]: [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23]
Condition : (isnotnull(cs_bill_addr_sk#20) AND isnotnull(cs_item_sk#21))

(32) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#24]

(33) CometBroadcastHashJoin
Left output [4]: [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#23], [d_date_sk#24], Inner, BuildRight

(34) CometProject
Input [5]: [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22, cs_sold_date_sk#23, d_date_sk#24]
Arguments: [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22], [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22]

(35) ReusedExchange [Reuses operator id: 12]
Output [1]: [ca_address_sk#25]

(36) CometBroadcastHashJoin
Left output [3]: [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22]
Right output [1]: [ca_address_sk#25]
Arguments: [cs_bill_addr_sk#20], [ca_address_sk#25], Inner, BuildRight

(37) CometProject
Input [4]: [cs_bill_addr_sk#20, cs_item_sk#21, cs_ext_sales_price#22, ca_address_sk#25]
Arguments: [cs_item_sk#21, cs_ext_sales_price#22], [cs_item_sk#21, cs_ext_sales_price#22]

(38) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#26, i_item_id#27]

(39) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#21, cs_ext_sales_price#22]
Right output [2]: [i_item_sk#26, i_item_id#27]
Arguments: [cs_item_sk#21], [i_item_sk#26], Inner, BuildRight

(40) CometProject
Input [4]: [cs_item_sk#21, cs_ext_sales_price#22, i_item_sk#26, i_item_id#27]
Arguments: [cs_ext_sales_price#22, i_item_id#27], [cs_ext_sales_price#22, i_item_id#27]

(41) CometHashAggregate
Input [2]: [cs_ext_sales_price#22, i_item_id#27]
Keys [1]: [i_item_id#27]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#22))]

(42) CometExchange
Input [2]: [i_item_id#27, sum#28]
Arguments: hashpartitioning(i_item_id#27, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(43) CometColumnarToRow [codegen id : 2]
Input [2]: [i_item_id#27, sum#28]

(44) HashAggregate [codegen id : 2]
Input [2]: [i_item_id#27, sum#28]
Keys [1]: [i_item_id#27]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#22))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#22))#29]
Results [2]: [i_item_id#27, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#22))#29,17,2) AS total_sales#30]

(45) CometNativeScan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33, ws_sold_date_sk#34]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#34)]
PushedFilters: [IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(46) CometFilter
Input [4]: [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33, ws_sold_date_sk#34]
Condition : (isnotnull(ws_bill_addr_sk#32) AND isnotnull(ws_item_sk#31))

(47) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#35]

(48) CometBroadcastHashJoin
Left output [4]: [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33, ws_sold_date_sk#34]
Right output [1]: [d_date_sk#35]
Arguments: [ws_sold_date_sk#34], [d_date_sk#35], Inner, BuildRight

(49) CometProject
Input [5]: [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33, ws_sold_date_sk#34, d_date_sk#35]
Arguments: [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33], [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33]

(50) ReusedExchange [Reuses operator id: 12]
Output [1]: [ca_address_sk#36]

(51) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33]
Right output [1]: [ca_address_sk#36]
Arguments: [ws_bill_addr_sk#32], [ca_address_sk#36], Inner, BuildRight

(52) CometProject
Input [4]: [ws_item_sk#31, ws_bill_addr_sk#32, ws_ext_sales_price#33, ca_address_sk#36]
Arguments: [ws_item_sk#31, ws_ext_sales_price#33], [ws_item_sk#31, ws_ext_sales_price#33]

(53) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#37, i_item_id#38]

(54) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#31, ws_ext_sales_price#33]
Right output [2]: [i_item_sk#37, i_item_id#38]
Arguments: [ws_item_sk#31], [i_item_sk#37], Inner, BuildRight

(55) CometProject
Input [4]: [ws_item_sk#31, ws_ext_sales_price#33, i_item_sk#37, i_item_id#38]
Arguments: [ws_ext_sales_price#33, i_item_id#38], [ws_ext_sales_price#33, i_item_id#38]

(56) CometHashAggregate
Input [2]: [ws_ext_sales_price#33, i_item_id#38]
Keys [1]: [i_item_id#38]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#33))]

(57) CometExchange
Input [2]: [i_item_id#38, sum#39]
Arguments: hashpartitioning(i_item_id#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(58) CometColumnarToRow [codegen id : 3]
Input [2]: [i_item_id#38, sum#39]

(59) HashAggregate [codegen id : 3]
Input [2]: [i_item_id#38, sum#39]
Keys [1]: [i_item_id#38]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#33))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#33))#40]
Results [2]: [i_item_id#38, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#33))#40,17,2) AS total_sales#41]

(60) Union

(61) HashAggregate [codegen id : 4]
Input [2]: [i_item_id#18, total_sales#19]
Keys [1]: [i_item_id#18]
Functions [1]: [partial_sum(total_sales#19)]
Aggregate Attributes [2]: [sum#42, isEmpty#43]
Results [3]: [i_item_id#18, sum#44, isEmpty#45]

(62) CometColumnarExchange
Input [3]: [i_item_id#18, sum#44, isEmpty#45]
Arguments: hashpartitioning(i_item_id#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(63) CometColumnarToRow [codegen id : 5]
Input [3]: [i_item_id#18, sum#44, isEmpty#45]

(64) HashAggregate [codegen id : 5]
Input [3]: [i_item_id#18, sum#44, isEmpty#45]
Keys [1]: [i_item_id#18]
Functions [1]: [sum(total_sales#19)]
Aggregate Attributes [1]: [sum(total_sales#19)#46]
Results [2]: [i_item_id#18, sum(total_sales#19)#46 AS total_sales#47]

(65) TakeOrderedAndProject
Input [2]: [i_item_id#18, total_sales#47]
Arguments: 100, [i_item_id#18 ASC NULLS FIRST, total_sales#47 ASC NULLS FIRST], [i_item_id#18, total_sales#47]

