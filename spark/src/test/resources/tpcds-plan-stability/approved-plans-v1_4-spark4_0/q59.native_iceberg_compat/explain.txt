== Physical Plan ==
TakeOrderedAndProject (47)
+- * Project (46)
   +- * BroadcastHashJoin Inner BuildRight (45)
      :- * Project (26)
      :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :- * Project (19)
      :     :  +- * BroadcastHashJoin Inner BuildRight (18)
      :     :     :- * HashAggregate (12)
      :     :     :  +- * CometColumnarToRow (11)
      :     :     :     +- CometExchange (10)
      :     :     :        +- CometHashAggregate (9)
      :     :     :           +- CometProject (8)
      :     :     :              +- CometBroadcastHashJoin (7)
      :     :     :                 :- CometFilter (2)
      :     :     :                 :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (1)
      :     :     :                 +- CometBroadcastExchange (6)
      :     :     :                    +- CometProject (5)
      :     :     :                       +- CometFilter (4)
      :     :     :                          +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (3)
      :     :     +- BroadcastExchange (17)
      :     :        +- * CometColumnarToRow (16)
      :     :           +- CometProject (15)
      :     :              +- CometFilter (14)
      :     :                 +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store (13)
      :     +- BroadcastExchange (24)
      :        +- * CometColumnarToRow (23)
      :           +- CometProject (22)
      :              +- CometFilter (21)
      :                 +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (20)
      +- BroadcastExchange (44)
         +- * Project (43)
            +- * BroadcastHashJoin Inner BuildRight (42)
               :- * Project (36)
               :  +- * BroadcastHashJoin Inner BuildRight (35)
               :     :- * HashAggregate (29)
               :     :  +- * CometColumnarToRow (28)
               :     :     +- ReusedExchange (27)
               :     +- BroadcastExchange (34)
               :        +- * CometColumnarToRow (33)
               :           +- CometProject (32)
               :              +- CometFilter (31)
               :                 +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store (30)
               +- BroadcastExchange (41)
                  +- * CometColumnarToRow (40)
                     +- CometProject (39)
                        +- CometFilter (38)
                           +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (37)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(4) CometFilter
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Condition : (isnotnull(d_date_sk#4) AND isnotnull(d_week_seq#5))

(5) CometProject
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Arguments: [d_date_sk#4, d_week_seq#5, d_day_name#7], [d_date_sk#4, d_week_seq#5, static_invoke(CharVarcharCodegenUtils.readSidePadding(d_day_name#6, 9)) AS d_day_name#7]

(6) CometBroadcastExchange
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [d_date_sk#4, d_week_seq#5, d_day_name#7]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Right output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7], [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7]

(9) CometHashAggregate
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]

(10) CometExchange
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]
Arguments: hashpartitioning(d_week_seq#5, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(11) CometColumnarToRow [codegen id : 6]
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]

(12) HashAggregate [codegen id : 6]
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#15, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#16, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END))#17, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#18, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#19, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#20, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#21]
Results [9]: [d_week_seq#5, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#15,17,2) AS sun_sales#22, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#16,17,2) AS mon_sales#23, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END))#17,17,2) AS tue_sales#24, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#18,17,2) AS wed_sales#25, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#19,17,2) AS thu_sales#26, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#20,17,2) AS fri_sales#27, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#21,17,2) AS sat_sales#28]

(13) CometScan [native_iceberg_compat] parquet spark_catalog.default.store
Output [3]: [s_store_sk#29, s_store_id#30, s_store_name#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(14) CometFilter
Input [3]: [s_store_sk#29, s_store_id#30, s_store_name#31]
Condition : (isnotnull(s_store_sk#29) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(s_store_id#30, 16))))

(15) CometProject
Input [3]: [s_store_sk#29, s_store_id#30, s_store_name#31]
Arguments: [s_store_sk#29, s_store_id#32, s_store_name#31], [s_store_sk#29, static_invoke(CharVarcharCodegenUtils.readSidePadding(s_store_id#30, 16)) AS s_store_id#32, s_store_name#31]

(16) CometColumnarToRow [codegen id : 1]
Input [3]: [s_store_sk#29, s_store_id#32, s_store_name#31]

(17) BroadcastExchange
Input [3]: [s_store_sk#29, s_store_id#32, s_store_name#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#29]
Join type: Inner
Join condition: None

(19) Project [codegen id : 6]
Output [10]: [d_week_seq#5, sun_sales#22, mon_sales#23, tue_sales#24, wed_sales#25, thu_sales#26, fri_sales#27, sat_sales#28, s_store_id#32, s_store_name#31]
Input [12]: [d_week_seq#5, ss_store_sk#1, sun_sales#22, mon_sales#23, tue_sales#24, wed_sales#25, thu_sales#26, fri_sales#27, sat_sales#28, s_store_sk#29, s_store_id#32, s_store_name#31]

(20) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#33, d_week_seq#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(21) CometFilter
Input [2]: [d_month_seq#33, d_week_seq#34]
Condition : (((isnotnull(d_month_seq#33) AND (d_month_seq#33 >= 1212)) AND (d_month_seq#33 <= 1223)) AND isnotnull(d_week_seq#34))

(22) CometProject
Input [2]: [d_month_seq#33, d_week_seq#34]
Arguments: [d_week_seq#34], [d_week_seq#34]

(23) CometColumnarToRow [codegen id : 2]
Input [1]: [d_week_seq#34]

(24) BroadcastExchange
Input [1]: [d_week_seq#34]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(25) BroadcastHashJoin [codegen id : 6]
Left keys [1]: [d_week_seq#5]
Right keys [1]: [d_week_seq#34]
Join type: Inner
Join condition: None

(26) Project [codegen id : 6]
Output [10]: [s_store_name#31 AS s_store_name1#35, d_week_seq#5 AS d_week_seq1#36, s_store_id#32 AS s_store_id1#37, sun_sales#22 AS sun_sales1#38, mon_sales#23 AS mon_sales1#39, tue_sales#24 AS tue_sales1#40, wed_sales#25 AS wed_sales1#41, thu_sales#26 AS thu_sales1#42, fri_sales#27 AS fri_sales1#43, sat_sales#28 AS sat_sales1#44]
Input [11]: [d_week_seq#5, sun_sales#22, mon_sales#23, tue_sales#24, wed_sales#25, thu_sales#26, fri_sales#27, sat_sales#28, s_store_id#32, s_store_name#31, d_week_seq#34]

(27) ReusedExchange [Reuses operator id: 10]
Output [9]: [d_week_seq#45, ss_store_sk#46, sum#47, sum#48, sum#49, sum#50, sum#51, sum#52, sum#53]

(28) CometColumnarToRow [codegen id : 5]
Input [9]: [d_week_seq#45, ss_store_sk#46, sum#47, sum#48, sum#49, sum#50, sum#51, sum#52, sum#53]

(29) HashAggregate [codegen id : 5]
Input [9]: [d_week_seq#45, ss_store_sk#46, sum#47, sum#48, sum#49, sum#50, sum#51, sum#52, sum#53]
Keys [2]: [d_week_seq#45, ss_store_sk#46]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#54 = Sunday   ) THEN ss_sales_price#55 END)), sum(UnscaledValue(CASE WHEN (d_day_name#54 = Monday   ) THEN ss_sales_price#55 END)), sum(UnscaledValue(CASE WHEN (d_day_name#54 = Tuesday  ) THEN ss_sales_price#55 END)), sum(UnscaledValue(CASE WHEN (d_day_name#54 = Wednesday) THEN ss_sales_price#55 END)), sum(UnscaledValue(CASE WHEN (d_day_name#54 = Thursday ) THEN ss_sales_price#55 END)), sum(UnscaledValue(CASE WHEN (d_day_name#54 = Friday   ) THEN ss_sales_price#55 END)), sum(UnscaledValue(CASE WHEN (d_day_name#54 = Saturday ) THEN ss_sales_price#55 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#54 = Sunday   ) THEN ss_sales_price#55 END))#15, sum(UnscaledValue(CASE WHEN (d_day_name#54 = Monday   ) THEN ss_sales_price#55 END))#16, sum(UnscaledValue(CASE WHEN (d_day_name#54 = Tuesday  ) THEN ss_sales_price#55 END))#17, sum(UnscaledValue(CASE WHEN (d_day_name#54 = Wednesday) THEN ss_sales_price#55 END))#18, sum(UnscaledValue(CASE WHEN (d_day_name#54 = Thursday ) THEN ss_sales_price#55 END))#19, sum(UnscaledValue(CASE WHEN (d_day_name#54 = Friday   ) THEN ss_sales_price#55 END))#20, sum(UnscaledValue(CASE WHEN (d_day_name#54 = Saturday ) THEN ss_sales_price#55 END))#21]
Results [9]: [d_week_seq#45, ss_store_sk#46, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#54 = Sunday   ) THEN ss_sales_price#55 END))#15,17,2) AS sun_sales#56, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#54 = Monday   ) THEN ss_sales_price#55 END))#16,17,2) AS mon_sales#57, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#54 = Tuesday  ) THEN ss_sales_price#55 END))#17,17,2) AS tue_sales#58, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#54 = Wednesday) THEN ss_sales_price#55 END))#18,17,2) AS wed_sales#59, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#54 = Thursday ) THEN ss_sales_price#55 END))#19,17,2) AS thu_sales#60, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#54 = Friday   ) THEN ss_sales_price#55 END))#20,17,2) AS fri_sales#61, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#54 = Saturday ) THEN ss_sales_price#55 END))#21,17,2) AS sat_sales#62]

(30) CometScan [native_iceberg_compat] parquet spark_catalog.default.store
Output [2]: [s_store_sk#63, s_store_id#64]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(31) CometFilter
Input [2]: [s_store_sk#63, s_store_id#64]
Condition : (isnotnull(s_store_sk#63) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(s_store_id#64, 16))))

(32) CometProject
Input [2]: [s_store_sk#63, s_store_id#64]
Arguments: [s_store_sk#63, s_store_id#65], [s_store_sk#63, static_invoke(CharVarcharCodegenUtils.readSidePadding(s_store_id#64, 16)) AS s_store_id#65]

(33) CometColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#63, s_store_id#65]

(34) BroadcastExchange
Input [2]: [s_store_sk#63, s_store_id#65]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(35) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#46]
Right keys [1]: [s_store_sk#63]
Join type: Inner
Join condition: None

(36) Project [codegen id : 5]
Output [9]: [d_week_seq#45, sun_sales#56, mon_sales#57, tue_sales#58, wed_sales#59, thu_sales#60, fri_sales#61, sat_sales#62, s_store_id#65]
Input [11]: [d_week_seq#45, ss_store_sk#46, sun_sales#56, mon_sales#57, tue_sales#58, wed_sales#59, thu_sales#60, fri_sales#61, sat_sales#62, s_store_sk#63, s_store_id#65]

(37) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#66, d_week_seq#67]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1224), LessThanOrEqual(d_month_seq,1235), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(38) CometFilter
Input [2]: [d_month_seq#66, d_week_seq#67]
Condition : (((isnotnull(d_month_seq#66) AND (d_month_seq#66 >= 1224)) AND (d_month_seq#66 <= 1235)) AND isnotnull(d_week_seq#67))

(39) CometProject
Input [2]: [d_month_seq#66, d_week_seq#67]
Arguments: [d_week_seq#67], [d_week_seq#67]

(40) CometColumnarToRow [codegen id : 4]
Input [1]: [d_week_seq#67]

(41) BroadcastExchange
Input [1]: [d_week_seq#67]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(42) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [d_week_seq#45]
Right keys [1]: [d_week_seq#67]
Join type: Inner
Join condition: None

(43) Project [codegen id : 5]
Output [9]: [d_week_seq#45 AS d_week_seq2#68, s_store_id#65 AS s_store_id2#69, sun_sales#56 AS sun_sales2#70, mon_sales#57 AS mon_sales2#71, tue_sales#58 AS tue_sales2#72, wed_sales#59 AS wed_sales2#73, thu_sales#60 AS thu_sales2#74, fri_sales#61 AS fri_sales2#75, sat_sales#62 AS sat_sales2#76]
Input [10]: [d_week_seq#45, sun_sales#56, mon_sales#57, tue_sales#58, wed_sales#59, thu_sales#60, fri_sales#61, sat_sales#62, s_store_id#65, d_week_seq#67]

(44) BroadcastExchange
Input [9]: [d_week_seq2#68, s_store_id2#69, sun_sales2#70, mon_sales2#71, tue_sales2#72, wed_sales2#73, thu_sales2#74, fri_sales2#75, sat_sales2#76]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true], (input[0, int, true] - 52)),false), [plan_id=6]

(45) BroadcastHashJoin [codegen id : 6]
Left keys [2]: [s_store_id1#37, d_week_seq1#36]
Right keys [2]: [s_store_id2#69, (d_week_seq2#68 - 52)]
Join type: Inner
Join condition: None

(46) Project [codegen id : 6]
Output [10]: [s_store_name1#35, s_store_id1#37, d_week_seq1#36, (sun_sales1#38 / sun_sales2#70) AS (sun_sales1 / sun_sales2)#77, (mon_sales1#39 / mon_sales2#71) AS (mon_sales1 / mon_sales2)#78, (tue_sales1#40 / tue_sales2#72) AS (tue_sales1 / tue_sales2)#79, (wed_sales1#41 / wed_sales2#73) AS (wed_sales1 / wed_sales2)#80, (thu_sales1#42 / thu_sales2#74) AS (thu_sales1 / thu_sales2)#81, (fri_sales1#43 / fri_sales2#75) AS (fri_sales1 / fri_sales2)#82, (sat_sales1#44 / sat_sales2#76) AS (sat_sales1 / sat_sales2)#83]
Input [19]: [s_store_name1#35, d_week_seq1#36, s_store_id1#37, sun_sales1#38, mon_sales1#39, tue_sales1#40, wed_sales1#41, thu_sales1#42, fri_sales1#43, sat_sales1#44, d_week_seq2#68, s_store_id2#69, sun_sales2#70, mon_sales2#71, tue_sales2#72, wed_sales2#73, thu_sales2#74, fri_sales2#75, sat_sales2#76]

(47) TakeOrderedAndProject
Input [10]: [s_store_name1#35, s_store_id1#37, d_week_seq1#36, (sun_sales1 / sun_sales2)#77, (mon_sales1 / mon_sales2)#78, (tue_sales1 / tue_sales2)#79, (wed_sales1 / wed_sales2)#80, (thu_sales1 / thu_sales2)#81, (fri_sales1 / fri_sales2)#82, (sat_sales1 / sat_sales2)#83]
Arguments: 100, [s_store_name1#35 ASC NULLS FIRST, s_store_id1#37 ASC NULLS FIRST, d_week_seq1#36 ASC NULLS FIRST], [s_store_name1#35, s_store_id1#37, d_week_seq1#36, (sun_sales1 / sun_sales2)#77, (mon_sales1 / mon_sales2)#78, (tue_sales1 / tue_sales2)#79, (wed_sales1 / wed_sales2)#80, (thu_sales1 / thu_sales2)#81, (fri_sales1 / fri_sales2)#82, (sat_sales1 / sat_sales2)#83]

