== Physical Plan ==
TakeOrderedAndProject (45)
+- * Filter (44)
   +- Window (43)
      +- * CometColumnarToRow (42)
         +- CometSort (41)
            +- CometExchange (40)
               +- CometProject (39)
                  +- CometSortMergeJoin (38)
                     :- CometSort (20)
                     :  +- CometColumnarExchange (19)
                     :     +- * Project (18)
                     :        +- Window (17)
                     :           +- * CometColumnarToRow (16)
                     :              +- CometSort (15)
                     :                 +- CometColumnarExchange (14)
                     :                    +- * HashAggregate (13)
                     :                       +- * CometColumnarToRow (12)
                     :                          +- CometColumnarExchange (11)
                     :                             +- * HashAggregate (10)
                     :                                +- * CometColumnarToRow (9)
                     :                                   +- CometProject (8)
                     :                                      +- CometBroadcastHashJoin (7)
                     :                                         :- CometFilter (2)
                     :                                         :  +- CometScan parquet spark_catalog.default.web_sales (1)
                     :                                         +- CometBroadcastExchange (6)
                     :                                            +- CometProject (5)
                     :                                               +- CometFilter (4)
                     :                                                  +- CometScan parquet spark_catalog.default.date_dim (3)
                     +- CometSort (37)
                        +- CometColumnarExchange (36)
                           +- * Project (35)
                              +- Window (34)
                                 +- * CometColumnarToRow (33)
                                    +- CometSort (32)
                                       +- CometColumnarExchange (31)
                                          +- * HashAggregate (30)
                                             +- * CometColumnarToRow (29)
                                                +- CometColumnarExchange (28)
                                                   +- * HashAggregate (27)
                                                      +- * CometColumnarToRow (26)
                                                         +- CometProject (25)
                                                            +- CometBroadcastHashJoin (24)
                                                               :- CometFilter (22)
                                                               :  +- CometScan parquet spark_catalog.default.store_sales (21)
                                                               +- ReusedExchange (23)


(1) CometScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(4) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1200)) AND (d_month_seq#7 <= 1211)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: [d_date_sk#5, d_date#6]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Right output [2]: [d_date_sk#5, d_date#6]
Arguments: [ws_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]
Arguments: [ws_item_sk#1, ws_sales_price#2, d_date#6], [ws_item_sk#1, ws_sales_price#2, d_date#6]

(9) CometColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]

(10) HashAggregate [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#8]
Results [3]: [ws_item_sk#1, d_date#6, sum#9]

(11) CometColumnarExchange
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(12) CometColumnarToRow [codegen id : 2]
Input [3]: [ws_item_sk#1, d_date#6, sum#9]

(13) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, d_date#6, sum#9]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#10]
Results [4]: [ws_item_sk#1 AS item_sk#11, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#10,17,2) AS _w0#12, ws_item_sk#1]

(14) CometColumnarExchange
Input [4]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(15) CometSort
Input [4]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1]
Arguments: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1], [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(16) CometColumnarToRow [codegen id : 3]
Input [4]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1]

(17) Window
Input [4]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1]
Arguments: [sum(_w0#12) windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#13], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(18) Project [codegen id : 4]
Output [3]: [item_sk#11, d_date#6, cume_sales#13]
Input [5]: [item_sk#11, d_date#6, _w0#12, ws_item_sk#1, cume_sales#13]

(19) CometColumnarExchange
Input [3]: [item_sk#11, d_date#6, cume_sales#13]
Arguments: hashpartitioning(item_sk#11, d_date#6, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(20) CometSort
Input [3]: [item_sk#11, d_date#6, cume_sales#13]
Arguments: [item_sk#11, d_date#6, cume_sales#13], [item_sk#11 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST]

(21) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#14, ss_sales_price#15, ss_sold_date_sk#16]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#16), dynamicpruningexpression(ss_sold_date_sk#16 IN dynamicpruning#17)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(22) CometFilter
Input [3]: [ss_item_sk#14, ss_sales_price#15, ss_sold_date_sk#16]
Condition : isnotnull(ss_item_sk#14)

(23) ReusedExchange [Reuses operator id: 6]
Output [2]: [d_date_sk#18, d_date#19]

(24) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#14, ss_sales_price#15, ss_sold_date_sk#16]
Right output [2]: [d_date_sk#18, d_date#19]
Arguments: [ss_sold_date_sk#16], [d_date_sk#18], Inner, BuildRight

(25) CometProject
Input [5]: [ss_item_sk#14, ss_sales_price#15, ss_sold_date_sk#16, d_date_sk#18, d_date#19]
Arguments: [ss_item_sk#14, ss_sales_price#15, d_date#19], [ss_item_sk#14, ss_sales_price#15, d_date#19]

(26) CometColumnarToRow [codegen id : 5]
Input [3]: [ss_item_sk#14, ss_sales_price#15, d_date#19]

(27) HashAggregate [codegen id : 5]
Input [3]: [ss_item_sk#14, ss_sales_price#15, d_date#19]
Keys [2]: [ss_item_sk#14, d_date#19]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#15))]
Aggregate Attributes [1]: [sum#20]
Results [3]: [ss_item_sk#14, d_date#19, sum#21]

(28) CometColumnarExchange
Input [3]: [ss_item_sk#14, d_date#19, sum#21]
Arguments: hashpartitioning(ss_item_sk#14, d_date#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(29) CometColumnarToRow [codegen id : 6]
Input [3]: [ss_item_sk#14, d_date#19, sum#21]

(30) HashAggregate [codegen id : 6]
Input [3]: [ss_item_sk#14, d_date#19, sum#21]
Keys [2]: [ss_item_sk#14, d_date#19]
Functions [1]: [sum(UnscaledValue(ss_sales_price#15))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#15))#22]
Results [4]: [ss_item_sk#14 AS item_sk#23, d_date#19, MakeDecimal(sum(UnscaledValue(ss_sales_price#15))#22,17,2) AS _w0#24, ss_item_sk#14]

(31) CometColumnarExchange
Input [4]: [item_sk#23, d_date#19, _w0#24, ss_item_sk#14]
Arguments: hashpartitioning(ss_item_sk#14, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(32) CometSort
Input [4]: [item_sk#23, d_date#19, _w0#24, ss_item_sk#14]
Arguments: [item_sk#23, d_date#19, _w0#24, ss_item_sk#14], [ss_item_sk#14 ASC NULLS FIRST, d_date#19 ASC NULLS FIRST]

(33) CometColumnarToRow [codegen id : 7]
Input [4]: [item_sk#23, d_date#19, _w0#24, ss_item_sk#14]

(34) Window
Input [4]: [item_sk#23, d_date#19, _w0#24, ss_item_sk#14]
Arguments: [sum(_w0#24) windowspecdefinition(ss_item_sk#14, d_date#19 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#25], [ss_item_sk#14], [d_date#19 ASC NULLS FIRST]

(35) Project [codegen id : 8]
Output [3]: [item_sk#23, d_date#19, cume_sales#25]
Input [5]: [item_sk#23, d_date#19, _w0#24, ss_item_sk#14, cume_sales#25]

(36) CometColumnarExchange
Input [3]: [item_sk#23, d_date#19, cume_sales#25]
Arguments: hashpartitioning(item_sk#23, d_date#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(37) CometSort
Input [3]: [item_sk#23, d_date#19, cume_sales#25]
Arguments: [item_sk#23, d_date#19, cume_sales#25], [item_sk#23 ASC NULLS FIRST, d_date#19 ASC NULLS FIRST]

(38) CometSortMergeJoin
Left output [3]: [item_sk#11, d_date#6, cume_sales#13]
Right output [3]: [item_sk#23, d_date#19, cume_sales#25]
Arguments: [item_sk#11, d_date#6], [item_sk#23, d_date#19], FullOuter

(39) CometProject
Input [6]: [item_sk#11, d_date#6, cume_sales#13, item_sk#23, d_date#19, cume_sales#25]
Arguments: [item_sk#26, d_date#27, web_sales#28, store_sales#29], [CASE WHEN isnotnull(item_sk#11) THEN item_sk#11 ELSE item_sk#23 END AS item_sk#26, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#19 END AS d_date#27, cume_sales#13 AS web_sales#28, cume_sales#25 AS store_sales#29]

(40) CometExchange
Input [4]: [item_sk#26, d_date#27, web_sales#28, store_sales#29]
Arguments: hashpartitioning(item_sk#26, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(41) CometSort
Input [4]: [item_sk#26, d_date#27, web_sales#28, store_sales#29]
Arguments: [item_sk#26, d_date#27, web_sales#28, store_sales#29], [item_sk#26 ASC NULLS FIRST, d_date#27 ASC NULLS FIRST]

(42) CometColumnarToRow [codegen id : 9]
Input [4]: [item_sk#26, d_date#27, web_sales#28, store_sales#29]

(43) Window
Input [4]: [item_sk#26, d_date#27, web_sales#28, store_sales#29]
Arguments: [max(web_sales#28) windowspecdefinition(item_sk#26, d_date#27 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#30, max(store_sales#29) windowspecdefinition(item_sk#26, d_date#27 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#31], [item_sk#26], [d_date#27 ASC NULLS FIRST]

(44) Filter [codegen id : 10]
Input [6]: [item_sk#26, d_date#27, web_sales#28, store_sales#29, web_cumulative#30, store_cumulative#31]
Condition : ((isnotnull(web_cumulative#30) AND isnotnull(store_cumulative#31)) AND (web_cumulative#30 > store_cumulative#31))

(45) TakeOrderedAndProject
Input [6]: [item_sk#26, d_date#27, web_sales#28, store_sales#29, web_cumulative#30, store_cumulative#31]
Arguments: 100, [item_sk#26 ASC NULLS FIRST, d_date#27 ASC NULLS FIRST], [item_sk#26, d_date#27, web_sales#28, store_sales#29, web_cumulative#30, store_cumulative#31]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (50)
+- * CometColumnarToRow (49)
   +- CometProject (48)
      +- CometFilter (47)
         +- CometScan parquet spark_catalog.default.date_dim (46)


(46) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(47) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1200)) AND (d_month_seq#7 <= 1211)) AND isnotnull(d_date_sk#5))

(48) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(49) CometColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#6]

(50) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 21 Hosting Expression = ss_sold_date_sk#16 IN dynamicpruning#4


