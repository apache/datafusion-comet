== Physical Plan ==
TakeOrderedAndProject (39)
+- * HashAggregate (38)
   +- * CometColumnarToRow (37)
      +- CometColumnarExchange (36)
         +- * HashAggregate (35)
            +- * Project (34)
               +- * Filter (33)
                  +- * BroadcastHashJoin ExistenceJoin(exists#1) BuildRight (32)
                     :- * CometColumnarToRow (26)
                     :  +- CometProject (25)
                     :     +- CometBroadcastHashJoin (24)
                     :        :- CometProject (19)
                     :        :  +- CometBroadcastHashJoin (18)
                     :        :     :- CometProject (13)
                     :        :     :  +- CometBroadcastHashJoin (12)
                     :        :     :     :- CometProject (7)
                     :        :     :     :  +- CometBroadcastHashJoin (6)
                     :        :     :     :     :- CometFilter (2)
                     :        :     :     :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (1)
                     :        :     :     :     +- CometBroadcastExchange (5)
                     :        :     :     :        +- CometFilter (4)
                     :        :     :     :           +- CometNativeScan parquet spark_catalog.default.customer (3)
                     :        :     :     +- CometBroadcastExchange (11)
                     :        :     :        +- CometProject (10)
                     :        :     :           +- CometFilter (9)
                     :        :     :              +- CometNativeScan parquet spark_catalog.default.customer_address (8)
                     :        :     +- CometBroadcastExchange (17)
                     :        :        +- CometProject (16)
                     :        :           +- CometFilter (15)
                     :        :              +- CometNativeScan parquet spark_catalog.default.date_dim (14)
                     :        +- CometBroadcastExchange (23)
                     :           +- CometProject (22)
                     :              +- CometFilter (21)
                     :                 +- CometNativeScan parquet spark_catalog.default.item (20)
                     +- BroadcastExchange (31)
                        +- * CometColumnarToRow (30)
                           +- CometProject (29)
                              +- CometFilter (28)
                                 +- CometNativeScan parquet spark_catalog.default.item (27)


(1) CometNativeScan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#5)]
PushedFilters: [IsNotNull(ws_bill_customer_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_customer_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Condition : (isnotnull(ws_bill_customer_sk#3) AND isnotnull(ws_item_sk#2))

(3) CometNativeScan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#6, c_current_addr_sk#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(4) CometFilter
Input [2]: [c_customer_sk#6, c_current_addr_sk#7]
Condition : (isnotnull(c_customer_sk#6) AND isnotnull(c_current_addr_sk#7))

(5) CometBroadcastExchange
Input [2]: [c_customer_sk#6, c_current_addr_sk#7]
Arguments: [c_customer_sk#6, c_current_addr_sk#7]

(6) CometBroadcastHashJoin
Left output [4]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5]
Right output [2]: [c_customer_sk#6, c_current_addr_sk#7]
Arguments: [ws_bill_customer_sk#3], [c_customer_sk#6], Inner, BuildRight

(7) CometProject
Input [6]: [ws_item_sk#2, ws_bill_customer_sk#3, ws_sales_price#4, ws_sold_date_sk#5, c_customer_sk#6, c_current_addr_sk#7]
Arguments: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#7], [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#7]

(8) CometNativeScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_city:string,ca_zip:string>

(9) CometFilter
Input [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]
Condition : isnotnull(ca_address_sk#8)

(10) CometProject
Input [3]: [ca_address_sk#8, ca_city#9, ca_zip#10]
Arguments: [ca_address_sk#8, ca_city#9, ca_zip#11], [ca_address_sk#8, ca_city#9, static_invoke(CharVarcharCodegenUtils.readSidePadding(ca_zip#10, 10)) AS ca_zip#11]

(11) CometBroadcastExchange
Input [3]: [ca_address_sk#8, ca_city#9, ca_zip#11]
Arguments: [ca_address_sk#8, ca_city#9, ca_zip#11]

(12) CometBroadcastHashJoin
Left output [4]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#7]
Right output [3]: [ca_address_sk#8, ca_city#9, ca_zip#11]
Arguments: [c_current_addr_sk#7], [ca_address_sk#8], Inner, BuildRight

(13) CometProject
Input [7]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, c_current_addr_sk#7, ca_address_sk#8, ca_city#9, ca_zip#11]
Arguments: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, ca_city#9, ca_zip#11], [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, ca_city#9, ca_zip#11]

(14) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_qoy), IsNotNull(d_year), EqualTo(d_qoy,2), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_qoy:int>

(15) CometFilter
Input [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Condition : ((((isnotnull(d_qoy#14) AND isnotnull(d_year#13)) AND (d_qoy#14 = 2)) AND (d_year#13 = 2001)) AND isnotnull(d_date_sk#12))

(16) CometProject
Input [3]: [d_date_sk#12, d_year#13, d_qoy#14]
Arguments: [d_date_sk#12], [d_date_sk#12]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#12]
Arguments: [d_date_sk#12]

(18) CometBroadcastHashJoin
Left output [5]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, ca_city#9, ca_zip#11]
Right output [1]: [d_date_sk#12]
Arguments: [ws_sold_date_sk#5], [d_date_sk#12], Inner, BuildRight

(19) CometProject
Input [6]: [ws_item_sk#2, ws_sales_price#4, ws_sold_date_sk#5, ca_city#9, ca_zip#11, d_date_sk#12]
Arguments: [ws_item_sk#2, ws_sales_price#4, ca_city#9, ca_zip#11], [ws_item_sk#2, ws_sales_price#4, ca_city#9, ca_zip#11]

(20) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#15, i_item_id#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(21) CometFilter
Input [2]: [i_item_sk#15, i_item_id#16]
Condition : isnotnull(i_item_sk#15)

(22) CometProject
Input [2]: [i_item_sk#15, i_item_id#16]
Arguments: [i_item_sk#15, i_item_id#17], [i_item_sk#15, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#16, 16)) AS i_item_id#17]

(23) CometBroadcastExchange
Input [2]: [i_item_sk#15, i_item_id#17]
Arguments: [i_item_sk#15, i_item_id#17]

(24) CometBroadcastHashJoin
Left output [4]: [ws_item_sk#2, ws_sales_price#4, ca_city#9, ca_zip#11]
Right output [2]: [i_item_sk#15, i_item_id#17]
Arguments: [ws_item_sk#2], [i_item_sk#15], Inner, BuildRight

(25) CometProject
Input [6]: [ws_item_sk#2, ws_sales_price#4, ca_city#9, ca_zip#11, i_item_sk#15, i_item_id#17]
Arguments: [ws_sales_price#4, ca_city#9, ca_zip#11, i_item_id#17], [ws_sales_price#4, ca_city#9, ca_zip#11, i_item_id#17]

(26) CometColumnarToRow [codegen id : 2]
Input [4]: [ws_sales_price#4, ca_city#9, ca_zip#11, i_item_id#17]

(27) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [In(i_item_sk, [11,13,17,19,2,23,29,3,5,7])]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(28) CometFilter
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : i_item_sk#18 IN (2,3,5,7,11,13,17,19,23,29)

(29) CometProject
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: [i_item_id#20], [static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#19, 16)) AS i_item_id#20]

(30) CometColumnarToRow [codegen id : 1]
Input [1]: [i_item_id#20]

(31) BroadcastExchange
Input [1]: [i_item_id#20]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=1]

(32) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [i_item_id#17]
Right keys [1]: [i_item_id#20]
Join type: ExistenceJoin(exists#1)
Join condition: None

(33) Filter [codegen id : 2]
Input [5]: [ws_sales_price#4, ca_city#9, ca_zip#11, i_item_id#17, exists#1]
Condition : (substr(ca_zip#11, 1, 5) IN (85669,86197,88274,83405,86475,85392,85460,80348,81792) OR exists#1)

(34) Project [codegen id : 2]
Output [3]: [ws_sales_price#4, ca_city#9, ca_zip#11]
Input [5]: [ws_sales_price#4, ca_city#9, ca_zip#11, i_item_id#17, exists#1]

(35) HashAggregate [codegen id : 2]
Input [3]: [ws_sales_price#4, ca_city#9, ca_zip#11]
Keys [2]: [ca_zip#11, ca_city#9]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#4))]
Aggregate Attributes [1]: [sum#21]
Results [3]: [ca_zip#11, ca_city#9, sum#22]

(36) CometColumnarExchange
Input [3]: [ca_zip#11, ca_city#9, sum#22]
Arguments: hashpartitioning(ca_zip#11, ca_city#9, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(37) CometColumnarToRow [codegen id : 3]
Input [3]: [ca_zip#11, ca_city#9, sum#22]

(38) HashAggregate [codegen id : 3]
Input [3]: [ca_zip#11, ca_city#9, sum#22]
Keys [2]: [ca_zip#11, ca_city#9]
Functions [1]: [sum(UnscaledValue(ws_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#4))#23]
Results [3]: [ca_zip#11, ca_city#9, MakeDecimal(sum(UnscaledValue(ws_sales_price#4))#23,17,2) AS sum(ws_sales_price)#24]

(39) TakeOrderedAndProject
Input [3]: [ca_zip#11, ca_city#9, sum(ws_sales_price)#24]
Arguments: 100, [ca_zip#11 ASC NULLS FIRST, ca_city#9 ASC NULLS FIRST], [ca_zip#11, ca_city#9, sum(ws_sales_price)#24]

