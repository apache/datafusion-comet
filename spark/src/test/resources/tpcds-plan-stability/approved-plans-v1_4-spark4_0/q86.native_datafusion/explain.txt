== Physical Plan ==
TakeOrderedAndProject (25)
+- * Project (24)
   +- Window (23)
      +- * CometColumnarToRow (22)
         +- CometSort (21)
            +- CometColumnarExchange (20)
               +- * HashAggregate (19)
                  +- * CometColumnarToRow (18)
                     +- CometExchange (17)
                        +- CometHashAggregate (16)
                           +- CometExpand (15)
                              +- CometProject (14)
                                 +- CometBroadcastHashJoin (13)
                                    :- CometProject (8)
                                    :  +- CometBroadcastHashJoin (7)
                                    :     :- CometFilter (2)
                                    :     :  +- CometNativeScan parquet spark_catalog.default.web_sales (1)
                                    :     +- CometBroadcastExchange (6)
                                    :        +- CometProject (5)
                                    :           +- CometFilter (4)
                                    :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
                                    +- CometBroadcastExchange (12)
                                       +- CometProject (11)
                                          +- CometFilter (10)
                                             +- CometNativeScan parquet spark_catalog.default.item (9)


(1) CometNativeScan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#3)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_net_paid:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#4, d_month_seq#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1200), LessThanOrEqual(d_month_seq,1211), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4], [d_date_sk#4]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: [d_date_sk#4]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3]
Right output [1]: [d_date_sk#4]
Arguments: [ws_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [4]: [ws_item_sk#1, ws_net_paid#2, ws_sold_date_sk#3, d_date_sk#4]
Arguments: [ws_item_sk#1, ws_net_paid#2], [ws_item_sk#1, ws_net_paid#2]

(9) CometNativeScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#6, i_class#7, i_category#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Condition : isnotnull(i_item_sk#6)

(11) CometProject
Input [3]: [i_item_sk#6, i_class#7, i_category#8]
Arguments: [i_item_sk#6, i_class#9, i_category#10], [i_item_sk#6, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_class#7, 50)) AS i_class#9, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#8, 50)) AS i_category#10]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#6, i_class#9, i_category#10]
Arguments: [i_item_sk#6, i_class#9, i_category#10]

(13) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#1, ws_net_paid#2]
Right output [3]: [i_item_sk#6, i_class#9, i_category#10]
Arguments: [ws_item_sk#1], [i_item_sk#6], Inner, BuildRight

(14) CometProject
Input [5]: [ws_item_sk#1, ws_net_paid#2, i_item_sk#6, i_class#9, i_category#10]
Arguments: [ws_net_paid#2, i_category#10, i_class#9], [ws_net_paid#2, i_category#10, i_class#9]

(15) CometExpand
Input [3]: [ws_net_paid#2, i_category#10, i_class#9]
Arguments: [[ws_net_paid#2, i_category#10, i_class#9, 0], [ws_net_paid#2, i_category#10, null, 1], [ws_net_paid#2, null, null, 3]], [ws_net_paid#2, i_category#11, i_class#12, spark_grouping_id#13]

(16) CometHashAggregate
Input [4]: [ws_net_paid#2, i_category#11, i_class#12, spark_grouping_id#13]
Keys [3]: [i_category#11, i_class#12, spark_grouping_id#13]
Functions [1]: [partial_sum(UnscaledValue(ws_net_paid#2))]

(17) CometExchange
Input [4]: [i_category#11, i_class#12, spark_grouping_id#13, sum#14]
Arguments: hashpartitioning(i_category#11, i_class#12, spark_grouping_id#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(18) CometColumnarToRow [codegen id : 1]
Input [4]: [i_category#11, i_class#12, spark_grouping_id#13, sum#14]

(19) HashAggregate [codegen id : 1]
Input [4]: [i_category#11, i_class#12, spark_grouping_id#13, sum#14]
Keys [3]: [i_category#11, i_class#12, spark_grouping_id#13]
Functions [1]: [sum(UnscaledValue(ws_net_paid#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_net_paid#2))#15]
Results [7]: [MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#15,17,2) AS total_sum#16, i_category#11, i_class#12, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS lochierarchy#17, MakeDecimal(sum(UnscaledValue(ws_net_paid#2))#15,17,2) AS _w0#18, (cast((shiftright(spark_grouping_id#13, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint)) AS _w1#19, CASE WHEN (cast((shiftright(spark_grouping_id#13, 0) & 1) as tinyint) = 0) THEN i_category#11 END AS _w2#20]

(20) CometColumnarExchange
Input [7]: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, _w0#18, _w1#19, _w2#20]
Arguments: hashpartitioning(_w1#19, _w2#20, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(21) CometSort
Input [7]: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, _w0#18, _w1#19, _w2#20]
Arguments: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, _w0#18, _w1#19, _w2#20], [_w1#19 ASC NULLS FIRST, _w2#20 ASC NULLS FIRST, _w0#18 DESC NULLS LAST]

(22) CometColumnarToRow [codegen id : 2]
Input [7]: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, _w0#18, _w1#19, _w2#20]

(23) Window
Input [7]: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, _w0#18, _w1#19, _w2#20]
Arguments: [rank(_w0#18) windowspecdefinition(_w1#19, _w2#20, _w0#18 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#21], [_w1#19, _w2#20], [_w0#18 DESC NULLS LAST]

(24) Project [codegen id : 3]
Output [5]: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, rank_within_parent#21]
Input [8]: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, _w0#18, _w1#19, _w2#20, rank_within_parent#21]

(25) TakeOrderedAndProject
Input [5]: [total_sum#16, i_category#11, i_class#12, lochierarchy#17, rank_within_parent#21]
Arguments: 100, [lochierarchy#17 DESC NULLS LAST, CASE WHEN (lochierarchy#17 = 0) THEN i_category#11 END ASC NULLS FIRST, rank_within_parent#21 ASC NULLS FIRST], [total_sum#16, i_category#11, i_class#12, lochierarchy#17, rank_within_parent#21]

