== Physical Plan ==
TakeOrderedAndProject (63)
+- * HashAggregate (62)
   +- Exchange (61)
      +- * HashAggregate (60)
         +- Union (59)
            :- * HashAggregate (28)
            :  +- Exchange (27)
            :     +- * HashAggregate (26)
            :        +- * ColumnarToRow (25)
            :           +- CometProject (24)
            :              +- CometBroadcastHashJoin (23)
            :                 :- CometProject (14)
            :                 :  +- CometBroadcastHashJoin (13)
            :                 :     :- CometProject (8)
            :                 :     :  +- CometBroadcastHashJoin (7)
            :                 :     :     :- CometFilter (2)
            :                 :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
            :                 :     :     +- CometBroadcastExchange (6)
            :                 :     :        +- CometProject (5)
            :                 :     :           +- CometFilter (4)
            :                 :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
            :                 :     +- CometBroadcastExchange (12)
            :                 :        +- CometProject (11)
            :                 :           +- CometFilter (10)
            :                 :              +- CometScan parquet spark_catalog.default.customer_address (9)
            :                 +- CometBroadcastExchange (22)
            :                    +- CometBroadcastHashJoin (21)
            :                       :- CometFilter (16)
            :                       :  +- CometScan parquet spark_catalog.default.item (15)
            :                       +- CometBroadcastExchange (20)
            :                          +- CometProject (19)
            :                             +- CometFilter (18)
            :                                +- CometScan parquet spark_catalog.default.item (17)
            :- * HashAggregate (43)
            :  +- Exchange (42)
            :     +- * HashAggregate (41)
            :        +- * ColumnarToRow (40)
            :           +- CometProject (39)
            :              +- CometBroadcastHashJoin (38)
            :                 :- CometProject (36)
            :                 :  +- CometBroadcastHashJoin (35)
            :                 :     :- CometProject (33)
            :                 :     :  +- CometBroadcastHashJoin (32)
            :                 :     :     :- CometFilter (30)
            :                 :     :     :  +- CometScan parquet spark_catalog.default.catalog_sales (29)
            :                 :     :     +- ReusedExchange (31)
            :                 :     +- ReusedExchange (34)
            :                 +- ReusedExchange (37)
            +- * HashAggregate (58)
               +- Exchange (57)
                  +- * HashAggregate (56)
                     +- * ColumnarToRow (55)
                        +- CometProject (54)
                           +- CometBroadcastHashJoin (53)
                              :- CometProject (51)
                              :  +- CometBroadcastHashJoin (50)
                              :     :- CometProject (48)
                              :     :  +- CometBroadcastHashJoin (47)
                              :     :     :- CometFilter (45)
                              :     :     :  +- CometScan parquet spark_catalog.default.web_sales (44)
                              :     :     +- ReusedExchange (46)
                              :     +- ReusedExchange (49)
                              +- ReusedExchange (52)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_addr_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_addr_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Condition : (isnotnull(ss_addr_sk#2) AND isnotnull(ss_item_sk#1))

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(4) CometFilter
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 1998)) AND (d_moy#8 = 5)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ss_sold_date_sk#4, d_date_sk#6]
Arguments: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3], [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]

(9) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#9, ca_gmt_offset#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_gmt_offset), EqualTo(ca_gmt_offset,-5.00), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_gmt_offset:decimal(5,2)>

(10) CometFilter
Input [2]: [ca_address_sk#9, ca_gmt_offset#10]
Condition : ((isnotnull(ca_gmt_offset#10) AND (ca_gmt_offset#10 = -5.00)) AND isnotnull(ca_address_sk#9))

(11) CometProject
Input [2]: [ca_address_sk#9, ca_gmt_offset#10]
Arguments: [ca_address_sk#9], [ca_address_sk#9]

(12) CometBroadcastExchange
Input [1]: [ca_address_sk#9]
Arguments: [ca_address_sk#9]

(13) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3]
Right output [1]: [ca_address_sk#9]
Arguments: [ss_addr_sk#2], [ca_address_sk#9], Inner, BuildRight

(14) CometProject
Input [4]: [ss_item_sk#1, ss_addr_sk#2, ss_ext_sales_price#3, ca_address_sk#9]
Arguments: [ss_item_sk#1, ss_ext_sales_price#3], [ss_item_sk#1, ss_ext_sales_price#3]

(15) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#11, i_manufact_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(16) CometFilter
Input [2]: [i_item_sk#11, i_manufact_id#12]
Condition : isnotnull(i_item_sk#11)

(17) Scan parquet spark_catalog.default.item
Output [2]: [i_category#13, i_manufact_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_category), EqualTo(i_category,Electronics                                       )]
ReadSchema: struct<i_category:string,i_manufact_id:int>

(18) CometFilter
Input [2]: [i_category#13, i_manufact_id#14]
Condition : (isnotnull(i_category#13) AND (i_category#13 = Electronics                                       ))

(19) CometProject
Input [2]: [i_category#13, i_manufact_id#14]
Arguments: [i_manufact_id#14], [i_manufact_id#14]

(20) CometBroadcastExchange
Input [1]: [i_manufact_id#14]
Arguments: [i_manufact_id#14]

(21) CometBroadcastHashJoin
Left output [2]: [i_item_sk#11, i_manufact_id#12]
Right output [1]: [i_manufact_id#14]
Arguments: [i_manufact_id#12], [i_manufact_id#14], LeftSemi, BuildRight

(22) CometBroadcastExchange
Input [2]: [i_item_sk#11, i_manufact_id#12]
Arguments: [i_item_sk#11, i_manufact_id#12]

(23) CometBroadcastHashJoin
Left output [2]: [ss_item_sk#1, ss_ext_sales_price#3]
Right output [2]: [i_item_sk#11, i_manufact_id#12]
Arguments: [ss_item_sk#1], [i_item_sk#11], Inner, BuildRight

(24) CometProject
Input [4]: [ss_item_sk#1, ss_ext_sales_price#3, i_item_sk#11, i_manufact_id#12]
Arguments: [ss_ext_sales_price#3, i_manufact_id#12], [ss_ext_sales_price#3, i_manufact_id#12]

(25) ColumnarToRow [codegen id : 1]
Input [2]: [ss_ext_sales_price#3, i_manufact_id#12]

(26) HashAggregate [codegen id : 1]
Input [2]: [ss_ext_sales_price#3, i_manufact_id#12]
Keys [1]: [i_manufact_id#12]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [i_manufact_id#12, sum#16]

(27) Exchange
Input [2]: [i_manufact_id#12, sum#16]
Arguments: hashpartitioning(i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(28) HashAggregate [codegen id : 2]
Input [2]: [i_manufact_id#12, sum#16]
Keys [1]: [i_manufact_id#12]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#3))#17]
Results [2]: [i_manufact_id#12, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#17,17,2) AS total_sales#18]

(29) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21, cs_sold_date_sk#22]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#22), dynamicpruningexpression(cs_sold_date_sk#22 IN dynamicpruning#23)]
PushedFilters: [IsNotNull(cs_bill_addr_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_addr_sk:int,cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(30) CometFilter
Input [4]: [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21, cs_sold_date_sk#22]
Condition : (isnotnull(cs_bill_addr_sk#19) AND isnotnull(cs_item_sk#20))

(31) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#24]

(32) CometBroadcastHashJoin
Left output [4]: [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21, cs_sold_date_sk#22]
Right output [1]: [d_date_sk#24]
Arguments: [cs_sold_date_sk#22], [d_date_sk#24], Inner, BuildRight

(33) CometProject
Input [5]: [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21, cs_sold_date_sk#22, d_date_sk#24]
Arguments: [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21], [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21]

(34) ReusedExchange [Reuses operator id: 12]
Output [1]: [ca_address_sk#25]

(35) CometBroadcastHashJoin
Left output [3]: [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21]
Right output [1]: [ca_address_sk#25]
Arguments: [cs_bill_addr_sk#19], [ca_address_sk#25], Inner, BuildRight

(36) CometProject
Input [4]: [cs_bill_addr_sk#19, cs_item_sk#20, cs_ext_sales_price#21, ca_address_sk#25]
Arguments: [cs_item_sk#20, cs_ext_sales_price#21], [cs_item_sk#20, cs_ext_sales_price#21]

(37) ReusedExchange [Reuses operator id: 22]
Output [2]: [i_item_sk#26, i_manufact_id#27]

(38) CometBroadcastHashJoin
Left output [2]: [cs_item_sk#20, cs_ext_sales_price#21]
Right output [2]: [i_item_sk#26, i_manufact_id#27]
Arguments: [cs_item_sk#20], [i_item_sk#26], Inner, BuildRight

(39) CometProject
Input [4]: [cs_item_sk#20, cs_ext_sales_price#21, i_item_sk#26, i_manufact_id#27]
Arguments: [cs_ext_sales_price#21, i_manufact_id#27], [cs_ext_sales_price#21, i_manufact_id#27]

(40) ColumnarToRow [codegen id : 3]
Input [2]: [cs_ext_sales_price#21, i_manufact_id#27]

(41) HashAggregate [codegen id : 3]
Input [2]: [cs_ext_sales_price#21, i_manufact_id#27]
Keys [1]: [i_manufact_id#27]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#21))]
Aggregate Attributes [1]: [sum#28]
Results [2]: [i_manufact_id#27, sum#29]

(42) Exchange
Input [2]: [i_manufact_id#27, sum#29]
Arguments: hashpartitioning(i_manufact_id#27, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(43) HashAggregate [codegen id : 4]
Input [2]: [i_manufact_id#27, sum#29]
Keys [1]: [i_manufact_id#27]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#21))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#21))#30]
Results [2]: [i_manufact_id#27, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#21))#30,17,2) AS total_sales#31]

(44) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34, ws_sold_date_sk#35]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#35), dynamicpruningexpression(ws_sold_date_sk#35 IN dynamicpruning#36)]
PushedFilters: [IsNotNull(ws_bill_addr_sk), IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_bill_addr_sk:int,ws_ext_sales_price:decimal(7,2)>

(45) CometFilter
Input [4]: [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34, ws_sold_date_sk#35]
Condition : (isnotnull(ws_bill_addr_sk#33) AND isnotnull(ws_item_sk#32))

(46) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#37]

(47) CometBroadcastHashJoin
Left output [4]: [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34, ws_sold_date_sk#35]
Right output [1]: [d_date_sk#37]
Arguments: [ws_sold_date_sk#35], [d_date_sk#37], Inner, BuildRight

(48) CometProject
Input [5]: [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34, ws_sold_date_sk#35, d_date_sk#37]
Arguments: [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34], [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34]

(49) ReusedExchange [Reuses operator id: 12]
Output [1]: [ca_address_sk#38]

(50) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34]
Right output [1]: [ca_address_sk#38]
Arguments: [ws_bill_addr_sk#33], [ca_address_sk#38], Inner, BuildRight

(51) CometProject
Input [4]: [ws_item_sk#32, ws_bill_addr_sk#33, ws_ext_sales_price#34, ca_address_sk#38]
Arguments: [ws_item_sk#32, ws_ext_sales_price#34], [ws_item_sk#32, ws_ext_sales_price#34]

(52) ReusedExchange [Reuses operator id: 22]
Output [2]: [i_item_sk#39, i_manufact_id#40]

(53) CometBroadcastHashJoin
Left output [2]: [ws_item_sk#32, ws_ext_sales_price#34]
Right output [2]: [i_item_sk#39, i_manufact_id#40]
Arguments: [ws_item_sk#32], [i_item_sk#39], Inner, BuildRight

(54) CometProject
Input [4]: [ws_item_sk#32, ws_ext_sales_price#34, i_item_sk#39, i_manufact_id#40]
Arguments: [ws_ext_sales_price#34, i_manufact_id#40], [ws_ext_sales_price#34, i_manufact_id#40]

(55) ColumnarToRow [codegen id : 5]
Input [2]: [ws_ext_sales_price#34, i_manufact_id#40]

(56) HashAggregate [codegen id : 5]
Input [2]: [ws_ext_sales_price#34, i_manufact_id#40]
Keys [1]: [i_manufact_id#40]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#34))]
Aggregate Attributes [1]: [sum#41]
Results [2]: [i_manufact_id#40, sum#42]

(57) Exchange
Input [2]: [i_manufact_id#40, sum#42]
Arguments: hashpartitioning(i_manufact_id#40, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(58) HashAggregate [codegen id : 6]
Input [2]: [i_manufact_id#40, sum#42]
Keys [1]: [i_manufact_id#40]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#34))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#34))#43]
Results [2]: [i_manufact_id#40, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#34))#43,17,2) AS total_sales#44]

(59) Union

(60) HashAggregate [codegen id : 7]
Input [2]: [i_manufact_id#12, total_sales#18]
Keys [1]: [i_manufact_id#12]
Functions [1]: [partial_sum(total_sales#18)]
Aggregate Attributes [2]: [sum#45, isEmpty#46]
Results [3]: [i_manufact_id#12, sum#47, isEmpty#48]

(61) Exchange
Input [3]: [i_manufact_id#12, sum#47, isEmpty#48]
Arguments: hashpartitioning(i_manufact_id#12, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(62) HashAggregate [codegen id : 8]
Input [3]: [i_manufact_id#12, sum#47, isEmpty#48]
Keys [1]: [i_manufact_id#12]
Functions [1]: [sum(total_sales#18)]
Aggregate Attributes [1]: [sum(total_sales#18)#49]
Results [2]: [i_manufact_id#12, sum(total_sales#18)#49 AS total_sales#50]

(63) TakeOrderedAndProject
Input [2]: [i_manufact_id#12, total_sales#50]
Arguments: 100, [total_sales#50 ASC NULLS FIRST], [i_manufact_id#12, total_sales#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (68)
+- * ColumnarToRow (67)
   +- CometProject (66)
      +- CometFilter (65)
         +- CometScan parquet spark_catalog.default.date_dim (64)


(64) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#6, d_year#7, d_moy#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), IsNotNull(d_moy), EqualTo(d_year,1998), EqualTo(d_moy,5), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(65) CometFilter
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Condition : ((((isnotnull(d_year#7) AND isnotnull(d_moy#8)) AND (d_year#7 = 1998)) AND (d_moy#8 = 5)) AND isnotnull(d_date_sk#6))

(66) CometProject
Input [3]: [d_date_sk#6, d_year#7, d_moy#8]
Arguments: [d_date_sk#6], [d_date_sk#6]

(67) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(68) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

Subquery:2 Hosting operator id = 29 Hosting Expression = cs_sold_date_sk#22 IN dynamicpruning#5

Subquery:3 Hosting operator id = 44 Hosting Expression = ws_sold_date_sk#35 IN dynamicpruning#5


