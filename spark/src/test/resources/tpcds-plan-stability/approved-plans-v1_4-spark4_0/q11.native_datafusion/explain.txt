== Physical Plan ==
TakeOrderedAndProject (72)
+- * Project (71)
   +- * BroadcastHashJoin Inner BuildRight (70)
      :- * Project (55)
      :  +- * BroadcastHashJoin Inner BuildRight (54)
      :     :- * Project (36)
      :     :  +- * BroadcastHashJoin Inner BuildRight (35)
      :     :     :- * Filter (18)
      :     :     :  +- * HashAggregate (17)
      :     :     :     +- * CometColumnarToRow (16)
      :     :     :        +- CometExchange (15)
      :     :     :           +- CometHashAggregate (14)
      :     :     :              +- CometProject (13)
      :     :     :                 +- CometBroadcastHashJoin (12)
      :     :     :                    :- CometProject (8)
      :     :     :                    :  +- CometBroadcastHashJoin (7)
      :     :     :                    :     :- CometProject (3)
      :     :     :                    :     :  +- CometFilter (2)
      :     :     :                    :     :     +- CometNativeScan parquet spark_catalog.default.customer (1)
      :     :     :                    :     +- CometBroadcastExchange (6)
      :     :     :                    :        +- CometFilter (5)
      :     :     :                    :           +- CometNativeScan parquet spark_catalog.default.store_sales (4)
      :     :     :                    +- CometBroadcastExchange (11)
      :     :     :                       +- CometFilter (10)
      :     :     :                          +- CometNativeScan parquet spark_catalog.default.date_dim (9)
      :     :     +- BroadcastExchange (34)
      :     :        +- * HashAggregate (33)
      :     :           +- * CometColumnarToRow (32)
      :     :              +- CometExchange (31)
      :     :                 +- CometHashAggregate (30)
      :     :                    +- CometProject (29)
      :     :                       +- CometBroadcastHashJoin (28)
      :     :                          :- CometProject (24)
      :     :                          :  +- CometBroadcastHashJoin (23)
      :     :                          :     :- CometProject (21)
      :     :                          :     :  +- CometFilter (20)
      :     :                          :     :     +- CometNativeScan parquet spark_catalog.default.customer (19)
      :     :                          :     +- ReusedExchange (22)
      :     :                          +- CometBroadcastExchange (27)
      :     :                             +- CometFilter (26)
      :     :                                +- CometNativeScan parquet spark_catalog.default.date_dim (25)
      :     +- BroadcastExchange (53)
      :        +- * Filter (52)
      :           +- * HashAggregate (51)
      :              +- * CometColumnarToRow (50)
      :                 +- CometExchange (49)
      :                    +- CometHashAggregate (48)
      :                       +- CometProject (47)
      :                          +- CometBroadcastHashJoin (46)
      :                             :- CometProject (44)
      :                             :  +- CometBroadcastHashJoin (43)
      :                             :     :- CometProject (39)
      :                             :     :  +- CometFilter (38)
      :                             :     :     +- CometNativeScan parquet spark_catalog.default.customer (37)
      :                             :     +- CometBroadcastExchange (42)
      :                             :        +- CometFilter (41)
      :                             :           +- CometNativeScan parquet spark_catalog.default.web_sales (40)
      :                             +- ReusedExchange (45)
      +- BroadcastExchange (69)
         +- * HashAggregate (68)
            +- * CometColumnarToRow (67)
               +- CometExchange (66)
                  +- CometHashAggregate (65)
                     +- CometProject (64)
                        +- CometBroadcastHashJoin (63)
                           :- CometProject (61)
                           :  +- CometBroadcastHashJoin (60)
                           :     :- CometProject (58)
                           :     :  +- CometFilter (57)
                           :     :     +- CometNativeScan parquet spark_catalog.default.customer (56)
                           :     +- ReusedExchange (59)
                           +- ReusedExchange (62)


(1) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) CometFilter
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#2, 16))))

(3) CometProject
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14], [c_customer_sk#1, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#2, 16)) AS c_customer_id#9, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#3, 20)) AS c_first_name#10, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#4, 30)) AS c_last_name#11, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_preferred_cust_flag#5, 1)) AS c_preferred_cust_flag#12, c_birth_country#6, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_login#7, 13)) AS c_login#13, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_email_address#8, 50)) AS c_email_address#14]

(4) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#18)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Condition : isnotnull(ss_customer_sk#15)

(6) CometBroadcastExchange
Input [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Arguments: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]

(7) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14]
Right output [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Arguments: [c_customer_sk#1], [ss_customer_sk#15], Inner, BuildRight

(8) CometProject
Input [12]: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Arguments: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18], [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#19, d_year#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#19, d_year#20]
Condition : ((isnotnull(d_year#20) AND (d_year#20 = 2001)) AND isnotnull(d_date_sk#19))

(11) CometBroadcastExchange
Input [2]: [d_date_sk#19, d_year#20]
Arguments: [d_date_sk#19, d_year#20]

(12) CometBroadcastHashJoin
Left output [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Right output [2]: [d_date_sk#19, d_year#20]
Arguments: [ss_sold_date_sk#18], [d_date_sk#19], Inner, BuildRight

(13) CometProject
Input [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18, d_date_sk#19, d_year#20]
Arguments: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, d_year#20], [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, d_year#20]

(14) CometHashAggregate
Input [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, d_year#20]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#17 - ss_ext_discount_amt#16)))]

(15) CometExchange
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, sum#21]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(16) CometColumnarToRow [codegen id : 4]
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, sum#21]

(17) HashAggregate [codegen id : 4]
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, sum#21]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#17 - ss_ext_discount_amt#16)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#17 - ss_ext_discount_amt#16)))#22]
Results [2]: [c_customer_id#9 AS customer_id#23, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#17 - ss_ext_discount_amt#16)))#22,18,2) AS year_total#24]

(18) Filter [codegen id : 4]
Input [2]: [customer_id#23, year_total#24]
Condition : (isnotnull(year_total#24) AND (year_total#24 > 0.00))

(19) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#25, c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(20) CometFilter
Input [8]: [c_customer_sk#25, c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32]
Condition : (isnotnull(c_customer_sk#25) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#26, 16))))

(21) CometProject
Input [8]: [c_customer_sk#25, c_customer_id#26, c_first_name#27, c_last_name#28, c_preferred_cust_flag#29, c_birth_country#30, c_login#31, c_email_address#32]
Arguments: [c_customer_sk#25, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38], [c_customer_sk#25, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#26, 16)) AS c_customer_id#33, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#27, 20)) AS c_first_name#34, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#28, 30)) AS c_last_name#35, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_preferred_cust_flag#29, 1)) AS c_preferred_cust_flag#36, c_birth_country#30, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_login#31, 13)) AS c_login#37, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_email_address#32, 50)) AS c_email_address#38]

(22) ReusedExchange [Reuses operator id: 6]
Output [4]: [ss_customer_sk#39, ss_ext_discount_amt#40, ss_ext_list_price#41, ss_sold_date_sk#42]

(23) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#25, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38]
Right output [4]: [ss_customer_sk#39, ss_ext_discount_amt#40, ss_ext_list_price#41, ss_sold_date_sk#42]
Arguments: [c_customer_sk#25], [ss_customer_sk#39], Inner, BuildRight

(24) CometProject
Input [12]: [c_customer_sk#25, c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_customer_sk#39, ss_ext_discount_amt#40, ss_ext_list_price#41, ss_sold_date_sk#42]
Arguments: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_ext_discount_amt#40, ss_ext_list_price#41, ss_sold_date_sk#42], [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_ext_discount_amt#40, ss_ext_list_price#41, ss_sold_date_sk#42]

(25) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#43, d_year#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(26) CometFilter
Input [2]: [d_date_sk#43, d_year#44]
Condition : ((isnotnull(d_year#44) AND (d_year#44 = 2002)) AND isnotnull(d_date_sk#43))

(27) CometBroadcastExchange
Input [2]: [d_date_sk#43, d_year#44]
Arguments: [d_date_sk#43, d_year#44]

(28) CometBroadcastHashJoin
Left output [10]: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_ext_discount_amt#40, ss_ext_list_price#41, ss_sold_date_sk#42]
Right output [2]: [d_date_sk#43, d_year#44]
Arguments: [ss_sold_date_sk#42], [d_date_sk#43], Inner, BuildRight

(29) CometProject
Input [12]: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_ext_discount_amt#40, ss_ext_list_price#41, ss_sold_date_sk#42, d_date_sk#43, d_year#44]
Arguments: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_ext_discount_amt#40, ss_ext_list_price#41, d_year#44], [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_ext_discount_amt#40, ss_ext_list_price#41, d_year#44]

(30) CometHashAggregate
Input [10]: [c_customer_id#33, c_first_name#34, c_last_name#35, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, ss_ext_discount_amt#40, ss_ext_list_price#41, d_year#44]
Keys [8]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#44, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#41 - ss_ext_discount_amt#40)))]

(31) CometExchange
Input [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#44, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, sum#45]
Arguments: hashpartitioning(c_customer_id#33, c_first_name#34, c_last_name#35, d_year#44, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(32) CometColumnarToRow [codegen id : 1]
Input [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#44, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, sum#45]

(33) HashAggregate [codegen id : 1]
Input [9]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#44, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38, sum#45]
Keys [8]: [c_customer_id#33, c_first_name#34, c_last_name#35, d_year#44, c_preferred_cust_flag#36, c_birth_country#30, c_login#37, c_email_address#38]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#41 - ss_ext_discount_amt#40)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ss_ext_list_price#41 - ss_ext_discount_amt#40)))#22]
Results [3]: [c_customer_id#33 AS customer_id#46, c_preferred_cust_flag#36 AS customer_preferred_cust_flag#47, MakeDecimal(sum(UnscaledValue((ss_ext_list_price#41 - ss_ext_discount_amt#40)))#22,18,2) AS year_total#48]

(34) BroadcastExchange
Input [3]: [customer_id#46, customer_preferred_cust_flag#47, year_total#48]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#46]
Join type: Inner
Join condition: None

(36) Project [codegen id : 4]
Output [4]: [customer_id#23, year_total#24, customer_preferred_cust_flag#47, year_total#48]
Input [5]: [customer_id#23, year_total#24, customer_id#46, customer_preferred_cust_flag#47, year_total#48]

(37) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#49, c_customer_id#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_country#54, c_login#55, c_email_address#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(38) CometFilter
Input [8]: [c_customer_sk#49, c_customer_id#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_country#54, c_login#55, c_email_address#56]
Condition : (isnotnull(c_customer_sk#49) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#50, 16))))

(39) CometProject
Input [8]: [c_customer_sk#49, c_customer_id#50, c_first_name#51, c_last_name#52, c_preferred_cust_flag#53, c_birth_country#54, c_login#55, c_email_address#56]
Arguments: [c_customer_sk#49, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62], [c_customer_sk#49, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#50, 16)) AS c_customer_id#57, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#51, 20)) AS c_first_name#58, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#52, 30)) AS c_last_name#59, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_preferred_cust_flag#53, 1)) AS c_preferred_cust_flag#60, c_birth_country#54, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_login#55, 13)) AS c_login#61, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_email_address#56, 50)) AS c_email_address#62]

(40) CometNativeScan parquet spark_catalog.default.web_sales
Output [4]: [ws_bill_customer_sk#63, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#66)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(41) CometFilter
Input [4]: [ws_bill_customer_sk#63, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]
Condition : isnotnull(ws_bill_customer_sk#63)

(42) CometBroadcastExchange
Input [4]: [ws_bill_customer_sk#63, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]
Arguments: [ws_bill_customer_sk#63, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]

(43) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#49, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62]
Right output [4]: [ws_bill_customer_sk#63, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]
Arguments: [c_customer_sk#49], [ws_bill_customer_sk#63], Inner, BuildRight

(44) CometProject
Input [12]: [c_customer_sk#49, c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_bill_customer_sk#63, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]
Arguments: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66], [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]

(45) ReusedExchange [Reuses operator id: 11]
Output [2]: [d_date_sk#67, d_year#68]

(46) CometBroadcastHashJoin
Left output [10]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66]
Right output [2]: [d_date_sk#67, d_year#68]
Arguments: [ws_sold_date_sk#66], [d_date_sk#67], Inner, BuildRight

(47) CometProject
Input [12]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_ext_discount_amt#64, ws_ext_list_price#65, ws_sold_date_sk#66, d_date_sk#67, d_year#68]
Arguments: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_ext_discount_amt#64, ws_ext_list_price#65, d_year#68], [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_ext_discount_amt#64, ws_ext_list_price#65, d_year#68]

(48) CometHashAggregate
Input [10]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, ws_ext_discount_amt#64, ws_ext_list_price#65, d_year#68]
Keys [8]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, d_year#68]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#65 - ws_ext_discount_amt#64)))]

(49) CometExchange
Input [9]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, d_year#68, sum#69]
Arguments: hashpartitioning(c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, d_year#68, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(50) CometColumnarToRow [codegen id : 2]
Input [9]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, d_year#68, sum#69]

(51) HashAggregate [codegen id : 2]
Input [9]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, d_year#68, sum#69]
Keys [8]: [c_customer_id#57, c_first_name#58, c_last_name#59, c_preferred_cust_flag#60, c_birth_country#54, c_login#61, c_email_address#62, d_year#68]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#65 - ws_ext_discount_amt#64)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#65 - ws_ext_discount_amt#64)))#70]
Results [2]: [c_customer_id#57 AS customer_id#71, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#65 - ws_ext_discount_amt#64)))#70,18,2) AS year_total#72]

(52) Filter [codegen id : 2]
Input [2]: [customer_id#71, year_total#72]
Condition : (isnotnull(year_total#72) AND (year_total#72 > 0.00))

(53) BroadcastExchange
Input [2]: [customer_id#71, year_total#72]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(54) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#71]
Join type: Inner
Join condition: None

(55) Project [codegen id : 4]
Output [5]: [customer_id#23, year_total#24, customer_preferred_cust_flag#47, year_total#48, year_total#72]
Input [6]: [customer_id#23, year_total#24, customer_preferred_cust_flag#47, year_total#48, customer_id#71, year_total#72]

(56) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#73, c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(57) CometFilter
Input [8]: [c_customer_sk#73, c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80]
Condition : (isnotnull(c_customer_sk#73) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#74, 16))))

(58) CometProject
Input [8]: [c_customer_sk#73, c_customer_id#74, c_first_name#75, c_last_name#76, c_preferred_cust_flag#77, c_birth_country#78, c_login#79, c_email_address#80]
Arguments: [c_customer_sk#73, c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86], [c_customer_sk#73, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_customer_id#74, 16)) AS c_customer_id#81, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#75, 20)) AS c_first_name#82, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#76, 30)) AS c_last_name#83, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_preferred_cust_flag#77, 1)) AS c_preferred_cust_flag#84, c_birth_country#78, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_login#79, 13)) AS c_login#85, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_email_address#80, 50)) AS c_email_address#86]

(59) ReusedExchange [Reuses operator id: 42]
Output [4]: [ws_bill_customer_sk#87, ws_ext_discount_amt#88, ws_ext_list_price#89, ws_sold_date_sk#90]

(60) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#73, c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86]
Right output [4]: [ws_bill_customer_sk#87, ws_ext_discount_amt#88, ws_ext_list_price#89, ws_sold_date_sk#90]
Arguments: [c_customer_sk#73], [ws_bill_customer_sk#87], Inner, BuildRight

(61) CometProject
Input [12]: [c_customer_sk#73, c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_bill_customer_sk#87, ws_ext_discount_amt#88, ws_ext_list_price#89, ws_sold_date_sk#90]
Arguments: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_ext_discount_amt#88, ws_ext_list_price#89, ws_sold_date_sk#90], [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_ext_discount_amt#88, ws_ext_list_price#89, ws_sold_date_sk#90]

(62) ReusedExchange [Reuses operator id: 27]
Output [2]: [d_date_sk#91, d_year#92]

(63) CometBroadcastHashJoin
Left output [10]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_ext_discount_amt#88, ws_ext_list_price#89, ws_sold_date_sk#90]
Right output [2]: [d_date_sk#91, d_year#92]
Arguments: [ws_sold_date_sk#90], [d_date_sk#91], Inner, BuildRight

(64) CometProject
Input [12]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_ext_discount_amt#88, ws_ext_list_price#89, ws_sold_date_sk#90, d_date_sk#91, d_year#92]
Arguments: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_ext_discount_amt#88, ws_ext_list_price#89, d_year#92], [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_ext_discount_amt#88, ws_ext_list_price#89, d_year#92]

(65) CometHashAggregate
Input [10]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, ws_ext_discount_amt#88, ws_ext_list_price#89, d_year#92]
Keys [8]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, d_year#92]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#89 - ws_ext_discount_amt#88)))]

(66) CometExchange
Input [9]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, d_year#92, sum#93]
Arguments: hashpartitioning(c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, d_year#92, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(67) CometColumnarToRow [codegen id : 3]
Input [9]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, d_year#92, sum#93]

(68) HashAggregate [codegen id : 3]
Input [9]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, d_year#92, sum#93]
Keys [8]: [c_customer_id#81, c_first_name#82, c_last_name#83, c_preferred_cust_flag#84, c_birth_country#78, c_login#85, c_email_address#86, d_year#92]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#89 - ws_ext_discount_amt#88)))]
Aggregate Attributes [1]: [sum(UnscaledValue((ws_ext_list_price#89 - ws_ext_discount_amt#88)))#70]
Results [2]: [c_customer_id#81 AS customer_id#94, MakeDecimal(sum(UnscaledValue((ws_ext_list_price#89 - ws_ext_discount_amt#88)))#70,18,2) AS year_total#95]

(69) BroadcastExchange
Input [2]: [customer_id#94, year_total#95]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=7]

(70) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [customer_id#23]
Right keys [1]: [customer_id#94]
Join type: Inner
Join condition: (CASE WHEN (year_total#72 > 0.00) THEN (year_total#95 / year_total#72) END > CASE WHEN (year_total#24 > 0.00) THEN (year_total#48 / year_total#24) END)

(71) Project [codegen id : 4]
Output [1]: [customer_preferred_cust_flag#47]
Input [7]: [customer_id#23, year_total#24, customer_preferred_cust_flag#47, year_total#48, year_total#72, customer_id#94, year_total#95]

(72) TakeOrderedAndProject
Input [1]: [customer_preferred_cust_flag#47]
Arguments: 100, [customer_preferred_cust_flag#47 ASC NULLS FIRST], [customer_preferred_cust_flag#47]

