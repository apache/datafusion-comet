== Physical Plan ==
TakeOrderedAndProject (54)
+- * Project (53)
   +- * BroadcastHashJoin Inner BuildRight (52)
      :- * Project (37)
      :  +- * BroadcastHashJoin Inner BuildRight (36)
      :     :- * Filter (21)
      :     :  +- * HashAggregate (20)
      :     :     +- * CometColumnarToRow (19)
      :     :        +- CometExchange (18)
      :     :           +- CometHashAggregate (17)
      :     :              +- CometProject (16)
      :     :                 +- CometBroadcastHashJoin (15)
      :     :                    :- CometProject (8)
      :     :                    :  +- CometBroadcastHashJoin (7)
      :     :                    :     :- CometFilter (2)
      :     :                    :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales (1)
      :     :                    :     +- CometBroadcastExchange (6)
      :     :                    :        +- CometProject (5)
      :     :                    :           +- CometFilter (4)
      :     :                    :              +- CometScan [native_iceberg_compat] parquet spark_catalog.default.item (3)
      :     :                    +- CometBroadcastExchange (14)
      :     :                       +- CometProject (13)
      :     :                          +- CometBroadcastHashJoin (12)
      :     :                             :- CometFilter (10)
      :     :                             :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (9)
      :     :                             +- ReusedExchange (11)
      :     +- BroadcastExchange (35)
      :        +- * Filter (34)
      :           +- * HashAggregate (33)
      :              +- * CometColumnarToRow (32)
      :                 +- CometExchange (31)
      :                    +- CometHashAggregate (30)
      :                       +- CometProject (29)
      :                          +- CometBroadcastHashJoin (28)
      :                             :- CometProject (26)
      :                             :  +- CometBroadcastHashJoin (25)
      :                             :     :- CometFilter (23)
      :                             :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales (22)
      :                             :     +- ReusedExchange (24)
      :                             +- ReusedExchange (27)
      +- BroadcastExchange (51)
         +- * Filter (50)
            +- * HashAggregate (49)
               +- * CometColumnarToRow (48)
                  +- CometExchange (47)
                     +- CometHashAggregate (46)
                        +- CometProject (45)
                           +- CometBroadcastHashJoin (44)
                              :- CometProject (42)
                              :  +- CometBroadcastHashJoin (41)
                              :     :- CometFilter (39)
                              :     :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales (38)
                              :     +- ReusedExchange (40)
                              +- ReusedExchange (43)


(1) CometScan [native_iceberg_compat] parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_item_sk#1)

(3) CometScan [native_iceberg_compat] parquet spark_catalog.default.item
Output [2]: [i_item_sk#5, i_item_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(4) CometFilter
Input [2]: [i_item_sk#5, i_item_id#6]
Condition : (isnotnull(i_item_sk#5) AND isnotnull(static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#6, 16))))

(5) CometProject
Input [2]: [i_item_sk#5, i_item_id#6]
Arguments: [i_item_sk#5, i_item_id#7], [i_item_sk#5, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_item_id#6, 16)) AS i_item_id#7]

(6) CometBroadcastExchange
Input [2]: [i_item_sk#5, i_item_id#7]
Arguments: [i_item_sk#5, i_item_id#7]

(7) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Right output [2]: [i_item_sk#5, i_item_id#7]
Arguments: [ss_item_sk#1], [i_item_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#5, i_item_id#7]
Arguments: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7], [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7]

(9) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(10) CometFilter
Input [2]: [d_date_sk#8, d_date#9]
Condition : isnotnull(d_date_sk#8)

(11) ReusedExchange [Reuses operator id: 60]
Output [1]: [d_date#10]

(12) CometBroadcastHashJoin
Left output [2]: [d_date_sk#8, d_date#9]
Right output [1]: [d_date#10]
Arguments: [d_date#9], [d_date#10], LeftSemi, BuildRight

(13) CometProject
Input [2]: [d_date_sk#8, d_date#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(14) CometBroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: [d_date_sk#8]

(15) CometBroadcastHashJoin
Left output [3]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7]
Right output [1]: [d_date_sk#8]
Arguments: [ss_sold_date_sk#3], [d_date_sk#8], Inner, BuildRight

(16) CometProject
Input [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_id#7, d_date_sk#8]
Arguments: [ss_ext_sales_price#2, i_item_id#7], [ss_ext_sales_price#2, i_item_id#7]

(17) CometHashAggregate
Input [2]: [ss_ext_sales_price#2, i_item_id#7]
Keys [1]: [i_item_id#7]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]

(18) CometExchange
Input [2]: [i_item_id#7, sum#11]
Arguments: hashpartitioning(i_item_id#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(19) CometColumnarToRow [codegen id : 3]
Input [2]: [i_item_id#7, sum#11]

(20) HashAggregate [codegen id : 3]
Input [2]: [i_item_id#7, sum#11]
Keys [1]: [i_item_id#7]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#12]
Results [2]: [i_item_id#7 AS item_id#13, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#12,17,2) AS ss_item_rev#14]

(21) Filter [codegen id : 3]
Input [2]: [item_id#13, ss_item_rev#14]
Condition : isnotnull(ss_item_rev#14)

(22) CometScan [native_iceberg_compat] parquet spark_catalog.default.catalog_sales
Output [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#17), dynamicpruningexpression(cs_sold_date_sk#17 IN dynamicpruning#18)]
PushedFilters: [IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_item_sk:int,cs_ext_sales_price:decimal(7,2)>

(23) CometFilter
Input [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Condition : isnotnull(cs_item_sk#15)

(24) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#19, i_item_id#20]

(25) CometBroadcastHashJoin
Left output [3]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17]
Right output [2]: [i_item_sk#19, i_item_id#20]
Arguments: [cs_item_sk#15], [i_item_sk#19], Inner, BuildRight

(26) CometProject
Input [5]: [cs_item_sk#15, cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_sk#19, i_item_id#20]
Arguments: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20], [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20]

(27) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#21]

(28) CometBroadcastHashJoin
Left output [3]: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20]
Right output [1]: [d_date_sk#21]
Arguments: [cs_sold_date_sk#17], [d_date_sk#21], Inner, BuildRight

(29) CometProject
Input [4]: [cs_ext_sales_price#16, cs_sold_date_sk#17, i_item_id#20, d_date_sk#21]
Arguments: [cs_ext_sales_price#16, i_item_id#20], [cs_ext_sales_price#16, i_item_id#20]

(30) CometHashAggregate
Input [2]: [cs_ext_sales_price#16, i_item_id#20]
Keys [1]: [i_item_id#20]
Functions [1]: [partial_sum(UnscaledValue(cs_ext_sales_price#16))]

(31) CometExchange
Input [2]: [i_item_id#20, sum#22]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(32) CometColumnarToRow [codegen id : 1]
Input [2]: [i_item_id#20, sum#22]

(33) HashAggregate [codegen id : 1]
Input [2]: [i_item_id#20, sum#22]
Keys [1]: [i_item_id#20]
Functions [1]: [sum(UnscaledValue(cs_ext_sales_price#16))]
Aggregate Attributes [1]: [sum(UnscaledValue(cs_ext_sales_price#16))#23]
Results [2]: [i_item_id#20 AS item_id#24, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#16))#23,17,2) AS cs_item_rev#25]

(34) Filter [codegen id : 1]
Input [2]: [item_id#24, cs_item_rev#25]
Condition : isnotnull(cs_item_rev#25)

(35) BroadcastExchange
Input [2]: [item_id#24, cs_item_rev#25]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=3]

(36) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#24]
Join type: Inner
Join condition: ((((cast(ss_item_rev#14 as decimal(19,3)) >= (0.9 * cs_item_rev#25)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= (1.1 * cs_item_rev#25))) AND (cast(cs_item_rev#25 as decimal(19,3)) >= (0.9 * ss_item_rev#14))) AND (cast(cs_item_rev#25 as decimal(20,3)) <= (1.1 * ss_item_rev#14)))

(37) Project [codegen id : 3]
Output [3]: [item_id#13, ss_item_rev#14, cs_item_rev#25]
Input [4]: [item_id#13, ss_item_rev#14, item_id#24, cs_item_rev#25]

(38) CometScan [native_iceberg_compat] parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#28), dynamicpruningexpression(ws_sold_date_sk#28 IN dynamicpruning#29)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_sales_price:decimal(7,2)>

(39) CometFilter
Input [3]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28]
Condition : isnotnull(ws_item_sk#26)

(40) ReusedExchange [Reuses operator id: 6]
Output [2]: [i_item_sk#30, i_item_id#31]

(41) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28]
Right output [2]: [i_item_sk#30, i_item_id#31]
Arguments: [ws_item_sk#26], [i_item_sk#30], Inner, BuildRight

(42) CometProject
Input [5]: [ws_item_sk#26, ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_sk#30, i_item_id#31]
Arguments: [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#31], [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#31]

(43) ReusedExchange [Reuses operator id: 14]
Output [1]: [d_date_sk#32]

(44) CometBroadcastHashJoin
Left output [3]: [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#31]
Right output [1]: [d_date_sk#32]
Arguments: [ws_sold_date_sk#28], [d_date_sk#32], Inner, BuildRight

(45) CometProject
Input [4]: [ws_ext_sales_price#27, ws_sold_date_sk#28, i_item_id#31, d_date_sk#32]
Arguments: [ws_ext_sales_price#27, i_item_id#31], [ws_ext_sales_price#27, i_item_id#31]

(46) CometHashAggregate
Input [2]: [ws_ext_sales_price#27, i_item_id#31]
Keys [1]: [i_item_id#31]
Functions [1]: [partial_sum(UnscaledValue(ws_ext_sales_price#27))]

(47) CometExchange
Input [2]: [i_item_id#31, sum#33]
Arguments: hashpartitioning(i_item_id#31, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(48) CometColumnarToRow [codegen id : 2]
Input [2]: [i_item_id#31, sum#33]

(49) HashAggregate [codegen id : 2]
Input [2]: [i_item_id#31, sum#33]
Keys [1]: [i_item_id#31]
Functions [1]: [sum(UnscaledValue(ws_ext_sales_price#27))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_sales_price#27))#34]
Results [2]: [i_item_id#31 AS item_id#35, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#27))#34,17,2) AS ws_item_rev#36]

(50) Filter [codegen id : 2]
Input [2]: [item_id#35, ws_item_rev#36]
Condition : isnotnull(ws_item_rev#36)

(51) BroadcastExchange
Input [2]: [item_id#35, ws_item_rev#36]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=5]

(52) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [item_id#13]
Right keys [1]: [item_id#35]
Join type: Inner
Join condition: ((((((((cast(ss_item_rev#14 as decimal(19,3)) >= (0.9 * ws_item_rev#36)) AND (cast(ss_item_rev#14 as decimal(20,3)) <= (1.1 * ws_item_rev#36))) AND (cast(cs_item_rev#25 as decimal(19,3)) >= (0.9 * ws_item_rev#36))) AND (cast(cs_item_rev#25 as decimal(20,3)) <= (1.1 * ws_item_rev#36))) AND (cast(ws_item_rev#36 as decimal(19,3)) >= (0.9 * ss_item_rev#14))) AND (cast(ws_item_rev#36 as decimal(20,3)) <= (1.1 * ss_item_rev#14))) AND (cast(ws_item_rev#36 as decimal(19,3)) >= (0.9 * cs_item_rev#25))) AND (cast(ws_item_rev#36 as decimal(20,3)) <= (1.1 * cs_item_rev#25)))

(53) Project [codegen id : 3]
Output [8]: [item_id#13, ss_item_rev#14, (((ss_item_rev#14 / ((ss_item_rev#14 + cs_item_rev#25) + ws_item_rev#36)) / 3) * 100) AS ss_dev#37, cs_item_rev#25, (((cs_item_rev#25 / ((ss_item_rev#14 + cs_item_rev#25) + ws_item_rev#36)) / 3) * 100) AS cs_dev#38, ws_item_rev#36, (((ws_item_rev#36 / ((ss_item_rev#14 + cs_item_rev#25) + ws_item_rev#36)) / 3) * 100) AS ws_dev#39, (((ss_item_rev#14 + cs_item_rev#25) + ws_item_rev#36) / 3) AS average#40]
Input [5]: [item_id#13, ss_item_rev#14, cs_item_rev#25, item_id#35, ws_item_rev#36]

(54) TakeOrderedAndProject
Input [8]: [item_id#13, ss_item_rev#14, ss_dev#37, cs_item_rev#25, cs_dev#38, ws_item_rev#36, ws_dev#39, average#40]
Arguments: 100, [item_id#13 ASC NULLS FIRST, ss_item_rev#14 ASC NULLS FIRST], [item_id#13, ss_item_rev#14, ss_dev#37, cs_item_rev#25, cs_dev#38, ws_item_rev#36, ws_dev#39, average#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (64)
+- * CometColumnarToRow (63)
   +- CometProject (62)
      +- CometBroadcastHashJoin (61)
         :- CometFilter (56)
         :  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (55)
         +- CometBroadcastExchange (60)
            +- CometProject (59)
               +- CometFilter (58)
                  +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (57)


(55) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#8, d_date#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(56) CometFilter
Input [2]: [d_date_sk#8, d_date#9]
Condition : isnotnull(d_date_sk#8)

(57) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date#10, d_week_seq#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_week_seq), EqualTo(d_week_seq,ScalarSubquery#42)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(58) CometFilter
Input [2]: [d_date#10, d_week_seq#41]
Condition : (isnotnull(d_week_seq#41) AND (d_week_seq#41 = ReusedSubquery Subquery scalar-subquery#42, [id=#43]))

(59) CometProject
Input [2]: [d_date#10, d_week_seq#41]
Arguments: [d_date#10], [d_date#10]

(60) CometBroadcastExchange
Input [1]: [d_date#10]
Arguments: [d_date#10]

(61) CometBroadcastHashJoin
Left output [2]: [d_date_sk#8, d_date#9]
Right output [1]: [d_date#10]
Arguments: [d_date#9], [d_date#10], LeftSemi, BuildRight

(62) CometProject
Input [2]: [d_date_sk#8, d_date#9]
Arguments: [d_date_sk#8], [d_date_sk#8]

(63) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#8]

(64) BroadcastExchange
Input [1]: [d_date_sk#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:2 Hosting operator id = 58 Hosting Expression = ReusedSubquery Subquery scalar-subquery#42, [id=#43]

Subquery:3 Hosting operator id = 57 Hosting Expression = Subquery scalar-subquery#42, [id=#43]
* CometColumnarToRow (68)
+- CometProject (67)
   +- CometFilter (66)
      +- CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim (65)


(65) CometScan [native_iceberg_compat] parquet spark_catalog.default.date_dim
Output [2]: [d_date#44, d_week_seq#45]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), EqualTo(d_date,2000-01-03)]
ReadSchema: struct<d_date:date,d_week_seq:int>

(66) CometFilter
Input [2]: [d_date#44, d_week_seq#45]
Condition : (isnotnull(d_date#44) AND (d_date#44 = 2000-01-03))

(67) CometProject
Input [2]: [d_date#44, d_week_seq#45]
Arguments: [d_week_seq#45], [d_week_seq#45]

(68) CometColumnarToRow [codegen id : 1]
Input [1]: [d_week_seq#45]

Subquery:4 Hosting operator id = 22 Hosting Expression = cs_sold_date_sk#17 IN dynamicpruning#4

Subquery:5 Hosting operator id = 38 Hosting Expression = ws_sold_date_sk#28 IN dynamicpruning#4


