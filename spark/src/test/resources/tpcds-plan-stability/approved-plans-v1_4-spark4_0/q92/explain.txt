== Physical Plan ==
* HashAggregate (31)
+- Exchange (30)
   +- * HashAggregate (29)
      +- * Project (28)
         +- * BroadcastHashJoin Inner BuildRight (27)
            :- * Project (25)
            :  +- * BroadcastHashJoin Inner BuildRight (24)
            :     :- * ColumnarToRow (9)
            :     :  +- CometProject (8)
            :     :     +- CometBroadcastHashJoin (7)
            :     :        :- CometFilter (2)
            :     :        :  +- CometScan parquet spark_catalog.default.web_sales (1)
            :     :        +- CometBroadcastExchange (6)
            :     :           +- CometProject (5)
            :     :              +- CometFilter (4)
            :     :                 +- CometScan parquet spark_catalog.default.item (3)
            :     +- BroadcastExchange (23)
            :        +- * Filter (22)
            :           +- * HashAggregate (21)
            :              +- Exchange (20)
            :                 +- * HashAggregate (19)
            :                    +- * ColumnarToRow (18)
            :                       +- CometProject (17)
            :                          +- CometBroadcastHashJoin (16)
            :                             :- CometFilter (11)
            :                             :  +- CometScan parquet spark_catalog.default.web_sales (10)
            :                             +- CometBroadcastExchange (15)
            :                                +- CometProject (14)
            :                                   +- CometFilter (13)
            :                                      +- CometScan parquet spark_catalog.default.date_dim (12)
            +- ReusedExchange (26)


(1) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_ext_discount_amt)]
ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3]
Condition : (isnotnull(ws_item_sk#1) AND isnotnull(ws_ext_discount_amt#2))

(3) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#5, i_manufact_id#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manufact_id), EqualTo(i_manufact_id,350), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_manufact_id:int>

(4) CometFilter
Input [2]: [i_item_sk#5, i_manufact_id#6]
Condition : ((isnotnull(i_manufact_id#6) AND (i_manufact_id#6 = 350)) AND isnotnull(i_item_sk#5))

(5) CometProject
Input [2]: [i_item_sk#5, i_manufact_id#6]
Arguments: [i_item_sk#5], [i_item_sk#5]

(6) CometBroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: [i_item_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3]
Right output [1]: [i_item_sk#5]
Arguments: [ws_item_sk#1], [i_item_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ws_item_sk#1, ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5]
Arguments: [ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5], [ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5]

(9) ColumnarToRow [codegen id : 4]
Input [3]: [ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5]

(10) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#7, ws_ext_discount_amt#8, ws_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#9), dynamicpruningexpression(ws_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_ext_discount_amt:decimal(7,2)>

(11) CometFilter
Input [3]: [ws_item_sk#7, ws_ext_discount_amt#8, ws_sold_date_sk#9]
Condition : isnotnull(ws_item_sk#7)

(12) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#11, d_date#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) CometFilter
Input [2]: [d_date_sk#11, d_date#12]
Condition : (((isnotnull(d_date#12) AND (d_date#12 >= 2000-01-27)) AND (d_date#12 <= 2000-04-26)) AND isnotnull(d_date_sk#11))

(14) CometProject
Input [2]: [d_date_sk#11, d_date#12]
Arguments: [d_date_sk#11], [d_date_sk#11]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: [d_date_sk#11]

(16) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#7, ws_ext_discount_amt#8, ws_sold_date_sk#9]
Right output [1]: [d_date_sk#11]
Arguments: [ws_sold_date_sk#9], [d_date_sk#11], Inner, BuildRight

(17) CometProject
Input [4]: [ws_item_sk#7, ws_ext_discount_amt#8, ws_sold_date_sk#9, d_date_sk#11]
Arguments: [ws_item_sk#7, ws_ext_discount_amt#8], [ws_item_sk#7, ws_ext_discount_amt#8]

(18) ColumnarToRow [codegen id : 1]
Input [2]: [ws_item_sk#7, ws_ext_discount_amt#8]

(19) HashAggregate [codegen id : 1]
Input [2]: [ws_item_sk#7, ws_ext_discount_amt#8]
Keys [1]: [ws_item_sk#7]
Functions [1]: [partial_avg(UnscaledValue(ws_ext_discount_amt#8))]
Aggregate Attributes [2]: [sum#13, count#14]
Results [3]: [ws_item_sk#7, sum#15, count#16]

(20) Exchange
Input [3]: [ws_item_sk#7, sum#15, count#16]
Arguments: hashpartitioning(ws_item_sk#7, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(21) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#7, sum#15, count#16]
Keys [1]: [ws_item_sk#7]
Functions [1]: [avg(UnscaledValue(ws_ext_discount_amt#8))]
Aggregate Attributes [1]: [avg(UnscaledValue(ws_ext_discount_amt#8))#17]
Results [2]: [(1.3 * cast((avg(UnscaledValue(ws_ext_discount_amt#8))#17 / 100.0) as decimal(11,6))) AS (1.3 * avg(ws_ext_discount_amt))#18, ws_item_sk#7]

(22) Filter [codegen id : 2]
Input [2]: [(1.3 * avg(ws_ext_discount_amt))#18, ws_item_sk#7]
Condition : isnotnull((1.3 * avg(ws_ext_discount_amt))#18)

(23) BroadcastExchange
Input [2]: [(1.3 * avg(ws_ext_discount_amt))#18, ws_item_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=2]

(24) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [i_item_sk#5]
Right keys [1]: [ws_item_sk#7]
Join type: Inner
Join condition: (cast(ws_ext_discount_amt#2 as decimal(14,7)) > (1.3 * avg(ws_ext_discount_amt))#18)

(25) Project [codegen id : 4]
Output [2]: [ws_ext_discount_amt#2, ws_sold_date_sk#3]
Input [5]: [ws_ext_discount_amt#2, ws_sold_date_sk#3, i_item_sk#5, (1.3 * avg(ws_ext_discount_amt))#18, ws_item_sk#7]

(26) ReusedExchange [Reuses operator id: 36]
Output [1]: [d_date_sk#19]

(27) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ws_sold_date_sk#3]
Right keys [1]: [d_date_sk#19]
Join type: Inner
Join condition: None

(28) Project [codegen id : 4]
Output [1]: [ws_ext_discount_amt#2]
Input [3]: [ws_ext_discount_amt#2, ws_sold_date_sk#3, d_date_sk#19]

(29) HashAggregate [codegen id : 4]
Input [1]: [ws_ext_discount_amt#2]
Keys: []
Functions [1]: [partial_sum(UnscaledValue(ws_ext_discount_amt#2))]
Aggregate Attributes [1]: [sum#20]
Results [1]: [sum#21]

(30) Exchange
Input [1]: [sum#21]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=3]

(31) HashAggregate [codegen id : 5]
Input [1]: [sum#21]
Keys: []
Functions [1]: [sum(UnscaledValue(ws_ext_discount_amt#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_ext_discount_amt#2))#22]
Results [1]: [MakeDecimal(sum(UnscaledValue(ws_ext_discount_amt#2))#22,17,2) AS Excess Discount Amount #23]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (36)
+- * ColumnarToRow (35)
   +- CometProject (34)
      +- CometFilter (33)
         +- CometScan parquet spark_catalog.default.date_dim (32)


(32) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#19, d_date#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-01-27), LessThanOrEqual(d_date,2000-04-26), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(33) CometFilter
Input [2]: [d_date_sk#19, d_date#24]
Condition : (((isnotnull(d_date#24) AND (d_date#24 >= 2000-01-27)) AND (d_date#24 <= 2000-04-26)) AND isnotnull(d_date_sk#19))

(34) CometProject
Input [2]: [d_date_sk#19, d_date#24]
Arguments: [d_date_sk#19], [d_date_sk#19]

(35) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#19]

(36) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 10 Hosting Expression = ws_sold_date_sk#9 IN dynamicpruning#4


