== Physical Plan ==
TakeOrderedAndProject (34)
+- * HashAggregate (33)
   +- * CometColumnarToRow (32)
      +- CometColumnarExchange (31)
         +- * HashAggregate (30)
            +- * CometColumnarToRow (29)
               +- CometProject (28)
                  +- CometBroadcastHashJoin (27)
                     :- CometProject (23)
                     :  +- CometBroadcastHashJoin (22)
                     :     :- CometProject (17)
                     :     :  +- CometBroadcastHashJoin (16)
                     :     :     :- CometProject (11)
                     :     :     :  +- CometSortMergeJoin (10)
                     :     :     :     :- CometSort (4)
                     :     :     :     :  +- CometExchange (3)
                     :     :     :     :     +- CometFilter (2)
                     :     :     :     :        +- CometScan parquet spark_catalog.default.catalog_sales (1)
                     :     :     :     +- CometSort (9)
                     :     :     :        +- CometExchange (8)
                     :     :     :           +- CometProject (7)
                     :     :     :              +- CometFilter (6)
                     :     :     :                 +- CometScan parquet spark_catalog.default.catalog_returns (5)
                     :     :     +- CometBroadcastExchange (15)
                     :     :        +- CometProject (14)
                     :     :           +- CometFilter (13)
                     :     :              +- CometScan parquet spark_catalog.default.warehouse (12)
                     :     +- CometBroadcastExchange (21)
                     :        +- CometProject (20)
                     :           +- CometFilter (19)
                     :              +- CometScan parquet spark_catalog.default.item (18)
                     +- CometBroadcastExchange (26)
                        +- CometFilter (25)
                           +- CometScan parquet spark_catalog.default.date_dim (24)


(1) CometScan parquet spark_catalog.default.catalog_sales
Output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#5), dynamicpruningexpression(cs_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(cs_warehouse_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_warehouse_sk:int,cs_item_sk:int,cs_order_number:int,cs_sales_price:decimal(7,2)>

(2) CometFilter
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Condition : (isnotnull(cs_warehouse_sk#1) AND isnotnull(cs_item_sk#2))

(3) CometExchange
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: hashpartitioning(cs_order_number#3, cs_item_sk#2, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Arguments: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5], [cs_order_number#3 ASC NULLS FIRST, cs_item_sk#2 ASC NULLS FIRST]

(5) CometScan parquet spark_catalog.default.catalog_returns
Output [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_order_number), IsNotNull(cr_item_sk)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_refunded_cash:decimal(7,2)>

(6) CometFilter
Input [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Condition : (isnotnull(cr_order_number#8) AND isnotnull(cr_item_sk#7))

(7) CometProject
Input [4]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9, cr_returned_date_sk#10]
Arguments: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9], [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]

(8) CometExchange
Input [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: hashpartitioning(cr_order_number#8, cr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9], [cr_order_number#8 ASC NULLS FIRST, cr_item_sk#7 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5]
Right output [3]: [cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cs_order_number#3, cs_item_sk#2], [cr_order_number#8, cr_item_sk#7], LeftOuter

(11) CometProject
Input [8]: [cs_warehouse_sk#1, cs_item_sk#2, cs_order_number#3, cs_sales_price#4, cs_sold_date_sk#5, cr_item_sk#7, cr_order_number#8, cr_refunded_cash#9]
Arguments: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9], [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9]

(12) CometScan parquet spark_catalog.default.warehouse
Output [2]: [w_warehouse_sk#11, w_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/warehouse]
PushedFilters: [IsNotNull(w_warehouse_sk)]
ReadSchema: struct<w_warehouse_sk:int,w_state:string>

(13) CometFilter
Input [2]: [w_warehouse_sk#11, w_state#12]
Condition : isnotnull(w_warehouse_sk#11)

(14) CometProject
Input [2]: [w_warehouse_sk#11, w_state#12]
Arguments: [w_warehouse_sk#11, w_state#13], [w_warehouse_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, w_state#12, 2, true, false, true) AS w_state#13]

(15) CometBroadcastExchange
Input [2]: [w_warehouse_sk#11, w_state#13]
Arguments: [w_warehouse_sk#11, w_state#13]

(16) CometBroadcastHashJoin
Left output [5]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9]
Right output [2]: [w_warehouse_sk#11, w_state#13]
Arguments: [cs_warehouse_sk#1], [w_warehouse_sk#11], Inner, BuildRight

(17) CometProject
Input [7]: [cs_warehouse_sk#1, cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_warehouse_sk#11, w_state#13]
Arguments: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13], [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13]

(18) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#14, i_item_id#15, i_current_price#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThanOrEqual(i_current_price,0.99), LessThanOrEqual(i_current_price,1.49), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string,i_current_price:decimal(7,2)>

(19) CometFilter
Input [3]: [i_item_sk#14, i_item_id#15, i_current_price#16]
Condition : (((isnotnull(i_current_price#16) AND (i_current_price#16 >= 0.99)) AND (i_current_price#16 <= 1.49)) AND isnotnull(i_item_sk#14))

(20) CometProject
Input [3]: [i_item_sk#14, i_item_id#15, i_current_price#16]
Arguments: [i_item_sk#14, i_item_id#17], [i_item_sk#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#15, 16, true, false, true) AS i_item_id#17]

(21) CometBroadcastExchange
Input [2]: [i_item_sk#14, i_item_id#17]
Arguments: [i_item_sk#14, i_item_id#17]

(22) CometBroadcastHashJoin
Left output [5]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13]
Right output [2]: [i_item_sk#14, i_item_id#17]
Arguments: [cs_item_sk#2], [i_item_sk#14], Inner, BuildRight

(23) CometProject
Input [7]: [cs_item_sk#2, cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13, i_item_sk#14, i_item_id#17]
Arguments: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13, i_item_id#17], [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13, i_item_id#17]

(24) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#18, d_date#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(25) CometFilter
Input [2]: [d_date_sk#18, d_date#19]
Condition : (((isnotnull(d_date#19) AND (d_date#19 >= 2000-02-10)) AND (d_date#19 <= 2000-04-10)) AND isnotnull(d_date_sk#18))

(26) CometBroadcastExchange
Input [2]: [d_date_sk#18, d_date#19]
Arguments: [d_date_sk#18, d_date#19]

(27) CometBroadcastHashJoin
Left output [5]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13, i_item_id#17]
Right output [2]: [d_date_sk#18, d_date#19]
Arguments: [cs_sold_date_sk#5], [d_date_sk#18], Inner, BuildRight

(28) CometProject
Input [7]: [cs_sales_price#4, cs_sold_date_sk#5, cr_refunded_cash#9, w_state#13, i_item_id#17, d_date_sk#18, d_date#19]
Arguments: [cs_sales_price#4, cr_refunded_cash#9, w_state#13, i_item_id#17, d_date#19], [cs_sales_price#4, cr_refunded_cash#9, w_state#13, i_item_id#17, d_date#19]

(29) CometColumnarToRow [codegen id : 1]
Input [5]: [cs_sales_price#4, cr_refunded_cash#9, w_state#13, i_item_id#17, d_date#19]

(30) HashAggregate [codegen id : 1]
Input [5]: [cs_sales_price#4, cr_refunded_cash#9, w_state#13, i_item_id#17, d_date#19]
Keys [2]: [w_state#13, i_item_id#17]
Functions [2]: [partial_sum(CASE WHEN (d_date#19 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END), partial_sum(CASE WHEN (d_date#19 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)]
Aggregate Attributes [4]: [sum#20, isEmpty#21, sum#22, isEmpty#23]
Results [6]: [w_state#13, i_item_id#17, sum#24, isEmpty#25, sum#26, isEmpty#27]

(31) CometColumnarExchange
Input [6]: [w_state#13, i_item_id#17, sum#24, isEmpty#25, sum#26, isEmpty#27]
Arguments: hashpartitioning(w_state#13, i_item_id#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(32) CometColumnarToRow [codegen id : 2]
Input [6]: [w_state#13, i_item_id#17, sum#24, isEmpty#25, sum#26, isEmpty#27]

(33) HashAggregate [codegen id : 2]
Input [6]: [w_state#13, i_item_id#17, sum#24, isEmpty#25, sum#26, isEmpty#27]
Keys [2]: [w_state#13, i_item_id#17]
Functions [2]: [sum(CASE WHEN (d_date#19 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END), sum(CASE WHEN (d_date#19 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)]
Aggregate Attributes [2]: [sum(CASE WHEN (d_date#19 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)#28, sum(CASE WHEN (d_date#19 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)#29]
Results [4]: [w_state#13, i_item_id#17, sum(CASE WHEN (d_date#19 < 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)#28 AS sales_before#30, sum(CASE WHEN (d_date#19 >= 2000-03-11) THEN (cs_sales_price#4 - coalesce(cast(cr_refunded_cash#9 as decimal(12,2)), 0.00)) ELSE 0.00 END)#29 AS sales_after#31]

(34) TakeOrderedAndProject
Input [4]: [w_state#13, i_item_id#17, sales_before#30, sales_after#31]
Arguments: 100, [w_state#13 ASC NULLS FIRST, i_item_id#17 ASC NULLS FIRST], [w_state#13, i_item_id#17, sales_before#30, sales_after#31]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (38)
+- * CometColumnarToRow (37)
   +- CometFilter (36)
      +- CometScan parquet spark_catalog.default.date_dim (35)


(35) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#18, d_date#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-02-10), LessThanOrEqual(d_date,2000-04-10), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(36) CometFilter
Input [2]: [d_date_sk#18, d_date#19]
Condition : (((isnotnull(d_date#19) AND (d_date#19 >= 2000-02-10)) AND (d_date#19 <= 2000-04-10)) AND isnotnull(d_date_sk#18))

(37) CometColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#18, d_date#19]

(38) BroadcastExchange
Input [2]: [d_date_sk#18, d_date#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]


