== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- * BroadcastHashJoin Inner BuildRight (46)
      :- * Project (27)
      :  +- * BroadcastHashJoin Inner BuildRight (26)
      :     :- * Project (20)
      :     :  +- * BroadcastHashJoin Inner BuildRight (19)
      :     :     :- * HashAggregate (13)
      :     :     :  +- * CometColumnarToRow (12)
      :     :     :     +- CometColumnarExchange (11)
      :     :     :        +- * HashAggregate (10)
      :     :     :           +- * CometColumnarToRow (9)
      :     :     :              +- CometProject (8)
      :     :     :                 +- CometBroadcastHashJoin (7)
      :     :     :                    :- CometFilter (2)
      :     :     :                    :  +- CometScan parquet spark_catalog.default.store_sales (1)
      :     :     :                    +- CometBroadcastExchange (6)
      :     :     :                       +- CometProject (5)
      :     :     :                          +- CometFilter (4)
      :     :     :                             +- CometScan parquet spark_catalog.default.date_dim (3)
      :     :     +- BroadcastExchange (18)
      :     :        +- * CometColumnarToRow (17)
      :     :           +- CometProject (16)
      :     :              +- CometFilter (15)
      :     :                 +- CometScan parquet spark_catalog.default.store (14)
      :     +- BroadcastExchange (25)
      :        +- * CometColumnarToRow (24)
      :           +- CometProject (23)
      :              +- CometFilter (22)
      :                 +- CometScan parquet spark_catalog.default.date_dim (21)
      +- BroadcastExchange (45)
         +- * Project (44)
            +- * BroadcastHashJoin Inner BuildRight (43)
               :- * Project (37)
               :  +- * BroadcastHashJoin Inner BuildRight (36)
               :     :- * HashAggregate (30)
               :     :  +- * CometColumnarToRow (29)
               :     :     +- ReusedExchange (28)
               :     +- BroadcastExchange (35)
               :        +- * CometColumnarToRow (34)
               :           +- CometProject (33)
               :              +- CometFilter (32)
               :                 +- CometScan parquet spark_catalog.default.store (31)
               +- BroadcastExchange (42)
                  +- * CometColumnarToRow (41)
                     +- CometProject (40)
                        +- CometFilter (39)
                           +- CometScan parquet spark_catalog.default.date_dim (38)


(1) CometScan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date_sk), IsNotNull(d_week_seq)]
ReadSchema: struct<d_date_sk:int,d_week_seq:int,d_day_name:string>

(4) CometFilter
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Condition : (isnotnull(d_date_sk#4) AND isnotnull(d_week_seq#5))

(5) CometProject
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#6]
Arguments: [d_date_sk#4, d_week_seq#5, d_day_name#7], [d_date_sk#4, d_week_seq#5, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, d_day_name#6, 9, true, false, true) AS d_day_name#7]

(6) CometBroadcastExchange
Input [3]: [d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [d_date_sk#4, d_week_seq#5, d_day_name#7]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3]
Right output [3]: [d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [6]: [ss_store_sk#1, ss_sales_price#2, ss_sold_date_sk#3, d_date_sk#4, d_week_seq#5, d_day_name#7]
Arguments: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7], [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7]

(9) CometColumnarToRow [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7]

(10) HashAggregate [codegen id : 1]
Input [4]: [ss_store_sk#1, ss_sales_price#2, d_week_seq#5, d_day_name#7]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), partial_sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum#8, sum#9, sum#10, sum#11, sum#12, sum#13, sum#14]
Results [9]: [d_week_seq#5, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]

(11) CometColumnarExchange
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]
Arguments: hashpartitioning(d_week_seq#5, ss_store_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(12) CometColumnarToRow [codegen id : 8]
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]

(13) HashAggregate [codegen id : 8]
Input [9]: [d_week_seq#5, ss_store_sk#1, sum#15, sum#16, sum#17, sum#18, sum#19, sum#20, sum#21]
Keys [2]: [d_week_seq#5, ss_store_sk#1]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END)), sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#22, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#28]
Results [9]: [d_week_seq#5, ss_store_sk#1, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Sunday   ) THEN ss_sales_price#2 END))#22,17,2) AS sun_sales#29, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Monday   ) THEN ss_sales_price#2 END))#23,17,2) AS mon_sales#30, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Tuesday  ) THEN ss_sales_price#2 END))#24,17,2) AS tue_sales#31, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Wednesday) THEN ss_sales_price#2 END))#25,17,2) AS wed_sales#32, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Thursday ) THEN ss_sales_price#2 END))#26,17,2) AS thu_sales#33, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Friday   ) THEN ss_sales_price#2 END))#27,17,2) AS fri_sales#34, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#7 = Saturday ) THEN ss_sales_price#2 END))#28,17,2) AS sat_sales#35]

(14) CometScan parquet spark_catalog.default.store
Output [3]: [s_store_sk#36, s_store_id#37, s_store_name#38]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string,s_store_name:string>

(15) CometFilter
Input [3]: [s_store_sk#36, s_store_id#37, s_store_name#38]
Condition : (isnotnull(s_store_sk#36) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#37, 16, true, false, true)))

(16) CometProject
Input [3]: [s_store_sk#36, s_store_id#37, s_store_name#38]
Arguments: [s_store_sk#36, s_store_id#39, s_store_name#38], [s_store_sk#36, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#37, 16, true, false, true) AS s_store_id#39, s_store_name#38]

(17) CometColumnarToRow [codegen id : 2]
Input [3]: [s_store_sk#36, s_store_id#39, s_store_name#38]

(18) BroadcastExchange
Input [3]: [s_store_sk#36, s_store_id#39, s_store_name#38]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(19) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#36]
Join type: Inner
Join condition: None

(20) Project [codegen id : 8]
Output [10]: [d_week_seq#5, sun_sales#29, mon_sales#30, tue_sales#31, wed_sales#32, thu_sales#33, fri_sales#34, sat_sales#35, s_store_id#39, s_store_name#38]
Input [12]: [d_week_seq#5, ss_store_sk#1, sun_sales#29, mon_sales#30, tue_sales#31, wed_sales#32, thu_sales#33, fri_sales#34, sat_sales#35, s_store_sk#36, s_store_id#39, s_store_name#38]

(21) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#40, d_week_seq#41]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(22) CometFilter
Input [2]: [d_month_seq#40, d_week_seq#41]
Condition : (((isnotnull(d_month_seq#40) AND (d_month_seq#40 >= 1212)) AND (d_month_seq#40 <= 1223)) AND isnotnull(d_week_seq#41))

(23) CometProject
Input [2]: [d_month_seq#40, d_week_seq#41]
Arguments: [d_week_seq#41], [d_week_seq#41]

(24) CometColumnarToRow [codegen id : 3]
Input [1]: [d_week_seq#41]

(25) BroadcastExchange
Input [1]: [d_week_seq#41]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(26) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [d_week_seq#5]
Right keys [1]: [d_week_seq#41]
Join type: Inner
Join condition: None

(27) Project [codegen id : 8]
Output [10]: [s_store_name#38 AS s_store_name1#42, d_week_seq#5 AS d_week_seq1#43, s_store_id#39 AS s_store_id1#44, sun_sales#29 AS sun_sales1#45, mon_sales#30 AS mon_sales1#46, tue_sales#31 AS tue_sales1#47, wed_sales#32 AS wed_sales1#48, thu_sales#33 AS thu_sales1#49, fri_sales#34 AS fri_sales1#50, sat_sales#35 AS sat_sales1#51]
Input [11]: [d_week_seq#5, sun_sales#29, mon_sales#30, tue_sales#31, wed_sales#32, thu_sales#33, fri_sales#34, sat_sales#35, s_store_id#39, s_store_name#38, d_week_seq#41]

(28) ReusedExchange [Reuses operator id: 11]
Output [9]: [d_week_seq#52, ss_store_sk#53, sum#54, sum#55, sum#56, sum#57, sum#58, sum#59, sum#60]

(29) CometColumnarToRow [codegen id : 7]
Input [9]: [d_week_seq#52, ss_store_sk#53, sum#54, sum#55, sum#56, sum#57, sum#58, sum#59, sum#60]

(30) HashAggregate [codegen id : 7]
Input [9]: [d_week_seq#52, ss_store_sk#53, sum#54, sum#55, sum#56, sum#57, sum#58, sum#59, sum#60]
Keys [2]: [d_week_seq#52, ss_store_sk#53]
Functions [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#61 = Sunday   ) THEN ss_sales_price#62 END)), sum(UnscaledValue(CASE WHEN (d_day_name#61 = Monday   ) THEN ss_sales_price#62 END)), sum(UnscaledValue(CASE WHEN (d_day_name#61 = Tuesday  ) THEN ss_sales_price#62 END)), sum(UnscaledValue(CASE WHEN (d_day_name#61 = Wednesday) THEN ss_sales_price#62 END)), sum(UnscaledValue(CASE WHEN (d_day_name#61 = Thursday ) THEN ss_sales_price#62 END)), sum(UnscaledValue(CASE WHEN (d_day_name#61 = Friday   ) THEN ss_sales_price#62 END)), sum(UnscaledValue(CASE WHEN (d_day_name#61 = Saturday ) THEN ss_sales_price#62 END))]
Aggregate Attributes [7]: [sum(UnscaledValue(CASE WHEN (d_day_name#61 = Sunday   ) THEN ss_sales_price#62 END))#22, sum(UnscaledValue(CASE WHEN (d_day_name#61 = Monday   ) THEN ss_sales_price#62 END))#23, sum(UnscaledValue(CASE WHEN (d_day_name#61 = Tuesday  ) THEN ss_sales_price#62 END))#24, sum(UnscaledValue(CASE WHEN (d_day_name#61 = Wednesday) THEN ss_sales_price#62 END))#25, sum(UnscaledValue(CASE WHEN (d_day_name#61 = Thursday ) THEN ss_sales_price#62 END))#26, sum(UnscaledValue(CASE WHEN (d_day_name#61 = Friday   ) THEN ss_sales_price#62 END))#27, sum(UnscaledValue(CASE WHEN (d_day_name#61 = Saturday ) THEN ss_sales_price#62 END))#28]
Results [9]: [d_week_seq#52, ss_store_sk#53, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#61 = Sunday   ) THEN ss_sales_price#62 END))#22,17,2) AS sun_sales#63, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#61 = Monday   ) THEN ss_sales_price#62 END))#23,17,2) AS mon_sales#64, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#61 = Tuesday  ) THEN ss_sales_price#62 END))#24,17,2) AS tue_sales#65, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#61 = Wednesday) THEN ss_sales_price#62 END))#25,17,2) AS wed_sales#66, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#61 = Thursday ) THEN ss_sales_price#62 END))#26,17,2) AS thu_sales#67, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#61 = Friday   ) THEN ss_sales_price#62 END))#27,17,2) AS fri_sales#68, MakeDecimal(sum(UnscaledValue(CASE WHEN (d_day_name#61 = Saturday ) THEN ss_sales_price#62 END))#28,17,2) AS sat_sales#69]

(31) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#70, s_store_id#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(32) CometFilter
Input [2]: [s_store_sk#70, s_store_id#71]
Condition : (isnotnull(s_store_sk#70) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#71, 16, true, false, true)))

(33) CometProject
Input [2]: [s_store_sk#70, s_store_id#71]
Arguments: [s_store_sk#70, s_store_id#72], [s_store_sk#70, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#71, 16, true, false, true) AS s_store_id#72]

(34) CometColumnarToRow [codegen id : 5]
Input [2]: [s_store_sk#70, s_store_id#72]

(35) BroadcastExchange
Input [2]: [s_store_sk#70, s_store_id#72]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

(36) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [ss_store_sk#53]
Right keys [1]: [s_store_sk#70]
Join type: Inner
Join condition: None

(37) Project [codegen id : 7]
Output [9]: [d_week_seq#52, sun_sales#63, mon_sales#64, tue_sales#65, wed_sales#66, thu_sales#67, fri_sales#68, sat_sales#69, s_store_id#72]
Input [11]: [d_week_seq#52, ss_store_sk#53, sun_sales#63, mon_sales#64, tue_sales#65, wed_sales#66, thu_sales#67, fri_sales#68, sat_sales#69, s_store_sk#70, s_store_id#72]

(38) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_month_seq#73, d_week_seq#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1224), LessThanOrEqual(d_month_seq,1235), IsNotNull(d_week_seq)]
ReadSchema: struct<d_month_seq:int,d_week_seq:int>

(39) CometFilter
Input [2]: [d_month_seq#73, d_week_seq#74]
Condition : (((isnotnull(d_month_seq#73) AND (d_month_seq#73 >= 1224)) AND (d_month_seq#73 <= 1235)) AND isnotnull(d_week_seq#74))

(40) CometProject
Input [2]: [d_month_seq#73, d_week_seq#74]
Arguments: [d_week_seq#74], [d_week_seq#74]

(41) CometColumnarToRow [codegen id : 6]
Input [1]: [d_week_seq#74]

(42) BroadcastExchange
Input [1]: [d_week_seq#74]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(43) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [d_week_seq#52]
Right keys [1]: [d_week_seq#74]
Join type: Inner
Join condition: None

(44) Project [codegen id : 7]
Output [9]: [d_week_seq#52 AS d_week_seq2#75, s_store_id#72 AS s_store_id2#76, sun_sales#63 AS sun_sales2#77, mon_sales#64 AS mon_sales2#78, tue_sales#65 AS tue_sales2#79, wed_sales#66 AS wed_sales2#80, thu_sales#67 AS thu_sales2#81, fri_sales#68 AS fri_sales2#82, sat_sales#69 AS sat_sales2#83]
Input [10]: [d_week_seq#52, sun_sales#63, mon_sales#64, tue_sales#65, wed_sales#66, thu_sales#67, fri_sales#68, sat_sales#69, s_store_id#72, d_week_seq#74]

(45) BroadcastExchange
Input [9]: [d_week_seq2#75, s_store_id2#76, sun_sales2#77, mon_sales2#78, tue_sales2#79, wed_sales2#80, thu_sales2#81, fri_sales2#82, sat_sales2#83]
Arguments: HashedRelationBroadcastMode(List(input[1, string, true], (input[0, int, true] - 52)),false), [plan_id=6]

(46) BroadcastHashJoin [codegen id : 8]
Left keys [2]: [s_store_id1#44, d_week_seq1#43]
Right keys [2]: [s_store_id2#76, (d_week_seq2#75 - 52)]
Join type: Inner
Join condition: None

(47) Project [codegen id : 8]
Output [10]: [s_store_name1#42, s_store_id1#44, d_week_seq1#43, (sun_sales1#45 / sun_sales2#77) AS (sun_sales1 / sun_sales2)#84, (mon_sales1#46 / mon_sales2#78) AS (mon_sales1 / mon_sales2)#85, (tue_sales1#47 / tue_sales2#79) AS (tue_sales1 / tue_sales2)#86, (wed_sales1#48 / wed_sales2#80) AS (wed_sales1 / wed_sales2)#87, (thu_sales1#49 / thu_sales2#81) AS (thu_sales1 / thu_sales2)#88, (fri_sales1#50 / fri_sales2#82) AS (fri_sales1 / fri_sales2)#89, (sat_sales1#51 / sat_sales2#83) AS (sat_sales1 / sat_sales2)#90]
Input [19]: [s_store_name1#42, d_week_seq1#43, s_store_id1#44, sun_sales1#45, mon_sales1#46, tue_sales1#47, wed_sales1#48, thu_sales1#49, fri_sales1#50, sat_sales1#51, d_week_seq2#75, s_store_id2#76, sun_sales2#77, mon_sales2#78, tue_sales2#79, wed_sales2#80, thu_sales2#81, fri_sales2#82, sat_sales2#83]

(48) TakeOrderedAndProject
Input [10]: [s_store_name1#42, s_store_id1#44, d_week_seq1#43, (sun_sales1 / sun_sales2)#84, (mon_sales1 / mon_sales2)#85, (tue_sales1 / tue_sales2)#86, (wed_sales1 / wed_sales2)#87, (thu_sales1 / thu_sales2)#88, (fri_sales1 / fri_sales2)#89, (sat_sales1 / sat_sales2)#90]
Arguments: 100, [s_store_name1#42 ASC NULLS FIRST, s_store_id1#44 ASC NULLS FIRST, d_week_seq1#43 ASC NULLS FIRST], [s_store_name1#42, s_store_id1#44, d_week_seq1#43, (sun_sales1 / sun_sales2)#84, (mon_sales1 / mon_sales2)#85, (tue_sales1 / tue_sales2)#86, (wed_sales1 / wed_sales2)#87, (thu_sales1 / thu_sales2)#88, (fri_sales1 / fri_sales2)#89, (sat_sales1 / sat_sales2)#90]

