== Physical Plan ==
TakeOrderedAndProject (44)
+- * Project (43)
   +- * BroadcastHashJoin Inner BuildRight (42)
      :- * Project (26)
      :  +- * BroadcastHashJoin Inner BuildRight (25)
      :     :- * Project (19)
      :     :  +- * BroadcastHashJoin Inner BuildRight (18)
      :     :     :- * CometColumnarToRow (3)
      :     :     :  +- CometFilter (2)
      :     :     :     +- CometNativeScan parquet spark_catalog.default.store (1)
      :     :     +- BroadcastExchange (17)
      :     :        +- * Filter (16)
      :     :           +- * HashAggregate (15)
      :     :              +- * CometColumnarToRow (14)
      :     :                 +- CometExchange (13)
      :     :                    +- CometHashAggregate (12)
      :     :                       +- CometProject (11)
      :     :                          +- CometBroadcastHashJoin (10)
      :     :                             :- CometFilter (5)
      :     :                             :  +- CometNativeScan parquet spark_catalog.default.store_sales (4)
      :     :                             +- CometBroadcastExchange (9)
      :     :                                +- CometProject (8)
      :     :                                   +- CometFilter (7)
      :     :                                      +- CometNativeScan parquet spark_catalog.default.date_dim (6)
      :     +- BroadcastExchange (24)
      :        +- * CometColumnarToRow (23)
      :           +- CometProject (22)
      :              +- CometFilter (21)
      :                 +- CometNativeScan parquet spark_catalog.default.item (20)
      +- BroadcastExchange (41)
         +- * Filter (40)
            +- * HashAggregate (39)
               +- * CometColumnarToRow (38)
                  +- CometColumnarExchange (37)
                     +- * HashAggregate (36)
                        +- * HashAggregate (35)
                           +- * CometColumnarToRow (34)
                              +- CometExchange (33)
                                 +- CometHashAggregate (32)
                                    +- CometProject (31)
                                       +- CometBroadcastHashJoin (30)
                                          :- CometFilter (28)
                                          :  +- CometNativeScan parquet spark_catalog.default.store_sales (27)
                                          +- ReusedExchange (29)


(1) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#1, s_store_name#2]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_name:string>

(2) CometFilter
Input [2]: [s_store_sk#1, s_store_name#2]
Condition : isnotnull(s_store_sk#1)

(3) CometColumnarToRow [codegen id : 5]
Input [2]: [s_store_sk#1, s_store_name#2]

(4) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#6)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Condition : (isnotnull(ss_store_sk#4) AND isnotnull(ss_item_sk#3))

(6) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_month_seq#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1176), LessThanOrEqual(d_month_seq,1187), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(7) CometFilter
Input [2]: [d_date_sk#7, d_month_seq#8]
Condition : (((isnotnull(d_month_seq#8) AND (d_month_seq#8 >= 1176)) AND (d_month_seq#8 <= 1187)) AND isnotnull(d_date_sk#7))

(8) CometProject
Input [2]: [d_date_sk#7, d_month_seq#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(9) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(10) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#6], [d_date_sk#7], Inner, BuildRight

(11) CometProject
Input [5]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5, ss_sold_date_sk#6, d_date_sk#7]
Arguments: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5], [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]

(12) CometHashAggregate
Input [3]: [ss_item_sk#3, ss_store_sk#4, ss_sales_price#5]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#5))]

(13) CometExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#9]
Arguments: hashpartitioning(ss_store_sk#4, ss_item_sk#3, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(14) CometColumnarToRow [codegen id : 1]
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#9]

(15) HashAggregate [codegen id : 1]
Input [3]: [ss_store_sk#4, ss_item_sk#3, sum#9]
Keys [2]: [ss_store_sk#4, ss_item_sk#3]
Functions [1]: [sum(UnscaledValue(ss_sales_price#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#5))#10]
Results [3]: [ss_store_sk#4, ss_item_sk#3, MakeDecimal(sum(UnscaledValue(ss_sales_price#5))#10,17,2) AS revenue#11]

(16) Filter [codegen id : 1]
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]
Condition : isnotnull(revenue#11)

(17) BroadcastExchange
Input [3]: [ss_store_sk#4, ss_item_sk#3, revenue#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [s_store_sk#1]
Right keys [1]: [ss_store_sk#4]
Join type: Inner
Join condition: None

(19) Project [codegen id : 5]
Output [4]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11]
Input [5]: [s_store_sk#1, s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11]

(20) CometNativeScan parquet spark_catalog.default.item
Output [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_desc:string,i_current_price:decimal(7,2),i_wholesale_cost:decimal(7,2),i_brand:string>

(21) CometFilter
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Condition : isnotnull(i_item_sk#12)

(22) CometProject
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#16]
Arguments: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#17], [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, static_invoke(CharVarcharCodegenUtils.readSidePadding(i_brand#16, 50)) AS i_brand#17]

(23) CometColumnarToRow [codegen id : 2]
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#17]

(24) BroadcastExchange
Input [5]: [i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(25) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#3]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(26) Project [codegen id : 5]
Output [7]: [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#17]
Input [9]: [s_store_name#2, ss_store_sk#4, ss_item_sk#3, revenue#11, i_item_sk#12, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#17]

(27) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#21)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(28) CometFilter
Input [4]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21]
Condition : isnotnull(ss_store_sk#19)

(29) ReusedExchange [Reuses operator id: 9]
Output [1]: [d_date_sk#22]

(30) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21]
Right output [1]: [d_date_sk#22]
Arguments: [ss_sold_date_sk#21], [d_date_sk#22], Inner, BuildRight

(31) CometProject
Input [5]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20, ss_sold_date_sk#21, d_date_sk#22]
Arguments: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20], [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]

(32) CometHashAggregate
Input [3]: [ss_item_sk#18, ss_store_sk#19, ss_sales_price#20]
Keys [2]: [ss_store_sk#19, ss_item_sk#18]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#20))]

(33) CometExchange
Input [3]: [ss_store_sk#19, ss_item_sk#18, sum#23]
Arguments: hashpartitioning(ss_store_sk#19, ss_item_sk#18, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(34) CometColumnarToRow [codegen id : 3]
Input [3]: [ss_store_sk#19, ss_item_sk#18, sum#23]

(35) HashAggregate [codegen id : 3]
Input [3]: [ss_store_sk#19, ss_item_sk#18, sum#23]
Keys [2]: [ss_store_sk#19, ss_item_sk#18]
Functions [1]: [sum(UnscaledValue(ss_sales_price#20))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#20))#24]
Results [2]: [ss_store_sk#19, MakeDecimal(sum(UnscaledValue(ss_sales_price#20))#24,17,2) AS revenue#25]

(36) HashAggregate [codegen id : 3]
Input [2]: [ss_store_sk#19, revenue#25]
Keys [1]: [ss_store_sk#19]
Functions [1]: [partial_avg(revenue#25)]
Aggregate Attributes [2]: [sum#26, count#27]
Results [3]: [ss_store_sk#19, sum#28, count#29]

(37) CometColumnarExchange
Input [3]: [ss_store_sk#19, sum#28, count#29]
Arguments: hashpartitioning(ss_store_sk#19, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(38) CometColumnarToRow [codegen id : 4]
Input [3]: [ss_store_sk#19, sum#28, count#29]

(39) HashAggregate [codegen id : 4]
Input [3]: [ss_store_sk#19, sum#28, count#29]
Keys [1]: [ss_store_sk#19]
Functions [1]: [avg(revenue#25)]
Aggregate Attributes [1]: [avg(revenue#25)#30]
Results [2]: [ss_store_sk#19, avg(revenue#25)#30 AS ave#31]

(40) Filter [codegen id : 4]
Input [2]: [ss_store_sk#19, ave#31]
Condition : isnotnull(ave#31)

(41) BroadcastExchange
Input [2]: [ss_store_sk#19, ave#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

(42) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [ss_store_sk#19]
Join type: Inner
Join condition: (cast(revenue#11 as decimal(23,7)) <= (0.1 * ave#31))

(43) Project [codegen id : 5]
Output [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#17]
Input [9]: [s_store_name#2, ss_store_sk#4, revenue#11, i_item_desc#13, i_current_price#14, i_wholesale_cost#15, i_brand#17, ss_store_sk#19, ave#31]

(44) TakeOrderedAndProject
Input [6]: [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#17]
Arguments: 100, [s_store_name#2 ASC NULLS FIRST, i_item_desc#13 ASC NULLS FIRST], [s_store_name#2, i_item_desc#13, revenue#11, i_current_price#14, i_wholesale_cost#15, i_brand#17]

