== Physical Plan ==
TakeOrderedAndProject (27)
+- * Filter (26)
   +- Window (25)
      +- * Sort (24)
         +- Exchange (23)
            +- * Project (22)
               +- * SortMergeJoin FullOuter (21)
                  :- * Sort (18)
                  :  +- Exchange (17)
                  :     +- * Project (16)
                  :        +- Window (15)
                  :           +- * Sort (14)
                  :              +- Exchange (13)
                  :                 +- * HashAggregate (12)
                  :                    +- Exchange (11)
                  :                       +- * HashAggregate (10)
                  :                          +- * ColumnarToRow (9)
                  :                             +- CometProject (8)
                  :                                +- CometBroadcastHashJoin (7)
                  :                                   :- CometFilter (2)
                  :                                   :  +- CometNativeScan: `spark_catalog`.`default`.`web_sales` (1)
                  :                                   +- CometBroadcastExchange (6)
                  :                                      +- CometProject (5)
                  :                                         +- CometFilter (4)
                  :                                            +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (3)
                  +- * Sort (20)
                     +- ReusedExchange (19)


(1) CometNativeScan: `spark_catalog`.`default`.`web_sales`
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Arguments: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Arguments: [d_date_sk#4, d_date#5, d_month_seq#6]

(4) CometFilter
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1200)) AND (d_month_seq#6 <= 1211)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [3]: [d_date_sk#4, d_date#5, d_month_seq#6]
Arguments: [d_date_sk#4, d_date#5], [d_date_sk#4, d_date#5]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#4, d_date#5]
Arguments: [d_date_sk#4, d_date#5]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Right output [2]: [d_date_sk#4, d_date#5]
Arguments: [ws_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#4, d_date#5]
Arguments: [ws_item_sk#1, ws_sales_price#2, d_date#5], [ws_item_sk#1, ws_sales_price#2, d_date#5]

(9) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#5]

(10) HashAggregate [codegen id : 1]
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#5]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum#7]
Results [3]: [ws_item_sk#1, d_date#5, sum#8]

(11) Exchange
Input [3]: [ws_item_sk#1, d_date#5, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(12) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, d_date#5, sum#8]
Keys [2]: [ws_item_sk#1, d_date#5]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#9]
Results [4]: [ws_item_sk#1 AS item_sk#10, d_date#5, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#9,17,2) AS _w0#11, ws_item_sk#1]

(13) Exchange
Input [4]: [item_sk#10, d_date#5, _w0#11, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 3]
Input [4]: [item_sk#10, d_date#5, _w0#11, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(15) Window
Input [4]: [item_sk#10, d_date#5, _w0#11, ws_item_sk#1]
Arguments: [sum(_w0#11) windowspecdefinition(ws_item_sk#1, d_date#5 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS cume_sales#12], [ws_item_sk#1], [d_date#5 ASC NULLS FIRST]

(16) Project [codegen id : 4]
Output [3]: [item_sk#10, d_date#5, cume_sales#12]
Input [5]: [item_sk#10, d_date#5, _w0#11, ws_item_sk#1, cume_sales#12]

(17) Exchange
Input [3]: [item_sk#10, d_date#5, cume_sales#12]
Arguments: hashpartitioning(item_sk#10, d_date#5, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 5]
Input [3]: [item_sk#10, d_date#5, cume_sales#12]
Arguments: [item_sk#10 ASC NULLS FIRST, d_date#5 ASC NULLS FIRST], false, 0

(19) ReusedExchange [Reuses operator id: 17]
Output [3]: [item_sk#13, d_date#14, cume_sales#15]

(20) Sort [codegen id : 10]
Input [3]: [item_sk#13, d_date#14, cume_sales#15]
Arguments: [item_sk#13 ASC NULLS FIRST, d_date#14 ASC NULLS FIRST], false, 0

(21) SortMergeJoin [codegen id : 11]
Left keys [2]: [item_sk#10, d_date#5]
Right keys [2]: [item_sk#13, d_date#14]
Join type: FullOuter
Join condition: None

(22) Project [codegen id : 11]
Output [4]: [CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#13 END AS item_sk#16, CASE WHEN isnotnull(d_date#5) THEN d_date#5 ELSE d_date#14 END AS d_date#17, cume_sales#12 AS web_sales#18, cume_sales#15 AS store_sales#19]
Input [6]: [item_sk#10, d_date#5, cume_sales#12, item_sk#13, d_date#14, cume_sales#15]

(23) Exchange
Input [4]: [item_sk#16, d_date#17, web_sales#18, store_sales#19]
Arguments: hashpartitioning(item_sk#16, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 12]
Input [4]: [item_sk#16, d_date#17, web_sales#18, store_sales#19]
Arguments: [item_sk#16 ASC NULLS FIRST, d_date#17 ASC NULLS FIRST], false, 0

(25) Window
Input [4]: [item_sk#16, d_date#17, web_sales#18, store_sales#19]
Arguments: [max(web_sales#18) windowspecdefinition(item_sk#16, d_date#17 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS web_cumulative#20, max(store_sales#19) windowspecdefinition(item_sk#16, d_date#17 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS store_cumulative#21], [item_sk#16], [d_date#17 ASC NULLS FIRST]

(26) Filter [codegen id : 13]
Input [6]: [item_sk#16, d_date#17, web_sales#18, store_sales#19, web_cumulative#20, store_cumulative#21]
Condition : ((isnotnull(web_cumulative#20) AND isnotnull(store_cumulative#21)) AND (web_cumulative#20 > store_cumulative#21))

(27) TakeOrderedAndProject
Input [6]: [item_sk#16, d_date#17, web_sales#18, store_sales#19, web_cumulative#20, store_cumulative#21]
Arguments: 100, [item_sk#16 ASC NULLS FIRST, d_date#17 ASC NULLS FIRST], [item_sk#16, d_date#17, web_sales#18, store_sales#19, web_cumulative#20, store_cumulative#21]

