== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- * BroadcastHashJoin Inner BuildRight (40)
      :- * Project (35)
      :  +- * BroadcastHashJoin Inner BuildRight (34)
      :     :- * HashAggregate (29)
      :     :  +- Exchange (28)
      :     :     +- * HashAggregate (27)
      :     :        +- * ColumnarToRow (26)
      :     :           +- CometProject (25)
      :     :              +- CometBroadcastHashJoin (24)
      :     :                 :- CometProject (20)
      :     :                 :  +- CometBroadcastHashJoin (19)
      :     :                 :     :- CometProject (14)
      :     :                 :     :  +- CometBroadcastHashJoin (13)
      :     :                 :     :     :- CometProject (8)
      :     :                 :     :     :  +- CometBroadcastHashJoin (7)
      :     :                 :     :     :     :- CometFilter (2)
      :     :                 :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
      :     :                 :     :     :     +- CometBroadcastExchange (6)
      :     :                 :     :     :        +- CometProject (5)
      :     :                 :     :     :           +- CometFilter (4)
      :     :                 :     :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
      :     :                 :     :     +- CometBroadcastExchange (12)
      :     :                 :     :        +- CometProject (11)
      :     :                 :     :           +- CometFilter (10)
      :     :                 :     :              +- CometScan parquet spark_catalog.default.store (9)
      :     :                 :     +- CometBroadcastExchange (18)
      :     :                 :        +- CometProject (17)
      :     :                 :           +- CometFilter (16)
      :     :                 :              +- CometScan parquet spark_catalog.default.household_demographics (15)
      :     :                 +- CometBroadcastExchange (23)
      :     :                    +- CometFilter (22)
      :     :                       +- CometScan parquet spark_catalog.default.customer_address (21)
      :     +- BroadcastExchange (33)
      :        +- * ColumnarToRow (32)
      :           +- CometFilter (31)
      :              +- CometScan parquet spark_catalog.default.customer (30)
      +- BroadcastExchange (39)
         +- * ColumnarToRow (38)
            +- CometFilter (37)
               +- CometScan parquet spark_catalog.default.customer_address (36)


(1) Scan parquet spark_catalog.default.store_sales
Output [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#9), dynamicpruningexpression(ss_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_ext_list_price:decimal(7,2),ss_ext_tax:decimal(7,2)>

(2) CometFilter
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_customer_sk#1))

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_dom#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(4) CometFilter
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Condition : ((((isnotnull(d_dom#13) AND (d_dom#13 >= 1)) AND (d_dom#13 <= 2)) AND d_year#12 IN (1999,2000,2001)) AND isnotnull(d_date_sk#11))

(5) CometProject
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Arguments: [d_date_sk#11], [d_date_sk#11]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: [d_date_sk#11]

(7) CometBroadcastHashJoin
Left output [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9]
Right output [1]: [d_date_sk#11]
Arguments: [ss_sold_date_sk#9], [d_date_sk#11], Inner, BuildRight

(8) CometProject
Input [10]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ss_sold_date_sk#9, d_date_sk#11]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]

(9) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_city#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(10) CometFilter
Input [2]: [s_store_sk#14, s_city#15]
Condition : (s_city#15 IN (Midway,Fairview) AND isnotnull(s_store_sk#14))

(11) CometProject
Input [2]: [s_store_sk#14, s_city#15]
Arguments: [s_store_sk#14], [s_store_sk#14]

(12) CometBroadcastExchange
Input [1]: [s_store_sk#14]
Arguments: [s_store_sk#14]

(13) CometBroadcastHashJoin
Left output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Right output [1]: [s_store_sk#14]
Arguments: [ss_store_sk#4], [s_store_sk#14], Inner, BuildRight

(14) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, s_store_sk#14]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]

(15) Scan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(16) CometFilter
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Condition : (((hd_dep_count#17 = 4) OR (hd_vehicle_count#18 = 3)) AND isnotnull(hd_demo_sk#16))

(17) CometProject
Input [3]: [hd_demo_sk#16, hd_dep_count#17, hd_vehicle_count#18]
Arguments: [hd_demo_sk#16], [hd_demo_sk#16]

(18) CometBroadcastExchange
Input [1]: [hd_demo_sk#16]
Arguments: [hd_demo_sk#16]

(19) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Right output [1]: [hd_demo_sk#16]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#16], Inner, BuildRight

(20) CometProject
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, hd_demo_sk#16]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]

(21) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#19, ca_city#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(22) CometFilter
Input [2]: [ca_address_sk#19, ca_city#20]
Condition : (isnotnull(ca_address_sk#19) AND isnotnull(ca_city#20))

(23) CometBroadcastExchange
Input [2]: [ca_address_sk#19, ca_city#20]
Arguments: [ca_address_sk#19, ca_city#20]

(24) CometBroadcastHashJoin
Left output [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8]
Right output [2]: [ca_address_sk#19, ca_city#20]
Arguments: [ss_addr_sk#3], [ca_address_sk#19], Inner, BuildRight

(25) CometProject
Input [8]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_address_sk#19, ca_city#20]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#20], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#20]

(26) ColumnarToRow [codegen id : 1]
Input [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#20]

(27) HashAggregate [codegen id : 1]
Input [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_ext_sales_price#6, ss_ext_list_price#7, ss_ext_tax#8, ca_city#20]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#6)), partial_sum(UnscaledValue(ss_ext_list_price#7)), partial_sum(UnscaledValue(ss_ext_tax#8))]
Aggregate Attributes [3]: [sum#21, sum#22, sum#23]
Results [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20, sum#24, sum#25, sum#26]

(28) Exchange
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20, sum#24, sum#25, sum#26]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(29) HashAggregate [codegen id : 4]
Input [7]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20, sum#24, sum#25, sum#26]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#20]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#6)), sum(UnscaledValue(ss_ext_list_price#7)), sum(UnscaledValue(ss_ext_tax#8))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#6))#27, sum(UnscaledValue(ss_ext_list_price#7))#28, sum(UnscaledValue(ss_ext_tax#8))#29]
Results [6]: [ss_ticket_number#5, ss_customer_sk#1, ca_city#20 AS bought_city#30, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#6))#27,17,2) AS extended_price#31, MakeDecimal(sum(UnscaledValue(ss_ext_list_price#7))#28,17,2) AS list_price#32, MakeDecimal(sum(UnscaledValue(ss_ext_tax#8))#29,17,2) AS extended_tax#33]

(30) Scan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(31) CometFilter
Input [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Condition : (isnotnull(c_customer_sk#34) AND isnotnull(c_current_addr_sk#35))

(32) ColumnarToRow [codegen id : 2]
Input [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]

(33) BroadcastExchange
Input [4]: [c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(34) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#34]
Join type: Inner
Join condition: None

(35) Project [codegen id : 4]
Output [8]: [ss_ticket_number#5, bought_city#30, extended_price#31, list_price#32, extended_tax#33, c_current_addr_sk#35, c_first_name#36, c_last_name#37]
Input [10]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#30, extended_price#31, list_price#32, extended_tax#33, c_customer_sk#34, c_current_addr_sk#35, c_first_name#36, c_last_name#37]

(36) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#38, ca_city#39]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(37) CometFilter
Input [2]: [ca_address_sk#38, ca_city#39]
Condition : (isnotnull(ca_address_sk#38) AND isnotnull(ca_city#39))

(38) ColumnarToRow [codegen id : 3]
Input [2]: [ca_address_sk#38, ca_city#39]

(39) BroadcastExchange
Input [2]: [ca_address_sk#38, ca_city#39]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(40) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [c_current_addr_sk#35]
Right keys [1]: [ca_address_sk#38]
Join type: Inner
Join condition: NOT (ca_city#39 = bought_city#30)

(41) Project [codegen id : 4]
Output [8]: [c_last_name#37, c_first_name#36, ca_city#39, bought_city#30, ss_ticket_number#5, extended_price#31, extended_tax#33, list_price#32]
Input [10]: [ss_ticket_number#5, bought_city#30, extended_price#31, list_price#32, extended_tax#33, c_current_addr_sk#35, c_first_name#36, c_last_name#37, ca_address_sk#38, ca_city#39]

(42) TakeOrderedAndProject
Input [8]: [c_last_name#37, c_first_name#36, ca_city#39, bought_city#30, ss_ticket_number#5, extended_price#31, extended_tax#33, list_price#32]
Arguments: 100, [c_last_name#37 ASC NULLS FIRST, ss_ticket_number#5 ASC NULLS FIRST], [c_last_name#37, c_first_name#36, ca_city#39, bought_city#30, ss_ticket_number#5, extended_price#31, extended_tax#33, list_price#32]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (47)
+- * ColumnarToRow (46)
   +- CometProject (45)
      +- CometFilter (44)
         +- CometScan parquet spark_catalog.default.date_dim (43)


(43) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#12, d_dom#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dom), GreaterThanOrEqual(d_dom,1), LessThanOrEqual(d_dom,2), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dom:int>

(44) CometFilter
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Condition : ((((isnotnull(d_dom#13) AND (d_dom#13 >= 1)) AND (d_dom#13 <= 2)) AND d_year#12 IN (1999,2000,2001)) AND isnotnull(d_date_sk#11))

(45) CometProject
Input [3]: [d_date_sk#11, d_year#12, d_dom#13]
Arguments: [d_date_sk#11], [d_date_sk#11]

(46) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#11]

(47) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]


