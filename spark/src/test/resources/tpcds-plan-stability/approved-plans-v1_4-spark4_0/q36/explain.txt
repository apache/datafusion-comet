== Physical Plan ==
TakeOrderedAndProject (32)
+- * Project (31)
   +- Window (30)
      +- * CometColumnarToRow (29)
         +- CometSort (28)
            +- CometColumnarExchange (27)
               +- * HashAggregate (26)
                  +- * CometColumnarToRow (25)
                     +- CometColumnarExchange (24)
                        +- * HashAggregate (23)
                           +- * CometColumnarToRow (22)
                              +- CometExpand (21)
                                 +- CometProject (20)
                                    +- CometBroadcastHashJoin (19)
                                       :- CometProject (14)
                                       :  +- CometBroadcastHashJoin (13)
                                       :     :- CometProject (8)
                                       :     :  +- CometBroadcastHashJoin (7)
                                       :     :     :- CometFilter (2)
                                       :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                                       :     :     +- CometBroadcastExchange (6)
                                       :     :        +- CometProject (5)
                                       :     :           +- CometFilter (4)
                                       :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
                                       :     +- CometBroadcastExchange (12)
                                       :        +- CometProject (11)
                                       :           +- CometFilter (10)
                                       :              +- CometScan parquet spark_catalog.default.item (9)
                                       +- CometBroadcastExchange (18)
                                          +- CometProject (17)
                                             +- CometFilter (16)
                                                +- CometScan parquet spark_catalog.default.store (15)


(1) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(5) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#5], [d_date_sk#7], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Condition : isnotnull(i_item_sk#9)

(11) CometProject
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Arguments: [i_item_sk#9, i_class#12, i_category#13], [i_item_sk#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#10, 50, true, false, true) AS i_class#12, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#11, 50, true, false, true) AS i_category#13]

(12) CometBroadcastExchange
Input [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: [i_item_sk#9, i_class#12, i_category#13]

(13) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#9, i_class#12, i_category#13]
Arguments: [ss_item_sk#1], [i_item_sk#9], Inner, BuildRight

(14) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#9, i_class#12, i_category#13]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]

(15) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#15, 2, true, false, true) = TN) AND isnotnull(s_store_sk#14))

(17) CometProject
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14], [s_store_sk#14]

(18) CometBroadcastExchange
Input [1]: [s_store_sk#14]
Arguments: [s_store_sk#14]

(19) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13]
Right output [1]: [s_store_sk#14]
Arguments: [ss_store_sk#2], [s_store_sk#14], Inner, BuildRight

(20) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#12, i_category#13, s_store_sk#14]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_category#13, i_class#12], [ss_ext_sales_price#3, ss_net_profit#4, i_category#13, i_class#12]

(21) CometExpand
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#13, i_class#12]
Arguments: [[ss_ext_sales_price#3, ss_net_profit#4, i_category#13, i_class#12, 0], [ss_ext_sales_price#3, ss_net_profit#4, i_category#13, null, 1], [ss_ext_sales_price#3, ss_net_profit#4, null, null, 3]], [ss_ext_sales_price#3, ss_net_profit#4, i_category#16, i_class#17, spark_grouping_id#18]

(22) CometColumnarToRow [codegen id : 1]
Input [5]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#16, i_class#17, spark_grouping_id#18]

(23) HashAggregate [codegen id : 1]
Input [5]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#16, i_class#17, spark_grouping_id#18]
Keys [3]: [i_category#16, i_class#17, spark_grouping_id#18]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#19, sum#20]
Results [5]: [i_category#16, i_class#17, spark_grouping_id#18, sum#21, sum#22]

(24) CometColumnarExchange
Input [5]: [i_category#16, i_class#17, spark_grouping_id#18, sum#21, sum#22]
Arguments: hashpartitioning(i_category#16, i_class#17, spark_grouping_id#18, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(25) CometColumnarToRow [codegen id : 2]
Input [5]: [i_category#16, i_class#17, spark_grouping_id#18, sum#21, sum#22]

(26) HashAggregate [codegen id : 2]
Input [5]: [i_category#16, i_class#17, spark_grouping_id#18, sum#21, sum#22]
Keys [3]: [i_category#16, i_class#17, spark_grouping_id#18]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#23, sum(UnscaledValue(ss_ext_sales_price#3))#24]
Results [7]: [(MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#23,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#24,17,2)) AS gross_margin#25, i_category#16, i_class#17, (cast((shiftright(spark_grouping_id#18, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#18, 0) & 1) as tinyint)) AS lochierarchy#26, (MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#23,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#24,17,2)) AS _w0#27, (cast((shiftright(spark_grouping_id#18, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#18, 0) & 1) as tinyint)) AS _w1#28, CASE WHEN (cast((shiftright(spark_grouping_id#18, 0) & 1) as tinyint) = 0) THEN i_category#16 END AS _w2#29]

(27) CometColumnarExchange
Input [7]: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, _w0#27, _w1#28, _w2#29]
Arguments: hashpartitioning(_w1#28, _w2#29, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(28) CometSort
Input [7]: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, _w0#27, _w1#28, _w2#29]
Arguments: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, _w0#27, _w1#28, _w2#29], [_w1#28 ASC NULLS FIRST, _w2#29 ASC NULLS FIRST, _w0#27 ASC NULLS FIRST]

(29) CometColumnarToRow [codegen id : 3]
Input [7]: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, _w0#27, _w1#28, _w2#29]

(30) Window
Input [7]: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, _w0#27, _w1#28, _w2#29]
Arguments: [rank(_w0#27) windowspecdefinition(_w1#28, _w2#29, _w0#27 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#30], [_w1#28, _w2#29], [_w0#27 ASC NULLS FIRST]

(31) Project [codegen id : 4]
Output [5]: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, rank_within_parent#30]
Input [8]: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, _w0#27, _w1#28, _w2#29, rank_within_parent#30]

(32) TakeOrderedAndProject
Input [5]: [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, rank_within_parent#30]
Arguments: 100, [lochierarchy#26 DESC NULLS LAST, CASE WHEN (lochierarchy#26 = 0) THEN i_category#16 END ASC NULLS FIRST, rank_within_parent#30 ASC NULLS FIRST], [gross_margin#25, i_category#16, i_class#17, lochierarchy#26, rank_within_parent#30]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (37)
+- * CometColumnarToRow (36)
   +- CometProject (35)
      +- CometFilter (34)
         +- CometScan parquet spark_catalog.default.date_dim (33)


(33) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(34) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(35) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(36) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(37) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]


