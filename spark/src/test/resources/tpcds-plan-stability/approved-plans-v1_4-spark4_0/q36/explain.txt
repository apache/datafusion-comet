== Physical Plan ==
TakeOrderedAndProject (31)
+- * Project (30)
   +- Window (29)
      +- * CometColumnarToRow (28)
         +- CometSort (27)
            +- CometColumnarExchange (26)
               +- * HashAggregate (25)
                  +- * CometColumnarToRow (24)
                     +- CometColumnarExchange (23)
                        +- * HashAggregate (22)
                           +- * CometColumnarToRow (21)
                              +- CometExpand (20)
                                 +- CometProject (19)
                                    +- CometBroadcastHashJoin (18)
                                       :- CometProject (13)
                                       :  +- CometBroadcastHashJoin (12)
                                       :     :- CometProject (8)
                                       :     :  +- CometBroadcastHashJoin (7)
                                       :     :     :- CometFilter (2)
                                       :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                                       :     :     +- CometBroadcastExchange (6)
                                       :     :        +- CometProject (5)
                                       :     :           +- CometFilter (4)
                                       :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
                                       :     +- CometBroadcastExchange (11)
                                       :        +- CometFilter (10)
                                       :           +- CometScan parquet spark_catalog.default.item (9)
                                       +- CometBroadcastExchange (17)
                                          +- CometProject (16)
                                             +- CometFilter (15)
                                                +- CometScan parquet spark_catalog.default.store (14)


(1) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(5) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#5], [d_date_sk#7], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Condition : isnotnull(i_item_sk#9)

(11) CometBroadcastExchange
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Arguments: [i_item_sk#9, i_class#10, i_category#11]

(12) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#9, i_class#10, i_category#11]
Arguments: [ss_item_sk#1], [i_item_sk#9], Inner, BuildRight

(13) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#9, i_class#10, i_category#11]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11]

(14) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#12, s_state#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) CometFilter
Input [2]: [s_store_sk#12, s_state#13]
Condition : ((isnotnull(s_state#13) AND (s_state#13 = TN)) AND isnotnull(s_store_sk#12))

(16) CometProject
Input [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12], [s_store_sk#12]

(17) CometBroadcastExchange
Input [1]: [s_store_sk#12]
Arguments: [s_store_sk#12]

(18) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11]
Right output [1]: [s_store_sk#12]
Arguments: [ss_store_sk#2], [s_store_sk#12], Inner, BuildRight

(19) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11, s_store_sk#12]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_category#11, i_class#10], [ss_ext_sales_price#3, ss_net_profit#4, i_category#11, i_class#10]

(20) CometExpand
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#11, i_class#10]
Arguments: [[ss_ext_sales_price#3, ss_net_profit#4, i_category#11, i_class#10, 0], [ss_ext_sales_price#3, ss_net_profit#4, i_category#11, null, 1], [ss_ext_sales_price#3, ss_net_profit#4, null, null, 3]], [ss_ext_sales_price#3, ss_net_profit#4, i_category#14, i_class#15, spark_grouping_id#16]

(21) CometColumnarToRow [codegen id : 1]
Input [5]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#14, i_class#15, spark_grouping_id#16]

(22) HashAggregate [codegen id : 1]
Input [5]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#14, i_class#15, spark_grouping_id#16]
Keys [3]: [i_category#14, i_class#15, spark_grouping_id#16]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#17, sum#18]
Results [5]: [i_category#14, i_class#15, spark_grouping_id#16, sum#19, sum#20]

(23) CometColumnarExchange
Input [5]: [i_category#14, i_class#15, spark_grouping_id#16, sum#19, sum#20]
Arguments: hashpartitioning(i_category#14, i_class#15, spark_grouping_id#16, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(24) CometColumnarToRow [codegen id : 2]
Input [5]: [i_category#14, i_class#15, spark_grouping_id#16, sum#19, sum#20]

(25) HashAggregate [codegen id : 2]
Input [5]: [i_category#14, i_class#15, spark_grouping_id#16, sum#19, sum#20]
Keys [3]: [i_category#14, i_class#15, spark_grouping_id#16]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#21, sum(UnscaledValue(ss_ext_sales_price#3))#22]
Results [7]: [(MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#21,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#22,17,2)) AS gross_margin#23, i_category#14, i_class#15, (cast((shiftright(spark_grouping_id#16, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#16, 0) & 1) as tinyint)) AS lochierarchy#24, (MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#21,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#22,17,2)) AS _w0#25, (cast((shiftright(spark_grouping_id#16, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#16, 0) & 1) as tinyint)) AS _w1#26, CASE WHEN (cast((shiftright(spark_grouping_id#16, 0) & 1) as tinyint) = 0) THEN i_category#14 END AS _w2#27]

(26) CometColumnarExchange
Input [7]: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, _w0#25, _w1#26, _w2#27]
Arguments: hashpartitioning(_w1#26, _w2#27, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(27) CometSort
Input [7]: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, _w0#25, _w1#26, _w2#27]
Arguments: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, _w0#25, _w1#26, _w2#27], [_w1#26 ASC NULLS FIRST, _w2#27 ASC NULLS FIRST, _w0#25 ASC NULLS FIRST]

(28) CometColumnarToRow [codegen id : 3]
Input [7]: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, _w0#25, _w1#26, _w2#27]

(29) Window
Input [7]: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, _w0#25, _w1#26, _w2#27]
Arguments: [rank(_w0#25) windowspecdefinition(_w1#26, _w2#27, _w0#25 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#28], [_w1#26, _w2#27], [_w0#25 ASC NULLS FIRST]

(30) Project [codegen id : 4]
Output [5]: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, rank_within_parent#28]
Input [8]: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, _w0#25, _w1#26, _w2#27, rank_within_parent#28]

(31) TakeOrderedAndProject
Input [5]: [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, rank_within_parent#28]
Arguments: 100, [lochierarchy#24 DESC NULLS LAST, CASE WHEN (lochierarchy#24 = 0) THEN i_category#14 END ASC NULLS FIRST, rank_within_parent#28 ASC NULLS FIRST], [gross_margin#23, i_category#14, i_class#15, lochierarchy#24, rank_within_parent#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (36)
+- * CometColumnarToRow (35)
   +- CometProject (34)
      +- CometFilter (33)
         +- CometScan parquet spark_catalog.default.date_dim (32)


(32) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(33) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(34) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(35) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(36) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]


