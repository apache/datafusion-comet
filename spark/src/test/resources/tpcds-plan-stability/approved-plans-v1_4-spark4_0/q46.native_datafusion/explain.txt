== Physical Plan ==
TakeOrderedAndProject (43)
+- * Project (42)
   +- * BroadcastHashJoin Inner BuildRight (41)
      :- * Project (36)
      :  +- * BroadcastHashJoin Inner BuildRight (35)
      :     :- * HashAggregate (29)
      :     :  +- * CometColumnarToRow (28)
      :     :     +- CometExchange (27)
      :     :        +- CometHashAggregate (26)
      :     :           +- CometProject (25)
      :     :              +- CometBroadcastHashJoin (24)
      :     :                 :- CometProject (20)
      :     :                 :  +- CometBroadcastHashJoin (19)
      :     :                 :     :- CometProject (14)
      :     :                 :     :  +- CometBroadcastHashJoin (13)
      :     :                 :     :     :- CometProject (8)
      :     :                 :     :     :  +- CometBroadcastHashJoin (7)
      :     :                 :     :     :     :- CometFilter (2)
      :     :                 :     :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
      :     :                 :     :     :     +- CometBroadcastExchange (6)
      :     :                 :     :     :        +- CometProject (5)
      :     :                 :     :     :           +- CometFilter (4)
      :     :                 :     :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
      :     :                 :     :     +- CometBroadcastExchange (12)
      :     :                 :     :        +- CometProject (11)
      :     :                 :     :           +- CometFilter (10)
      :     :                 :     :              +- CometNativeScan parquet spark_catalog.default.store (9)
      :     :                 :     +- CometBroadcastExchange (18)
      :     :                 :        +- CometProject (17)
      :     :                 :           +- CometFilter (16)
      :     :                 :              +- CometNativeScan parquet spark_catalog.default.household_demographics (15)
      :     :                 +- CometBroadcastExchange (23)
      :     :                    +- CometFilter (22)
      :     :                       +- CometNativeScan parquet spark_catalog.default.customer_address (21)
      :     +- BroadcastExchange (34)
      :        +- * CometColumnarToRow (33)
      :           +- CometProject (32)
      :              +- CometFilter (31)
      :                 +- CometNativeScan parquet spark_catalog.default.customer (30)
      +- BroadcastExchange (40)
         +- * CometColumnarToRow (39)
            +- CometFilter (38)
               +- CometNativeScan parquet spark_catalog.default.customer_address (37)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Condition : (((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_customer_sk#1))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#9, d_year#10, d_dow#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_dow, [0,6]), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(4) CometFilter
Input [3]: [d_date_sk#9, d_year#10, d_dow#11]
Condition : ((d_dow#11 IN (6,0) AND d_year#10 IN (1999,2000,2001)) AND isnotnull(d_date_sk#9))

(5) CometProject
Input [3]: [d_date_sk#9, d_year#10, d_dow#11]
Arguments: [d_date_sk#9], [d_date_sk#9]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: [d_date_sk#9]

(7) CometBroadcastHashJoin
Left output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#9]
Arguments: [ss_sold_date_sk#8], [d_date_sk#9], Inner, BuildRight

(8) CometProject
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8, d_date_sk#9]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(9) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#12, s_city#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [In(s_city, [Fairview,Midway]), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_city:string>

(10) CometFilter
Input [2]: [s_store_sk#12, s_city#13]
Condition : (s_city#13 IN (Fairview,Midway) AND isnotnull(s_store_sk#12))

(11) CometProject
Input [2]: [s_store_sk#12, s_city#13]
Arguments: [s_store_sk#12], [s_store_sk#12]

(12) CometBroadcastExchange
Input [1]: [s_store_sk#12]
Arguments: [s_store_sk#12]

(13) CometBroadcastHashJoin
Left output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [1]: [s_store_sk#12]
Arguments: [ss_store_sk#4], [s_store_sk#12], Inner, BuildRight

(14) CometProject
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_store_sk#12]
Arguments: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(15) CometNativeScan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#14, hd_dep_count#15, hd_vehicle_count#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,4),EqualTo(hd_vehicle_count,3)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(16) CometFilter
Input [3]: [hd_demo_sk#14, hd_dep_count#15, hd_vehicle_count#16]
Condition : (((hd_dep_count#15 = 4) OR (hd_vehicle_count#16 = 3)) AND isnotnull(hd_demo_sk#14))

(17) CometProject
Input [3]: [hd_demo_sk#14, hd_dep_count#15, hd_vehicle_count#16]
Arguments: [hd_demo_sk#14], [hd_demo_sk#14]

(18) CometBroadcastExchange
Input [1]: [hd_demo_sk#14]
Arguments: [hd_demo_sk#14]

(19) CometBroadcastHashJoin
Left output [6]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [1]: [hd_demo_sk#14]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#14], Inner, BuildRight

(20) CometProject
Input [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, hd_demo_sk#14]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]

(21) CometNativeScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#17, ca_city#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(22) CometFilter
Input [2]: [ca_address_sk#17, ca_city#18]
Condition : (isnotnull(ca_address_sk#17) AND isnotnull(ca_city#18))

(23) CometBroadcastExchange
Input [2]: [ca_address_sk#17, ca_city#18]
Arguments: [ca_address_sk#17, ca_city#18]

(24) CometBroadcastHashJoin
Left output [5]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Right output [2]: [ca_address_sk#17, ca_city#18]
Arguments: [ss_addr_sk#3], [ca_address_sk#17], Inner, BuildRight

(25) CometProject
Input [7]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_address_sk#17, ca_city#18]
Arguments: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_city#18], [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_city#18]

(26) CometHashAggregate
Input [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ca_city#18]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#18]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#6)), partial_sum(UnscaledValue(ss_net_profit#7))]

(27) CometExchange
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#18, sum#19, sum#20]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#18, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(28) CometColumnarToRow [codegen id : 3]
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#18, sum#19, sum#20]

(29) HashAggregate [codegen id : 3]
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#18, sum#19, sum#20]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, ca_city#18]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#6)), sum(UnscaledValue(ss_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#6))#21, sum(UnscaledValue(ss_net_profit#7))#22]
Results [5]: [ss_ticket_number#5, ss_customer_sk#1, ca_city#18 AS bought_city#23, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#6))#21,17,2) AS amt#24, MakeDecimal(sum(UnscaledValue(ss_net_profit#7))#22,17,2) AS profit#25]

(30) CometNativeScan parquet spark_catalog.default.customer
Output [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string>

(31) CometFilter
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Condition : (isnotnull(c_customer_sk#26) AND isnotnull(c_current_addr_sk#27))

(32) CometProject
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#28, c_last_name#29]
Arguments: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#30, c_last_name#31], [c_customer_sk#26, c_current_addr_sk#27, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_first_name#28, 20)) AS c_first_name#30, static_invoke(CharVarcharCodegenUtils.readSidePadding(c_last_name#29, 30)) AS c_last_name#31]

(33) CometColumnarToRow [codegen id : 1]
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#30, c_last_name#31]

(34) BroadcastExchange
Input [4]: [c_customer_sk#26, c_current_addr_sk#27, c_first_name#30, c_last_name#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(35) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#26]
Join type: Inner
Join condition: None

(36) Project [codegen id : 3]
Output [7]: [ss_ticket_number#5, bought_city#23, amt#24, profit#25, c_current_addr_sk#27, c_first_name#30, c_last_name#31]
Input [9]: [ss_ticket_number#5, ss_customer_sk#1, bought_city#23, amt#24, profit#25, c_customer_sk#26, c_current_addr_sk#27, c_first_name#30, c_last_name#31]

(37) CometNativeScan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#32, ca_city#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_city)]
ReadSchema: struct<ca_address_sk:int,ca_city:string>

(38) CometFilter
Input [2]: [ca_address_sk#32, ca_city#33]
Condition : (isnotnull(ca_address_sk#32) AND isnotnull(ca_city#33))

(39) CometColumnarToRow [codegen id : 2]
Input [2]: [ca_address_sk#32, ca_city#33]

(40) BroadcastExchange
Input [2]: [ca_address_sk#32, ca_city#33]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(41) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [c_current_addr_sk#27]
Right keys [1]: [ca_address_sk#32]
Join type: Inner
Join condition: NOT (ca_city#33 = bought_city#23)

(42) Project [codegen id : 3]
Output [7]: [c_last_name#31, c_first_name#30, ca_city#33, bought_city#23, ss_ticket_number#5, amt#24, profit#25]
Input [9]: [ss_ticket_number#5, bought_city#23, amt#24, profit#25, c_current_addr_sk#27, c_first_name#30, c_last_name#31, ca_address_sk#32, ca_city#33]

(43) TakeOrderedAndProject
Input [7]: [c_last_name#31, c_first_name#30, ca_city#33, bought_city#23, ss_ticket_number#5, amt#24, profit#25]
Arguments: 100, [c_last_name#31 ASC NULLS FIRST, c_first_name#30 ASC NULLS FIRST, ca_city#33 ASC NULLS FIRST, bought_city#23 ASC NULLS FIRST, ss_ticket_number#5 ASC NULLS FIRST], [c_last_name#31, c_first_name#30, ca_city#33, bought_city#23, ss_ticket_number#5, amt#24, profit#25]

