== Physical Plan ==
* ColumnarToRow (49)
+- CometSort (48)
   +- CometColumnarExchange (47)
      +- * BroadcastHashJoin Inner BuildRight (46)
         :- * Project (24)
         :  +- * Filter (23)
         :     +- * HashAggregate (22)
         :        +- Exchange (21)
         :           +- * HashAggregate (20)
         :              +- * ColumnarToRow (19)
         :                 +- CometProject (18)
         :                    +- CometBroadcastHashJoin (17)
         :                       :- CometProject (12)
         :                       :  +- CometBroadcastHashJoin (11)
         :                       :     :- CometProject (7)
         :                       :     :  +- CometBroadcastHashJoin (6)
         :                       :     :     :- CometFilter (2)
         :                       :     :     :  +- CometNativeScan: `spark_catalog`.`default`.`inventory` (1)
         :                       :     :     +- CometBroadcastExchange (5)
         :                       :     :        +- CometFilter (4)
         :                       :     :           +- CometNativeScan: `spark_catalog`.`default`.`item` (3)
         :                       :     +- CometBroadcastExchange (10)
         :                       :        +- CometFilter (9)
         :                       :           +- CometNativeScan: `spark_catalog`.`default`.`warehouse` (8)
         :                       +- CometBroadcastExchange (16)
         :                          +- CometProject (15)
         :                             +- CometFilter (14)
         :                                +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (13)
         +- BroadcastExchange (45)
            +- * Project (44)
               +- * Filter (43)
                  +- * HashAggregate (42)
                     +- Exchange (41)
                        +- * HashAggregate (40)
                           +- * ColumnarToRow (39)
                              +- CometProject (38)
                                 +- CometBroadcastHashJoin (37)
                                    :- CometProject (32)
                                    :  +- CometBroadcastHashJoin (31)
                                    :     :- CometProject (29)
                                    :     :  +- CometBroadcastHashJoin (28)
                                    :     :     :- CometFilter (26)
                                    :     :     :  +- CometNativeScan: `spark_catalog`.`default`.`inventory` (25)
                                    :     :     +- ReusedExchange (27)
                                    :     +- ReusedExchange (30)
                                    +- CometBroadcastExchange (36)
                                       +- CometProject (35)
                                          +- CometFilter (34)
                                             +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (33)


(1) CometNativeScan: `spark_catalog`.`default`.`inventory`
Output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Arguments: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]

(2) CometFilter
Input [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Condition : (isnotnull(inv_item_sk#1) AND isnotnull(inv_warehouse_sk#2))

(3) CometNativeScan: `spark_catalog`.`default`.`item`
Output [1]: [i_item_sk#5]
Arguments: [i_item_sk#5]

(4) CometFilter
Input [1]: [i_item_sk#5]
Condition : isnotnull(i_item_sk#5)

(5) CometBroadcastExchange
Input [1]: [i_item_sk#5]
Arguments: [i_item_sk#5]

(6) CometBroadcastHashJoin
Left output [4]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4]
Right output [1]: [i_item_sk#5]
Arguments: [inv_item_sk#1], [i_item_sk#5], Inner, BuildRight

(7) CometProject
Input [5]: [inv_item_sk#1, inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5]
Arguments: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5], [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5]

(8) CometNativeScan: `spark_catalog`.`default`.`warehouse`
Output [2]: [w_warehouse_sk#6, w_warehouse_name#7]
Arguments: [w_warehouse_sk#6, w_warehouse_name#7]

(9) CometFilter
Input [2]: [w_warehouse_sk#6, w_warehouse_name#7]
Condition : isnotnull(w_warehouse_sk#6)

(10) CometBroadcastExchange
Input [2]: [w_warehouse_sk#6, w_warehouse_name#7]
Arguments: [w_warehouse_sk#6, w_warehouse_name#7]

(11) CometBroadcastHashJoin
Left output [4]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5]
Right output [2]: [w_warehouse_sk#6, w_warehouse_name#7]
Arguments: [inv_warehouse_sk#2], [w_warehouse_sk#6], Inner, BuildRight

(12) CometProject
Input [6]: [inv_warehouse_sk#2, inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7]
Arguments: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7], [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7]

(13) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [3]: [d_date_sk#8, d_year#9, d_moy#10]
Arguments: [d_date_sk#8, d_year#9, d_moy#10]

(14) CometFilter
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]
Condition : ((((isnotnull(d_year#9) AND isnotnull(d_moy#10)) AND (d_year#9 = 2001)) AND (d_moy#10 = 1)) AND isnotnull(d_date_sk#8))

(15) CometProject
Input [3]: [d_date_sk#8, d_year#9, d_moy#10]
Arguments: [d_date_sk#8, d_moy#10], [d_date_sk#8, d_moy#10]

(16) CometBroadcastExchange
Input [2]: [d_date_sk#8, d_moy#10]
Arguments: [d_date_sk#8, d_moy#10]

(17) CometBroadcastHashJoin
Left output [5]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7]
Right output [2]: [d_date_sk#8, d_moy#10]
Arguments: [inv_date_sk#4], [d_date_sk#8], Inner, BuildRight

(18) CometProject
Input [7]: [inv_quantity_on_hand#3, inv_date_sk#4, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_date_sk#8, d_moy#10]
Arguments: [inv_quantity_on_hand#3, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_moy#10], [inv_quantity_on_hand#3, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_moy#10]

(19) ColumnarToRow [codegen id : 1]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_moy#10]

(20) HashAggregate [codegen id : 1]
Input [5]: [inv_quantity_on_hand#3, i_item_sk#5, w_warehouse_sk#6, w_warehouse_name#7, d_moy#10]
Keys [4]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#10]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#3 as double)), partial_avg(inv_quantity_on_hand#3)]
Aggregate Attributes [5]: [n#11, avg#12, m2#13, sum#14, count#15]
Results [9]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]

(21) Exchange
Input [9]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]
Arguments: hashpartitioning(w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#10, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(22) HashAggregate [codegen id : 4]
Input [9]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#10, n#16, avg#17, m2#18, sum#19, count#20]
Keys [4]: [w_warehouse_name#7, w_warehouse_sk#6, i_item_sk#5, d_moy#10]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double)), avg(inv_quantity_on_hand#3)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#3 as double))#21, avg(inv_quantity_on_hand#3)#22]
Results [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, stddev_samp(cast(inv_quantity_on_hand#3 as double))#21 AS stdev#23, avg(inv_quantity_on_hand#3)#22 AS mean#24]

(23) Filter [codegen id : 4]
Input [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, stdev#23, mean#24]
Condition : (CASE WHEN (knownfloatingpointnormalized(normalizenanandzero(mean#24)) = 0.0) THEN false ELSE (knownfloatingpointnormalized(normalizenanandzero((stdev#23 / knownfloatingpointnormalized(normalizenanandzero(mean#24))))) > 1.0) END AND CASE WHEN (knownfloatingpointnormalized(normalizenanandzero(mean#24)) = 0.0) THEN false ELSE (knownfloatingpointnormalized(normalizenanandzero((stdev#23 / knownfloatingpointnormalized(normalizenanandzero(mean#24))))) > 1.5) END)

(24) Project [codegen id : 4]
Output [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, mean#24, CASE WHEN (knownfloatingpointnormalized(normalizenanandzero(mean#24)) = 0.0) THEN null ELSE (stdev#23 / knownfloatingpointnormalized(normalizenanandzero(mean#24))) END AS cov#25]
Input [5]: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, stdev#23, mean#24]

(25) CometNativeScan: `spark_catalog`.`default`.`inventory`
Output [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]
Arguments: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]

(26) CometFilter
Input [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]
Condition : (isnotnull(inv_item_sk#26) AND isnotnull(inv_warehouse_sk#27))

(27) ReusedExchange [Reuses operator id: 5]
Output [1]: [i_item_sk#30]

(28) CometBroadcastHashJoin
Left output [4]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29]
Right output [1]: [i_item_sk#30]
Arguments: [inv_item_sk#26], [i_item_sk#30], Inner, BuildRight

(29) CometProject
Input [5]: [inv_item_sk#26, inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30]
Arguments: [inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30], [inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30]

(30) ReusedExchange [Reuses operator id: 10]
Output [2]: [w_warehouse_sk#31, w_warehouse_name#32]

(31) CometBroadcastHashJoin
Left output [4]: [inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30]
Right output [2]: [w_warehouse_sk#31, w_warehouse_name#32]
Arguments: [inv_warehouse_sk#27], [w_warehouse_sk#31], Inner, BuildRight

(32) CometProject
Input [6]: [inv_warehouse_sk#27, inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32]
Arguments: [inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32], [inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32]

(33) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [3]: [d_date_sk#33, d_year#34, d_moy#35]
Arguments: [d_date_sk#33, d_year#34, d_moy#35]

(34) CometFilter
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]
Condition : ((((isnotnull(d_year#34) AND isnotnull(d_moy#35)) AND (d_year#34 = 2001)) AND (d_moy#35 = 2)) AND isnotnull(d_date_sk#33))

(35) CometProject
Input [3]: [d_date_sk#33, d_year#34, d_moy#35]
Arguments: [d_date_sk#33, d_moy#35], [d_date_sk#33, d_moy#35]

(36) CometBroadcastExchange
Input [2]: [d_date_sk#33, d_moy#35]
Arguments: [d_date_sk#33, d_moy#35]

(37) CometBroadcastHashJoin
Left output [5]: [inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32]
Right output [2]: [d_date_sk#33, d_moy#35]
Arguments: [inv_date_sk#29], [d_date_sk#33], Inner, BuildRight

(38) CometProject
Input [7]: [inv_quantity_on_hand#28, inv_date_sk#29, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32, d_date_sk#33, d_moy#35]
Arguments: [inv_quantity_on_hand#28, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32, d_moy#35], [inv_quantity_on_hand#28, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32, d_moy#35]

(39) ColumnarToRow [codegen id : 2]
Input [5]: [inv_quantity_on_hand#28, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32, d_moy#35]

(40) HashAggregate [codegen id : 2]
Input [5]: [inv_quantity_on_hand#28, i_item_sk#30, w_warehouse_sk#31, w_warehouse_name#32, d_moy#35]
Keys [4]: [w_warehouse_name#32, w_warehouse_sk#31, i_item_sk#30, d_moy#35]
Functions [2]: [partial_stddev_samp(cast(inv_quantity_on_hand#28 as double)), partial_avg(inv_quantity_on_hand#28)]
Aggregate Attributes [5]: [n#36, avg#37, m2#38, sum#39, count#40]
Results [9]: [w_warehouse_name#32, w_warehouse_sk#31, i_item_sk#30, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]

(41) Exchange
Input [9]: [w_warehouse_name#32, w_warehouse_sk#31, i_item_sk#30, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]
Arguments: hashpartitioning(w_warehouse_name#32, w_warehouse_sk#31, i_item_sk#30, d_moy#35, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(42) HashAggregate [codegen id : 3]
Input [9]: [w_warehouse_name#32, w_warehouse_sk#31, i_item_sk#30, d_moy#35, n#41, avg#42, m2#43, sum#44, count#45]
Keys [4]: [w_warehouse_name#32, w_warehouse_sk#31, i_item_sk#30, d_moy#35]
Functions [2]: [stddev_samp(cast(inv_quantity_on_hand#28 as double)), avg(inv_quantity_on_hand#28)]
Aggregate Attributes [2]: [stddev_samp(cast(inv_quantity_on_hand#28 as double))#21, avg(inv_quantity_on_hand#28)#22]
Results [5]: [w_warehouse_sk#31, i_item_sk#30, d_moy#35, stddev_samp(cast(inv_quantity_on_hand#28 as double))#21 AS stdev#46, avg(inv_quantity_on_hand#28)#22 AS mean#47]

(43) Filter [codegen id : 3]
Input [5]: [w_warehouse_sk#31, i_item_sk#30, d_moy#35, stdev#46, mean#47]
Condition : CASE WHEN (knownfloatingpointnormalized(normalizenanandzero(mean#47)) = 0.0) THEN false ELSE (knownfloatingpointnormalized(normalizenanandzero((stdev#46 / knownfloatingpointnormalized(normalizenanandzero(mean#47))))) > 1.0) END

(44) Project [codegen id : 3]
Output [5]: [w_warehouse_sk#31, i_item_sk#30, d_moy#35, mean#47, CASE WHEN (knownfloatingpointnormalized(normalizenanandzero(mean#47)) = 0.0) THEN null ELSE (stdev#46 / knownfloatingpointnormalized(normalizenanandzero(mean#47))) END AS cov#48]
Input [5]: [w_warehouse_sk#31, i_item_sk#30, d_moy#35, stdev#46, mean#47]

(45) BroadcastExchange
Input [5]: [w_warehouse_sk#31, i_item_sk#30, d_moy#35, mean#47, cov#48]
Arguments: HashedRelationBroadcastMode(List((shiftleft(cast(input[1, int, true] as bigint), 32) | (cast(input[0, int, true] as bigint) & 4294967295))),false), [plan_id=3]

(46) BroadcastHashJoin [codegen id : 4]
Left keys [2]: [i_item_sk#5, w_warehouse_sk#6]
Right keys [2]: [i_item_sk#30, w_warehouse_sk#31]
Join type: Inner
Join condition: None

(47) CometColumnarExchange
Input [10]: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, mean#24, cov#25, w_warehouse_sk#31, i_item_sk#30, d_moy#35, mean#47, cov#48]
Arguments: rangepartitioning(w_warehouse_sk#6 ASC NULLS FIRST, i_item_sk#5 ASC NULLS FIRST, d_moy#10 ASC NULLS FIRST, mean#24 ASC NULLS FIRST, cov#25 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, mean#47 ASC NULLS FIRST, cov#48 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(48) CometSort
Input [10]: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, mean#24, cov#25, w_warehouse_sk#31, i_item_sk#30, d_moy#35, mean#47, cov#48]
Arguments: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, mean#24, cov#25, w_warehouse_sk#31, i_item_sk#30, d_moy#35, mean#47, cov#48], [w_warehouse_sk#6 ASC NULLS FIRST, i_item_sk#5 ASC NULLS FIRST, d_moy#10 ASC NULLS FIRST, mean#24 ASC NULLS FIRST, cov#25 ASC NULLS FIRST, d_moy#35 ASC NULLS FIRST, mean#47 ASC NULLS FIRST, cov#48 ASC NULLS FIRST]

(49) ColumnarToRow [codegen id : 5]
Input [10]: [w_warehouse_sk#6, i_item_sk#5, d_moy#10, mean#24, cov#25, w_warehouse_sk#31, i_item_sk#30, d_moy#35, mean#47, cov#48]

