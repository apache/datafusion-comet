== Physical Plan ==
* HashAggregate (35)
+- * CometColumnarToRow (34)
   +- CometColumnarExchange (33)
      +- * HashAggregate (32)
         +- * CometColumnarToRow (31)
            +- CometProject (30)
               +- CometBroadcastHashJoin (29)
                  :- CometProject (25)
                  :  +- CometBroadcastHashJoin (24)
                  :     :- CometProject (19)
                  :     :  +- CometBroadcastHashJoin (18)
                  :     :     :- CometProject (13)
                  :     :     :  +- CometBroadcastHashJoin (12)
                  :     :     :     :- CometProject (7)
                  :     :     :     :  +- CometBroadcastHashJoin (6)
                  :     :     :     :     :- CometFilter (2)
                  :     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                  :     :     :     :     +- CometBroadcastExchange (5)
                  :     :     :     :        +- CometFilter (4)
                  :     :     :     :           +- CometScan parquet spark_catalog.default.store (3)
                  :     :     :     +- CometBroadcastExchange (11)
                  :     :     :        +- CometProject (10)
                  :     :     :           +- CometFilter (9)
                  :     :     :              +- CometScan parquet spark_catalog.default.customer_address (8)
                  :     :     +- CometBroadcastExchange (17)
                  :     :        +- CometProject (16)
                  :     :           +- CometFilter (15)
                  :     :              +- CometScan parquet spark_catalog.default.date_dim (14)
                  :     +- CometBroadcastExchange (23)
                  :        +- CometProject (22)
                  :           +- CometFilter (21)
                  :              +- CometScan parquet spark_catalog.default.customer_demographics (20)
                  +- CometBroadcastExchange (28)
                     +- CometFilter (27)
                        +- CometScan parquet spark_catalog.default.household_demographics (26)


(1) CometScan parquet spark_catalog.default.store_sales
Output [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#10), dynamicpruningexpression(ss_sold_date_sk#10 IN dynamicpruning#11)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_addr_sk), IsNotNull(ss_cdemo_sk), IsNotNull(ss_hdemo_sk), Or(Or(And(GreaterThanOrEqual(ss_net_profit,100.00),LessThanOrEqual(ss_net_profit,200.00)),And(GreaterThanOrEqual(ss_net_profit,150.00),LessThanOrEqual(ss_net_profit,300.00))),And(GreaterThanOrEqual(ss_net_profit,50.00),LessThanOrEqual(ss_net_profit,250.00))), Or(Or(And(GreaterThanOrEqual(ss_sales_price,100.00),LessThanOrEqual(ss_sales_price,150.00)),And(GreaterThanOrEqual(ss_sales_price,50.00),LessThanOrEqual(ss_sales_price,100.00))),And(GreaterThanOrEqual(ss_sales_price,150.00),LessThanOrEqual(ss_sales_price,200.00)))]
ReadSchema: struct<ss_cdemo_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2),ss_ext_sales_price:decimal(7,2),ss_ext_wholesale_cost:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Condition : (((((isnotnull(ss_store_sk#4) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_cdemo_sk#1)) AND isnotnull(ss_hdemo_sk#2)) AND ((((ss_net_profit#9 >= 100.00) AND (ss_net_profit#9 <= 200.00)) OR ((ss_net_profit#9 >= 150.00) AND (ss_net_profit#9 <= 300.00))) OR ((ss_net_profit#9 >= 50.00) AND (ss_net_profit#9 <= 250.00)))) AND ((((ss_sales_price#6 >= 100.00) AND (ss_sales_price#6 <= 150.00)) OR ((ss_sales_price#6 >= 50.00) AND (ss_sales_price#6 <= 100.00))) OR ((ss_sales_price#6 >= 150.00) AND (ss_sales_price#6 <= 200.00))))

(3) CometScan parquet spark_catalog.default.store
Output [1]: [s_store_sk#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(4) CometFilter
Input [1]: [s_store_sk#12]
Condition : isnotnull(s_store_sk#12)

(5) CometBroadcastExchange
Input [1]: [s_store_sk#12]
Arguments: [s_store_sk#12]

(6) CometBroadcastHashJoin
Left output [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Right output [1]: [s_store_sk#12]
Arguments: [ss_store_sk#4], [s_store_sk#12], Inner, BuildRight

(7) CometProject
Input [11]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, s_store_sk#12]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10], [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]

(8) CometScan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#13, ca_state#14, ca_country#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(9) CometFilter
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]
Condition : (((isnotnull(ca_country#15) AND (ca_country#15 = United States)) AND isnotnull(ca_address_sk#13)) AND ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#14, 2, true, false, true) IN (TX,OH) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#14, 2, true, false, true) IN (OR,NM,KY)) OR staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#14, 2, true, false, true) IN (VA,TX,MS)))

(10) CometProject
Input [3]: [ca_address_sk#13, ca_state#14, ca_country#15]
Arguments: [ca_address_sk#13, ca_state#16], [ca_address_sk#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, ca_state#14, 2, true, false, true) AS ca_state#16]

(11) CometBroadcastExchange
Input [2]: [ca_address_sk#13, ca_state#16]
Arguments: [ca_address_sk#13, ca_state#16]

(12) CometBroadcastHashJoin
Left output [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Right output [2]: [ca_address_sk#13, ca_state#16]
Arguments: [ss_addr_sk#3], [ca_address_sk#13], Inner, ((((ca_state#16 IN (TX,OH) AND (ss_net_profit#9 >= 100.00)) AND (ss_net_profit#9 <= 200.00)) OR ((ca_state#16 IN (OR,NM,KY) AND (ss_net_profit#9 >= 150.00)) AND (ss_net_profit#9 <= 300.00))) OR ((ca_state#16 IN (VA,TX,MS) AND (ss_net_profit#9 >= 50.00)) AND (ss_net_profit#9 <= 250.00))), BuildRight

(13) CometProject
Input [11]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, ca_address_sk#13, ca_state#16]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10], [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10]

(14) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#17, d_year#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(15) CometFilter
Input [2]: [d_date_sk#17, d_year#18]
Condition : ((isnotnull(d_year#18) AND (d_year#18 = 2001)) AND isnotnull(d_date_sk#17))

(16) CometProject
Input [2]: [d_date_sk#17, d_year#18]
Arguments: [d_date_sk#17], [d_date_sk#17]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: [d_date_sk#17]

(18) CometBroadcastHashJoin
Left output [7]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10]
Right output [1]: [d_date_sk#17]
Arguments: [ss_sold_date_sk#10], [d_date_sk#17], Inner, BuildRight

(19) CometProject
Input [8]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10, d_date_sk#17]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8], [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]

(20) CometScan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(21) CometFilter
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Condition : (isnotnull(cd_demo_sk#19) AND ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = M) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = Advanced Degree     )) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = S) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = College             ))) OR ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) = W) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) = 2 yr Degree         ))))

(22) CometProject
Input [3]: [cd_demo_sk#19, cd_marital_status#20, cd_education_status#21]
Arguments: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23], [cd_demo_sk#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#20, 1, true, false, true) AS cd_marital_status#22, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#21, 20, true, false, true) AS cd_education_status#23]

(23) CometBroadcastExchange
Input [3]: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]

(24) CometBroadcastHashJoin
Left output [6]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Right output [3]: [cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [ss_cdemo_sk#1], [cd_demo_sk#19], Inner, ((((((cd_marital_status#22 = M) AND (cd_education_status#23 = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) OR ((((cd_marital_status#22 = S) AND (cd_education_status#23 = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00))) OR ((((cd_marital_status#22 = W) AND (cd_education_status#23 = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00))), BuildRight

(25) CometProject
Input [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_demo_sk#19, cd_marital_status#22, cd_education_status#23]
Arguments: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#22, cd_education_status#23], [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#22, cd_education_status#23]

(26) CometScan parquet spark_catalog.default.household_demographics
Output [2]: [hd_demo_sk#24, hd_dep_count#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [IsNotNull(hd_demo_sk), Or(EqualTo(hd_dep_count,3),EqualTo(hd_dep_count,1))]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int>

(27) CometFilter
Input [2]: [hd_demo_sk#24, hd_dep_count#25]
Condition : (isnotnull(hd_demo_sk#24) AND ((hd_dep_count#25 = 3) OR (hd_dep_count#25 = 1)))

(28) CometBroadcastExchange
Input [2]: [hd_demo_sk#24, hd_dep_count#25]
Arguments: [hd_demo_sk#24, hd_dep_count#25]

(29) CometBroadcastHashJoin
Left output [7]: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#22, cd_education_status#23]
Right output [2]: [hd_demo_sk#24, hd_dep_count#25]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#24], Inner, (((((((cd_marital_status#22 = M) AND (cd_education_status#23 = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) AND (hd_dep_count#25 = 3)) OR (((((cd_marital_status#22 = S) AND (cd_education_status#23 = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00)) AND (hd_dep_count#25 = 1))) OR (((((cd_marital_status#22 = W) AND (cd_education_status#23 = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00)) AND (hd_dep_count#25 = 1))), BuildRight

(30) CometProject
Input [9]: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#22, cd_education_status#23, hd_demo_sk#24, hd_dep_count#25]
Arguments: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8], [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]

(31) CometColumnarToRow [codegen id : 1]
Input [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]

(32) HashAggregate [codegen id : 1]
Input [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Keys: []
Functions [4]: [partial_avg(ss_quantity#5), partial_avg(UnscaledValue(ss_ext_sales_price#7)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#8)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [7]: [sum#26, count#27, sum#28, count#29, sum#30, count#31, sum#32]
Results [7]: [sum#33, count#34, sum#35, count#36, sum#37, count#38, sum#39]

(33) CometColumnarExchange
Input [7]: [sum#33, count#34, sum#35, count#36, sum#37, count#38, sum#39]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(34) CometColumnarToRow [codegen id : 2]
Input [7]: [sum#33, count#34, sum#35, count#36, sum#37, count#38, sum#39]

(35) HashAggregate [codegen id : 2]
Input [7]: [sum#33, count#34, sum#35, count#36, sum#37, count#38, sum#39]
Keys: []
Functions [4]: [avg(ss_quantity#5), avg(UnscaledValue(ss_ext_sales_price#7)), avg(UnscaledValue(ss_ext_wholesale_cost#8)), sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [4]: [avg(ss_quantity#5)#40, avg(UnscaledValue(ss_ext_sales_price#7))#41, avg(UnscaledValue(ss_ext_wholesale_cost#8))#42, sum(UnscaledValue(ss_ext_wholesale_cost#8))#43]
Results [4]: [avg(ss_quantity#5)#40 AS avg(ss_quantity)#44, cast((avg(UnscaledValue(ss_ext_sales_price#7))#41 / 100.0) as decimal(11,6)) AS avg(ss_ext_sales_price)#45, cast((avg(UnscaledValue(ss_ext_wholesale_cost#8))#42 / 100.0) as decimal(11,6)) AS avg(ss_ext_wholesale_cost)#46, MakeDecimal(sum(UnscaledValue(ss_ext_wholesale_cost#8))#43,17,2) AS sum(ss_ext_wholesale_cost)#47]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#10 IN dynamicpruning#11
BroadcastExchange (40)
+- * CometColumnarToRow (39)
   +- CometProject (38)
      +- CometFilter (37)
         +- CometScan parquet spark_catalog.default.date_dim (36)


(36) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#17, d_year#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(37) CometFilter
Input [2]: [d_date_sk#17, d_year#18]
Condition : ((isnotnull(d_year#18) AND (d_year#18 = 2001)) AND isnotnull(d_date_sk#17))

(38) CometProject
Input [2]: [d_date_sk#17, d_year#18]
Arguments: [d_date_sk#17], [d_date_sk#17]

(39) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#17]

(40) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]


