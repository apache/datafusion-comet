== Physical Plan ==
TakeOrderedAndProject (30)
+- * Project (29)
   +- * Filter (28)
      +- Window (27)
         +- * CometColumnarToRow (26)
            +- CometSort (25)
               +- CometColumnarExchange (24)
                  +- * HashAggregate (23)
                     +- * CometColumnarToRow (22)
                        +- CometExchange (21)
                           +- CometHashAggregate (20)
                              +- CometProject (19)
                                 +- CometBroadcastHashJoin (18)
                                    :- CometProject (14)
                                    :  +- CometBroadcastHashJoin (13)
                                    :     :- CometProject (8)
                                    :     :  +- CometBroadcastHashJoin (7)
                                    :     :     :- CometProject (3)
                                    :     :     :  +- CometFilter (2)
                                    :     :     :     +- CometNativeScan parquet spark_catalog.default.item (1)
                                    :     :     +- CometBroadcastExchange (6)
                                    :     :        +- CometFilter (5)
                                    :     :           +- CometNativeScan parquet spark_catalog.default.store_sales (4)
                                    :     +- CometBroadcastExchange (12)
                                    :        +- CometProject (11)
                                    :           +- CometFilter (10)
                                    :              +- CometNativeScan parquet spark_catalog.default.date_dim (9)
                                    +- CometBroadcastExchange (17)
                                       +- CometFilter (16)
                                          +- CometNativeScan parquet spark_catalog.default.store (15)


(1) CometNativeScan parquet spark_catalog.default.item
Output [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_manager_id:int>

(2) CometFilter
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Condition : ((((static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#4, 50)) IN (Books                                             ,Children                                          ,Electronics                                       ) AND static_invoke(CharVarcharCodegenUtils.readSidePadding(i_class#3, 50)) IN (personal                                          ,portable                                          ,refernece                                         ,self-help                                         )) AND static_invoke(CharVarcharCodegenUtils.readSidePadding(i_brand#2, 50)) IN (scholaramalgamalg #6                             ,scholaramalgamalg #7                              ,exportiunivamalg #8                               ,scholaramalgamalg #8                              )) OR ((static_invoke(CharVarcharCodegenUtils.readSidePadding(i_category#4, 50)) IN (Women                                             ,Music                                             ,Men                                               ) AND static_invoke(CharVarcharCodegenUtils.readSidePadding(i_class#3, 50)) IN (accessories                                       ,classical                                         ,fragrances                                        ,pants                                             )) AND static_invoke(CharVarcharCodegenUtils.readSidePadding(i_brand#2, 50)) IN (amalgimporto #9                                   ,edu packscholar #9                                ,exportiimporto #9                                 ,importoamalg #9                                   ))) AND isnotnull(i_item_sk#1))

(3) CometProject
Input [5]: [i_item_sk#1, i_brand#2, i_class#3, i_category#4, i_manager_id#5]
Arguments: [i_item_sk#1, i_manager_id#5], [i_item_sk#1, i_manager_id#5]

(4) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#13)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Condition : (isnotnull(ss_item_sk#10) AND isnotnull(ss_store_sk#11))

(6) CometBroadcastExchange
Input [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Arguments: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]

(7) CometBroadcastHashJoin
Left output [2]: [i_item_sk#1, i_manager_id#5]
Right output [4]: [ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Arguments: [i_item_sk#1], [ss_item_sk#10], Inner, BuildRight

(8) CometProject
Input [6]: [i_item_sk#1, i_manager_id#5, ss_item_sk#10, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Arguments: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13], [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#14, d_month_seq#15, d_moy#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [In(d_month_seq, [1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_moy:int>

(10) CometFilter
Input [3]: [d_date_sk#14, d_month_seq#15, d_moy#16]
Condition : (d_month_seq#15 INSET 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211 AND isnotnull(d_date_sk#14))

(11) CometProject
Input [3]: [d_date_sk#14, d_month_seq#15, d_moy#16]
Arguments: [d_date_sk#14, d_moy#16], [d_date_sk#14, d_moy#16]

(12) CometBroadcastExchange
Input [2]: [d_date_sk#14, d_moy#16]
Arguments: [d_date_sk#14, d_moy#16]

(13) CometBroadcastHashJoin
Left output [4]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13]
Right output [2]: [d_date_sk#14, d_moy#16]
Arguments: [ss_sold_date_sk#13], [d_date_sk#14], Inner, BuildRight

(14) CometProject
Input [6]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, ss_sold_date_sk#13, d_date_sk#14, d_moy#16]
Arguments: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#16], [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#16]

(15) CometNativeScan parquet spark_catalog.default.store
Output [1]: [s_store_sk#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(16) CometFilter
Input [1]: [s_store_sk#17]
Condition : isnotnull(s_store_sk#17)

(17) CometBroadcastExchange
Input [1]: [s_store_sk#17]
Arguments: [s_store_sk#17]

(18) CometBroadcastHashJoin
Left output [4]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#16]
Right output [1]: [s_store_sk#17]
Arguments: [ss_store_sk#11], [s_store_sk#17], Inner, BuildRight

(19) CometProject
Input [5]: [i_manager_id#5, ss_store_sk#11, ss_sales_price#12, d_moy#16, s_store_sk#17]
Arguments: [i_manager_id#5, ss_sales_price#12, d_moy#16], [i_manager_id#5, ss_sales_price#12, d_moy#16]

(20) CometHashAggregate
Input [3]: [i_manager_id#5, ss_sales_price#12, d_moy#16]
Keys [2]: [i_manager_id#5, d_moy#16]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#12))]

(21) CometExchange
Input [3]: [i_manager_id#5, d_moy#16, sum#18]
Arguments: hashpartitioning(i_manager_id#5, d_moy#16, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(22) CometColumnarToRow [codegen id : 1]
Input [3]: [i_manager_id#5, d_moy#16, sum#18]

(23) HashAggregate [codegen id : 1]
Input [3]: [i_manager_id#5, d_moy#16, sum#18]
Keys [2]: [i_manager_id#5, d_moy#16]
Functions [1]: [sum(UnscaledValue(ss_sales_price#12))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#12))#19]
Results [3]: [i_manager_id#5, MakeDecimal(sum(UnscaledValue(ss_sales_price#12))#19,17,2) AS sum_sales#20, MakeDecimal(sum(UnscaledValue(ss_sales_price#12))#19,17,2) AS _w0#21]

(24) CometColumnarExchange
Input [3]: [i_manager_id#5, sum_sales#20, _w0#21]
Arguments: hashpartitioning(i_manager_id#5, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(25) CometSort
Input [3]: [i_manager_id#5, sum_sales#20, _w0#21]
Arguments: [i_manager_id#5, sum_sales#20, _w0#21], [i_manager_id#5 ASC NULLS FIRST]

(26) CometColumnarToRow [codegen id : 2]
Input [3]: [i_manager_id#5, sum_sales#20, _w0#21]

(27) Window
Input [3]: [i_manager_id#5, sum_sales#20, _w0#21]
Arguments: [avg(_w0#21) windowspecdefinition(i_manager_id#5, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#22], [i_manager_id#5]

(28) Filter [codegen id : 3]
Input [4]: [i_manager_id#5, sum_sales#20, _w0#21, avg_monthly_sales#22]
Condition : CASE WHEN (avg_monthly_sales#22 > 0.000000) THEN ((abs((sum_sales#20 - avg_monthly_sales#22)) / avg_monthly_sales#22) > 0.1000000000000000) ELSE false END

(29) Project [codegen id : 3]
Output [3]: [i_manager_id#5, sum_sales#20, avg_monthly_sales#22]
Input [4]: [i_manager_id#5, sum_sales#20, _w0#21, avg_monthly_sales#22]

(30) TakeOrderedAndProject
Input [3]: [i_manager_id#5, sum_sales#20, avg_monthly_sales#22]
Arguments: 100, [i_manager_id#5 ASC NULLS FIRST, avg_monthly_sales#22 ASC NULLS FIRST, sum_sales#20 ASC NULLS FIRST], [i_manager_id#5, sum_sales#20, avg_monthly_sales#22]

