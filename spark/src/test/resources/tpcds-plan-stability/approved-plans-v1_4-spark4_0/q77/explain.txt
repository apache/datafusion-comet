== Physical Plan ==
TakeOrderedAndProject (86)
+- * HashAggregate (85)
   +- Exchange (84)
      +- * HashAggregate (83)
         +- * Expand (82)
            +- Union (81)
               :- * Project (32)
               :  +- * BroadcastHashJoin LeftOuter BuildRight (31)
               :     :- * HashAggregate (17)
               :     :  +- Exchange (16)
               :     :     +- * HashAggregate (15)
               :     :        +- * ColumnarToRow (14)
               :     :           +- CometProject (13)
               :     :              +- CometBroadcastHashJoin (12)
               :     :                 :- CometProject (8)
               :     :                 :  +- CometBroadcastHashJoin (7)
               :     :                 :     :- CometFilter (2)
               :     :                 :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
               :     :                 :     +- CometBroadcastExchange (6)
               :     :                 :        +- CometProject (5)
               :     :                 :           +- CometFilter (4)
               :     :                 :              +- CometScan parquet spark_catalog.default.date_dim (3)
               :     :                 +- CometBroadcastExchange (11)
               :     :                    +- CometFilter (10)
               :     :                       +- CometScan parquet spark_catalog.default.store (9)
               :     +- BroadcastExchange (30)
               :        +- * HashAggregate (29)
               :           +- Exchange (28)
               :              +- * HashAggregate (27)
               :                 +- * ColumnarToRow (26)
               :                    +- CometProject (25)
               :                       +- CometBroadcastHashJoin (24)
               :                          :- CometProject (22)
               :                          :  +- CometBroadcastHashJoin (21)
               :                          :     :- CometFilter (19)
               :                          :     :  +- CometScan parquet spark_catalog.default.store_returns (18)
               :                          :     +- ReusedExchange (20)
               :                          +- ReusedExchange (23)
               :- * Project (51)
               :  +- * BroadcastNestedLoopJoin Inner BuildLeft (50)
               :     :- BroadcastExchange (41)
               :     :  +- * HashAggregate (40)
               :     :     +- Exchange (39)
               :     :        +- * HashAggregate (38)
               :     :           +- * ColumnarToRow (37)
               :     :              +- CometProject (36)
               :     :                 +- CometBroadcastHashJoin (35)
               :     :                    :- CometScan parquet spark_catalog.default.catalog_sales (33)
               :     :                    +- ReusedExchange (34)
               :     +- * HashAggregate (49)
               :        +- Exchange (48)
               :           +- * HashAggregate (47)
               :              +- * ColumnarToRow (46)
               :                 +- CometProject (45)
               :                    +- CometBroadcastHashJoin (44)
               :                       :- CometScan parquet spark_catalog.default.catalog_returns (42)
               :                       +- ReusedExchange (43)
               +- * Project (80)
                  +- * BroadcastHashJoin LeftOuter BuildRight (79)
                     :- * HashAggregate (65)
                     :  +- Exchange (64)
                     :     +- * HashAggregate (63)
                     :        +- * ColumnarToRow (62)
                     :           +- CometProject (61)
                     :              +- CometBroadcastHashJoin (60)
                     :                 :- CometProject (56)
                     :                 :  +- CometBroadcastHashJoin (55)
                     :                 :     :- CometFilter (53)
                     :                 :     :  +- CometScan parquet spark_catalog.default.web_sales (52)
                     :                 :     +- ReusedExchange (54)
                     :                 +- CometBroadcastExchange (59)
                     :                    +- CometFilter (58)
                     :                       +- CometScan parquet spark_catalog.default.web_page (57)
                     +- BroadcastExchange (78)
                        +- * HashAggregate (77)
                           +- Exchange (76)
                              +- * HashAggregate (75)
                                 +- * ColumnarToRow (74)
                                    +- CometProject (73)
                                       +- CometBroadcastHashJoin (72)
                                          :- CometProject (70)
                                          :  +- CometBroadcastHashJoin (69)
                                          :     :- CometFilter (67)
                                          :     :  +- CometScan parquet spark_catalog.default.web_returns (66)
                                          :     +- ReusedExchange (68)
                                          +- ReusedExchange (71)


(1) Scan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(4) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 2000-08-03)) AND (d_date#7 <= 2000-09-02)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]
Arguments: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3], [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]

(9) Scan parquet spark_catalog.default.store
Output [1]: [s_store_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(10) CometFilter
Input [1]: [s_store_sk#8]
Condition : isnotnull(s_store_sk#8)

(11) CometBroadcastExchange
Input [1]: [s_store_sk#8]
Arguments: [s_store_sk#8]

(12) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Right output [1]: [s_store_sk#8]
Arguments: [ss_store_sk#1], [s_store_sk#8], Inner, BuildRight

(13) CometProject
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Arguments: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8], [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]

(14) ColumnarToRow [codegen id : 1]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]

(15) HashAggregate [codegen id : 1]
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Keys [1]: [s_store_sk#8]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum#9, sum#10]
Results [3]: [s_store_sk#8, sum#11, sum#12]

(16) Exchange
Input [3]: [s_store_sk#8, sum#11, sum#12]
Arguments: hashpartitioning(s_store_sk#8, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(17) HashAggregate [codegen id : 4]
Input [3]: [s_store_sk#8, sum#11, sum#12]
Keys [1]: [s_store_sk#8]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_ext_sales_price#2))#13, sum(UnscaledValue(ss_net_profit#3))#14]
Results [3]: [s_store_sk#8, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#13,17,2) AS sales#15, MakeDecimal(sum(UnscaledValue(ss_net_profit#3))#14,17,2) AS profit#16]

(18) Scan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19, sr_returned_date_sk#20]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#20), dynamicpruningexpression(sr_returned_date_sk#20 IN dynamicpruning#21)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(19) CometFilter
Input [4]: [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19, sr_returned_date_sk#20]
Condition : isnotnull(sr_store_sk#17)

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#22]

(21) CometBroadcastHashJoin
Left output [4]: [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19, sr_returned_date_sk#20]
Right output [1]: [d_date_sk#22]
Arguments: [sr_returned_date_sk#20], [d_date_sk#22], Inner, BuildRight

(22) CometProject
Input [5]: [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19, sr_returned_date_sk#20, d_date_sk#22]
Arguments: [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19], [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19]

(23) ReusedExchange [Reuses operator id: 11]
Output [1]: [s_store_sk#23]

(24) CometBroadcastHashJoin
Left output [3]: [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19]
Right output [1]: [s_store_sk#23]
Arguments: [sr_store_sk#17], [s_store_sk#23], Inner, BuildRight

(25) CometProject
Input [4]: [sr_store_sk#17, sr_return_amt#18, sr_net_loss#19, s_store_sk#23]
Arguments: [sr_return_amt#18, sr_net_loss#19, s_store_sk#23], [sr_return_amt#18, sr_net_loss#19, s_store_sk#23]

(26) ColumnarToRow [codegen id : 2]
Input [3]: [sr_return_amt#18, sr_net_loss#19, s_store_sk#23]

(27) HashAggregate [codegen id : 2]
Input [3]: [sr_return_amt#18, sr_net_loss#19, s_store_sk#23]
Keys [1]: [s_store_sk#23]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#18)), partial_sum(UnscaledValue(sr_net_loss#19))]
Aggregate Attributes [2]: [sum#24, sum#25]
Results [3]: [s_store_sk#23, sum#26, sum#27]

(28) Exchange
Input [3]: [s_store_sk#23, sum#26, sum#27]
Arguments: hashpartitioning(s_store_sk#23, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(29) HashAggregate [codegen id : 3]
Input [3]: [s_store_sk#23, sum#26, sum#27]
Keys [1]: [s_store_sk#23]
Functions [2]: [sum(UnscaledValue(sr_return_amt#18)), sum(UnscaledValue(sr_net_loss#19))]
Aggregate Attributes [2]: [sum(UnscaledValue(sr_return_amt#18))#28, sum(UnscaledValue(sr_net_loss#19))#29]
Results [3]: [s_store_sk#23, MakeDecimal(sum(UnscaledValue(sr_return_amt#18))#28,17,2) AS returns#30, MakeDecimal(sum(UnscaledValue(sr_net_loss#19))#29,17,2) AS profit_loss#31]

(30) BroadcastExchange
Input [3]: [s_store_sk#23, returns#30, profit_loss#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(31) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_store_sk#8]
Right keys [1]: [s_store_sk#23]
Join type: LeftOuter
Join condition: None

(32) Project [codegen id : 4]
Output [5]: [sales#15, coalesce(returns#30, 0.00) AS returns#32, (profit#16 - coalesce(profit_loss#31, 0.00)) AS profit#33, store channel AS channel#34, s_store_sk#8 AS id#35]
Input [6]: [s_store_sk#8, sales#15, profit#16, s_store_sk#23, returns#30, profit_loss#31]

(33) Scan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#36, cs_ext_sales_price#37, cs_net_profit#38, cs_sold_date_sk#39]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#39), dynamicpruningexpression(cs_sold_date_sk#39 IN dynamicpruning#40)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(34) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#41]

(35) CometBroadcastHashJoin
Left output [4]: [cs_call_center_sk#36, cs_ext_sales_price#37, cs_net_profit#38, cs_sold_date_sk#39]
Right output [1]: [d_date_sk#41]
Arguments: [cs_sold_date_sk#39], [d_date_sk#41], Inner, BuildRight

(36) CometProject
Input [5]: [cs_call_center_sk#36, cs_ext_sales_price#37, cs_net_profit#38, cs_sold_date_sk#39, d_date_sk#41]
Arguments: [cs_call_center_sk#36, cs_ext_sales_price#37, cs_net_profit#38], [cs_call_center_sk#36, cs_ext_sales_price#37, cs_net_profit#38]

(37) ColumnarToRow [codegen id : 5]
Input [3]: [cs_call_center_sk#36, cs_ext_sales_price#37, cs_net_profit#38]

(38) HashAggregate [codegen id : 5]
Input [3]: [cs_call_center_sk#36, cs_ext_sales_price#37, cs_net_profit#38]
Keys [1]: [cs_call_center_sk#36]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#37)), partial_sum(UnscaledValue(cs_net_profit#38))]
Aggregate Attributes [2]: [sum#42, sum#43]
Results [3]: [cs_call_center_sk#36, sum#44, sum#45]

(39) Exchange
Input [3]: [cs_call_center_sk#36, sum#44, sum#45]
Arguments: hashpartitioning(cs_call_center_sk#36, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(40) HashAggregate [codegen id : 6]
Input [3]: [cs_call_center_sk#36, sum#44, sum#45]
Keys [1]: [cs_call_center_sk#36]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#37)), sum(UnscaledValue(cs_net_profit#38))]
Aggregate Attributes [2]: [sum(UnscaledValue(cs_ext_sales_price#37))#46, sum(UnscaledValue(cs_net_profit#38))#47]
Results [3]: [cs_call_center_sk#36, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#37))#46,17,2) AS sales#48, MakeDecimal(sum(UnscaledValue(cs_net_profit#38))#47,17,2) AS profit#49]

(41) BroadcastExchange
Input [3]: [cs_call_center_sk#36, sales#48, profit#49]
Arguments: IdentityBroadcastMode, [plan_id=5]

(42) Scan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#52), dynamicpruningexpression(cr_returned_date_sk#52 IN dynamicpruning#53)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(43) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#54]

(44) CometBroadcastHashJoin
Left output [3]: [cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Right output [1]: [d_date_sk#54]
Arguments: [cr_returned_date_sk#52], [d_date_sk#54], Inner, BuildRight

(45) CometProject
Input [4]: [cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52, d_date_sk#54]
Arguments: [cr_return_amount#50, cr_net_loss#51], [cr_return_amount#50, cr_net_loss#51]

(46) ColumnarToRow [codegen id : 7]
Input [2]: [cr_return_amount#50, cr_net_loss#51]

(47) HashAggregate [codegen id : 7]
Input [2]: [cr_return_amount#50, cr_net_loss#51]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#50)), partial_sum(UnscaledValue(cr_net_loss#51))]
Aggregate Attributes [2]: [sum#55, sum#56]
Results [2]: [sum#57, sum#58]

(48) Exchange
Input [2]: [sum#57, sum#58]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(49) HashAggregate
Input [2]: [sum#57, sum#58]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#50)), sum(UnscaledValue(cr_net_loss#51))]
Aggregate Attributes [2]: [sum(UnscaledValue(cr_return_amount#50))#59, sum(UnscaledValue(cr_net_loss#51))#60]
Results [2]: [MakeDecimal(sum(UnscaledValue(cr_return_amount#50))#59,17,2) AS returns#61, MakeDecimal(sum(UnscaledValue(cr_net_loss#51))#60,17,2) AS profit_loss#62]

(50) BroadcastNestedLoopJoin [codegen id : 8]
Join type: Inner
Join condition: None

(51) Project [codegen id : 8]
Output [5]: [sales#48, returns#61, (profit#49 - profit_loss#62) AS profit#63, catalog channel AS channel#64, cs_call_center_sk#36 AS id#65]
Input [5]: [cs_call_center_sk#36, sales#48, profit#49, returns#61, profit_loss#62]

(52) Scan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68, ws_sold_date_sk#69]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#69), dynamicpruningexpression(ws_sold_date_sk#69 IN dynamicpruning#70)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(53) CometFilter
Input [4]: [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68, ws_sold_date_sk#69]
Condition : isnotnull(ws_web_page_sk#66)

(54) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#71]

(55) CometBroadcastHashJoin
Left output [4]: [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68, ws_sold_date_sk#69]
Right output [1]: [d_date_sk#71]
Arguments: [ws_sold_date_sk#69], [d_date_sk#71], Inner, BuildRight

(56) CometProject
Input [5]: [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68, ws_sold_date_sk#69, d_date_sk#71]
Arguments: [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68], [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68]

(57) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#72]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(58) CometFilter
Input [1]: [wp_web_page_sk#72]
Condition : isnotnull(wp_web_page_sk#72)

(59) CometBroadcastExchange
Input [1]: [wp_web_page_sk#72]
Arguments: [wp_web_page_sk#72]

(60) CometBroadcastHashJoin
Left output [3]: [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68]
Right output [1]: [wp_web_page_sk#72]
Arguments: [ws_web_page_sk#66], [wp_web_page_sk#72], Inner, BuildRight

(61) CometProject
Input [4]: [ws_web_page_sk#66, ws_ext_sales_price#67, ws_net_profit#68, wp_web_page_sk#72]
Arguments: [ws_ext_sales_price#67, ws_net_profit#68, wp_web_page_sk#72], [ws_ext_sales_price#67, ws_net_profit#68, wp_web_page_sk#72]

(62) ColumnarToRow [codegen id : 9]
Input [3]: [ws_ext_sales_price#67, ws_net_profit#68, wp_web_page_sk#72]

(63) HashAggregate [codegen id : 9]
Input [3]: [ws_ext_sales_price#67, ws_net_profit#68, wp_web_page_sk#72]
Keys [1]: [wp_web_page_sk#72]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#67)), partial_sum(UnscaledValue(ws_net_profit#68))]
Aggregate Attributes [2]: [sum#73, sum#74]
Results [3]: [wp_web_page_sk#72, sum#75, sum#76]

(64) Exchange
Input [3]: [wp_web_page_sk#72, sum#75, sum#76]
Arguments: hashpartitioning(wp_web_page_sk#72, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(65) HashAggregate [codegen id : 12]
Input [3]: [wp_web_page_sk#72, sum#75, sum#76]
Keys [1]: [wp_web_page_sk#72]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#67)), sum(UnscaledValue(ws_net_profit#68))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_sales_price#67))#77, sum(UnscaledValue(ws_net_profit#68))#78]
Results [3]: [wp_web_page_sk#72, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#67))#77,17,2) AS sales#79, MakeDecimal(sum(UnscaledValue(ws_net_profit#68))#78,17,2) AS profit#80]

(66) Scan parquet spark_catalog.default.web_returns
Output [4]: [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83, wr_returned_date_sk#84]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#84), dynamicpruningexpression(wr_returned_date_sk#84 IN dynamicpruning#85)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(67) CometFilter
Input [4]: [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83, wr_returned_date_sk#84]
Condition : isnotnull(wr_web_page_sk#81)

(68) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#86]

(69) CometBroadcastHashJoin
Left output [4]: [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83, wr_returned_date_sk#84]
Right output [1]: [d_date_sk#86]
Arguments: [wr_returned_date_sk#84], [d_date_sk#86], Inner, BuildRight

(70) CometProject
Input [5]: [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83, wr_returned_date_sk#84, d_date_sk#86]
Arguments: [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83], [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83]

(71) ReusedExchange [Reuses operator id: 59]
Output [1]: [wp_web_page_sk#87]

(72) CometBroadcastHashJoin
Left output [3]: [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83]
Right output [1]: [wp_web_page_sk#87]
Arguments: [wr_web_page_sk#81], [wp_web_page_sk#87], Inner, BuildRight

(73) CometProject
Input [4]: [wr_web_page_sk#81, wr_return_amt#82, wr_net_loss#83, wp_web_page_sk#87]
Arguments: [wr_return_amt#82, wr_net_loss#83, wp_web_page_sk#87], [wr_return_amt#82, wr_net_loss#83, wp_web_page_sk#87]

(74) ColumnarToRow [codegen id : 10]
Input [3]: [wr_return_amt#82, wr_net_loss#83, wp_web_page_sk#87]

(75) HashAggregate [codegen id : 10]
Input [3]: [wr_return_amt#82, wr_net_loss#83, wp_web_page_sk#87]
Keys [1]: [wp_web_page_sk#87]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#82)), partial_sum(UnscaledValue(wr_net_loss#83))]
Aggregate Attributes [2]: [sum#88, sum#89]
Results [3]: [wp_web_page_sk#87, sum#90, sum#91]

(76) Exchange
Input [3]: [wp_web_page_sk#87, sum#90, sum#91]
Arguments: hashpartitioning(wp_web_page_sk#87, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(77) HashAggregate [codegen id : 11]
Input [3]: [wp_web_page_sk#87, sum#90, sum#91]
Keys [1]: [wp_web_page_sk#87]
Functions [2]: [sum(UnscaledValue(wr_return_amt#82)), sum(UnscaledValue(wr_net_loss#83))]
Aggregate Attributes [2]: [sum(UnscaledValue(wr_return_amt#82))#92, sum(UnscaledValue(wr_net_loss#83))#93]
Results [3]: [wp_web_page_sk#87, MakeDecimal(sum(UnscaledValue(wr_return_amt#82))#92,17,2) AS returns#94, MakeDecimal(sum(UnscaledValue(wr_net_loss#83))#93,17,2) AS profit_loss#95]

(78) BroadcastExchange
Input [3]: [wp_web_page_sk#87, returns#94, profit_loss#95]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

(79) BroadcastHashJoin [codegen id : 12]
Left keys [1]: [wp_web_page_sk#72]
Right keys [1]: [wp_web_page_sk#87]
Join type: LeftOuter
Join condition: None

(80) Project [codegen id : 12]
Output [5]: [sales#79, coalesce(returns#94, 0.00) AS returns#96, (profit#80 - coalesce(profit_loss#95, 0.00)) AS profit#97, web channel AS channel#98, wp_web_page_sk#72 AS id#99]
Input [6]: [wp_web_page_sk#72, sales#79, profit#80, wp_web_page_sk#87, returns#94, profit_loss#95]

(81) Union

(82) Expand [codegen id : 13]
Input [5]: [sales#15, returns#32, profit#33, channel#34, id#35]
Arguments: [[sales#15, returns#32, profit#33, channel#34, id#35, 0], [sales#15, returns#32, profit#33, channel#34, null, 1], [sales#15, returns#32, profit#33, null, null, 3]], [sales#15, returns#32, profit#33, channel#100, id#101, spark_grouping_id#102]

(83) HashAggregate [codegen id : 13]
Input [6]: [sales#15, returns#32, profit#33, channel#100, id#101, spark_grouping_id#102]
Keys [3]: [channel#100, id#101, spark_grouping_id#102]
Functions [3]: [partial_sum(sales#15), partial_sum(returns#32), partial_sum(profit#33)]
Aggregate Attributes [6]: [sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Results [9]: [channel#100, id#101, spark_grouping_id#102, sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114]

(84) Exchange
Input [9]: [channel#100, id#101, spark_grouping_id#102, sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114]
Arguments: hashpartitioning(channel#100, id#101, spark_grouping_id#102, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(85) HashAggregate [codegen id : 14]
Input [9]: [channel#100, id#101, spark_grouping_id#102, sum#109, isEmpty#110, sum#111, isEmpty#112, sum#113, isEmpty#114]
Keys [3]: [channel#100, id#101, spark_grouping_id#102]
Functions [3]: [sum(sales#15), sum(returns#32), sum(profit#33)]
Aggregate Attributes [3]: [sum(sales#15)#115, sum(returns#32)#116, sum(profit#33)#117]
Results [5]: [channel#100, id#101, sum(sales#15)#115 AS sales#118, sum(returns#32)#116 AS returns#119, sum(profit#33)#117 AS profit#120]

(86) TakeOrderedAndProject
Input [5]: [channel#100, id#101, sales#118, returns#119, profit#120]
Arguments: 100, [channel#100 ASC NULLS FIRST, id#101 ASC NULLS FIRST], [channel#100, id#101, sales#118, returns#119, profit#120]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (91)
+- * ColumnarToRow (90)
   +- CometProject (89)
      +- CometFilter (88)
         +- CometScan parquet spark_catalog.default.date_dim (87)


(87) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-03), LessThanOrEqual(d_date,2000-09-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(88) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 2000-08-03)) AND (d_date#7 <= 2000-09-02)) AND isnotnull(d_date_sk#6))

(89) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(90) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(91) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:2 Hosting operator id = 18 Hosting Expression = sr_returned_date_sk#20 IN dynamicpruning#5

Subquery:3 Hosting operator id = 33 Hosting Expression = cs_sold_date_sk#39 IN dynamicpruning#5

Subquery:4 Hosting operator id = 42 Hosting Expression = cr_returned_date_sk#52 IN dynamicpruning#5

Subquery:5 Hosting operator id = 52 Hosting Expression = ws_sold_date_sk#69 IN dynamicpruning#5

Subquery:6 Hosting operator id = 66 Hosting Expression = wr_returned_date_sk#84 IN dynamicpruning#5


