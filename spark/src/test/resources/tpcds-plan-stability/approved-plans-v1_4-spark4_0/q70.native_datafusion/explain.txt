== Physical Plan ==
TakeOrderedAndProject (45)
+- * Project (44)
   +- Window (43)
      +- * Sort (42)
         +- Exchange (41)
            +- * HashAggregate (40)
               +- Exchange (39)
                  +- * HashAggregate (38)
                     +- * Expand (37)
                        +- * Project (36)
                           +- * BroadcastHashJoin Inner BuildRight (35)
                              :- * ColumnarToRow (9)
                              :  +- CometProject (8)
                              :     +- CometBroadcastHashJoin (7)
                              :        :- CometFilter (2)
                              :        :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (1)
                              :        +- CometBroadcastExchange (6)
                              :           +- CometProject (5)
                              :              +- CometFilter (4)
                              :                 +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (3)
                              +- BroadcastExchange (34)
                                 +- * BroadcastHashJoin LeftSemi BuildRight (33)
                                    :- * ColumnarToRow (12)
                                    :  +- CometFilter (11)
                                    :     +- CometNativeScan: `spark_catalog`.`default`.`store` (10)
                                    +- BroadcastExchange (32)
                                       +- * Project (31)
                                          +- * Filter (30)
                                             +- Window (29)
                                                +- WindowGroupLimit (28)
                                                   +- * Sort (27)
                                                      +- * HashAggregate (26)
                                                         +- Exchange (25)
                                                            +- * HashAggregate (24)
                                                               +- * ColumnarToRow (23)
                                                                  +- CometProject (22)
                                                                     +- CometBroadcastHashJoin (21)
                                                                        :- CometProject (19)
                                                                        :  +- CometBroadcastHashJoin (18)
                                                                        :     :- CometFilter (14)
                                                                        :     :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (13)
                                                                        :     +- CometBroadcastExchange (17)
                                                                        :        +- CometFilter (16)
                                                                        :           +- CometNativeScan: `spark_catalog`.`default`.`store` (15)
                                                                        +- ReusedExchange (20)


(1) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Arguments: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4, d_month_seq#5]

(4) CometFilter
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1200)) AND (d_month_seq#5 <= 1211)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4], [d_date_sk#4]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: [d_date_sk#4]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#4]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#4]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) ColumnarToRow [codegen id : 5]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometNativeScan: `spark_catalog`.`default`.`store`
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: [s_store_sk#6, s_county#7, s_state#8]

(11) CometFilter
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(12) ColumnarToRow [codegen id : 4]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(13) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Arguments: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]

(14) CometFilter
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_store_sk#9)

(15) CometNativeScan: `spark_catalog`.`default`.`store`
Output [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12, s_state#13]

(16) CometFilter
Input [2]: [s_store_sk#12, s_state#13]
Condition : isnotnull(s_store_sk#12)

(17) CometBroadcastExchange
Input [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12, s_state#13]

(18) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Right output [2]: [s_store_sk#12, s_state#13]
Arguments: [ss_store_sk#9], [s_store_sk#12], Inner, BuildRight

(19) CometProject
Input [5]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11, s_store_sk#12, s_state#13]
Arguments: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13], [ss_net_profit#10, ss_sold_date_sk#11, s_state#13]

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#14]

(21) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#11], [d_date_sk#14], Inner, BuildRight

(22) CometProject
Input [4]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13, d_date_sk#14]
Arguments: [ss_net_profit#10, s_state#13], [ss_net_profit#10, s_state#13]

(23) ColumnarToRow [codegen id : 1]
Input [2]: [ss_net_profit#10, s_state#13]

(24) HashAggregate [codegen id : 1]
Input [2]: [ss_net_profit#10, s_state#13]
Keys [1]: [s_state#13]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum#15]
Results [2]: [s_state#13, sum#16]

(25) Exchange
Input [2]: [s_state#13, sum#16]
Arguments: hashpartitioning(s_state#13, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(26) HashAggregate [codegen id : 2]
Input [2]: [s_state#13, sum#16]
Keys [1]: [s_state#13]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#10))#17]
Results [3]: [s_state#13, MakeDecimal(sum(UnscaledValue(ss_net_profit#10))#17,17,2) AS _w0#18, s_state#13]

(27) Sort [codegen id : 2]
Input [3]: [s_state#13, _w0#18, s_state#13]
Arguments: [s_state#13 ASC NULLS FIRST, _w0#18 DESC NULLS LAST], false, 0

(28) WindowGroupLimit
Input [3]: [s_state#13, _w0#18, s_state#13]
Arguments: [s_state#13], [_w0#18 DESC NULLS LAST], rank(_w0#18), 5, Final

(29) Window
Input [3]: [s_state#13, _w0#18, s_state#13]
Arguments: [rank(_w0#18) windowspecdefinition(s_state#13, _w0#18 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#19], [s_state#13], [_w0#18 DESC NULLS LAST]

(30) Filter [codegen id : 3]
Input [4]: [s_state#13, _w0#18, s_state#13, ranking#19]
Condition : (ranking#19 <= 5)

(31) Project [codegen id : 3]
Output [1]: [s_state#13]
Input [4]: [s_state#13, _w0#18, s_state#13, ranking#19]

(32) BroadcastExchange
Input [1]: [s_state#13]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(33) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_state#8]
Right keys [1]: [s_state#13]
Join type: LeftSemi
Join condition: None

(34) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join type: Inner
Join condition: None

(36) Project [codegen id : 5]
Output [3]: [ss_net_profit#2, s_state#8, s_county#7]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#8]

(37) Expand [codegen id : 5]
Input [3]: [ss_net_profit#2, s_state#8, s_county#7]
Arguments: [[ss_net_profit#2, s_state#8, s_county#7, 0], [ss_net_profit#2, s_state#8, null, 1], [ss_net_profit#2, null, null, 3]], [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]

(38) HashAggregate [codegen id : 5]
Input [4]: [ss_net_profit#2, s_state#20, s_county#21, spark_grouping_id#22]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#23]
Results [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]

(39) Exchange
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Arguments: hashpartitioning(s_state#20, s_county#21, spark_grouping_id#22, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(40) HashAggregate [codegen id : 6]
Input [4]: [s_state#20, s_county#21, spark_grouping_id#22, sum#24]
Keys [3]: [s_state#20, s_county#21, spark_grouping_id#22]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#25]
Results [7]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS total_sum#26, s_state#20, s_county#21, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS lochierarchy#27, MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#25,17,2) AS _w0#28, (cast((shiftright(spark_grouping_id#22, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint)) AS _w1#29, CASE WHEN (cast((shiftright(spark_grouping_id#22, 0) & 1) as tinyint) = 0) THEN s_state#20 END AS _w2#30]

(41) Exchange
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: hashpartitioning(_w1#29, _w2#30, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(42) Sort [codegen id : 7]
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [_w1#29 ASC NULLS FIRST, _w2#30 ASC NULLS FIRST, _w0#28 DESC NULLS LAST], false, 0

(43) Window
Input [7]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30]
Arguments: [rank(_w0#28) windowspecdefinition(_w1#29, _w2#30, _w0#28 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#31], [_w1#29, _w2#30], [_w0#28 DESC NULLS LAST]

(44) Project [codegen id : 8]
Output [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Input [8]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, _w0#28, _w1#29, _w2#30, rank_within_parent#31]

(45) TakeOrderedAndProject
Input [5]: [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]
Arguments: 100, [lochierarchy#27 DESC NULLS LAST, CASE WHEN (lochierarchy#27 = 0) THEN s_state#20 END ASC NULLS FIRST, rank_within_parent#31 ASC NULLS FIRST], [total_sum#26, s_state#20, s_county#21, lochierarchy#27, rank_within_parent#31]

