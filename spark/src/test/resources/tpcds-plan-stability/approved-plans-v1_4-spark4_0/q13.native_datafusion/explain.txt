== Physical Plan ==
* HashAggregate (33)
+- Exchange (32)
   +- * HashAggregate (31)
      +- * ColumnarToRow (30)
         +- CometProject (29)
            +- CometBroadcastHashJoin (28)
               :- CometProject (24)
               :  +- CometBroadcastHashJoin (23)
               :     :- CometProject (19)
               :     :  +- CometBroadcastHashJoin (18)
               :     :     :- CometProject (13)
               :     :     :  +- CometBroadcastHashJoin (12)
               :     :     :     :- CometProject (7)
               :     :     :     :  +- CometBroadcastHashJoin (6)
               :     :     :     :     :- CometFilter (2)
               :     :     :     :     :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (1)
               :     :     :     :     +- CometBroadcastExchange (5)
               :     :     :     :        +- CometFilter (4)
               :     :     :     :           +- CometNativeScan: `spark_catalog`.`default`.`store` (3)
               :     :     :     +- CometBroadcastExchange (11)
               :     :     :        +- CometProject (10)
               :     :     :           +- CometFilter (9)
               :     :     :              +- CometNativeScan: `spark_catalog`.`default`.`customer_address` (8)
               :     :     +- CometBroadcastExchange (17)
               :     :        +- CometProject (16)
               :     :           +- CometFilter (15)
               :     :              +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (14)
               :     +- CometBroadcastExchange (22)
               :        +- CometFilter (21)
               :           +- CometNativeScan: `spark_catalog`.`default`.`customer_demographics` (20)
               +- CometBroadcastExchange (27)
                  +- CometFilter (26)
                     +- CometNativeScan: `spark_catalog`.`default`.`household_demographics` (25)


(1) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]

(2) CometFilter
Input [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Condition : (((((isnotnull(ss_store_sk#4) AND isnotnull(ss_addr_sk#3)) AND isnotnull(ss_cdemo_sk#1)) AND isnotnull(ss_hdemo_sk#2)) AND ((((ss_net_profit#9 >= 100.00) AND (ss_net_profit#9 <= 200.00)) OR ((ss_net_profit#9 >= 150.00) AND (ss_net_profit#9 <= 300.00))) OR ((ss_net_profit#9 >= 50.00) AND (ss_net_profit#9 <= 250.00)))) AND ((((ss_sales_price#6 >= 100.00) AND (ss_sales_price#6 <= 150.00)) OR ((ss_sales_price#6 >= 50.00) AND (ss_sales_price#6 <= 100.00))) OR ((ss_sales_price#6 >= 150.00) AND (ss_sales_price#6 <= 200.00))))

(3) CometNativeScan: `spark_catalog`.`default`.`store`
Output [1]: [s_store_sk#11]
Arguments: [s_store_sk#11]

(4) CometFilter
Input [1]: [s_store_sk#11]
Condition : isnotnull(s_store_sk#11)

(5) CometBroadcastExchange
Input [1]: [s_store_sk#11]
Arguments: [s_store_sk#11]

(6) CometBroadcastHashJoin
Left output [10]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Right output [1]: [s_store_sk#11]
Arguments: [ss_store_sk#4], [s_store_sk#11], Inner, BuildRight

(7) CometProject
Input [11]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, s_store_sk#11]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10], [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]

(8) CometNativeScan: `spark_catalog`.`default`.`customer_address`
Output [3]: [ca_address_sk#12, ca_state#13, ca_country#14]
Arguments: [ca_address_sk#12, ca_state#13, ca_country#14]

(9) CometFilter
Input [3]: [ca_address_sk#12, ca_state#13, ca_country#14]
Condition : (((isnotnull(ca_country#14) AND (ca_country#14 = United States)) AND isnotnull(ca_address_sk#12)) AND ((ca_state#13 IN (TX,OH) OR ca_state#13 IN (OR,NM,KY)) OR ca_state#13 IN (VA,TX,MS)))

(10) CometProject
Input [3]: [ca_address_sk#12, ca_state#13, ca_country#14]
Arguments: [ca_address_sk#12, ca_state#13], [ca_address_sk#12, ca_state#13]

(11) CometBroadcastExchange
Input [2]: [ca_address_sk#12, ca_state#13]
Arguments: [ca_address_sk#12, ca_state#13]

(12) CometBroadcastHashJoin
Left output [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10]
Right output [2]: [ca_address_sk#12, ca_state#13]
Arguments: [ss_addr_sk#3], [ca_address_sk#12], Inner, ((((ca_state#13 IN (TX,OH) AND (ss_net_profit#9 >= 100.00)) AND (ss_net_profit#9 <= 200.00)) OR ((ca_state#13 IN (OR,NM,KY) AND (ss_net_profit#9 >= 150.00)) AND (ss_net_profit#9 <= 300.00))) OR ((ca_state#13 IN (VA,TX,MS) AND (ss_net_profit#9 >= 50.00)) AND (ss_net_profit#9 <= 250.00))), BuildRight

(13) CometProject
Input [11]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_net_profit#9, ss_sold_date_sk#10, ca_address_sk#12, ca_state#13]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10], [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10]

(14) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#15, d_year#16]
Arguments: [d_date_sk#15, d_year#16]

(15) CometFilter
Input [2]: [d_date_sk#15, d_year#16]
Condition : ((isnotnull(d_year#16) AND (d_year#16 = 2001)) AND isnotnull(d_date_sk#15))

(16) CometProject
Input [2]: [d_date_sk#15, d_year#16]
Arguments: [d_date_sk#15], [d_date_sk#15]

(17) CometBroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: [d_date_sk#15]

(18) CometBroadcastHashJoin
Left output [7]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10]
Right output [1]: [d_date_sk#15]
Arguments: [ss_sold_date_sk#10], [d_date_sk#15], Inner, BuildRight

(19) CometProject
Input [8]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, ss_sold_date_sk#10, d_date_sk#15]
Arguments: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8], [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]

(20) CometNativeScan: `spark_catalog`.`default`.`customer_demographics`
Output [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(21) CometFilter
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Condition : (isnotnull(cd_demo_sk#17) AND ((((cd_marital_status#18 = M) AND (cd_education_status#19 = Advanced Degree     )) OR ((cd_marital_status#18 = S) AND (cd_education_status#19 = College             ))) OR ((cd_marital_status#18 = W) AND (cd_education_status#19 = 2 yr Degree         ))))

(22) CometBroadcastExchange
Input [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]

(23) CometBroadcastHashJoin
Left output [6]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Right output [3]: [cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: [ss_cdemo_sk#1], [cd_demo_sk#17], Inner, ((((((cd_marital_status#18 = M) AND (cd_education_status#19 = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) OR ((((cd_marital_status#18 = S) AND (cd_education_status#19 = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00))) OR ((((cd_marital_status#18 = W) AND (cd_education_status#19 = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00))), BuildRight

(24) CometProject
Input [9]: [ss_cdemo_sk#1, ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_demo_sk#17, cd_marital_status#18, cd_education_status#19]
Arguments: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#18, cd_education_status#19], [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#18, cd_education_status#19]

(25) CometNativeScan: `spark_catalog`.`default`.`household_demographics`
Output [2]: [hd_demo_sk#20, hd_dep_count#21]
Arguments: [hd_demo_sk#20, hd_dep_count#21]

(26) CometFilter
Input [2]: [hd_demo_sk#20, hd_dep_count#21]
Condition : (isnotnull(hd_demo_sk#20) AND ((hd_dep_count#21 = 3) OR (hd_dep_count#21 = 1)))

(27) CometBroadcastExchange
Input [2]: [hd_demo_sk#20, hd_dep_count#21]
Arguments: [hd_demo_sk#20, hd_dep_count#21]

(28) CometBroadcastHashJoin
Left output [7]: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#18, cd_education_status#19]
Right output [2]: [hd_demo_sk#20, hd_dep_count#21]
Arguments: [ss_hdemo_sk#2], [hd_demo_sk#20], Inner, (((((((cd_marital_status#18 = M) AND (cd_education_status#19 = Advanced Degree     )) AND (ss_sales_price#6 >= 100.00)) AND (ss_sales_price#6 <= 150.00)) AND (hd_dep_count#21 = 3)) OR (((((cd_marital_status#18 = S) AND (cd_education_status#19 = College             )) AND (ss_sales_price#6 >= 50.00)) AND (ss_sales_price#6 <= 100.00)) AND (hd_dep_count#21 = 1))) OR (((((cd_marital_status#18 = W) AND (cd_education_status#19 = 2 yr Degree         )) AND (ss_sales_price#6 >= 150.00)) AND (ss_sales_price#6 <= 200.00)) AND (hd_dep_count#21 = 1))), BuildRight

(29) CometProject
Input [9]: [ss_hdemo_sk#2, ss_quantity#5, ss_sales_price#6, ss_ext_sales_price#7, ss_ext_wholesale_cost#8, cd_marital_status#18, cd_education_status#19, hd_demo_sk#20, hd_dep_count#21]
Arguments: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8], [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]

(30) ColumnarToRow [codegen id : 1]
Input [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]

(31) HashAggregate [codegen id : 1]
Input [3]: [ss_quantity#5, ss_ext_sales_price#7, ss_ext_wholesale_cost#8]
Keys: []
Functions [4]: [partial_avg(ss_quantity#5), partial_avg(UnscaledValue(ss_ext_sales_price#7)), partial_avg(UnscaledValue(ss_ext_wholesale_cost#8)), partial_sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [7]: [sum#22, count#23, sum#24, count#25, sum#26, count#27, sum#28]
Results [7]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35]

(32) Exchange
Input [7]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=1]

(33) HashAggregate [codegen id : 2]
Input [7]: [sum#29, count#30, sum#31, count#32, sum#33, count#34, sum#35]
Keys: []
Functions [4]: [avg(ss_quantity#5), avg(UnscaledValue(ss_ext_sales_price#7)), avg(UnscaledValue(ss_ext_wholesale_cost#8)), sum(UnscaledValue(ss_ext_wholesale_cost#8))]
Aggregate Attributes [4]: [avg(ss_quantity#5)#36, avg(UnscaledValue(ss_ext_sales_price#7))#37, avg(UnscaledValue(ss_ext_wholesale_cost#8))#38, sum(UnscaledValue(ss_ext_wholesale_cost#8))#39]
Results [4]: [avg(ss_quantity#5)#36 AS avg(ss_quantity)#40, cast((avg(UnscaledValue(ss_ext_sales_price#7))#37 / 100.0) as decimal(11,6)) AS avg(ss_ext_sales_price)#41, cast((avg(UnscaledValue(ss_ext_wholesale_cost#8))#38 / 100.0) as decimal(11,6)) AS avg(ss_ext_wholesale_cost)#42, MakeDecimal(sum(UnscaledValue(ss_ext_wholesale_cost#8))#39,17,2) AS sum(ss_ext_wholesale_cost)#43]

