== Physical Plan ==
TakeOrderedAndProject (48)
+- * Project (47)
   +- * BroadcastHashJoin Inner BuildRight (46)
      :- * Project (39)
      :  +- * BroadcastHashJoin Inner BuildRight (38)
      :     :- * Project (29)
      :     :  +- * Filter (28)
      :     :     +- Window (27)
      :     :        +- * Filter (26)
      :     :           +- Window (25)
      :     :              +- * CometColumnarToRow (24)
      :     :                 +- CometSort (23)
      :     :                    +- CometExchange (22)
      :     :                       +- CometHashAggregate (21)
      :     :                          +- CometExchange (20)
      :     :                             +- CometHashAggregate (19)
      :     :                                +- CometProject (18)
      :     :                                   +- CometBroadcastHashJoin (17)
      :     :                                      :- CometProject (13)
      :     :                                      :  +- CometBroadcastHashJoin (12)
      :     :                                      :     :- CometProject (8)
      :     :                                      :     :  +- CometBroadcastHashJoin (7)
      :     :                                      :     :     :- CometProject (3)
      :     :                                      :     :     :  +- CometFilter (2)
      :     :                                      :     :     :     +- CometNativeScan parquet spark_catalog.default.item (1)
      :     :                                      :     :     +- CometBroadcastExchange (6)
      :     :                                      :     :        +- CometFilter (5)
      :     :                                      :     :           +- CometNativeScan parquet spark_catalog.default.catalog_sales (4)
      :     :                                      :     +- CometBroadcastExchange (11)
      :     :                                      :        +- CometFilter (10)
      :     :                                      :           +- CometNativeScan parquet spark_catalog.default.date_dim (9)
      :     :                                      +- CometBroadcastExchange (16)
      :     :                                         +- CometFilter (15)
      :     :                                            +- CometNativeScan parquet spark_catalog.default.call_center (14)
      :     +- BroadcastExchange (37)
      :        +- * Project (36)
      :           +- Window (35)
      :              +- * CometColumnarToRow (34)
      :                 +- CometSort (33)
      :                    +- CometExchange (32)
      :                       +- CometHashAggregate (31)
      :                          +- ReusedExchange (30)
      +- BroadcastExchange (45)
         +- * Project (44)
            +- Window (43)
               +- * CometColumnarToRow (42)
                  +- CometSort (41)
                     +- ReusedExchange (40)


(1) CometNativeScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#1, i_brand#2, i_category#3]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_category:string>

(2) CometFilter
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Condition : ((isnotnull(i_item_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#3, 50, true, false, true))) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_brand#2, 50, true, false, true)))

(3) CometProject
Input [3]: [i_item_sk#1, i_brand#2, i_category#3]
Arguments: [i_item_sk#1, i_brand#4, i_category#5], [i_item_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_brand#2, 50, true, false, true) AS i_brand#4, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#3, 50, true, false, true) AS i_category#5]

(4) CometNativeScan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(cs_sold_date_sk#9)]
PushedFilters: [IsNotNull(cs_item_sk), IsNotNull(cs_call_center_sk)]
ReadSchema: struct<cs_call_center_sk:int,cs_item_sk:int,cs_sales_price:decimal(7,2)>

(5) CometFilter
Input [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Condition : (isnotnull(cs_item_sk#7) AND isnotnull(cs_call_center_sk#6))

(6) CometBroadcastExchange
Input [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Arguments: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]

(7) CometBroadcastHashJoin
Left output [3]: [i_item_sk#1, i_brand#4, i_category#5]
Right output [4]: [cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Arguments: [i_item_sk#1], [cs_item_sk#7], Inner, BuildRight

(8) CometProject
Input [7]: [i_item_sk#1, i_brand#4, i_category#5, cs_call_center_sk#6, cs_item_sk#7, cs_sales_price#8, cs_sold_date_sk#9]
Arguments: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9], [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [Or(Or(EqualTo(d_year,1999),And(EqualTo(d_year,1998),EqualTo(d_moy,12))),And(EqualTo(d_year,2000),EqualTo(d_moy,1))), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(10) CometFilter
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Condition : ((((d_year#11 = 1999) OR ((d_year#11 = 1998) AND (d_moy#12 = 12))) OR ((d_year#11 = 2000) AND (d_moy#12 = 1))) AND isnotnull(d_date_sk#10))

(11) CometBroadcastExchange
Input [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [d_date_sk#10, d_year#11, d_moy#12]

(12) CometBroadcastHashJoin
Left output [5]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9]
Right output [3]: [d_date_sk#10, d_year#11, d_moy#12]
Arguments: [cs_sold_date_sk#9], [d_date_sk#10], Inner, BuildRight

(13) CometProject
Input [8]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, cs_sold_date_sk#9, d_date_sk#10, d_year#11, d_moy#12]
Arguments: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#11, d_moy#12], [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#11, d_moy#12]

(14) CometNativeScan parquet spark_catalog.default.call_center
Output [2]: [cc_call_center_sk#13, cc_name#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/call_center]
PushedFilters: [IsNotNull(cc_call_center_sk), IsNotNull(cc_name)]
ReadSchema: struct<cc_call_center_sk:int,cc_name:string>

(15) CometFilter
Input [2]: [cc_call_center_sk#13, cc_name#14]
Condition : (isnotnull(cc_call_center_sk#13) AND isnotnull(cc_name#14))

(16) CometBroadcastExchange
Input [2]: [cc_call_center_sk#13, cc_name#14]
Arguments: [cc_call_center_sk#13, cc_name#14]

(17) CometBroadcastHashJoin
Left output [6]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#11, d_moy#12]
Right output [2]: [cc_call_center_sk#13, cc_name#14]
Arguments: [cs_call_center_sk#6], [cc_call_center_sk#13], Inner, BuildRight

(18) CometProject
Input [8]: [i_brand#4, i_category#5, cs_call_center_sk#6, cs_sales_price#8, d_year#11, d_moy#12, cc_call_center_sk#13, cc_name#14]
Arguments: [i_brand#4, i_category#5, cs_sales_price#8, d_year#11, d_moy#12, cc_name#14], [i_brand#4, i_category#5, cs_sales_price#8, d_year#11, d_moy#12, cc_name#14]

(19) CometHashAggregate
Input [6]: [i_brand#4, i_category#5, cs_sales_price#8, d_year#11, d_moy#12, cc_name#14]
Keys [5]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12]
Functions [1]: [partial_sum(UnscaledValue(cs_sales_price#8))]

(20) CometExchange
Input [6]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum#15]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(21) CometHashAggregate
Input [6]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum#15]
Keys [5]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12]
Functions [1]: [sum(UnscaledValue(cs_sales_price#8))]

(22) CometExchange
Input [7]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(23) CometSort
Input [7]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17]
Arguments: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17], [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, cc_name#14 ASC NULLS FIRST, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST]

(24) CometColumnarToRow [codegen id : 1]
Input [7]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17]

(25) Window
Input [7]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17]
Arguments: [rank(d_year#11, d_moy#12) windowspecdefinition(i_category#5, i_brand#4, cc_name#14, d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#18], [i_category#5, i_brand#4, cc_name#14], [d_year#11 ASC NULLS FIRST, d_moy#12 ASC NULLS FIRST]

(26) Filter [codegen id : 2]
Input [8]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17, rn#18]
Condition : (isnotnull(d_year#11) AND (d_year#11 = 1999))

(27) Window
Input [8]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17, rn#18]
Arguments: [avg(_w0#17) windowspecdefinition(i_category#5, i_brand#4, cc_name#14, d_year#11, specifiedwindowframe(RowFrame, unboundedpreceding$(), unboundedfollowing$())) AS avg_monthly_sales#19], [i_category#5, i_brand#4, cc_name#14, d_year#11]

(28) Filter [codegen id : 7]
Input [9]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17, rn#18, avg_monthly_sales#19]
Condition : ((isnotnull(avg_monthly_sales#19) AND (avg_monthly_sales#19 > 0.000000)) AND CASE WHEN (avg_monthly_sales#19 > 0.000000) THEN ((abs((sum_sales#16 - avg_monthly_sales#19)) / avg_monthly_sales#19) > 0.1000000000000000) END)

(29) Project [codegen id : 7]
Output [8]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, avg_monthly_sales#19, rn#18]
Input [9]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, _w0#17, rn#18, avg_monthly_sales#19]

(30) ReusedExchange [Reuses operator id: 20]
Output [6]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum#23]

(31) CometHashAggregate
Input [6]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum#23]
Keys [5]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22]
Functions [1]: [sum(UnscaledValue(cs_sales_price#24))]

(32) CometExchange
Input [6]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum_sales#16]
Arguments: hashpartitioning(i_category#5, i_brand#4, cc_name#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(33) CometSort
Input [6]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum_sales#16]
Arguments: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum_sales#16], [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, cc_name#20 ASC NULLS FIRST, d_year#21 ASC NULLS FIRST, d_moy#22 ASC NULLS FIRST]

(34) CometColumnarToRow [codegen id : 3]
Input [6]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum_sales#16]

(35) Window
Input [6]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum_sales#16]
Arguments: [rank(d_year#21, d_moy#22) windowspecdefinition(i_category#5, i_brand#4, cc_name#20, d_year#21 ASC NULLS FIRST, d_moy#22 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#25], [i_category#5, i_brand#4, cc_name#20], [d_year#21 ASC NULLS FIRST, d_moy#22 ASC NULLS FIRST]

(36) Project [codegen id : 4]
Output [5]: [i_category#5 AS i_category#26, i_brand#4 AS i_brand#27, cc_name#20, sum_sales#16 AS sum_sales#28, rn#25]
Input [7]: [i_category#5, i_brand#4, cc_name#20, d_year#21, d_moy#22, sum_sales#16, rn#25]

(37) BroadcastExchange
Input [5]: [i_category#26, i_brand#27, cc_name#20, sum_sales#28, rn#25]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] + 1)),false), [plan_id=4]

(38) BroadcastHashJoin [codegen id : 7]
Left keys [4]: [i_category#5, i_brand#4, cc_name#14, rn#18]
Right keys [4]: [i_category#26, i_brand#27, cc_name#20, (rn#25 + 1)]
Join type: Inner
Join condition: None

(39) Project [codegen id : 7]
Output [9]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, avg_monthly_sales#19, rn#18, sum_sales#28]
Input [13]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, avg_monthly_sales#19, rn#18, i_category#26, i_brand#27, cc_name#20, sum_sales#28, rn#25]

(40) ReusedExchange [Reuses operator id: 32]
Output [6]: [i_category#5, i_brand#4, cc_name#29, d_year#30, d_moy#31, sum_sales#16]

(41) CometSort
Input [6]: [i_category#5, i_brand#4, cc_name#29, d_year#30, d_moy#31, sum_sales#16]
Arguments: [i_category#5, i_brand#4, cc_name#29, d_year#30, d_moy#31, sum_sales#16], [i_category#5 ASC NULLS FIRST, i_brand#4 ASC NULLS FIRST, cc_name#29 ASC NULLS FIRST, d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST]

(42) CometColumnarToRow [codegen id : 5]
Input [6]: [i_category#5, i_brand#4, cc_name#29, d_year#30, d_moy#31, sum_sales#16]

(43) Window
Input [6]: [i_category#5, i_brand#4, cc_name#29, d_year#30, d_moy#31, sum_sales#16]
Arguments: [rank(d_year#30, d_moy#31) windowspecdefinition(i_category#5, i_brand#4, cc_name#29, d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rn#32], [i_category#5, i_brand#4, cc_name#29], [d_year#30 ASC NULLS FIRST, d_moy#31 ASC NULLS FIRST]

(44) Project [codegen id : 6]
Output [5]: [i_category#5 AS i_category#33, i_brand#4 AS i_brand#34, cc_name#29, sum_sales#16 AS sum_sales#35, rn#32]
Input [7]: [i_category#5, i_brand#4, cc_name#29, d_year#30, d_moy#31, sum_sales#16, rn#32]

(45) BroadcastExchange
Input [5]: [i_category#33, i_brand#34, cc_name#29, sum_sales#35, rn#32]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true], input[1, string, true], input[2, string, true], (input[4, int, false] - 1)),false), [plan_id=5]

(46) BroadcastHashJoin [codegen id : 7]
Left keys [4]: [i_category#5, i_brand#4, cc_name#14, rn#18]
Right keys [4]: [i_category#33, i_brand#34, cc_name#29, (rn#32 - 1)]
Join type: Inner
Join condition: None

(47) Project [codegen id : 7]
Output [8]: [i_category#5, i_brand#4, d_year#11, d_moy#12, avg_monthly_sales#19, sum_sales#16, sum_sales#28 AS psum#36, sum_sales#35 AS nsum#37]
Input [14]: [i_category#5, i_brand#4, cc_name#14, d_year#11, d_moy#12, sum_sales#16, avg_monthly_sales#19, rn#18, sum_sales#28, i_category#33, i_brand#34, cc_name#29, sum_sales#35, rn#32]

(48) TakeOrderedAndProject
Input [8]: [i_category#5, i_brand#4, d_year#11, d_moy#12, avg_monthly_sales#19, sum_sales#16, psum#36, nsum#37]
Arguments: 100, [(sum_sales#16 - avg_monthly_sales#19) ASC NULLS FIRST, d_year#11 ASC NULLS FIRST], [i_category#5, i_brand#4, d_year#11, d_moy#12, avg_monthly_sales#19, sum_sales#16, psum#36, nsum#37]

