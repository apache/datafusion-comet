== Physical Plan ==
TakeOrderedAndProject (74)
+- * Filter (73)
   +- Window (72)
      +- WindowGroupLimit (71)
         +- * CometColumnarToRow (70)
            +- CometSort (69)
               +- CometColumnarExchange (68)
                  +- WindowGroupLimit (67)
                     +- * CometColumnarToRow (66)
                        +- CometSort (65)
                           +- CometUnion (64)
                              :- CometHashAggregate (23)
                              :  +- CometExchange (22)
                              :     +- CometHashAggregate (21)
                              :        +- CometProject (20)
                              :           +- CometBroadcastHashJoin (19)
                              :              :- CometProject (14)
                              :              :  +- CometBroadcastHashJoin (13)
                              :              :     :- CometProject (8)
                              :              :     :  +- CometBroadcastHashJoin (7)
                              :              :     :     :- CometFilter (2)
                              :              :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
                              :              :     :     +- CometBroadcastExchange (6)
                              :              :     :        +- CometProject (5)
                              :              :     :           +- CometFilter (4)
                              :              :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (3)
                              :              :     +- CometBroadcastExchange (12)
                              :              :        +- CometProject (11)
                              :              :           +- CometFilter (10)
                              :              :              +- CometNativeScan parquet spark_catalog.default.store (9)
                              :              +- CometBroadcastExchange (18)
                              :                 +- CometProject (17)
                              :                    +- CometFilter (16)
                              :                       +- CometNativeScan parquet spark_catalog.default.item (15)
                              :- CometHashAggregate (28)
                              :  +- CometExchange (27)
                              :     +- CometHashAggregate (26)
                              :        +- CometHashAggregate (25)
                              :           +- ReusedExchange (24)
                              :- CometHashAggregate (33)
                              :  +- CometExchange (32)
                              :     +- CometHashAggregate (31)
                              :        +- CometHashAggregate (30)
                              :           +- ReusedExchange (29)
                              :- CometHashAggregate (38)
                              :  +- CometExchange (37)
                              :     +- CometHashAggregate (36)
                              :        +- CometHashAggregate (35)
                              :           +- ReusedExchange (34)
                              :- CometHashAggregate (43)
                              :  +- CometExchange (42)
                              :     +- CometHashAggregate (41)
                              :        +- CometHashAggregate (40)
                              :           +- ReusedExchange (39)
                              :- CometHashAggregate (48)
                              :  +- CometExchange (47)
                              :     +- CometHashAggregate (46)
                              :        +- CometHashAggregate (45)
                              :           +- ReusedExchange (44)
                              :- CometHashAggregate (53)
                              :  +- CometExchange (52)
                              :     +- CometHashAggregate (51)
                              :        +- CometHashAggregate (50)
                              :           +- ReusedExchange (49)
                              :- CometHashAggregate (58)
                              :  +- CometExchange (57)
                              :     +- CometHashAggregate (56)
                              :        +- CometHashAggregate (55)
                              :           +- ReusedExchange (54)
                              +- CometHashAggregate (63)
                                 +- CometExchange (62)
                                    +- CometHashAggregate (61)
                                       +- CometHashAggregate (60)
                                          +- ReusedExchange (59)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#5)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_quantity:int,ss_sales_price:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1))

(3) CometNativeScan parquet spark_catalog.default.date_dim
Output [5]: [d_date_sk#6, d_month_seq#7, d_year#8, d_moy#9, d_qoy#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int,d_year:int,d_moy:int,d_qoy:int>

(4) CometFilter
Input [5]: [d_date_sk#6, d_month_seq#7, d_year#8, d_moy#9, d_qoy#10]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [5]: [d_date_sk#6, d_month_seq#7, d_year#8, d_moy#9, d_qoy#10]
Arguments: [d_date_sk#6, d_year#8, d_moy#9, d_qoy#10], [d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]

(6) CometBroadcastExchange
Input [4]: [d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]
Arguments: [d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5]
Right output [4]: [d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]
Arguments: [ss_sold_date_sk#5], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, ss_sold_date_sk#5, d_date_sk#6, d_year#8, d_moy#9, d_qoy#10]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10], [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10]

(9) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#11, s_store_id#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(10) CometFilter
Input [2]: [s_store_sk#11, s_store_id#12]
Condition : isnotnull(s_store_sk#11)

(11) CometProject
Input [2]: [s_store_sk#11, s_store_id#12]
Arguments: [s_store_sk#11, s_store_id#13], [s_store_sk#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#12, 16, true, false, true) AS s_store_id#13]

(12) CometBroadcastExchange
Input [2]: [s_store_sk#11, s_store_id#13]
Arguments: [s_store_sk#11, s_store_id#13]

(13) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10]
Right output [2]: [s_store_sk#11, s_store_id#13]
Arguments: [ss_store_sk#2], [s_store_sk#11], Inner, BuildRight

(14) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_sk#11, s_store_id#13]
Arguments: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#13], [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#13]

(15) CometNativeScan parquet spark_catalog.default.item
Output [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand:string,i_class:string,i_category:string,i_product_name:string>

(16) CometFilter
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Condition : isnotnull(i_item_sk#14)

(17) CometProject
Input [5]: [i_item_sk#14, i_brand#15, i_class#16, i_category#17, i_product_name#18]
Arguments: [i_item_sk#14, i_brand#19, i_class#20, i_category#21, i_product_name#22], [i_item_sk#14, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_brand#15, 50, true, false, true) AS i_brand#19, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_class#16, 50, true, false, true) AS i_class#20, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_category#17, 50, true, false, true) AS i_category#21, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_product_name#18, 50, true, false, true) AS i_product_name#22]

(18) CometBroadcastExchange
Input [5]: [i_item_sk#14, i_brand#19, i_class#20, i_category#21, i_product_name#22]
Arguments: [i_item_sk#14, i_brand#19, i_class#20, i_category#21, i_product_name#22]

(19) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#13]
Right output [5]: [i_item_sk#14, i_brand#19, i_class#20, i_category#21, i_product_name#22]
Arguments: [ss_item_sk#1], [i_item_sk#14], Inner, BuildRight

(20) CometProject
Input [12]: [ss_item_sk#1, ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#13, i_item_sk#14, i_brand#19, i_class#20, i_category#21, i_product_name#22]
Arguments: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#13, i_brand#19, i_class#20, i_category#21, i_product_name#22], [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#13, i_brand#19, i_class#20, i_category#21, i_product_name#22]

(21) CometHashAggregate
Input [10]: [ss_quantity#3, ss_sales_price#4, d_year#8, d_moy#9, d_qoy#10, s_store_id#13, i_brand#19, i_class#20, i_category#21, i_product_name#22]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#8, d_qoy#10, d_moy#9, s_store_id#13]
Functions [1]: [partial_sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(22) CometExchange
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#8, d_qoy#10, d_moy#9, s_store_id#13, sum#23, isEmpty#24]
Arguments: hashpartitioning(i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#8, d_qoy#10, d_moy#9, s_store_id#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(23) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#8, d_qoy#10, d_moy#9, s_store_id#13, sum#23, isEmpty#24]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#8, d_qoy#10, d_moy#9, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#4 * cast(ss_quantity#3 as decimal(10,0))), 0.00))]

(24) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, s_store_id#13, sum#28, isEmpty#29]

(25) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, s_store_id#13, sum#28, isEmpty#29]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#30 * cast(ss_quantity#31 as decimal(10,0))), 0.00))]

(26) CometHashAggregate
Input [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, sumsales#32]
Keys [7]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27]
Functions [1]: [partial_sum(sumsales#32)]

(27) CometExchange
Input [9]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, sum#33, isEmpty#34]
Arguments: hashpartitioning(i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(28) CometHashAggregate
Input [9]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, sum#33, isEmpty#34]
Keys [7]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27]
Functions [1]: [sum(sumsales#32)]

(29) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, d_moy#37, s_store_id#13, sum#38, isEmpty#39]

(30) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, d_moy#37, s_store_id#13, sum#38, isEmpty#39]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, d_moy#37, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#40 * cast(ss_quantity#41 as decimal(10,0))), 0.00))]

(31) CometHashAggregate
Input [7]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, sumsales#42]
Keys [6]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36]
Functions [1]: [partial_sum(sumsales#42)]

(32) CometExchange
Input [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, sum#43, isEmpty#44]
Arguments: hashpartitioning(i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(33) CometHashAggregate
Input [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, sum#43, isEmpty#44]
Keys [6]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36]
Functions [1]: [sum(sumsales#42)]

(34) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, d_qoy#46, d_moy#47, s_store_id#13, sum#48, isEmpty#49]

(35) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, d_qoy#46, d_moy#47, s_store_id#13, sum#48, isEmpty#49]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, d_qoy#46, d_moy#47, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#50 * cast(ss_quantity#51 as decimal(10,0))), 0.00))]

(36) CometHashAggregate
Input [6]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, sumsales#52]
Keys [5]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45]
Functions [1]: [partial_sum(sumsales#52)]

(37) CometExchange
Input [7]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, sum#53, isEmpty#54]
Arguments: hashpartitioning(i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(38) CometHashAggregate
Input [7]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, sum#53, isEmpty#54]
Keys [5]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45]
Functions [1]: [sum(sumsales#52)]

(39) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#55, d_qoy#56, d_moy#57, s_store_id#13, sum#58, isEmpty#59]

(40) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#55, d_qoy#56, d_moy#57, s_store_id#13, sum#58, isEmpty#59]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#55, d_qoy#56, d_moy#57, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#60 * cast(ss_quantity#61 as decimal(10,0))), 0.00))]

(41) CometHashAggregate
Input [5]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, sumsales#62]
Keys [4]: [i_category#21, i_class#20, i_brand#19, i_product_name#22]
Functions [1]: [partial_sum(sumsales#62)]

(42) CometExchange
Input [6]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, sum#63, isEmpty#64]
Arguments: hashpartitioning(i_category#21, i_class#20, i_brand#19, i_product_name#22, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(43) CometHashAggregate
Input [6]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, sum#63, isEmpty#64]
Keys [4]: [i_category#21, i_class#20, i_brand#19, i_product_name#22]
Functions [1]: [sum(sumsales#62)]

(44) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#65, d_qoy#66, d_moy#67, s_store_id#13, sum#68, isEmpty#69]

(45) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#65, d_qoy#66, d_moy#67, s_store_id#13, sum#68, isEmpty#69]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#65, d_qoy#66, d_moy#67, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#70 * cast(ss_quantity#71 as decimal(10,0))), 0.00))]

(46) CometHashAggregate
Input [4]: [i_category#21, i_class#20, i_brand#19, sumsales#72]
Keys [3]: [i_category#21, i_class#20, i_brand#19]
Functions [1]: [partial_sum(sumsales#72)]

(47) CometExchange
Input [5]: [i_category#21, i_class#20, i_brand#19, sum#73, isEmpty#74]
Arguments: hashpartitioning(i_category#21, i_class#20, i_brand#19, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(48) CometHashAggregate
Input [5]: [i_category#21, i_class#20, i_brand#19, sum#73, isEmpty#74]
Keys [3]: [i_category#21, i_class#20, i_brand#19]
Functions [1]: [sum(sumsales#72)]

(49) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#75, d_qoy#76, d_moy#77, s_store_id#13, sum#78, isEmpty#79]

(50) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#75, d_qoy#76, d_moy#77, s_store_id#13, sum#78, isEmpty#79]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#75, d_qoy#76, d_moy#77, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#80 * cast(ss_quantity#81 as decimal(10,0))), 0.00))]

(51) CometHashAggregate
Input [3]: [i_category#21, i_class#20, sumsales#82]
Keys [2]: [i_category#21, i_class#20]
Functions [1]: [partial_sum(sumsales#82)]

(52) CometExchange
Input [4]: [i_category#21, i_class#20, sum#83, isEmpty#84]
Arguments: hashpartitioning(i_category#21, i_class#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(53) CometHashAggregate
Input [4]: [i_category#21, i_class#20, sum#83, isEmpty#84]
Keys [2]: [i_category#21, i_class#20]
Functions [1]: [sum(sumsales#82)]

(54) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#85, d_qoy#86, d_moy#87, s_store_id#13, sum#88, isEmpty#89]

(55) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#85, d_qoy#86, d_moy#87, s_store_id#13, sum#88, isEmpty#89]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#85, d_qoy#86, d_moy#87, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#90 * cast(ss_quantity#91 as decimal(10,0))), 0.00))]

(56) CometHashAggregate
Input [2]: [i_category#21, sumsales#92]
Keys [1]: [i_category#21]
Functions [1]: [partial_sum(sumsales#92)]

(57) CometExchange
Input [3]: [i_category#21, sum#93, isEmpty#94]
Arguments: hashpartitioning(i_category#21, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(58) CometHashAggregate
Input [3]: [i_category#21, sum#93, isEmpty#94]
Keys [1]: [i_category#21]
Functions [1]: [sum(sumsales#92)]

(59) ReusedExchange [Reuses operator id: 22]
Output [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#95, d_qoy#96, d_moy#97, s_store_id#13, sum#98, isEmpty#99]

(60) CometHashAggregate
Input [10]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#95, d_qoy#96, d_moy#97, s_store_id#13, sum#98, isEmpty#99]
Keys [8]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#95, d_qoy#96, d_moy#97, s_store_id#13]
Functions [1]: [sum(coalesce((ss_sales_price#100 * cast(ss_quantity#101 as decimal(10,0))), 0.00))]

(61) CometHashAggregate
Input [1]: [sumsales#102]
Keys: []
Functions [1]: [partial_sum(sumsales#102)]

(62) CometExchange
Input [2]: [sum#103, isEmpty#104]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(63) CometHashAggregate
Input [2]: [sum#103, isEmpty#104]
Keys: []
Functions [1]: [sum(sumsales#102)]

(64) CometUnion
Child 0 Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]
Child 1 Input [9]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#25, d_qoy#26, d_moy#27, s_store_id#114, sumsales#115]
Child 2 Input [9]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#35, d_qoy#36, d_moy#116, s_store_id#117, sumsales#118]
Child 3 Input [9]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#45, d_qoy#119, d_moy#120, s_store_id#121, sumsales#122]
Child 4 Input [9]: [i_category#21, i_class#20, i_brand#19, i_product_name#22, d_year#123, d_qoy#124, d_moy#125, s_store_id#126, sumsales#127]
Child 5 Input [9]: [i_category#21, i_class#20, i_brand#19, i_product_name#128, d_year#129, d_qoy#130, d_moy#131, s_store_id#132, sumsales#133]
Child 6 Input [9]: [i_category#21, i_class#20, i_brand#134, i_product_name#135, d_year#136, d_qoy#137, d_moy#138, s_store_id#139, sumsales#140]
Child 7 Input [9]: [i_category#21, i_class#141, i_brand#142, i_product_name#143, d_year#144, d_qoy#145, d_moy#146, s_store_id#147, sumsales#148]
Child 8 Input [9]: [i_category#149, i_class#150, i_brand#151, i_product_name#152, d_year#153, d_qoy#154, d_moy#155, s_store_id#156, sumsales#157]

(65) CometSort
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]
Arguments: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113], [i_category#105 ASC NULLS FIRST, sumsales#113 DESC NULLS LAST]

(66) CometColumnarToRow [codegen id : 1]
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]

(67) WindowGroupLimit
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]
Arguments: [i_category#105], [sumsales#113 DESC NULLS LAST], rank(sumsales#113), 100, Partial

(68) CometColumnarExchange
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]
Arguments: hashpartitioning(i_category#105, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(69) CometSort
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]
Arguments: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113], [i_category#105 ASC NULLS FIRST, sumsales#113 DESC NULLS LAST]

(70) CometColumnarToRow [codegen id : 2]
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]

(71) WindowGroupLimit
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]
Arguments: [i_category#105], [sumsales#113 DESC NULLS LAST], rank(sumsales#113), 100, Final

(72) Window
Input [9]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113]
Arguments: [rank(sumsales#113) windowspecdefinition(i_category#105, sumsales#113 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#158], [i_category#105], [sumsales#113 DESC NULLS LAST]

(73) Filter [codegen id : 3]
Input [10]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113, rk#158]
Condition : (rk#158 <= 100)

(74) TakeOrderedAndProject
Input [10]: [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113, rk#158]
Arguments: 100, [i_category#105 ASC NULLS FIRST, i_class#106 ASC NULLS FIRST, i_brand#107 ASC NULLS FIRST, i_product_name#108 ASC NULLS FIRST, d_year#109 ASC NULLS FIRST, d_qoy#110 ASC NULLS FIRST, d_moy#111 ASC NULLS FIRST, s_store_id#112 ASC NULLS FIRST, sumsales#113 ASC NULLS FIRST, rk#158 ASC NULLS FIRST], [i_category#105, i_class#106, i_brand#107, i_product_name#108, d_year#109, d_qoy#110, d_moy#111, s_store_id#112, sumsales#113, rk#158]

