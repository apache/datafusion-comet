== Physical Plan ==
TakeOrderedAndProject (70)
+- * Filter (69)
   +- * HashAggregate (68)
      +- * HashAggregate (67)
         +- * Project (66)
            +- * BroadcastHashJoin Inner BuildRight (65)
               :- Window (59)
               :  +- * Sort (58)
               :     +- Exchange (57)
               :        +- * Project (56)
               :           +- * Filter (55)
               :              +- * SortMergeJoin FullOuter (54)
               :                 :- * Sort (28)
               :                 :  +- Exchange (27)
               :                 :     +- * HashAggregate (26)
               :                 :        +- Exchange (25)
               :                 :           +- * HashAggregate (24)
               :                 :              +- * Project (23)
               :                 :                 +- * BroadcastHashJoin Inner BuildRight (22)
               :                 :                    :- * Project (16)
               :                 :                    :  +- Window (15)
               :                 :                    :     +- * Sort (14)
               :                 :                    :        +- Exchange (13)
               :                 :                    :           +- * HashAggregate (12)
               :                 :                    :              +- Exchange (11)
               :                 :                    :                 +- * ColumnarToRow (10)
               :                 :                    :                    +- CometHashAggregate (9)
               :                 :                    :                       +- CometProject (8)
               :                 :                    :                          +- CometBroadcastHashJoin (7)
               :                 :                    :                             :- CometFilter (2)
               :                 :                    :                             :  +- CometScan parquet spark_catalog.default.web_sales (1)
               :                 :                    :                             +- CometBroadcastExchange (6)
               :                 :                    :                                +- CometProject (5)
               :                 :                    :                                   +- CometFilter (4)
               :                 :                    :                                      +- CometScan parquet spark_catalog.default.date_dim (3)
               :                 :                    +- BroadcastExchange (21)
               :                 :                       +- * Project (20)
               :                 :                          +- Window (19)
               :                 :                             +- * Sort (18)
               :                 :                                +- ReusedExchange (17)
               :                 +- * Sort (53)
               :                    +- Exchange (52)
               :                       +- * HashAggregate (51)
               :                          +- Exchange (50)
               :                             +- * HashAggregate (49)
               :                                +- * Project (48)
               :                                   +- * BroadcastHashJoin Inner BuildRight (47)
               :                                      :- * Project (41)
               :                                      :  +- Window (40)
               :                                      :     +- * Sort (39)
               :                                      :        +- Exchange (38)
               :                                      :           +- * HashAggregate (37)
               :                                      :              +- Exchange (36)
               :                                      :                 +- * ColumnarToRow (35)
               :                                      :                    +- CometHashAggregate (34)
               :                                      :                       +- CometProject (33)
               :                                      :                          +- CometBroadcastHashJoin (32)
               :                                      :                             :- CometFilter (30)
               :                                      :                             :  +- CometScan parquet spark_catalog.default.store_sales (29)
               :                                      :                             +- ReusedExchange (31)
               :                                      +- BroadcastExchange (46)
               :                                         +- * Project (45)
               :                                            +- Window (44)
               :                                               +- * Sort (43)
               :                                                  +- ReusedExchange (42)
               +- BroadcastExchange (64)
                  +- * Project (63)
                     +- Window (62)
                        +- * Sort (61)
                           +- ReusedExchange (60)


(1) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#3), dynamicpruningexpression(ws_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ws_item_sk)]
ReadSchema: struct<ws_item_sk:int,ws_sales_price:decimal(7,2)>

(2) CometFilter
Input [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Condition : isnotnull(ws_item_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(4) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(6) CometBroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: [d_date_sk#5, d_date#6]

(7) CometBroadcastHashJoin
Left output [3]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3]
Right output [2]: [d_date_sk#5, d_date#6]
Arguments: [ws_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [5]: [ws_item_sk#1, ws_sales_price#2, ws_sold_date_sk#3, d_date_sk#5, d_date#6]
Arguments: [ws_item_sk#1, ws_sales_price#2, d_date#6], [ws_item_sk#1, ws_sales_price#2, d_date#6]

(9) CometHashAggregate
Input [3]: [ws_item_sk#1, ws_sales_price#2, d_date#6]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [partial_sum(UnscaledValue(ws_sales_price#2))]

(10) ColumnarToRow [codegen id : 1]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]

(11) Exchange
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Arguments: hashpartitioning(ws_item_sk#1, d_date#6, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(12) HashAggregate [codegen id : 2]
Input [3]: [ws_item_sk#1, d_date#6, sum#8]
Keys [2]: [ws_item_sk#1, d_date#6]
Functions [1]: [sum(UnscaledValue(ws_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ws_sales_price#2))#9]
Results [4]: [ws_item_sk#1 AS item_sk#10, d_date#6, MakeDecimal(sum(UnscaledValue(ws_sales_price#2))#9,17,2) AS sumws#11, ws_item_sk#1]

(13) Exchange
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: hashpartitioning(ws_item_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(14) Sort [codegen id : 3]
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(15) Window
Input [4]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1]
Arguments: [row_number() windowspecdefinition(ws_item_sk#1, d_date#6 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#12], [ws_item_sk#1], [d_date#6 ASC NULLS FIRST]

(16) Project [codegen id : 8]
Output [4]: [item_sk#10, d_date#6, sumws#11, rk#12]
Input [5]: [item_sk#10, d_date#6, sumws#11, ws_item_sk#1, rk#12]

(17) ReusedExchange [Reuses operator id: 13]
Output [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]

(18) Sort [codegen id : 6]
Input [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]
Arguments: [ws_item_sk#14 ASC NULLS FIRST, d_date#13 ASC NULLS FIRST], false, 0

(19) Window
Input [4]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14]
Arguments: [row_number() windowspecdefinition(ws_item_sk#14, d_date#13 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#15], [ws_item_sk#14], [d_date#13 ASC NULLS FIRST]

(20) Project [codegen id : 7]
Output [3]: [item_sk#10 AS item_sk#16, sumws#11 AS sumws#17, rk#15]
Input [5]: [item_sk#10, d_date#13, sumws#11, ws_item_sk#14, rk#15]

(21) BroadcastExchange
Input [3]: [item_sk#16, sumws#17, rk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(22) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [item_sk#10]
Right keys [1]: [item_sk#16]
Join type: Inner
Join condition: (rk#12 >= rk#15)

(23) Project [codegen id : 8]
Output [4]: [item_sk#10, d_date#6, sumws#11, sumws#17]
Input [7]: [item_sk#10, d_date#6, sumws#11, rk#12, item_sk#16, sumws#17, rk#15]

(24) HashAggregate [codegen id : 8]
Input [4]: [item_sk#10, d_date#6, sumws#11, sumws#17]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [partial_sum(sumws#17)]
Aggregate Attributes [2]: [sum#18, isEmpty#19]
Results [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]

(25) Exchange
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]
Arguments: hashpartitioning(item_sk#10, d_date#6, sumws#11, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) HashAggregate [codegen id : 9]
Input [5]: [item_sk#10, d_date#6, sumws#11, sum#20, isEmpty#21]
Keys [3]: [item_sk#10, d_date#6, sumws#11]
Functions [1]: [sum(sumws#17)]
Aggregate Attributes [1]: [sum(sumws#17)#22]
Results [3]: [item_sk#10, d_date#6, sum(sumws#17)#22 AS cume_sales#23]

(27) Exchange
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: hashpartitioning(item_sk#10, d_date#6, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(28) Sort [codegen id : 10]
Input [3]: [item_sk#10, d_date#6, cume_sales#23]
Arguments: [item_sk#10 ASC NULLS FIRST, d_date#6 ASC NULLS FIRST], false, 0

(29) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#26), dynamicpruningexpression(ss_sold_date_sk#26 IN dynamicpruning#27)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_sales_price:decimal(7,2)>

(30) CometFilter
Input [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Condition : isnotnull(ss_item_sk#24)

(31) ReusedExchange [Reuses operator id: 6]
Output [2]: [d_date_sk#28, d_date#29]

(32) CometBroadcastHashJoin
Left output [3]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26]
Right output [2]: [d_date_sk#28, d_date#29]
Arguments: [ss_sold_date_sk#26], [d_date_sk#28], Inner, BuildRight

(33) CometProject
Input [5]: [ss_item_sk#24, ss_sales_price#25, ss_sold_date_sk#26, d_date_sk#28, d_date#29]
Arguments: [ss_item_sk#24, ss_sales_price#25, d_date#29], [ss_item_sk#24, ss_sales_price#25, d_date#29]

(34) CometHashAggregate
Input [3]: [ss_item_sk#24, ss_sales_price#25, d_date#29]
Keys [2]: [ss_item_sk#24, d_date#29]
Functions [1]: [partial_sum(UnscaledValue(ss_sales_price#25))]

(35) ColumnarToRow [codegen id : 11]
Input [3]: [ss_item_sk#24, d_date#29, sum#30]

(36) Exchange
Input [3]: [ss_item_sk#24, d_date#29, sum#30]
Arguments: hashpartitioning(ss_item_sk#24, d_date#29, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(37) HashAggregate [codegen id : 12]
Input [3]: [ss_item_sk#24, d_date#29, sum#30]
Keys [2]: [ss_item_sk#24, d_date#29]
Functions [1]: [sum(UnscaledValue(ss_sales_price#25))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_sales_price#25))#31]
Results [4]: [ss_item_sk#24 AS item_sk#32, d_date#29, MakeDecimal(sum(UnscaledValue(ss_sales_price#25))#31,17,2) AS sumss#33, ss_item_sk#24]

(38) Exchange
Input [4]: [item_sk#32, d_date#29, sumss#33, ss_item_sk#24]
Arguments: hashpartitioning(ss_item_sk#24, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(39) Sort [codegen id : 13]
Input [4]: [item_sk#32, d_date#29, sumss#33, ss_item_sk#24]
Arguments: [ss_item_sk#24 ASC NULLS FIRST, d_date#29 ASC NULLS FIRST], false, 0

(40) Window
Input [4]: [item_sk#32, d_date#29, sumss#33, ss_item_sk#24]
Arguments: [row_number() windowspecdefinition(ss_item_sk#24, d_date#29 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#34], [ss_item_sk#24], [d_date#29 ASC NULLS FIRST]

(41) Project [codegen id : 18]
Output [4]: [item_sk#32, d_date#29, sumss#33, rk#34]
Input [5]: [item_sk#32, d_date#29, sumss#33, ss_item_sk#24, rk#34]

(42) ReusedExchange [Reuses operator id: 38]
Output [4]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36]

(43) Sort [codegen id : 16]
Input [4]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36]
Arguments: [ss_item_sk#36 ASC NULLS FIRST, d_date#35 ASC NULLS FIRST], false, 0

(44) Window
Input [4]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36]
Arguments: [row_number() windowspecdefinition(ss_item_sk#36, d_date#35 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#37], [ss_item_sk#36], [d_date#35 ASC NULLS FIRST]

(45) Project [codegen id : 17]
Output [3]: [item_sk#32 AS item_sk#38, sumss#33 AS sumss#39, rk#37]
Input [5]: [item_sk#32, d_date#35, sumss#33, ss_item_sk#36, rk#37]

(46) BroadcastExchange
Input [3]: [item_sk#38, sumss#39, rk#37]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

(47) BroadcastHashJoin [codegen id : 18]
Left keys [1]: [item_sk#32]
Right keys [1]: [item_sk#38]
Join type: Inner
Join condition: (rk#34 >= rk#37)

(48) Project [codegen id : 18]
Output [4]: [item_sk#32, d_date#29, sumss#33, sumss#39]
Input [7]: [item_sk#32, d_date#29, sumss#33, rk#34, item_sk#38, sumss#39, rk#37]

(49) HashAggregate [codegen id : 18]
Input [4]: [item_sk#32, d_date#29, sumss#33, sumss#39]
Keys [3]: [item_sk#32, d_date#29, sumss#33]
Functions [1]: [partial_sum(sumss#39)]
Aggregate Attributes [2]: [sum#40, isEmpty#41]
Results [5]: [item_sk#32, d_date#29, sumss#33, sum#42, isEmpty#43]

(50) Exchange
Input [5]: [item_sk#32, d_date#29, sumss#33, sum#42, isEmpty#43]
Arguments: hashpartitioning(item_sk#32, d_date#29, sumss#33, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(51) HashAggregate [codegen id : 19]
Input [5]: [item_sk#32, d_date#29, sumss#33, sum#42, isEmpty#43]
Keys [3]: [item_sk#32, d_date#29, sumss#33]
Functions [1]: [sum(sumss#39)]
Aggregate Attributes [1]: [sum(sumss#39)#44]
Results [3]: [item_sk#32, d_date#29, sum(sumss#39)#44 AS cume_sales#45]

(52) Exchange
Input [3]: [item_sk#32, d_date#29, cume_sales#45]
Arguments: hashpartitioning(item_sk#32, d_date#29, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(53) Sort [codegen id : 20]
Input [3]: [item_sk#32, d_date#29, cume_sales#45]
Arguments: [item_sk#32 ASC NULLS FIRST, d_date#29 ASC NULLS FIRST], false, 0

(54) SortMergeJoin [codegen id : 21]
Left keys [2]: [item_sk#10, d_date#6]
Right keys [2]: [item_sk#32, d_date#29]
Join type: FullOuter
Join condition: None

(55) Filter [codegen id : 21]
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#32, d_date#29, cume_sales#45]
Condition : isnotnull(CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#32 END)

(56) Project [codegen id : 21]
Output [4]: [CASE WHEN isnotnull(item_sk#10) THEN item_sk#10 ELSE item_sk#32 END AS item_sk#46, CASE WHEN isnotnull(d_date#6) THEN d_date#6 ELSE d_date#29 END AS d_date#47, cume_sales#23 AS web_sales#48, cume_sales#45 AS store_sales#49]
Input [6]: [item_sk#10, d_date#6, cume_sales#23, item_sk#32, d_date#29, cume_sales#45]

(57) Exchange
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: hashpartitioning(item_sk#46, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(58) Sort [codegen id : 22]
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], false, 0

(59) Window
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [row_number() windowspecdefinition(item_sk#46, d_date#47 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#50], [item_sk#46], [d_date#47 ASC NULLS FIRST]

(60) ReusedExchange [Reuses operator id: 57]
Output [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]

(61) Sort [codegen id : 44]
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], false, 0

(62) Window
Input [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Arguments: [row_number() windowspecdefinition(item_sk#46, d_date#47 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rk#51], [item_sk#46], [d_date#47 ASC NULLS FIRST]

(63) Project [codegen id : 45]
Output [4]: [item_sk#46 AS item_sk#52, web_sales#48 AS web_sales#53, store_sales#49 AS store_sales#54, rk#51]
Input [5]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, rk#51]

(64) BroadcastExchange
Input [4]: [item_sk#52, web_sales#53, store_sales#54, rk#51]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

(65) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [item_sk#46]
Right keys [1]: [item_sk#52]
Join type: Inner
Join condition: (rk#50 >= rk#51)

(66) Project [codegen id : 46]
Output [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_sales#53, store_sales#54]
Input [9]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, rk#50, item_sk#52, web_sales#53, store_sales#54, rk#51]

(67) HashAggregate [codegen id : 46]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_sales#53, store_sales#54]
Keys [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Functions [2]: [partial_max(web_sales#53), partial_max(store_sales#54)]
Aggregate Attributes [2]: [max#55, max#56]
Results [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max#57, max#58]

(68) HashAggregate [codegen id : 46]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max#57, max#58]
Keys [4]: [item_sk#46, d_date#47, web_sales#48, store_sales#49]
Functions [2]: [max(web_sales#53), max(store_sales#54)]
Aggregate Attributes [2]: [max(web_sales#53)#59, max(store_sales#54)#60]
Results [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, max(web_sales#53)#59 AS web_cumulative#61, max(store_sales#54)#60 AS store_cumulative#62]

(69) Filter [codegen id : 46]
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]
Condition : ((isnotnull(web_cumulative#61) AND isnotnull(store_cumulative#62)) AND (web_cumulative#61 > store_cumulative#62))

(70) TakeOrderedAndProject
Input [6]: [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]
Arguments: 100, [item_sk#46 ASC NULLS FIRST, d_date#47 ASC NULLS FIRST], [item_sk#46, d_date#47, web_sales#48, store_sales#49, web_cumulative#61, store_cumulative#62]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (75)
+- * ColumnarToRow (74)
   +- CometProject (73)
      +- CometFilter (72)
         +- CometScan parquet spark_catalog.default.date_dim (71)


(71) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date,d_month_seq:int>

(72) CometFilter
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Condition : (((isnotnull(d_month_seq#7) AND (d_month_seq#7 >= 1212)) AND (d_month_seq#7 <= 1223)) AND isnotnull(d_date_sk#5))

(73) CometProject
Input [3]: [d_date_sk#5, d_date#6, d_month_seq#7]
Arguments: [d_date_sk#5, d_date#6], [d_date_sk#5, d_date#6]

(74) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#5, d_date#6]

(75) BroadcastExchange
Input [2]: [d_date_sk#5, d_date#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

Subquery:2 Hosting operator id = 29 Hosting Expression = ss_sold_date_sk#26 IN dynamicpruning#4


