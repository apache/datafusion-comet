== Physical Plan ==
TakeOrderedAndProject (97)
+- * HashAggregate (96)
   +- Exchange (95)
      +- * HashAggregate (94)
         +- Union (93)
            :- * HashAggregate (82)
            :  +- Exchange (81)
            :     +- * HashAggregate (80)
            :        +- Union (79)
            :           :- * ColumnarToRow (31)
            :           :  +- CometProject (30)
            :           :     +- CometBroadcastHashJoin (29)
            :           :        :- CometHashAggregate (16)
            :           :        :  +- CometExchange (15)
            :           :        :     +- CometHashAggregate (14)
            :           :        :        +- CometProject (13)
            :           :        :           +- CometBroadcastHashJoin (12)
            :           :        :              :- CometProject (8)
            :           :        :              :  +- CometBroadcastHashJoin (7)
            :           :        :              :     :- CometFilter (2)
            :           :        :              :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
            :           :        :              :     +- CometBroadcastExchange (6)
            :           :        :              :        +- CometProject (5)
            :           :        :              :           +- CometFilter (4)
            :           :        :              :              +- CometScan parquet spark_catalog.default.date_dim (3)
            :           :        :              +- CometBroadcastExchange (11)
            :           :        :                 +- CometFilter (10)
            :           :        :                    +- CometScan parquet spark_catalog.default.store (9)
            :           :        +- CometBroadcastExchange (28)
            :           :           +- CometHashAggregate (27)
            :           :              +- CometExchange (26)
            :           :                 +- CometHashAggregate (25)
            :           :                    +- CometProject (24)
            :           :                       +- CometBroadcastHashJoin (23)
            :           :                          :- CometProject (21)
            :           :                          :  +- CometBroadcastHashJoin (20)
            :           :                          :     :- CometFilter (18)
            :           :                          :     :  +- CometScan parquet spark_catalog.default.store_returns (17)
            :           :                          :     +- ReusedExchange (19)
            :           :                          +- ReusedExchange (22)
            :           :- * Project (50)
            :           :  +- * BroadcastNestedLoopJoin Inner BuildLeft (49)
            :           :     :- BroadcastExchange (40)
            :           :     :  +- * ColumnarToRow (39)
            :           :     :     +- CometHashAggregate (38)
            :           :     :        +- CometExchange (37)
            :           :     :           +- CometHashAggregate (36)
            :           :     :              +- CometProject (35)
            :           :     :                 +- CometBroadcastHashJoin (34)
            :           :     :                    :- CometScan parquet spark_catalog.default.catalog_sales (32)
            :           :     :                    +- ReusedExchange (33)
            :           :     +- * ColumnarToRow (48)
            :           :        +- CometHashAggregate (47)
            :           :           +- CometExchange (46)
            :           :              +- CometHashAggregate (45)
            :           :                 +- CometProject (44)
            :           :                    +- CometBroadcastHashJoin (43)
            :           :                       :- CometScan parquet spark_catalog.default.catalog_returns (41)
            :           :                       +- ReusedExchange (42)
            :           +- * ColumnarToRow (78)
            :              +- CometProject (77)
            :                 +- CometBroadcastHashJoin (76)
            :                    :- CometHashAggregate (63)
            :                    :  +- CometExchange (62)
            :                    :     +- CometHashAggregate (61)
            :                    :        +- CometProject (60)
            :                    :           +- CometBroadcastHashJoin (59)
            :                    :              :- CometProject (55)
            :                    :              :  +- CometBroadcastHashJoin (54)
            :                    :              :     :- CometFilter (52)
            :                    :              :     :  +- CometScan parquet spark_catalog.default.web_sales (51)
            :                    :              :     +- ReusedExchange (53)
            :                    :              +- CometBroadcastExchange (58)
            :                    :                 +- CometFilter (57)
            :                    :                    +- CometScan parquet spark_catalog.default.web_page (56)
            :                    +- CometBroadcastExchange (75)
            :                       +- CometHashAggregate (74)
            :                          +- CometExchange (73)
            :                             +- CometHashAggregate (72)
            :                                +- CometProject (71)
            :                                   +- CometBroadcastHashJoin (70)
            :                                      :- CometProject (68)
            :                                      :  +- CometBroadcastHashJoin (67)
            :                                      :     :- CometFilter (65)
            :                                      :     :  +- CometScan parquet spark_catalog.default.web_returns (64)
            :                                      :     +- ReusedExchange (66)
            :                                      +- ReusedExchange (69)
            :- * HashAggregate (87)
            :  +- Exchange (86)
            :     +- * HashAggregate (85)
            :        +- * HashAggregate (84)
            :           +- ReusedExchange (83)
            +- * HashAggregate (92)
               +- Exchange (91)
                  +- * HashAggregate (90)
                     +- * HashAggregate (89)
                        +- ReusedExchange (88)


(1) CometScan parquet spark_catalog.default.store_sales
Output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#4), dynamicpruningexpression(ss_sold_date_sk#4 IN dynamicpruning#5)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Condition : isnotnull(ss_store_sk#1)

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(4) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 1998-08-04)) AND (d_date#7 <= 1998-09-03)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#4], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [5]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, ss_sold_date_sk#4, d_date_sk#6]
Arguments: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3], [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]

(9) CometScan parquet spark_catalog.default.store
Output [1]: [s_store_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int>

(10) CometFilter
Input [1]: [s_store_sk#8]
Condition : isnotnull(s_store_sk#8)

(11) CometBroadcastExchange
Input [1]: [s_store_sk#8]
Arguments: [s_store_sk#8]

(12) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3]
Right output [1]: [s_store_sk#8]
Arguments: [ss_store_sk#1], [s_store_sk#8], Inner, BuildRight

(13) CometProject
Input [4]: [ss_store_sk#1, ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Arguments: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8], [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]

(14) CometHashAggregate
Input [3]: [ss_ext_sales_price#2, ss_net_profit#3, s_store_sk#8]
Keys [1]: [s_store_sk#8]
Functions [2]: [partial_sum(UnscaledValue(ss_ext_sales_price#2)), partial_sum(UnscaledValue(ss_net_profit#3))]

(15) CometExchange
Input [3]: [s_store_sk#8, sum#9, sum#10]
Arguments: hashpartitioning(s_store_sk#8, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(16) CometHashAggregate
Input [3]: [s_store_sk#8, sum#9, sum#10]
Keys [1]: [s_store_sk#8]
Functions [2]: [sum(UnscaledValue(ss_ext_sales_price#2)), sum(UnscaledValue(ss_net_profit#3))]

(17) CometScan parquet spark_catalog.default.store_returns
Output [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(sr_returned_date_sk#14), dynamicpruningexpression(sr_returned_date_sk#14 IN dynamicpruning#15)]
PushedFilters: [IsNotNull(sr_store_sk)]
ReadSchema: struct<sr_store_sk:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(18) CometFilter
Input [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Condition : isnotnull(sr_store_sk#11)

(19) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#16]

(20) CometBroadcastHashJoin
Left output [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14]
Right output [1]: [d_date_sk#16]
Arguments: [sr_returned_date_sk#14], [d_date_sk#16], Inner, BuildRight

(21) CometProject
Input [5]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, sr_returned_date_sk#14, d_date_sk#16]
Arguments: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13], [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13]

(22) ReusedExchange [Reuses operator id: 11]
Output [1]: [s_store_sk#17]

(23) CometBroadcastHashJoin
Left output [3]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13]
Right output [1]: [s_store_sk#17]
Arguments: [sr_store_sk#11], [s_store_sk#17], Inner, BuildRight

(24) CometProject
Input [4]: [sr_store_sk#11, sr_return_amt#12, sr_net_loss#13, s_store_sk#17]
Arguments: [sr_return_amt#12, sr_net_loss#13, s_store_sk#17], [sr_return_amt#12, sr_net_loss#13, s_store_sk#17]

(25) CometHashAggregate
Input [3]: [sr_return_amt#12, sr_net_loss#13, s_store_sk#17]
Keys [1]: [s_store_sk#17]
Functions [2]: [partial_sum(UnscaledValue(sr_return_amt#12)), partial_sum(UnscaledValue(sr_net_loss#13))]

(26) CometExchange
Input [3]: [s_store_sk#17, sum#18, sum#19]
Arguments: hashpartitioning(s_store_sk#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(27) CometHashAggregate
Input [3]: [s_store_sk#17, sum#18, sum#19]
Keys [1]: [s_store_sk#17]
Functions [2]: [sum(UnscaledValue(sr_return_amt#12)), sum(UnscaledValue(sr_net_loss#13))]

(28) CometBroadcastExchange
Input [3]: [s_store_sk#17, returns#20, profit_loss#21]
Arguments: [s_store_sk#17, returns#20, profit_loss#21]

(29) CometBroadcastHashJoin
Left output [3]: [s_store_sk#8, sales#22, profit#23]
Right output [3]: [s_store_sk#17, returns#20, profit_loss#21]
Arguments: [s_store_sk#8], [s_store_sk#17], LeftOuter, BuildRight

(30) CometProject
Input [6]: [s_store_sk#8, sales#22, profit#23, s_store_sk#17, returns#20, profit_loss#21]
Arguments: [channel#24, id#25, sales#22, returns#26, profit#27], [store channel AS channel#24, s_store_sk#8 AS id#25, sales#22, coalesce(returns#20, 0.00) AS returns#26, (profit#23 - coalesce(profit_loss#21, 0.00)) AS profit#27]

(31) ColumnarToRow [codegen id : 1]
Input [5]: [channel#24, id#25, sales#22, returns#26, profit#27]

(32) CometScan parquet spark_catalog.default.catalog_sales
Output [4]: [cs_call_center_sk#28, cs_ext_sales_price#29, cs_net_profit#30, cs_sold_date_sk#31]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#31), dynamicpruningexpression(cs_sold_date_sk#31 IN dynamicpruning#32)]
ReadSchema: struct<cs_call_center_sk:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(33) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#33]

(34) CometBroadcastHashJoin
Left output [4]: [cs_call_center_sk#28, cs_ext_sales_price#29, cs_net_profit#30, cs_sold_date_sk#31]
Right output [1]: [d_date_sk#33]
Arguments: [cs_sold_date_sk#31], [d_date_sk#33], Inner, BuildRight

(35) CometProject
Input [5]: [cs_call_center_sk#28, cs_ext_sales_price#29, cs_net_profit#30, cs_sold_date_sk#31, d_date_sk#33]
Arguments: [cs_call_center_sk#28, cs_ext_sales_price#29, cs_net_profit#30], [cs_call_center_sk#28, cs_ext_sales_price#29, cs_net_profit#30]

(36) CometHashAggregate
Input [3]: [cs_call_center_sk#28, cs_ext_sales_price#29, cs_net_profit#30]
Keys [1]: [cs_call_center_sk#28]
Functions [2]: [partial_sum(UnscaledValue(cs_ext_sales_price#29)), partial_sum(UnscaledValue(cs_net_profit#30))]

(37) CometExchange
Input [3]: [cs_call_center_sk#28, sum#34, sum#35]
Arguments: hashpartitioning(cs_call_center_sk#28, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(38) CometHashAggregate
Input [3]: [cs_call_center_sk#28, sum#34, sum#35]
Keys [1]: [cs_call_center_sk#28]
Functions [2]: [sum(UnscaledValue(cs_ext_sales_price#29)), sum(UnscaledValue(cs_net_profit#30))]

(39) ColumnarToRow [codegen id : 2]
Input [3]: [cs_call_center_sk#28, sales#36, profit#37]

(40) BroadcastExchange
Input [3]: [cs_call_center_sk#28, sales#36, profit#37]
Arguments: IdentityBroadcastMode, [plan_id=4]

(41) CometScan parquet spark_catalog.default.catalog_returns
Output [3]: [cr_return_amount#38, cr_net_loss#39, cr_returned_date_sk#40]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cr_returned_date_sk#40), dynamicpruningexpression(cr_returned_date_sk#40 IN dynamicpruning#41)]
ReadSchema: struct<cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(42) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#42]

(43) CometBroadcastHashJoin
Left output [3]: [cr_return_amount#38, cr_net_loss#39, cr_returned_date_sk#40]
Right output [1]: [d_date_sk#42]
Arguments: [cr_returned_date_sk#40], [d_date_sk#42], Inner, BuildRight

(44) CometProject
Input [4]: [cr_return_amount#38, cr_net_loss#39, cr_returned_date_sk#40, d_date_sk#42]
Arguments: [cr_return_amount#38, cr_net_loss#39], [cr_return_amount#38, cr_net_loss#39]

(45) CometHashAggregate
Input [2]: [cr_return_amount#38, cr_net_loss#39]
Keys: []
Functions [2]: [partial_sum(UnscaledValue(cr_return_amount#38)), partial_sum(UnscaledValue(cr_net_loss#39))]

(46) CometExchange
Input [2]: [sum#43, sum#44]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(47) CometHashAggregate
Input [2]: [sum#43, sum#44]
Keys: []
Functions [2]: [sum(UnscaledValue(cr_return_amount#38)), sum(UnscaledValue(cr_net_loss#39))]

(48) ColumnarToRow
Input [2]: [returns#45, profit_loss#46]

(49) BroadcastNestedLoopJoin [codegen id : 3]
Join type: Inner
Join condition: None

(50) Project [codegen id : 3]
Output [5]: [catalog channel AS channel#47, cs_call_center_sk#28 AS id#48, sales#36, returns#45, (profit#37 - profit_loss#46) AS profit#49]
Input [5]: [cs_call_center_sk#28, sales#36, profit#37, returns#45, profit_loss#46]

(51) CometScan parquet spark_catalog.default.web_sales
Output [4]: [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52, ws_sold_date_sk#53]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#53), dynamicpruningexpression(ws_sold_date_sk#53 IN dynamicpruning#54)]
PushedFilters: [IsNotNull(ws_web_page_sk)]
ReadSchema: struct<ws_web_page_sk:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(52) CometFilter
Input [4]: [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52, ws_sold_date_sk#53]
Condition : isnotnull(ws_web_page_sk#50)

(53) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#55]

(54) CometBroadcastHashJoin
Left output [4]: [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52, ws_sold_date_sk#53]
Right output [1]: [d_date_sk#55]
Arguments: [ws_sold_date_sk#53], [d_date_sk#55], Inner, BuildRight

(55) CometProject
Input [5]: [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52, ws_sold_date_sk#53, d_date_sk#55]
Arguments: [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52], [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52]

(56) CometScan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#56]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(57) CometFilter
Input [1]: [wp_web_page_sk#56]
Condition : isnotnull(wp_web_page_sk#56)

(58) CometBroadcastExchange
Input [1]: [wp_web_page_sk#56]
Arguments: [wp_web_page_sk#56]

(59) CometBroadcastHashJoin
Left output [3]: [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52]
Right output [1]: [wp_web_page_sk#56]
Arguments: [ws_web_page_sk#50], [wp_web_page_sk#56], Inner, BuildRight

(60) CometProject
Input [4]: [ws_web_page_sk#50, ws_ext_sales_price#51, ws_net_profit#52, wp_web_page_sk#56]
Arguments: [ws_ext_sales_price#51, ws_net_profit#52, wp_web_page_sk#56], [ws_ext_sales_price#51, ws_net_profit#52, wp_web_page_sk#56]

(61) CometHashAggregate
Input [3]: [ws_ext_sales_price#51, ws_net_profit#52, wp_web_page_sk#56]
Keys [1]: [wp_web_page_sk#56]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_sales_price#51)), partial_sum(UnscaledValue(ws_net_profit#52))]

(62) CometExchange
Input [3]: [wp_web_page_sk#56, sum#57, sum#58]
Arguments: hashpartitioning(wp_web_page_sk#56, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(63) CometHashAggregate
Input [3]: [wp_web_page_sk#56, sum#57, sum#58]
Keys [1]: [wp_web_page_sk#56]
Functions [2]: [sum(UnscaledValue(ws_ext_sales_price#51)), sum(UnscaledValue(ws_net_profit#52))]

(64) CometScan parquet spark_catalog.default.web_returns
Output [4]: [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61, wr_returned_date_sk#62]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(wr_returned_date_sk#62), dynamicpruningexpression(wr_returned_date_sk#62 IN dynamicpruning#63)]
PushedFilters: [IsNotNull(wr_web_page_sk)]
ReadSchema: struct<wr_web_page_sk:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(65) CometFilter
Input [4]: [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61, wr_returned_date_sk#62]
Condition : isnotnull(wr_web_page_sk#59)

(66) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#64]

(67) CometBroadcastHashJoin
Left output [4]: [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61, wr_returned_date_sk#62]
Right output [1]: [d_date_sk#64]
Arguments: [wr_returned_date_sk#62], [d_date_sk#64], Inner, BuildRight

(68) CometProject
Input [5]: [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61, wr_returned_date_sk#62, d_date_sk#64]
Arguments: [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61], [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61]

(69) ReusedExchange [Reuses operator id: 58]
Output [1]: [wp_web_page_sk#65]

(70) CometBroadcastHashJoin
Left output [3]: [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61]
Right output [1]: [wp_web_page_sk#65]
Arguments: [wr_web_page_sk#59], [wp_web_page_sk#65], Inner, BuildRight

(71) CometProject
Input [4]: [wr_web_page_sk#59, wr_return_amt#60, wr_net_loss#61, wp_web_page_sk#65]
Arguments: [wr_return_amt#60, wr_net_loss#61, wp_web_page_sk#65], [wr_return_amt#60, wr_net_loss#61, wp_web_page_sk#65]

(72) CometHashAggregate
Input [3]: [wr_return_amt#60, wr_net_loss#61, wp_web_page_sk#65]
Keys [1]: [wp_web_page_sk#65]
Functions [2]: [partial_sum(UnscaledValue(wr_return_amt#60)), partial_sum(UnscaledValue(wr_net_loss#61))]

(73) CometExchange
Input [3]: [wp_web_page_sk#65, sum#66, sum#67]
Arguments: hashpartitioning(wp_web_page_sk#65, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(74) CometHashAggregate
Input [3]: [wp_web_page_sk#65, sum#66, sum#67]
Keys [1]: [wp_web_page_sk#65]
Functions [2]: [sum(UnscaledValue(wr_return_amt#60)), sum(UnscaledValue(wr_net_loss#61))]

(75) CometBroadcastExchange
Input [3]: [wp_web_page_sk#65, returns#68, profit_loss#69]
Arguments: [wp_web_page_sk#65, returns#68, profit_loss#69]

(76) CometBroadcastHashJoin
Left output [3]: [wp_web_page_sk#56, sales#70, profit#71]
Right output [3]: [wp_web_page_sk#65, returns#68, profit_loss#69]
Arguments: [wp_web_page_sk#56], [wp_web_page_sk#65], LeftOuter, BuildRight

(77) CometProject
Input [6]: [wp_web_page_sk#56, sales#70, profit#71, wp_web_page_sk#65, returns#68, profit_loss#69]
Arguments: [channel#72, id#73, sales#70, returns#74, profit#75], [web channel AS channel#72, wp_web_page_sk#56 AS id#73, sales#70, coalesce(returns#68, 0.00) AS returns#74, (profit#71 - coalesce(profit_loss#69, 0.00)) AS profit#75]

(78) ColumnarToRow [codegen id : 4]
Input [5]: [channel#72, id#73, sales#70, returns#74, profit#75]

(79) Union

(80) HashAggregate [codegen id : 5]
Input [5]: [channel#24, id#25, sales#22, returns#26, profit#27]
Keys [2]: [channel#24, id#25]
Functions [3]: [partial_sum(sales#22), partial_sum(returns#26), partial_sum(profit#27)]
Aggregate Attributes [6]: [sum#76, isEmpty#77, sum#78, isEmpty#79, sum#80, isEmpty#81]
Results [8]: [channel#24, id#25, sum#82, isEmpty#83, sum#84, isEmpty#85, sum#86, isEmpty#87]

(81) Exchange
Input [8]: [channel#24, id#25, sum#82, isEmpty#83, sum#84, isEmpty#85, sum#86, isEmpty#87]
Arguments: hashpartitioning(channel#24, id#25, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(82) HashAggregate [codegen id : 6]
Input [8]: [channel#24, id#25, sum#82, isEmpty#83, sum#84, isEmpty#85, sum#86, isEmpty#87]
Keys [2]: [channel#24, id#25]
Functions [3]: [sum(sales#22), sum(returns#26), sum(profit#27)]
Aggregate Attributes [3]: [sum(sales#22)#88, sum(returns#26)#89, sum(profit#27)#90]
Results [5]: [channel#24, id#25, cast(sum(sales#22)#88 as decimal(37,2)) AS sales#91, cast(sum(returns#26)#89 as decimal(37,2)) AS returns#92, cast(sum(profit#27)#90 as decimal(38,2)) AS profit#93]

(83) ReusedExchange [Reuses operator id: 81]
Output [8]: [channel#24, id#25, sum#82, isEmpty#83, sum#84, isEmpty#85, sum#86, isEmpty#87]

(84) HashAggregate [codegen id : 12]
Input [8]: [channel#24, id#25, sum#82, isEmpty#83, sum#84, isEmpty#85, sum#86, isEmpty#87]
Keys [2]: [channel#24, id#25]
Functions [3]: [sum(sales#22), sum(returns#26), sum(profit#27)]
Aggregate Attributes [3]: [sum(sales#22)#88, sum(returns#26)#89, sum(profit#27)#90]
Results [4]: [channel#24, sum(sales#22)#88 AS sales#94, sum(returns#26)#89 AS returns#95, sum(profit#27)#90 AS profit#96]

(85) HashAggregate [codegen id : 12]
Input [4]: [channel#24, sales#94, returns#95, profit#96]
Keys [1]: [channel#24]
Functions [3]: [partial_sum(sales#94), partial_sum(returns#95), partial_sum(profit#96)]
Aggregate Attributes [6]: [sum#97, isEmpty#98, sum#99, isEmpty#100, sum#101, isEmpty#102]
Results [7]: [channel#24, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]

(86) Exchange
Input [7]: [channel#24, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Arguments: hashpartitioning(channel#24, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(87) HashAggregate [codegen id : 13]
Input [7]: [channel#24, sum#103, isEmpty#104, sum#105, isEmpty#106, sum#107, isEmpty#108]
Keys [1]: [channel#24]
Functions [3]: [sum(sales#94), sum(returns#95), sum(profit#96)]
Aggregate Attributes [3]: [sum(sales#94)#109, sum(returns#95)#110, sum(profit#96)#111]
Results [5]: [channel#24, null AS id#112, sum(sales#94)#109 AS sales#113, sum(returns#95)#110 AS returns#114, sum(profit#96)#111 AS profit#115]

(88) ReusedExchange [Reuses operator id: 81]
Output [8]: [channel#24, id#25, sum#82, isEmpty#83, sum#84, isEmpty#85, sum#86, isEmpty#87]

(89) HashAggregate [codegen id : 19]
Input [8]: [channel#24, id#25, sum#82, isEmpty#83, sum#84, isEmpty#85, sum#86, isEmpty#87]
Keys [2]: [channel#24, id#25]
Functions [3]: [sum(sales#22), sum(returns#26), sum(profit#27)]
Aggregate Attributes [3]: [sum(sales#22)#88, sum(returns#26)#89, sum(profit#27)#90]
Results [3]: [sum(sales#22)#88 AS sales#116, sum(returns#26)#89 AS returns#117, sum(profit#27)#90 AS profit#118]

(90) HashAggregate [codegen id : 19]
Input [3]: [sales#116, returns#117, profit#118]
Keys: []
Functions [3]: [partial_sum(sales#116), partial_sum(returns#117), partial_sum(profit#118)]
Aggregate Attributes [6]: [sum#119, isEmpty#120, sum#121, isEmpty#122, sum#123, isEmpty#124]
Results [6]: [sum#125, isEmpty#126, sum#127, isEmpty#128, sum#129, isEmpty#130]

(91) Exchange
Input [6]: [sum#125, isEmpty#126, sum#127, isEmpty#128, sum#129, isEmpty#130]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(92) HashAggregate [codegen id : 20]
Input [6]: [sum#125, isEmpty#126, sum#127, isEmpty#128, sum#129, isEmpty#130]
Keys: []
Functions [3]: [sum(sales#116), sum(returns#117), sum(profit#118)]
Aggregate Attributes [3]: [sum(sales#116)#131, sum(returns#117)#132, sum(profit#118)#133]
Results [5]: [null AS channel#134, null AS id#135, sum(sales#116)#131 AS sales#136, sum(returns#117)#132 AS returns#137, sum(profit#118)#133 AS profit#138]

(93) Union

(94) HashAggregate [codegen id : 21]
Input [5]: [channel#24, id#25, sales#91, returns#92, profit#93]
Keys [5]: [channel#24, id#25, sales#91, returns#92, profit#93]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#24, id#25, sales#91, returns#92, profit#93]

(95) Exchange
Input [5]: [channel#24, id#25, sales#91, returns#92, profit#93]
Arguments: hashpartitioning(channel#24, id#25, sales#91, returns#92, profit#93, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(96) HashAggregate [codegen id : 22]
Input [5]: [channel#24, id#25, sales#91, returns#92, profit#93]
Keys [5]: [channel#24, id#25, sales#91, returns#92, profit#93]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#24, id#25, sales#91, returns#92, profit#93]

(97) TakeOrderedAndProject
Input [5]: [channel#24, id#25, sales#91, returns#92, profit#93]
Arguments: 100, [channel#24 ASC NULLS FIRST, id#25 ASC NULLS FIRST], [channel#24, id#25, sales#91, returns#92, profit#93]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#4 IN dynamicpruning#5
BroadcastExchange (102)
+- * ColumnarToRow (101)
   +- CometProject (100)
      +- CometFilter (99)
         +- CometScan parquet spark_catalog.default.date_dim (98)


(98) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_date#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(99) CometFilter
Input [2]: [d_date_sk#6, d_date#7]
Condition : (((isnotnull(d_date#7) AND (d_date#7 >= 1998-08-04)) AND (d_date#7 <= 1998-09-03)) AND isnotnull(d_date_sk#6))

(100) CometProject
Input [2]: [d_date_sk#6, d_date#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(101) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#6]

(102) BroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=12]

Subquery:2 Hosting operator id = 17 Hosting Expression = sr_returned_date_sk#14 IN dynamicpruning#5

Subquery:3 Hosting operator id = 32 Hosting Expression = cs_sold_date_sk#31 IN dynamicpruning#5

Subquery:4 Hosting operator id = 41 Hosting Expression = cr_returned_date_sk#40 IN dynamicpruning#5

Subquery:5 Hosting operator id = 51 Hosting Expression = ws_sold_date_sk#53 IN dynamicpruning#5

Subquery:6 Hosting operator id = 64 Hosting Expression = wr_returned_date_sk#62 IN dynamicpruning#5


