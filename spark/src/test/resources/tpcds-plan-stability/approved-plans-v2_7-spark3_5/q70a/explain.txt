== Physical Plan ==
TakeOrderedAndProject (58)
+- * Project (57)
   +- Window (56)
      +- * Sort (55)
         +- Exchange (54)
            +- * HashAggregate (53)
               +- Exchange (52)
                  +- * HashAggregate (51)
                     +- Union (50)
                        :- * HashAggregate (39)
                        :  +- Exchange (38)
                        :     +- * HashAggregate (37)
                        :        +- * Project (36)
                        :           +- * BroadcastHashJoin Inner BuildRight (35)
                        :              :- * ColumnarToRow (9)
                        :              :  +- CometProject (8)
                        :              :     +- CometBroadcastHashJoin (7)
                        :              :        :- CometFilter (2)
                        :              :        :  +- CometScan parquet spark_catalog.default.store_sales (1)
                        :              :        +- CometBroadcastExchange (6)
                        :              :           +- CometProject (5)
                        :              :              +- CometFilter (4)
                        :              :                 +- CometScan parquet spark_catalog.default.date_dim (3)
                        :              +- BroadcastExchange (34)
                        :                 +- * BroadcastHashJoin LeftSemi BuildRight (33)
                        :                    :- * ColumnarToRow (12)
                        :                    :  +- CometFilter (11)
                        :                    :     +- CometScan parquet spark_catalog.default.store (10)
                        :                    +- BroadcastExchange (32)
                        :                       +- * Project (31)
                        :                          +- * Filter (30)
                        :                             +- Window (29)
                        :                                +- WindowGroupLimit (28)
                        :                                   +- * Sort (27)
                        :                                      +- * HashAggregate (26)
                        :                                         +- Exchange (25)
                        :                                            +- * ColumnarToRow (24)
                        :                                               +- CometHashAggregate (23)
                        :                                                  +- CometProject (22)
                        :                                                     +- CometBroadcastHashJoin (21)
                        :                                                        :- CometProject (19)
                        :                                                        :  +- CometBroadcastHashJoin (18)
                        :                                                        :     :- CometFilter (14)
                        :                                                        :     :  +- CometScan parquet spark_catalog.default.store_sales (13)
                        :                                                        :     +- CometBroadcastExchange (17)
                        :                                                        :        +- CometFilter (16)
                        :                                                        :           +- CometScan parquet spark_catalog.default.store (15)
                        :                                                        +- ReusedExchange (20)
                        :- * HashAggregate (44)
                        :  +- Exchange (43)
                        :     +- * HashAggregate (42)
                        :        +- * HashAggregate (41)
                        :           +- ReusedExchange (40)
                        +- * HashAggregate (49)
                           +- Exchange (48)
                              +- * HashAggregate (47)
                                 +- * HashAggregate (46)
                                    +- ReusedExchange (45)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(4) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(5) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: [d_date_sk#5]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#5]
Arguments: [ss_sold_date_sk#3], [d_date_sk#5], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#5]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) ColumnarToRow [codegen id : 5]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#7, s_county#8, s_state#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_county:string,s_state:string>

(11) CometFilter
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Condition : isnotnull(s_store_sk#7)

(12) ColumnarToRow [codegen id : 4]
Input [3]: [s_store_sk#7, s_county#8, s_state#9]

(13) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#12), dynamicpruningexpression(ss_sold_date_sk#12 IN dynamicpruning#13)]
PushedFilters: [IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_store_sk:int,ss_net_profit:decimal(7,2)>

(14) CometFilter
Input [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Condition : isnotnull(ss_store_sk#10)

(15) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#14, s_state#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#14, s_state#15]
Condition : isnotnull(s_store_sk#14)

(17) CometBroadcastExchange
Input [2]: [s_store_sk#14, s_state#15]
Arguments: [s_store_sk#14, s_state#15]

(18) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12]
Right output [2]: [s_store_sk#14, s_state#15]
Arguments: [ss_store_sk#10], [s_store_sk#14], Inner, BuildRight

(19) CometProject
Input [5]: [ss_store_sk#10, ss_net_profit#11, ss_sold_date_sk#12, s_store_sk#14, s_state#15]
Arguments: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15], [ss_net_profit#11, ss_sold_date_sk#12, s_state#15]

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#16]

(21) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15]
Right output [1]: [d_date_sk#16]
Arguments: [ss_sold_date_sk#12], [d_date_sk#16], Inner, BuildRight

(22) CometProject
Input [4]: [ss_net_profit#11, ss_sold_date_sk#12, s_state#15, d_date_sk#16]
Arguments: [ss_net_profit#11, s_state#15], [ss_net_profit#11, s_state#15]

(23) CometHashAggregate
Input [2]: [ss_net_profit#11, s_state#15]
Keys [1]: [s_state#15]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#11))]

(24) ColumnarToRow [codegen id : 1]
Input [2]: [s_state#15, sum#17]

(25) Exchange
Input [2]: [s_state#15, sum#17]
Arguments: hashpartitioning(s_state#15, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(26) HashAggregate [codegen id : 2]
Input [2]: [s_state#15, sum#17]
Keys [1]: [s_state#15]
Functions [1]: [sum(UnscaledValue(ss_net_profit#11))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#11))#18]
Results [3]: [s_state#15, MakeDecimal(sum(UnscaledValue(ss_net_profit#11))#18,17,2) AS _w0#19, s_state#15]

(27) Sort [codegen id : 2]
Input [3]: [s_state#15, _w0#19, s_state#15]
Arguments: [s_state#15 ASC NULLS FIRST, _w0#19 DESC NULLS LAST], false, 0

(28) WindowGroupLimit
Input [3]: [s_state#15, _w0#19, s_state#15]
Arguments: [s_state#15], [_w0#19 DESC NULLS LAST], rank(_w0#19), 5, Final

(29) Window
Input [3]: [s_state#15, _w0#19, s_state#15]
Arguments: [rank(_w0#19) windowspecdefinition(s_state#15, _w0#19 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#20], [s_state#15], [_w0#19 DESC NULLS LAST]

(30) Filter [codegen id : 3]
Input [4]: [s_state#15, _w0#19, s_state#15, ranking#20]
Condition : (ranking#20 <= 5)

(31) Project [codegen id : 3]
Output [1]: [s_state#15]
Input [4]: [s_state#15, _w0#19, s_state#15, ranking#20]

(32) BroadcastExchange
Input [1]: [s_state#15]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(33) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [s_state#9]
Right keys [1]: [s_state#15]
Join type: LeftSemi
Join condition: None

(34) BroadcastExchange
Input [3]: [s_store_sk#7, s_county#8, s_state#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#7]
Join type: Inner
Join condition: None

(36) Project [codegen id : 5]
Output [3]: [ss_net_profit#2, s_county#8, s_state#9]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#7, s_county#8, s_state#9]

(37) HashAggregate [codegen id : 5]
Input [3]: [ss_net_profit#2, s_county#8, s_state#9]
Keys [2]: [s_state#9, s_county#8]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#21]
Results [3]: [s_state#9, s_county#8, sum#22]

(38) Exchange
Input [3]: [s_state#9, s_county#8, sum#22]
Arguments: hashpartitioning(s_state#9, s_county#8, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(39) HashAggregate [codegen id : 6]
Input [3]: [s_state#9, s_county#8, sum#22]
Keys [2]: [s_state#9, s_county#8]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#23]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#23,17,2) as decimal(27,2)) AS total_sum#24, s_state#9, s_county#8, 0 AS g_state#25, 0 AS g_county#26, 0 AS lochierarchy#27]

(40) ReusedExchange [Reuses operator id: 38]
Output [3]: [s_state#28, s_county#29, sum#30]

(41) HashAggregate [codegen id : 12]
Input [3]: [s_state#28, s_county#29, sum#30]
Keys [2]: [s_state#28, s_county#29]
Functions [1]: [sum(UnscaledValue(ss_net_profit#31))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#31))#23]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#31))#23,17,2) AS total_sum#32, s_state#28]

(42) HashAggregate [codegen id : 12]
Input [2]: [total_sum#32, s_state#28]
Keys [1]: [s_state#28]
Functions [1]: [partial_sum(total_sum#32)]
Aggregate Attributes [2]: [sum#33, isEmpty#34]
Results [3]: [s_state#28, sum#35, isEmpty#36]

(43) Exchange
Input [3]: [s_state#28, sum#35, isEmpty#36]
Arguments: hashpartitioning(s_state#28, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(44) HashAggregate [codegen id : 13]
Input [3]: [s_state#28, sum#35, isEmpty#36]
Keys [1]: [s_state#28]
Functions [1]: [sum(total_sum#32)]
Aggregate Attributes [1]: [sum(total_sum#32)#37]
Results [6]: [sum(total_sum#32)#37 AS total_sum#38, s_state#28, null AS s_county#39, 0 AS g_state#40, 1 AS g_county#41, 1 AS lochierarchy#42]

(45) ReusedExchange [Reuses operator id: 38]
Output [3]: [s_state#43, s_county#44, sum#45]

(46) HashAggregate [codegen id : 19]
Input [3]: [s_state#43, s_county#44, sum#45]
Keys [2]: [s_state#43, s_county#44]
Functions [1]: [sum(UnscaledValue(ss_net_profit#46))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#46))#23]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#46))#23,17,2) AS total_sum#47]

(47) HashAggregate [codegen id : 19]
Input [1]: [total_sum#47]
Keys: []
Functions [1]: [partial_sum(total_sum#47)]
Aggregate Attributes [2]: [sum#48, isEmpty#49]
Results [2]: [sum#50, isEmpty#51]

(48) Exchange
Input [2]: [sum#50, isEmpty#51]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(49) HashAggregate [codegen id : 20]
Input [2]: [sum#50, isEmpty#51]
Keys: []
Functions [1]: [sum(total_sum#47)]
Aggregate Attributes [1]: [sum(total_sum#47)#52]
Results [6]: [sum(total_sum#47)#52 AS total_sum#53, null AS s_state#54, null AS s_county#55, 1 AS g_state#56, 1 AS g_county#57, 2 AS lochierarchy#58]

(50) Union

(51) HashAggregate [codegen id : 21]
Input [6]: [total_sum#24, s_state#9, s_county#8, g_state#25, g_county#26, lochierarchy#27]
Keys [6]: [total_sum#24, s_state#9, s_county#8, g_state#25, g_county#26, lochierarchy#27]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#24, s_state#9, s_county#8, g_state#25, g_county#26, lochierarchy#27]

(52) Exchange
Input [6]: [total_sum#24, s_state#9, s_county#8, g_state#25, g_county#26, lochierarchy#27]
Arguments: hashpartitioning(total_sum#24, s_state#9, s_county#8, g_state#25, g_county#26, lochierarchy#27, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(53) HashAggregate [codegen id : 22]
Input [6]: [total_sum#24, s_state#9, s_county#8, g_state#25, g_county#26, lochierarchy#27]
Keys [6]: [total_sum#24, s_state#9, s_county#8, g_state#25, g_county#26, lochierarchy#27]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#24, s_state#9, s_county#8, lochierarchy#27, CASE WHEN (g_county#26 = 0) THEN s_state#9 END AS _w0#59]

(54) Exchange
Input [5]: [total_sum#24, s_state#9, s_county#8, lochierarchy#27, _w0#59]
Arguments: hashpartitioning(lochierarchy#27, _w0#59, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(55) Sort [codegen id : 23]
Input [5]: [total_sum#24, s_state#9, s_county#8, lochierarchy#27, _w0#59]
Arguments: [lochierarchy#27 ASC NULLS FIRST, _w0#59 ASC NULLS FIRST, total_sum#24 DESC NULLS LAST], false, 0

(56) Window
Input [5]: [total_sum#24, s_state#9, s_county#8, lochierarchy#27, _w0#59]
Arguments: [rank(total_sum#24) windowspecdefinition(lochierarchy#27, _w0#59, total_sum#24 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#60], [lochierarchy#27, _w0#59], [total_sum#24 DESC NULLS LAST]

(57) Project [codegen id : 24]
Output [5]: [total_sum#24, s_state#9, s_county#8, lochierarchy#27, rank_within_parent#60]
Input [6]: [total_sum#24, s_state#9, s_county#8, lochierarchy#27, _w0#59, rank_within_parent#60]

(58) TakeOrderedAndProject
Input [5]: [total_sum#24, s_state#9, s_county#8, lochierarchy#27, rank_within_parent#60]
Arguments: 100, [lochierarchy#27 DESC NULLS LAST, CASE WHEN (lochierarchy#27 = 0) THEN s_state#9 END ASC NULLS FIRST, rank_within_parent#60 ASC NULLS FIRST], [total_sum#24, s_state#9, s_county#8, lochierarchy#27, rank_within_parent#60]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (63)
+- * ColumnarToRow (62)
   +- CometProject (61)
      +- CometFilter (60)
         +- CometScan parquet spark_catalog.default.date_dim (59)


(59) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#5, d_month_seq#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_month_seq), GreaterThanOrEqual(d_month_seq,1212), LessThanOrEqual(d_month_seq,1223), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_month_seq:int>

(60) CometFilter
Input [2]: [d_date_sk#5, d_month_seq#6]
Condition : (((isnotnull(d_month_seq#6) AND (d_month_seq#6 >= 1212)) AND (d_month_seq#6 <= 1223)) AND isnotnull(d_date_sk#5))

(61) CometProject
Input [2]: [d_date_sk#5, d_month_seq#6]
Arguments: [d_date_sk#5], [d_date_sk#5]

(62) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#5]

(63) BroadcastExchange
Input [1]: [d_date_sk#5]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]

Subquery:2 Hosting operator id = 13 Hosting Expression = ss_sold_date_sk#12 IN dynamicpruning#4


