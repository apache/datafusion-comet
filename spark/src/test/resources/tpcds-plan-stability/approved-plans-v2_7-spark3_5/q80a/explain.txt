== Physical Plan ==
* CometColumnarToRow (124)
+- CometTakeOrderedAndProject (123)
   +- CometHashAggregate (122)
      +- CometColumnarExchange (121)
         +- * HashAggregate (120)
            +- Union (119)
               :- * HashAggregate (104)
               :  +- * CometColumnarToRow (103)
               :     +- CometColumnarExchange (102)
               :        +- * HashAggregate (101)
               :           +- Union (100)
               :              :- * HashAggregate (39)
               :              :  +- * CometColumnarToRow (38)
               :              :     +- CometExchange (37)
               :              :        +- CometHashAggregate (36)
               :              :           +- CometProject (35)
               :              :              +- CometBroadcastHashJoin (34)
               :              :                 :- CometProject (29)
               :              :                 :  +- CometBroadcastHashJoin (28)
               :              :                 :     :- CometProject (23)
               :              :                 :     :  +- CometBroadcastHashJoin (22)
               :              :                 :     :     :- CometProject (17)
               :              :                 :     :     :  +- CometBroadcastHashJoin (16)
               :              :                 :     :     :     :- CometProject (11)
               :              :                 :     :     :     :  +- CometSortMergeJoin (10)
               :              :                 :     :     :     :     :- CometSort (4)
               :              :                 :     :     :     :     :  +- CometExchange (3)
               :              :                 :     :     :     :     :     +- CometFilter (2)
               :              :                 :     :     :     :     :        +- CometScan parquet spark_catalog.default.store_sales (1)
               :              :                 :     :     :     :     +- CometSort (9)
               :              :                 :     :     :     :        +- CometExchange (8)
               :              :                 :     :     :     :           +- CometProject (7)
               :              :                 :     :     :     :              +- CometFilter (6)
               :              :                 :     :     :     :                 +- CometScan parquet spark_catalog.default.store_returns (5)
               :              :                 :     :     :     +- CometBroadcastExchange (15)
               :              :                 :     :     :        +- CometProject (14)
               :              :                 :     :     :           +- CometFilter (13)
               :              :                 :     :     :              +- CometScan parquet spark_catalog.default.date_dim (12)
               :              :                 :     :     +- CometBroadcastExchange (21)
               :              :                 :     :        +- CometProject (20)
               :              :                 :     :           +- CometFilter (19)
               :              :                 :     :              +- CometScan parquet spark_catalog.default.store (18)
               :              :                 :     +- CometBroadcastExchange (27)
               :              :                 :        +- CometProject (26)
               :              :                 :           +- CometFilter (25)
               :              :                 :              +- CometScan parquet spark_catalog.default.item (24)
               :              :                 +- CometBroadcastExchange (33)
               :              :                    +- CometProject (32)
               :              :                       +- CometFilter (31)
               :              :                          +- CometScan parquet spark_catalog.default.promotion (30)
               :              :- * HashAggregate (69)
               :              :  +- * CometColumnarToRow (68)
               :              :     +- CometExchange (67)
               :              :        +- CometHashAggregate (66)
               :              :           +- CometProject (65)
               :              :              +- CometBroadcastHashJoin (64)
               :              :                 :- CometProject (62)
               :              :                 :  +- CometBroadcastHashJoin (61)
               :              :                 :     :- CometProject (59)
               :              :                 :     :  +- CometBroadcastHashJoin (58)
               :              :                 :     :     :- CometProject (53)
               :              :                 :     :     :  +- CometBroadcastHashJoin (52)
               :              :                 :     :     :     :- CometProject (50)
               :              :                 :     :     :     :  +- CometSortMergeJoin (49)
               :              :                 :     :     :     :     :- CometSort (43)
               :              :                 :     :     :     :     :  +- CometExchange (42)
               :              :                 :     :     :     :     :     +- CometFilter (41)
               :              :                 :     :     :     :     :        +- CometScan parquet spark_catalog.default.catalog_sales (40)
               :              :                 :     :     :     :     +- CometSort (48)
               :              :                 :     :     :     :        +- CometExchange (47)
               :              :                 :     :     :     :           +- CometProject (46)
               :              :                 :     :     :     :              +- CometFilter (45)
               :              :                 :     :     :     :                 +- CometScan parquet spark_catalog.default.catalog_returns (44)
               :              :                 :     :     :     +- ReusedExchange (51)
               :              :                 :     :     +- CometBroadcastExchange (57)
               :              :                 :     :        +- CometProject (56)
               :              :                 :     :           +- CometFilter (55)
               :              :                 :     :              +- CometScan parquet spark_catalog.default.catalog_page (54)
               :              :                 :     +- ReusedExchange (60)
               :              :                 +- ReusedExchange (63)
               :              +- * HashAggregate (99)
               :                 +- * CometColumnarToRow (98)
               :                    +- CometExchange (97)
               :                       +- CometHashAggregate (96)
               :                          +- CometProject (95)
               :                             +- CometBroadcastHashJoin (94)
               :                                :- CometProject (92)
               :                                :  +- CometBroadcastHashJoin (91)
               :                                :     :- CometProject (89)
               :                                :     :  +- CometBroadcastHashJoin (88)
               :                                :     :     :- CometProject (83)
               :                                :     :     :  +- CometBroadcastHashJoin (82)
               :                                :     :     :     :- CometProject (80)
               :                                :     :     :     :  +- CometSortMergeJoin (79)
               :                                :     :     :     :     :- CometSort (73)
               :                                :     :     :     :     :  +- CometExchange (72)
               :                                :     :     :     :     :     +- CometFilter (71)
               :                                :     :     :     :     :        +- CometScan parquet spark_catalog.default.web_sales (70)
               :                                :     :     :     :     +- CometSort (78)
               :                                :     :     :     :        +- CometExchange (77)
               :                                :     :     :     :           +- CometProject (76)
               :                                :     :     :     :              +- CometFilter (75)
               :                                :     :     :     :                 +- CometScan parquet spark_catalog.default.web_returns (74)
               :                                :     :     :     +- ReusedExchange (81)
               :                                :     :     +- CometBroadcastExchange (87)
               :                                :     :        +- CometProject (86)
               :                                :     :           +- CometFilter (85)
               :                                :     :              +- CometScan parquet spark_catalog.default.web_site (84)
               :                                :     +- ReusedExchange (90)
               :                                +- ReusedExchange (93)
               :- * HashAggregate (111)
               :  +- * CometColumnarToRow (110)
               :     +- CometColumnarExchange (109)
               :        +- * HashAggregate (108)
               :           +- * HashAggregate (107)
               :              +- * CometColumnarToRow (106)
               :                 +- ReusedExchange (105)
               +- * HashAggregate (118)
                  +- * CometColumnarToRow (117)
                     +- CometColumnarExchange (116)
                        +- * HashAggregate (115)
                           +- * HashAggregate (114)
                              +- * CometColumnarToRow (113)
                                 +- ReusedExchange (112)


(1) CometScan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7], [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST]

(5) CometScan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) CometFilter
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Condition : (isnotnull(sr_item_sk#9) AND isnotnull(sr_ticket_number#10))

(7) CometProject
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]

(8) CometExchange
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: hashpartitioning(sr_item_sk#9, sr_ticket_number#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#10 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#9, sr_ticket_number#10], LeftOuter

(11) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]

(12) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(14) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(16) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#7], [d_date_sk#14], Inner, BuildRight

(17) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]

(18) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_store_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(19) CometFilter
Input [2]: [s_store_sk#16, s_store_id#17]
Condition : isnotnull(s_store_sk#16)

(20) CometProject
Input [2]: [s_store_sk#16, s_store_id#17]
Arguments: [s_store_sk#16, s_store_id#18], [s_store_sk#16, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_store_id#17, 16, true, false, true) AS s_store_id#18]

(21) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_store_id#18]
Arguments: [s_store_sk#16, s_store_id#18]

(22) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]
Right output [2]: [s_store_sk#16, s_store_id#18]
Arguments: [ss_store_sk#2], [s_store_sk#16], Inner, BuildRight

(23) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_sk#16, s_store_id#18]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]

(24) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#19, i_current_price#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(25) CometFilter
Input [2]: [i_item_sk#19, i_current_price#20]
Condition : ((isnotnull(i_current_price#20) AND (i_current_price#20 > 50.00)) AND isnotnull(i_item_sk#19))

(26) CometProject
Input [2]: [i_item_sk#19, i_current_price#20]
Arguments: [i_item_sk#19], [i_item_sk#19]

(27) CometBroadcastExchange
Input [1]: [i_item_sk#19]
Arguments: [i_item_sk#19]

(28) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]
Right output [1]: [i_item_sk#19]
Arguments: [ss_item_sk#1], [i_item_sk#19], Inner, BuildRight

(29) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18, i_item_sk#19]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]

(30) CometScan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#21, p_channel_tv#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(31) CometFilter
Input [2]: [p_promo_sk#21, p_channel_tv#22]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, p_channel_tv#22, 1, true, false, true) = N) AND isnotnull(p_promo_sk#21))

(32) CometProject
Input [2]: [p_promo_sk#21, p_channel_tv#22]
Arguments: [p_promo_sk#21], [p_promo_sk#21]

(33) CometBroadcastExchange
Input [1]: [p_promo_sk#21]
Arguments: [p_promo_sk#21]

(34) CometBroadcastHashJoin
Left output [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]
Right output [1]: [p_promo_sk#21]
Arguments: [ss_promo_sk#3], [p_promo_sk#21], Inner, BuildRight

(35) CometProject
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18, p_promo_sk#21]
Arguments: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18], [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]

(36) CometHashAggregate
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#18]
Keys [1]: [s_store_id#18]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]

(37) CometExchange
Input [6]: [s_store_id#18, sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]
Arguments: hashpartitioning(s_store_id#18, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(38) CometColumnarToRow [codegen id : 1]
Input [6]: [s_store_id#18, sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]

(39) HashAggregate [codegen id : 1]
Input [6]: [s_store_id#18, sum#23, sum#24, isEmpty#25, sum#26, isEmpty#27]
Keys [1]: [s_store_id#18]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#28, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#29, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#30]
Results [5]: [store channel AS channel#31, concat(store, s_store_id#18) AS id#32, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#28,17,2) AS sales#33, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#29 AS returns#34, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#30 AS profit#35]

(40) CometScan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_order_number#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#42), dynamicpruningexpression(cs_sold_date_sk#42 IN dynamicpruning#43)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(41) CometFilter
Input [7]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_order_number#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Condition : ((isnotnull(cs_catalog_page_sk#36) AND isnotnull(cs_item_sk#37)) AND isnotnull(cs_promo_sk#38))

(42) CometExchange
Input [7]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_order_number#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Arguments: hashpartitioning(cs_item_sk#37, cs_order_number#39, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(43) CometSort
Input [7]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_order_number#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Arguments: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_order_number#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42], [cs_item_sk#37 ASC NULLS FIRST, cs_order_number#39 ASC NULLS FIRST]

(44) CometScan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47, cr_returned_date_sk#48]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(45) CometFilter
Input [5]: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47, cr_returned_date_sk#48]
Condition : (isnotnull(cr_item_sk#44) AND isnotnull(cr_order_number#45))

(46) CometProject
Input [5]: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47, cr_returned_date_sk#48]
Arguments: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47], [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47]

(47) CometExchange
Input [4]: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47]
Arguments: hashpartitioning(cr_item_sk#44, cr_order_number#45, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(48) CometSort
Input [4]: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47]
Arguments: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47], [cr_item_sk#44 ASC NULLS FIRST, cr_order_number#45 ASC NULLS FIRST]

(49) CometSortMergeJoin
Left output [7]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_order_number#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42]
Right output [4]: [cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47]
Arguments: [cs_item_sk#37, cs_order_number#39], [cr_item_sk#44, cr_order_number#45], LeftOuter

(50) CometProject
Input [11]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_order_number#39, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42, cr_item_sk#44, cr_order_number#45, cr_return_amount#46, cr_net_loss#47]
Arguments: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42, cr_return_amount#46, cr_net_loss#47], [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42, cr_return_amount#46, cr_net_loss#47]

(51) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#49]

(52) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42, cr_return_amount#46, cr_net_loss#47]
Right output [1]: [d_date_sk#49]
Arguments: [cs_sold_date_sk#42], [d_date_sk#49], Inner, BuildRight

(53) CometProject
Input [9]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cs_sold_date_sk#42, cr_return_amount#46, cr_net_loss#47, d_date_sk#49]
Arguments: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47], [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47]

(54) CometScan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#50, cp_catalog_page_id#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(55) CometFilter
Input [2]: [cp_catalog_page_sk#50, cp_catalog_page_id#51]
Condition : isnotnull(cp_catalog_page_sk#50)

(56) CometProject
Input [2]: [cp_catalog_page_sk#50, cp_catalog_page_id#51]
Arguments: [cp_catalog_page_sk#50, cp_catalog_page_id#52], [cp_catalog_page_sk#50, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cp_catalog_page_id#51, 16, true, false, true) AS cp_catalog_page_id#52]

(57) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#50, cp_catalog_page_id#52]
Arguments: [cp_catalog_page_sk#50, cp_catalog_page_id#52]

(58) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47]
Right output [2]: [cp_catalog_page_sk#50, cp_catalog_page_id#52]
Arguments: [cs_catalog_page_sk#36], [cp_catalog_page_sk#50], Inner, BuildRight

(59) CometProject
Input [9]: [cs_catalog_page_sk#36, cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_sk#50, cp_catalog_page_id#52]
Arguments: [cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52], [cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52]

(60) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#53]

(61) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52]
Right output [1]: [i_item_sk#53]
Arguments: [cs_item_sk#37], [i_item_sk#53], Inner, BuildRight

(62) CometProject
Input [8]: [cs_item_sk#37, cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52, i_item_sk#53]
Arguments: [cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52], [cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52]

(63) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#54]

(64) CometBroadcastHashJoin
Left output [6]: [cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52]
Right output [1]: [p_promo_sk#54]
Arguments: [cs_promo_sk#38], [p_promo_sk#54], Inner, BuildRight

(65) CometProject
Input [7]: [cs_promo_sk#38, cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52, p_promo_sk#54]
Arguments: [cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52], [cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52]

(66) CometHashAggregate
Input [5]: [cs_ext_sales_price#40, cs_net_profit#41, cr_return_amount#46, cr_net_loss#47, cp_catalog_page_id#52]
Keys [1]: [cp_catalog_page_id#52]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#40)), partial_sum(coalesce(cast(cr_return_amount#46 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#41 - coalesce(cast(cr_net_loss#47 as decimal(12,2)), 0.00)))]

(67) CometExchange
Input [6]: [cp_catalog_page_id#52, sum#55, sum#56, isEmpty#57, sum#58, isEmpty#59]
Arguments: hashpartitioning(cp_catalog_page_id#52, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(68) CometColumnarToRow [codegen id : 2]
Input [6]: [cp_catalog_page_id#52, sum#55, sum#56, isEmpty#57, sum#58, isEmpty#59]

(69) HashAggregate [codegen id : 2]
Input [6]: [cp_catalog_page_id#52, sum#55, sum#56, isEmpty#57, sum#58, isEmpty#59]
Keys [1]: [cp_catalog_page_id#52]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#40)), sum(coalesce(cast(cr_return_amount#46 as decimal(12,2)), 0.00)), sum((cs_net_profit#41 - coalesce(cast(cr_net_loss#47 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#40))#60, sum(coalesce(cast(cr_return_amount#46 as decimal(12,2)), 0.00))#61, sum((cs_net_profit#41 - coalesce(cast(cr_net_loss#47 as decimal(12,2)), 0.00)))#62]
Results [5]: [catalog channel AS channel#63, concat(catalog_page, cp_catalog_page_id#52) AS id#64, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#40))#60,17,2) AS sales#65, sum(coalesce(cast(cr_return_amount#46 as decimal(12,2)), 0.00))#61 AS returns#66, sum((cs_net_profit#41 - coalesce(cast(cr_net_loss#47 as decimal(12,2)), 0.00)))#62 AS profit#67]

(70) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_order_number#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#74), dynamicpruningexpression(ws_sold_date_sk#74 IN dynamicpruning#75)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(71) CometFilter
Input [7]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_order_number#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]
Condition : ((isnotnull(ws_web_site_sk#69) AND isnotnull(ws_item_sk#68)) AND isnotnull(ws_promo_sk#70))

(72) CometExchange
Input [7]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_order_number#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]
Arguments: hashpartitioning(ws_item_sk#68, ws_order_number#71, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=7]

(73) CometSort
Input [7]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_order_number#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]
Arguments: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_order_number#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74], [ws_item_sk#68 ASC NULLS FIRST, ws_order_number#71 ASC NULLS FIRST]

(74) CometScan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79, wr_returned_date_sk#80]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(75) CometFilter
Input [5]: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79, wr_returned_date_sk#80]
Condition : (isnotnull(wr_item_sk#76) AND isnotnull(wr_order_number#77))

(76) CometProject
Input [5]: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79, wr_returned_date_sk#80]
Arguments: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79], [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79]

(77) CometExchange
Input [4]: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79]
Arguments: hashpartitioning(wr_item_sk#76, wr_order_number#77, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(78) CometSort
Input [4]: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79]
Arguments: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79], [wr_item_sk#76 ASC NULLS FIRST, wr_order_number#77 ASC NULLS FIRST]

(79) CometSortMergeJoin
Left output [7]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_order_number#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74]
Right output [4]: [wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79]
Arguments: [ws_item_sk#68, ws_order_number#71], [wr_item_sk#76, wr_order_number#77], LeftOuter

(80) CometProject
Input [11]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_order_number#71, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74, wr_item_sk#76, wr_order_number#77, wr_return_amt#78, wr_net_loss#79]
Arguments: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74, wr_return_amt#78, wr_net_loss#79], [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74, wr_return_amt#78, wr_net_loss#79]

(81) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#81]

(82) CometBroadcastHashJoin
Left output [8]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74, wr_return_amt#78, wr_net_loss#79]
Right output [1]: [d_date_sk#81]
Arguments: [ws_sold_date_sk#74], [d_date_sk#81], Inner, BuildRight

(83) CometProject
Input [9]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, ws_sold_date_sk#74, wr_return_amt#78, wr_net_loss#79, d_date_sk#81]
Arguments: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79], [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79]

(84) CometScan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#82, web_site_id#83]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(85) CometFilter
Input [2]: [web_site_sk#82, web_site_id#83]
Condition : isnotnull(web_site_sk#82)

(86) CometProject
Input [2]: [web_site_sk#82, web_site_id#83]
Arguments: [web_site_sk#82, web_site_id#84], [web_site_sk#82, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, web_site_id#83, 16, true, false, true) AS web_site_id#84]

(87) CometBroadcastExchange
Input [2]: [web_site_sk#82, web_site_id#84]
Arguments: [web_site_sk#82, web_site_id#84]

(88) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79]
Right output [2]: [web_site_sk#82, web_site_id#84]
Arguments: [ws_web_site_sk#69], [web_site_sk#82], Inner, BuildRight

(89) CometProject
Input [9]: [ws_item_sk#68, ws_web_site_sk#69, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_sk#82, web_site_id#84]
Arguments: [ws_item_sk#68, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84], [ws_item_sk#68, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84]

(90) ReusedExchange [Reuses operator id: 27]
Output [1]: [i_item_sk#85]

(91) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#68, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84]
Right output [1]: [i_item_sk#85]
Arguments: [ws_item_sk#68], [i_item_sk#85], Inner, BuildRight

(92) CometProject
Input [8]: [ws_item_sk#68, ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84, i_item_sk#85]
Arguments: [ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84], [ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84]

(93) ReusedExchange [Reuses operator id: 33]
Output [1]: [p_promo_sk#86]

(94) CometBroadcastHashJoin
Left output [6]: [ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84]
Right output [1]: [p_promo_sk#86]
Arguments: [ws_promo_sk#70], [p_promo_sk#86], Inner, BuildRight

(95) CometProject
Input [7]: [ws_promo_sk#70, ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84, p_promo_sk#86]
Arguments: [ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84], [ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84]

(96) CometHashAggregate
Input [5]: [ws_ext_sales_price#72, ws_net_profit#73, wr_return_amt#78, wr_net_loss#79, web_site_id#84]
Keys [1]: [web_site_id#84]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#72)), partial_sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#73 - coalesce(cast(wr_net_loss#79 as decimal(12,2)), 0.00)))]

(97) CometExchange
Input [6]: [web_site_id#84, sum#87, sum#88, isEmpty#89, sum#90, isEmpty#91]
Arguments: hashpartitioning(web_site_id#84, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(98) CometColumnarToRow [codegen id : 3]
Input [6]: [web_site_id#84, sum#87, sum#88, isEmpty#89, sum#90, isEmpty#91]

(99) HashAggregate [codegen id : 3]
Input [6]: [web_site_id#84, sum#87, sum#88, isEmpty#89, sum#90, isEmpty#91]
Keys [1]: [web_site_id#84]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#72)), sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00)), sum((ws_net_profit#73 - coalesce(cast(wr_net_loss#79 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#72))#92, sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00))#93, sum((ws_net_profit#73 - coalesce(cast(wr_net_loss#79 as decimal(12,2)), 0.00)))#94]
Results [5]: [web channel AS channel#95, concat(web_site, web_site_id#84) AS id#96, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#72))#92,17,2) AS sales#97, sum(coalesce(cast(wr_return_amt#78 as decimal(12,2)), 0.00))#93 AS returns#98, sum((ws_net_profit#73 - coalesce(cast(wr_net_loss#79 as decimal(12,2)), 0.00)))#94 AS profit#99]

(100) Union

(101) HashAggregate [codegen id : 4]
Input [5]: [channel#31, id#32, sales#33, returns#34, profit#35]
Keys [2]: [channel#31, id#32]
Functions [3]: [partial_sum(sales#33), partial_sum(returns#34), partial_sum(profit#35)]
Aggregate Attributes [6]: [sum#100, isEmpty#101, sum#102, isEmpty#103, sum#104, isEmpty#105]
Results [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]

(102) CometColumnarExchange
Input [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]
Arguments: hashpartitioning(channel#31, id#32, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(103) CometColumnarToRow [codegen id : 5]
Input [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]

(104) HashAggregate [codegen id : 5]
Input [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]
Keys [2]: [channel#31, id#32]
Functions [3]: [sum(sales#33), sum(returns#34), sum(profit#35)]
Aggregate Attributes [3]: [sum(sales#33)#112, sum(returns#34)#113, sum(profit#35)#114]
Results [5]: [channel#31, id#32, cast(sum(sales#33)#112 as decimal(37,2)) AS sales#115, cast(sum(returns#34)#113 as decimal(38,2)) AS returns#116, cast(sum(profit#35)#114 as decimal(38,2)) AS profit#117]

(105) ReusedExchange [Reuses operator id: 102]
Output [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]

(106) CometColumnarToRow [codegen id : 10]
Input [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]

(107) HashAggregate [codegen id : 10]
Input [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]
Keys [2]: [channel#31, id#32]
Functions [3]: [sum(sales#33), sum(returns#34), sum(profit#35)]
Aggregate Attributes [3]: [sum(sales#33)#112, sum(returns#34)#113, sum(profit#35)#114]
Results [4]: [channel#31, sum(sales#33)#112 AS sales#118, sum(returns#34)#113 AS returns#119, sum(profit#35)#114 AS profit#120]

(108) HashAggregate [codegen id : 10]
Input [4]: [channel#31, sales#118, returns#119, profit#120]
Keys [1]: [channel#31]
Functions [3]: [partial_sum(sales#118), partial_sum(returns#119), partial_sum(profit#120)]
Aggregate Attributes [6]: [sum#121, isEmpty#122, sum#123, isEmpty#124, sum#125, isEmpty#126]
Results [7]: [channel#31, sum#127, isEmpty#128, sum#129, isEmpty#130, sum#131, isEmpty#132]

(109) CometColumnarExchange
Input [7]: [channel#31, sum#127, isEmpty#128, sum#129, isEmpty#130, sum#131, isEmpty#132]
Arguments: hashpartitioning(channel#31, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(110) CometColumnarToRow [codegen id : 11]
Input [7]: [channel#31, sum#127, isEmpty#128, sum#129, isEmpty#130, sum#131, isEmpty#132]

(111) HashAggregate [codegen id : 11]
Input [7]: [channel#31, sum#127, isEmpty#128, sum#129, isEmpty#130, sum#131, isEmpty#132]
Keys [1]: [channel#31]
Functions [3]: [sum(sales#118), sum(returns#119), sum(profit#120)]
Aggregate Attributes [3]: [sum(sales#118)#133, sum(returns#119)#134, sum(profit#120)#135]
Results [5]: [channel#31, null AS id#136, sum(sales#118)#133 AS sales#137, sum(returns#119)#134 AS returns#138, sum(profit#120)#135 AS profit#139]

(112) ReusedExchange [Reuses operator id: 102]
Output [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]

(113) CometColumnarToRow [codegen id : 16]
Input [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]

(114) HashAggregate [codegen id : 16]
Input [8]: [channel#31, id#32, sum#106, isEmpty#107, sum#108, isEmpty#109, sum#110, isEmpty#111]
Keys [2]: [channel#31, id#32]
Functions [3]: [sum(sales#33), sum(returns#34), sum(profit#35)]
Aggregate Attributes [3]: [sum(sales#33)#112, sum(returns#34)#113, sum(profit#35)#114]
Results [3]: [sum(sales#33)#112 AS sales#140, sum(returns#34)#113 AS returns#141, sum(profit#35)#114 AS profit#142]

(115) HashAggregate [codegen id : 16]
Input [3]: [sales#140, returns#141, profit#142]
Keys: []
Functions [3]: [partial_sum(sales#140), partial_sum(returns#141), partial_sum(profit#142)]
Aggregate Attributes [6]: [sum#143, isEmpty#144, sum#145, isEmpty#146, sum#147, isEmpty#148]
Results [6]: [sum#149, isEmpty#150, sum#151, isEmpty#152, sum#153, isEmpty#154]

(116) CometColumnarExchange
Input [6]: [sum#149, isEmpty#150, sum#151, isEmpty#152, sum#153, isEmpty#154]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(117) CometColumnarToRow [codegen id : 17]
Input [6]: [sum#149, isEmpty#150, sum#151, isEmpty#152, sum#153, isEmpty#154]

(118) HashAggregate [codegen id : 17]
Input [6]: [sum#149, isEmpty#150, sum#151, isEmpty#152, sum#153, isEmpty#154]
Keys: []
Functions [3]: [sum(sales#140), sum(returns#141), sum(profit#142)]
Aggregate Attributes [3]: [sum(sales#140)#155, sum(returns#141)#156, sum(profit#142)#157]
Results [5]: [null AS channel#158, null AS id#159, sum(sales#140)#155 AS sales#160, sum(returns#141)#156 AS returns#161, sum(profit#142)#157 AS profit#162]

(119) Union

(120) HashAggregate [codegen id : 18]
Input [5]: [channel#31, id#32, sales#115, returns#116, profit#117]
Keys [5]: [channel#31, id#32, sales#115, returns#116, profit#117]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#31, id#32, sales#115, returns#116, profit#117]

(121) CometColumnarExchange
Input [5]: [channel#31, id#32, sales#115, returns#116, profit#117]
Arguments: hashpartitioning(channel#31, id#32, sales#115, returns#116, profit#117, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(122) CometHashAggregate
Input [5]: [channel#31, id#32, sales#115, returns#116, profit#117]
Keys [5]: [channel#31, id#32, sales#115, returns#116, profit#117]
Functions: []

(123) CometTakeOrderedAndProject
Input [5]: [channel#31, id#32, sales#115, returns#116, profit#117]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#31 ASC NULLS FIRST,id#32 ASC NULLS FIRST], output=[channel#31,id#32,sales#115,returns#116,profit#117]), [channel#31, id#32, sales#115, returns#116, profit#117], 100, [channel#31 ASC NULLS FIRST, id#32 ASC NULLS FIRST], [channel#31, id#32, sales#115, returns#116, profit#117]

(124) CometColumnarToRow [codegen id : 19]
Input [5]: [channel#31, id#32, sales#115, returns#116, profit#117]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (129)
+- * CometColumnarToRow (128)
   +- CometProject (127)
      +- CometFilter (126)
         +- CometScan parquet spark_catalog.default.date_dim (125)


(125) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(126) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(127) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(128) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(129) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 40 Hosting Expression = cs_sold_date_sk#42 IN dynamicpruning#8

Subquery:3 Hosting operator id = 70 Hosting Expression = ws_sold_date_sk#74 IN dynamicpruning#8


