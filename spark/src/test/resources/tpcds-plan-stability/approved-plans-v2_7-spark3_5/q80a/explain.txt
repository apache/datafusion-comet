== Physical Plan ==
* CometColumnarToRow (125)
+- CometTakeOrderedAndProject (124)
   +- CometHashAggregate (123)
      +- CometColumnarExchange (122)
         +- * HashAggregate (121)
            +- Union (120)
               :- * HashAggregate (105)
               :  +- * CometColumnarToRow (104)
               :     +- CometColumnarExchange (103)
               :        +- * HashAggregate (102)
               :           +- Union (101)
               :              :- * HashAggregate (40)
               :              :  +- * CometColumnarToRow (39)
               :              :     +- CometColumnarExchange (38)
               :              :        +- * HashAggregate (37)
               :              :           +- * Project (36)
               :              :              +- * BroadcastHashJoin Inner BuildRight (35)
               :              :                 :- * CometColumnarToRow (29)
               :              :                 :  +- CometProject (28)
               :              :                 :     +- CometBroadcastHashJoin (27)
               :              :                 :        :- CometProject (22)
               :              :                 :        :  +- CometBroadcastHashJoin (21)
               :              :                 :        :     :- CometProject (17)
               :              :                 :        :     :  +- CometBroadcastHashJoin (16)
               :              :                 :        :     :     :- CometProject (11)
               :              :                 :        :     :     :  +- CometSortMergeJoin (10)
               :              :                 :        :     :     :     :- CometSort (4)
               :              :                 :        :     :     :     :  +- CometExchange (3)
               :              :                 :        :     :     :     :     +- CometFilter (2)
               :              :                 :        :     :     :     :        +- CometScan parquet spark_catalog.default.store_sales (1)
               :              :                 :        :     :     :     +- CometSort (9)
               :              :                 :        :     :     :        +- CometExchange (8)
               :              :                 :        :     :     :           +- CometProject (7)
               :              :                 :        :     :     :              +- CometFilter (6)
               :              :                 :        :     :     :                 +- CometScan parquet spark_catalog.default.store_returns (5)
               :              :                 :        :     :     +- CometBroadcastExchange (15)
               :              :                 :        :     :        +- CometProject (14)
               :              :                 :        :     :           +- CometFilter (13)
               :              :                 :        :     :              +- CometScan parquet spark_catalog.default.date_dim (12)
               :              :                 :        :     +- CometBroadcastExchange (20)
               :              :                 :        :        +- CometFilter (19)
               :              :                 :        :           +- CometScan parquet spark_catalog.default.store (18)
               :              :                 :        +- CometBroadcastExchange (26)
               :              :                 :           +- CometProject (25)
               :              :                 :              +- CometFilter (24)
               :              :                 :                 +- CometScan parquet spark_catalog.default.item (23)
               :              :                 +- BroadcastExchange (34)
               :              :                    +- * Project (33)
               :              :                       +- * Filter (32)
               :              :                          +- * CometColumnarToRow (31)
               :              :                             +- CometScan parquet spark_catalog.default.promotion (30)
               :              :- * HashAggregate (70)
               :              :  +- * CometColumnarToRow (69)
               :              :     +- CometColumnarExchange (68)
               :              :        +- * HashAggregate (67)
               :              :           +- * Project (66)
               :              :              +- * BroadcastHashJoin Inner BuildRight (65)
               :              :                 :- * CometColumnarToRow (63)
               :              :                 :  +- CometProject (62)
               :              :                 :     +- CometBroadcastHashJoin (61)
               :              :                 :        :- CometProject (59)
               :              :                 :        :  +- CometBroadcastHashJoin (58)
               :              :                 :        :     :- CometProject (54)
               :              :                 :        :     :  +- CometBroadcastHashJoin (53)
               :              :                 :        :     :     :- CometProject (51)
               :              :                 :        :     :     :  +- CometSortMergeJoin (50)
               :              :                 :        :     :     :     :- CometSort (44)
               :              :                 :        :     :     :     :  +- CometExchange (43)
               :              :                 :        :     :     :     :     +- CometFilter (42)
               :              :                 :        :     :     :     :        +- CometScan parquet spark_catalog.default.catalog_sales (41)
               :              :                 :        :     :     :     +- CometSort (49)
               :              :                 :        :     :     :        +- CometExchange (48)
               :              :                 :        :     :     :           +- CometProject (47)
               :              :                 :        :     :     :              +- CometFilter (46)
               :              :                 :        :     :     :                 +- CometScan parquet spark_catalog.default.catalog_returns (45)
               :              :                 :        :     :     +- ReusedExchange (52)
               :              :                 :        :     +- CometBroadcastExchange (57)
               :              :                 :        :        +- CometFilter (56)
               :              :                 :        :           +- CometScan parquet spark_catalog.default.catalog_page (55)
               :              :                 :        +- ReusedExchange (60)
               :              :                 +- ReusedExchange (64)
               :              +- * HashAggregate (100)
               :                 +- * CometColumnarToRow (99)
               :                    +- CometColumnarExchange (98)
               :                       +- * HashAggregate (97)
               :                          +- * Project (96)
               :                             +- * BroadcastHashJoin Inner BuildRight (95)
               :                                :- * CometColumnarToRow (93)
               :                                :  +- CometProject (92)
               :                                :     +- CometBroadcastHashJoin (91)
               :                                :        :- CometProject (89)
               :                                :        :  +- CometBroadcastHashJoin (88)
               :                                :        :     :- CometProject (84)
               :                                :        :     :  +- CometBroadcastHashJoin (83)
               :                                :        :     :     :- CometProject (81)
               :                                :        :     :     :  +- CometSortMergeJoin (80)
               :                                :        :     :     :     :- CometSort (74)
               :                                :        :     :     :     :  +- CometExchange (73)
               :                                :        :     :     :     :     +- CometFilter (72)
               :                                :        :     :     :     :        +- CometScan parquet spark_catalog.default.web_sales (71)
               :                                :        :     :     :     +- CometSort (79)
               :                                :        :     :     :        +- CometExchange (78)
               :                                :        :     :     :           +- CometProject (77)
               :                                :        :     :     :              +- CometFilter (76)
               :                                :        :     :     :                 +- CometScan parquet spark_catalog.default.web_returns (75)
               :                                :        :     :     +- ReusedExchange (82)
               :                                :        :     +- CometBroadcastExchange (87)
               :                                :        :        +- CometFilter (86)
               :                                :        :           +- CometScan parquet spark_catalog.default.web_site (85)
               :                                :        +- ReusedExchange (90)
               :                                +- ReusedExchange (94)
               :- * HashAggregate (112)
               :  +- * CometColumnarToRow (111)
               :     +- CometColumnarExchange (110)
               :        +- * HashAggregate (109)
               :           +- * HashAggregate (108)
               :              +- * CometColumnarToRow (107)
               :                 +- ReusedExchange (106)
               +- * HashAggregate (119)
                  +- * CometColumnarToRow (118)
                     +- CometColumnarExchange (117)
                        +- * HashAggregate (116)
                           +- * HashAggregate (115)
                              +- * CometColumnarToRow (114)
                                 +- ReusedExchange (113)


(1) CometScan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3))

(3) CometExchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(4) CometSort
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7], [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST]

(5) CometScan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(6) CometFilter
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Condition : (isnotnull(sr_item_sk#9) AND isnotnull(sr_ticket_number#10))

(7) CometProject
Input [5]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12, sr_returned_date_sk#13]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]

(8) CometExchange
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: hashpartitioning(sr_item_sk#9, sr_ticket_number#10, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(9) CometSort
Input [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12], [sr_item_sk#9 ASC NULLS FIRST, sr_ticket_number#10 ASC NULLS FIRST]

(10) CometSortMergeJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Right output [4]: [sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_ticket_number#4], [sr_item_sk#9, sr_ticket_number#10], LeftOuter

(11) CometProject
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#9, sr_ticket_number#10, sr_return_amt#11, sr_net_loss#12]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]

(12) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(13) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(14) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(15) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(16) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#7], [d_date_sk#14], Inner, BuildRight

(17) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#11, sr_net_loss#12, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12], [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]

(18) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_store_id#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(19) CometFilter
Input [2]: [s_store_sk#16, s_store_id#17]
Condition : isnotnull(s_store_sk#16)

(20) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_store_id#17]
Arguments: [s_store_sk#16, s_store_id#17]

(21) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12]
Right output [2]: [s_store_sk#16, s_store_id#17]
Arguments: [ss_store_sk#2], [s_store_sk#16], Inner, BuildRight

(22) CometProject
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_sk#16, s_store_id#17]
Arguments: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(23) CometScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_current_price#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(24) CometFilter
Input [2]: [i_item_sk#18, i_current_price#19]
Condition : ((isnotnull(i_current_price#19) AND (i_current_price#19 > 50.00)) AND isnotnull(i_item_sk#18))

(25) CometProject
Input [2]: [i_item_sk#18, i_current_price#19]
Arguments: [i_item_sk#18], [i_item_sk#18]

(26) CometBroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: [i_item_sk#18]

(27) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Right output [1]: [i_item_sk#18]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(28) CometProject
Input [8]: [ss_item_sk#1, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17, i_item_sk#18]
Arguments: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17], [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(29) CometColumnarToRow [codegen id : 2]
Input [6]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]

(30) CometScan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#20, p_channel_tv#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(31) CometColumnarToRow [codegen id : 1]
Input [2]: [p_promo_sk#20, p_channel_tv#21]

(32) Filter [codegen id : 1]
Input [2]: [p_promo_sk#20, p_channel_tv#21]
Condition : ((isnotnull(p_channel_tv#21) AND (rpad(p_channel_tv#21, 1,  ) = N)) AND isnotnull(p_promo_sk#20))

(33) Project [codegen id : 1]
Output [1]: [p_promo_sk#20]
Input [2]: [p_promo_sk#20, p_channel_tv#21]

(34) BroadcastExchange
Input [1]: [p_promo_sk#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#20]
Join type: Inner
Join condition: None

(36) Project [codegen id : 2]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Input [7]: [ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17, p_promo_sk#20]

(37) HashAggregate [codegen id : 2]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#11, sr_net_loss#12, s_store_id#17]
Keys [1]: [s_store_id#17]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#22, sum#23, isEmpty#24, sum#25, isEmpty#26]
Results [6]: [s_store_id#17, sum#27, sum#28, isEmpty#29, sum#30, isEmpty#31]

(38) CometColumnarExchange
Input [6]: [s_store_id#17, sum#27, sum#28, isEmpty#29, sum#30, isEmpty#31]
Arguments: hashpartitioning(s_store_id#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(39) CometColumnarToRow [codegen id : 3]
Input [6]: [s_store_id#17, sum#27, sum#28, isEmpty#29, sum#30, isEmpty#31]

(40) HashAggregate [codegen id : 3]
Input [6]: [s_store_id#17, sum#27, sum#28, isEmpty#29, sum#30, isEmpty#31]
Keys [1]: [s_store_id#17]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#32, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#33, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#34]
Results [5]: [store channel AS channel#35, concat(store, s_store_id#17) AS id#36, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#32,17,2) AS sales#37, sum(coalesce(cast(sr_return_amt#11 as decimal(12,2)), 0.00))#33 AS returns#38, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#12 as decimal(12,2)), 0.00)))#34 AS profit#39]

(41) CometScan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_order_number#43, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#46), dynamicpruningexpression(cs_sold_date_sk#46 IN dynamicpruning#47)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(42) CometFilter
Input [7]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_order_number#43, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46]
Condition : ((isnotnull(cs_catalog_page_sk#40) AND isnotnull(cs_item_sk#41)) AND isnotnull(cs_promo_sk#42))

(43) CometExchange
Input [7]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_order_number#43, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46]
Arguments: hashpartitioning(cs_item_sk#41, cs_order_number#43, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(44) CometSort
Input [7]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_order_number#43, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46]
Arguments: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_order_number#43, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46], [cs_item_sk#41 ASC NULLS FIRST, cs_order_number#43 ASC NULLS FIRST]

(45) CometScan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(46) CometFilter
Input [5]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Condition : (isnotnull(cr_item_sk#48) AND isnotnull(cr_order_number#49))

(47) CometProject
Input [5]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51, cr_returned_date_sk#52]
Arguments: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51], [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]

(48) CometExchange
Input [4]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]
Arguments: hashpartitioning(cr_item_sk#48, cr_order_number#49, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=6]

(49) CometSort
Input [4]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]
Arguments: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51], [cr_item_sk#48 ASC NULLS FIRST, cr_order_number#49 ASC NULLS FIRST]

(50) CometSortMergeJoin
Left output [7]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_order_number#43, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46]
Right output [4]: [cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]
Arguments: [cs_item_sk#41, cs_order_number#43], [cr_item_sk#48, cr_order_number#49], LeftOuter

(51) CometProject
Input [11]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_order_number#43, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46, cr_item_sk#48, cr_order_number#49, cr_return_amount#50, cr_net_loss#51]
Arguments: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46, cr_return_amount#50, cr_net_loss#51], [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46, cr_return_amount#50, cr_net_loss#51]

(52) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#53]

(53) CometBroadcastHashJoin
Left output [8]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46, cr_return_amount#50, cr_net_loss#51]
Right output [1]: [d_date_sk#53]
Arguments: [cs_sold_date_sk#46], [d_date_sk#53], Inner, BuildRight

(54) CometProject
Input [9]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cs_sold_date_sk#46, cr_return_amount#50, cr_net_loss#51, d_date_sk#53]
Arguments: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51], [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51]

(55) CometScan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(56) CometFilter
Input [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]
Condition : isnotnull(cp_catalog_page_sk#54)

(57) CometBroadcastExchange
Input [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]
Arguments: [cp_catalog_page_sk#54, cp_catalog_page_id#55]

(58) CometBroadcastHashJoin
Left output [7]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51]
Right output [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]
Arguments: [cs_catalog_page_sk#40], [cp_catalog_page_sk#54], Inner, BuildRight

(59) CometProject
Input [9]: [cs_catalog_page_sk#40, cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_sk#54, cp_catalog_page_id#55]
Arguments: [cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55], [cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55]

(60) ReusedExchange [Reuses operator id: 26]
Output [1]: [i_item_sk#56]

(61) CometBroadcastHashJoin
Left output [7]: [cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55]
Right output [1]: [i_item_sk#56]
Arguments: [cs_item_sk#41], [i_item_sk#56], Inner, BuildRight

(62) CometProject
Input [8]: [cs_item_sk#41, cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55, i_item_sk#56]
Arguments: [cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55], [cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55]

(63) CometColumnarToRow [codegen id : 5]
Input [6]: [cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55]

(64) ReusedExchange [Reuses operator id: 34]
Output [1]: [p_promo_sk#57]

(65) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [cs_promo_sk#42]
Right keys [1]: [p_promo_sk#57]
Join type: Inner
Join condition: None

(66) Project [codegen id : 5]
Output [5]: [cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55]
Input [7]: [cs_promo_sk#42, cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55, p_promo_sk#57]

(67) HashAggregate [codegen id : 5]
Input [5]: [cs_ext_sales_price#44, cs_net_profit#45, cr_return_amount#50, cr_net_loss#51, cp_catalog_page_id#55]
Keys [1]: [cp_catalog_page_id#55]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#44)), partial_sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#45 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#58, sum#59, isEmpty#60, sum#61, isEmpty#62]
Results [6]: [cp_catalog_page_id#55, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]

(68) CometColumnarExchange
Input [6]: [cp_catalog_page_id#55, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]
Arguments: hashpartitioning(cp_catalog_page_id#55, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(69) CometColumnarToRow [codegen id : 6]
Input [6]: [cp_catalog_page_id#55, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]

(70) HashAggregate [codegen id : 6]
Input [6]: [cp_catalog_page_id#55, sum#63, sum#64, isEmpty#65, sum#66, isEmpty#67]
Keys [1]: [cp_catalog_page_id#55]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#44)), sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00)), sum((cs_net_profit#45 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#44))#68, sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00))#69, sum((cs_net_profit#45 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))#70]
Results [5]: [catalog channel AS channel#71, concat(catalog_page, cp_catalog_page_id#55) AS id#72, MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#44))#68,17,2) AS sales#73, sum(coalesce(cast(cr_return_amount#50 as decimal(12,2)), 0.00))#69 AS returns#74, sum((cs_net_profit#45 - coalesce(cast(cr_net_loss#51 as decimal(12,2)), 0.00)))#70 AS profit#75]

(71) CometScan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#82), dynamicpruningexpression(ws_sold_date_sk#82 IN dynamicpruning#83)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(72) CometFilter
Input [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Condition : ((isnotnull(ws_web_site_sk#77) AND isnotnull(ws_item_sk#76)) AND isnotnull(ws_promo_sk#78))

(73) CometExchange
Input [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Arguments: hashpartitioning(ws_item_sk#76, ws_order_number#79, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=8]

(74) CometSort
Input [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Arguments: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82], [ws_item_sk#76 ASC NULLS FIRST, ws_order_number#79 ASC NULLS FIRST]

(75) CometScan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(76) CometFilter
Input [5]: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88]
Condition : (isnotnull(wr_item_sk#84) AND isnotnull(wr_order_number#85))

(77) CometProject
Input [5]: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87, wr_returned_date_sk#88]
Arguments: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87], [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87]

(78) CometExchange
Input [4]: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87]
Arguments: hashpartitioning(wr_item_sk#84, wr_order_number#85, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=9]

(79) CometSort
Input [4]: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87]
Arguments: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87], [wr_item_sk#84 ASC NULLS FIRST, wr_order_number#85 ASC NULLS FIRST]

(80) CometSortMergeJoin
Left output [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82]
Right output [4]: [wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87]
Arguments: [ws_item_sk#76, ws_order_number#79], [wr_item_sk#84, wr_order_number#85], LeftOuter

(81) CometProject
Input [11]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_order_number#79, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_item_sk#84, wr_order_number#85, wr_return_amt#86, wr_net_loss#87]
Arguments: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#86, wr_net_loss#87], [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#86, wr_net_loss#87]

(82) ReusedExchange [Reuses operator id: 15]
Output [1]: [d_date_sk#89]

(83) CometBroadcastHashJoin
Left output [8]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#86, wr_net_loss#87]
Right output [1]: [d_date_sk#89]
Arguments: [ws_sold_date_sk#82], [d_date_sk#89], Inner, BuildRight

(84) CometProject
Input [9]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, ws_sold_date_sk#82, wr_return_amt#86, wr_net_loss#87, d_date_sk#89]
Arguments: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87], [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87]

(85) CometScan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#90, web_site_id#91]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(86) CometFilter
Input [2]: [web_site_sk#90, web_site_id#91]
Condition : isnotnull(web_site_sk#90)

(87) CometBroadcastExchange
Input [2]: [web_site_sk#90, web_site_id#91]
Arguments: [web_site_sk#90, web_site_id#91]

(88) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87]
Right output [2]: [web_site_sk#90, web_site_id#91]
Arguments: [ws_web_site_sk#77], [web_site_sk#90], Inner, BuildRight

(89) CometProject
Input [9]: [ws_item_sk#76, ws_web_site_sk#77, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_sk#90, web_site_id#91]
Arguments: [ws_item_sk#76, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91], [ws_item_sk#76, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91]

(90) ReusedExchange [Reuses operator id: 26]
Output [1]: [i_item_sk#92]

(91) CometBroadcastHashJoin
Left output [7]: [ws_item_sk#76, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91]
Right output [1]: [i_item_sk#92]
Arguments: [ws_item_sk#76], [i_item_sk#92], Inner, BuildRight

(92) CometProject
Input [8]: [ws_item_sk#76, ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91, i_item_sk#92]
Arguments: [ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91], [ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91]

(93) CometColumnarToRow [codegen id : 8]
Input [6]: [ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91]

(94) ReusedExchange [Reuses operator id: 34]
Output [1]: [p_promo_sk#93]

(95) BroadcastHashJoin [codegen id : 8]
Left keys [1]: [ws_promo_sk#78]
Right keys [1]: [p_promo_sk#93]
Join type: Inner
Join condition: None

(96) Project [codegen id : 8]
Output [5]: [ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91]
Input [7]: [ws_promo_sk#78, ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91, p_promo_sk#93]

(97) HashAggregate [codegen id : 8]
Input [5]: [ws_ext_sales_price#80, ws_net_profit#81, wr_return_amt#86, wr_net_loss#87, web_site_id#91]
Keys [1]: [web_site_id#91]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#80)), partial_sum(coalesce(cast(wr_return_amt#86 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#87 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#94, sum#95, isEmpty#96, sum#97, isEmpty#98]
Results [6]: [web_site_id#91, sum#99, sum#100, isEmpty#101, sum#102, isEmpty#103]

(98) CometColumnarExchange
Input [6]: [web_site_id#91, sum#99, sum#100, isEmpty#101, sum#102, isEmpty#103]
Arguments: hashpartitioning(web_site_id#91, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(99) CometColumnarToRow [codegen id : 9]
Input [6]: [web_site_id#91, sum#99, sum#100, isEmpty#101, sum#102, isEmpty#103]

(100) HashAggregate [codegen id : 9]
Input [6]: [web_site_id#91, sum#99, sum#100, isEmpty#101, sum#102, isEmpty#103]
Keys [1]: [web_site_id#91]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#80)), sum(coalesce(cast(wr_return_amt#86 as decimal(12,2)), 0.00)), sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#87 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#80))#104, sum(coalesce(cast(wr_return_amt#86 as decimal(12,2)), 0.00))#105, sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#87 as decimal(12,2)), 0.00)))#106]
Results [5]: [web channel AS channel#107, concat(web_site, web_site_id#91) AS id#108, MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#80))#104,17,2) AS sales#109, sum(coalesce(cast(wr_return_amt#86 as decimal(12,2)), 0.00))#105 AS returns#110, sum((ws_net_profit#81 - coalesce(cast(wr_net_loss#87 as decimal(12,2)), 0.00)))#106 AS profit#111]

(101) Union

(102) HashAggregate [codegen id : 10]
Input [5]: [channel#35, id#36, sales#37, returns#38, profit#39]
Keys [2]: [channel#35, id#36]
Functions [3]: [partial_sum(sales#37), partial_sum(returns#38), partial_sum(profit#39)]
Aggregate Attributes [6]: [sum#112, isEmpty#113, sum#114, isEmpty#115, sum#116, isEmpty#117]
Results [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]

(103) CometColumnarExchange
Input [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Arguments: hashpartitioning(channel#35, id#36, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=11]

(104) CometColumnarToRow [codegen id : 11]
Input [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]

(105) HashAggregate [codegen id : 11]
Input [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Keys [2]: [channel#35, id#36]
Functions [3]: [sum(sales#37), sum(returns#38), sum(profit#39)]
Aggregate Attributes [3]: [sum(sales#37)#124, sum(returns#38)#125, sum(profit#39)#126]
Results [5]: [channel#35, id#36, cast(sum(sales#37)#124 as decimal(37,2)) AS sales#127, cast(sum(returns#38)#125 as decimal(38,2)) AS returns#128, cast(sum(profit#39)#126 as decimal(38,2)) AS profit#129]

(106) ReusedExchange [Reuses operator id: 103]
Output [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]

(107) CometColumnarToRow [codegen id : 22]
Input [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]

(108) HashAggregate [codegen id : 22]
Input [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Keys [2]: [channel#35, id#36]
Functions [3]: [sum(sales#37), sum(returns#38), sum(profit#39)]
Aggregate Attributes [3]: [sum(sales#37)#124, sum(returns#38)#125, sum(profit#39)#126]
Results [4]: [channel#35, sum(sales#37)#124 AS sales#130, sum(returns#38)#125 AS returns#131, sum(profit#39)#126 AS profit#132]

(109) HashAggregate [codegen id : 22]
Input [4]: [channel#35, sales#130, returns#131, profit#132]
Keys [1]: [channel#35]
Functions [3]: [partial_sum(sales#130), partial_sum(returns#131), partial_sum(profit#132)]
Aggregate Attributes [6]: [sum#133, isEmpty#134, sum#135, isEmpty#136, sum#137, isEmpty#138]
Results [7]: [channel#35, sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]

(110) CometColumnarExchange
Input [7]: [channel#35, sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]
Arguments: hashpartitioning(channel#35, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=12]

(111) CometColumnarToRow [codegen id : 23]
Input [7]: [channel#35, sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]

(112) HashAggregate [codegen id : 23]
Input [7]: [channel#35, sum#139, isEmpty#140, sum#141, isEmpty#142, sum#143, isEmpty#144]
Keys [1]: [channel#35]
Functions [3]: [sum(sales#130), sum(returns#131), sum(profit#132)]
Aggregate Attributes [3]: [sum(sales#130)#145, sum(returns#131)#146, sum(profit#132)#147]
Results [5]: [channel#35, null AS id#148, sum(sales#130)#145 AS sales#149, sum(returns#131)#146 AS returns#150, sum(profit#132)#147 AS profit#151]

(113) ReusedExchange [Reuses operator id: 103]
Output [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]

(114) CometColumnarToRow [codegen id : 34]
Input [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]

(115) HashAggregate [codegen id : 34]
Input [8]: [channel#35, id#36, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Keys [2]: [channel#35, id#36]
Functions [3]: [sum(sales#37), sum(returns#38), sum(profit#39)]
Aggregate Attributes [3]: [sum(sales#37)#124, sum(returns#38)#125, sum(profit#39)#126]
Results [3]: [sum(sales#37)#124 AS sales#152, sum(returns#38)#125 AS returns#153, sum(profit#39)#126 AS profit#154]

(116) HashAggregate [codegen id : 34]
Input [3]: [sales#152, returns#153, profit#154]
Keys: []
Functions [3]: [partial_sum(sales#152), partial_sum(returns#153), partial_sum(profit#154)]
Aggregate Attributes [6]: [sum#155, isEmpty#156, sum#157, isEmpty#158, sum#159, isEmpty#160]
Results [6]: [sum#161, isEmpty#162, sum#163, isEmpty#164, sum#165, isEmpty#166]

(117) CometColumnarExchange
Input [6]: [sum#161, isEmpty#162, sum#163, isEmpty#164, sum#165, isEmpty#166]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=13]

(118) CometColumnarToRow [codegen id : 35]
Input [6]: [sum#161, isEmpty#162, sum#163, isEmpty#164, sum#165, isEmpty#166]

(119) HashAggregate [codegen id : 35]
Input [6]: [sum#161, isEmpty#162, sum#163, isEmpty#164, sum#165, isEmpty#166]
Keys: []
Functions [3]: [sum(sales#152), sum(returns#153), sum(profit#154)]
Aggregate Attributes [3]: [sum(sales#152)#167, sum(returns#153)#168, sum(profit#154)#169]
Results [5]: [null AS channel#170, null AS id#171, sum(sales#152)#167 AS sales#172, sum(returns#153)#168 AS returns#173, sum(profit#154)#169 AS profit#174]

(120) Union

(121) HashAggregate [codegen id : 36]
Input [5]: [channel#35, id#36, sales#127, returns#128, profit#129]
Keys [5]: [channel#35, id#36, sales#127, returns#128, profit#129]
Functions: []
Aggregate Attributes: []
Results [5]: [channel#35, id#36, sales#127, returns#128, profit#129]

(122) CometColumnarExchange
Input [5]: [channel#35, id#36, sales#127, returns#128, profit#129]
Arguments: hashpartitioning(channel#35, id#36, sales#127, returns#128, profit#129, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=14]

(123) CometHashAggregate
Input [5]: [channel#35, id#36, sales#127, returns#128, profit#129]
Keys [5]: [channel#35, id#36, sales#127, returns#128, profit#129]
Functions: []

(124) CometTakeOrderedAndProject
Input [5]: [channel#35, id#36, sales#127, returns#128, profit#129]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[channel#35 ASC NULLS FIRST,id#36 ASC NULLS FIRST], output=[channel#35,id#36,sales#127,returns#128,profit#129]), [channel#35, id#36, sales#127, returns#128, profit#129], 100, [channel#35 ASC NULLS FIRST, id#36 ASC NULLS FIRST], [channel#35, id#36, sales#127, returns#128, profit#129]

(125) CometColumnarToRow [codegen id : 37]
Input [5]: [channel#35, id#36, sales#127, returns#128, profit#129]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (130)
+- * CometColumnarToRow (129)
   +- CometProject (128)
      +- CometFilter (127)
         +- CometScan parquet spark_catalog.default.date_dim (126)


(126) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_date#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1998-08-04), LessThanOrEqual(d_date,1998-09-03), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(127) CometFilter
Input [2]: [d_date_sk#14, d_date#15]
Condition : (((isnotnull(d_date#15) AND (d_date#15 >= 1998-08-04)) AND (d_date#15 <= 1998-09-03)) AND isnotnull(d_date_sk#14))

(128) CometProject
Input [2]: [d_date_sk#14, d_date#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(129) CometColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(130) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:2 Hosting operator id = 41 Hosting Expression = cs_sold_date_sk#46 IN dynamicpruning#8

Subquery:3 Hosting operator id = 71 Hosting Expression = ws_sold_date_sk#82 IN dynamicpruning#8


