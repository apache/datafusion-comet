== Physical Plan ==
TakeOrderedAndProject (71)
+- Union (70)
   :- * HashAggregate (28)
   :  +- Exchange (27)
   :     +- * ColumnarToRow (26)
   :        +- CometHashAggregate (25)
   :           +- CometProject (24)
   :              +- CometBroadcastHashJoin (23)
   :                 :- CometProject (19)
   :                 :  +- CometBroadcastHashJoin (18)
   :                 :     :- CometProject (14)
   :                 :     :  +- CometBroadcastHashJoin (13)
   :                 :     :     :- CometProject (8)
   :                 :     :     :  +- CometBroadcastHashJoin (7)
   :                 :     :     :     :- CometFilter (2)
   :                 :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
   :                 :     :     :     +- CometBroadcastExchange (6)
   :                 :     :     :        +- CometProject (5)
   :                 :     :     :           +- CometFilter (4)
   :                 :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (3)
   :                 :     :     +- CometBroadcastExchange (12)
   :                 :     :        +- CometProject (11)
   :                 :     :           +- CometFilter (10)
   :                 :     :              +- CometScan parquet spark_catalog.default.date_dim (9)
   :                 :     +- CometBroadcastExchange (17)
   :                 :        +- CometFilter (16)
   :                 :           +- CometScan parquet spark_catalog.default.store (15)
   :                 +- CometBroadcastExchange (22)
   :                    +- CometFilter (21)
   :                       +- CometScan parquet spark_catalog.default.item (20)
   :- * HashAggregate (49)
   :  +- Exchange (48)
   :     +- * ColumnarToRow (47)
   :        +- CometHashAggregate (46)
   :           +- CometProject (45)
   :              +- CometBroadcastHashJoin (44)
   :                 :- CometProject (42)
   :                 :  +- CometBroadcastHashJoin (41)
   :                 :     :- CometProject (36)
   :                 :     :  +- CometBroadcastHashJoin (35)
   :                 :     :     :- CometProject (33)
   :                 :     :     :  +- CometBroadcastHashJoin (32)
   :                 :     :     :     :- CometFilter (30)
   :                 :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (29)
   :                 :     :     :     +- ReusedExchange (31)
   :                 :     :     +- ReusedExchange (34)
   :                 :     +- CometBroadcastExchange (40)
   :                 :        +- CometProject (39)
   :                 :           +- CometFilter (38)
   :                 :              +- CometScan parquet spark_catalog.default.store (37)
   :                 +- ReusedExchange (43)
   +- * HashAggregate (69)
      +- Exchange (68)
         +- * ColumnarToRow (67)
            +- CometHashAggregate (66)
               +- CometProject (65)
                  +- CometBroadcastHashJoin (64)
                     :- CometProject (60)
                     :  +- CometBroadcastHashJoin (59)
                     :     :- CometProject (57)
                     :     :  +- CometBroadcastHashJoin (56)
                     :     :     :- CometProject (54)
                     :     :     :  +- CometBroadcastHashJoin (53)
                     :     :     :     :- CometFilter (51)
                     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (50)
                     :     :     :     +- ReusedExchange (52)
                     :     :     +- ReusedExchange (55)
                     :     +- ReusedExchange (58)
                     +- CometBroadcastExchange (63)
                        +- CometFilter (62)
                           +- CometScan parquet spark_catalog.default.item (61)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(3) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(4) CometFilter
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((((isnotnull(cd_gender#11) AND isnotnull(cd_marital_status#12)) AND isnotnull(cd_education_status#13)) AND (cd_gender#11 = F)) AND (cd_marital_status#12 = W)) AND (cd_education_status#13 = Primary             )) AND isnotnull(cd_demo_sk#10))

(5) CometProject
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Arguments: [cd_demo_sk#10], [cd_demo_sk#10]

(6) CometBroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: [cd_demo_sk#10]

(7) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [cd_demo_sk#10]
Arguments: [ss_cdemo_sk#2], [cd_demo_sk#10], Inner, BuildRight

(8) CometProject
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(9) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 1998)) AND isnotnull(d_date_sk#14))

(11) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(13) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#8], [d_date_sk#14], Inner, BuildRight

(14) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]

(15) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_state#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#16, s_state#17]
Condition : ((isnotnull(s_state#17) AND (s_state#17 = TN)) AND isnotnull(s_store_sk#16))

(17) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_state#17]
Arguments: [s_store_sk#16, s_state#17]

(18) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Right output [2]: [s_store_sk#16, s_state#17]
Arguments: [ss_store_sk#3], [s_store_sk#16], Inner, BuildRight

(19) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#16, s_state#17]
Arguments: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17], [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17]

(20) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(21) CometFilter
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : isnotnull(i_item_sk#18)

(22) CometBroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: [i_item_sk#18, i_item_id#19]

(23) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17]
Right output [2]: [i_item_sk#18, i_item_id#19]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(24) CometProject
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17, i_item_sk#18, i_item_id#19]
Arguments: [i_item_id#19, s_state#17, agg1#20, agg2#21, agg3#22, agg4#23], [i_item_id#19, s_state#17, ss_quantity#4 AS agg1#20, ss_list_price#5 AS agg2#21, ss_coupon_amt#7 AS agg3#22, ss_sales_price#6 AS agg4#23]

(25) CometHashAggregate
Input [6]: [i_item_id#19, s_state#17, agg1#20, agg2#21, agg3#22, agg4#23]
Keys [2]: [i_item_id#19, s_state#17]
Functions [4]: [partial_avg(agg1#20), partial_avg(UnscaledValue(agg2#21)), partial_avg(UnscaledValue(agg3#22)), partial_avg(UnscaledValue(agg4#23))]

(26) ColumnarToRow [codegen id : 1]
Input [10]: [i_item_id#19, s_state#17, sum#24, count#25, sum#26, count#27, sum#28, count#29, sum#30, count#31]

(27) Exchange
Input [10]: [i_item_id#19, s_state#17, sum#24, count#25, sum#26, count#27, sum#28, count#29, sum#30, count#31]
Arguments: hashpartitioning(i_item_id#19, s_state#17, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(28) HashAggregate [codegen id : 2]
Input [10]: [i_item_id#19, s_state#17, sum#24, count#25, sum#26, count#27, sum#28, count#29, sum#30, count#31]
Keys [2]: [i_item_id#19, s_state#17]
Functions [4]: [avg(agg1#20), avg(UnscaledValue(agg2#21)), avg(UnscaledValue(agg3#22)), avg(UnscaledValue(agg4#23))]
Aggregate Attributes [4]: [avg(agg1#20)#32, avg(UnscaledValue(agg2#21))#33, avg(UnscaledValue(agg3#22))#34, avg(UnscaledValue(agg4#23))#35]
Results [7]: [i_item_id#19, s_state#17, 0 AS g_state#36, avg(agg1#20)#32 AS agg1#37, cast((avg(UnscaledValue(agg2#21))#33 / 100.0) as decimal(11,6)) AS agg2#38, cast((avg(UnscaledValue(agg3#22))#34 / 100.0) as decimal(11,6)) AS agg3#39, cast((avg(UnscaledValue(agg4#23))#35 / 100.0) as decimal(11,6)) AS agg4#40]

(29) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#41, ss_cdemo_sk#42, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#48), dynamicpruningexpression(ss_sold_date_sk#48 IN dynamicpruning#49)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(30) CometFilter
Input [8]: [ss_item_sk#41, ss_cdemo_sk#42, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48]
Condition : ((isnotnull(ss_cdemo_sk#42) AND isnotnull(ss_store_sk#43)) AND isnotnull(ss_item_sk#41))

(31) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#50]

(32) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#41, ss_cdemo_sk#42, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48]
Right output [1]: [cd_demo_sk#50]
Arguments: [ss_cdemo_sk#42], [cd_demo_sk#50], Inner, BuildRight

(33) CometProject
Input [9]: [ss_item_sk#41, ss_cdemo_sk#42, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48, cd_demo_sk#50]
Arguments: [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48], [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48]

(34) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#51]

(35) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48]
Right output [1]: [d_date_sk#51]
Arguments: [ss_sold_date_sk#48], [d_date_sk#51], Inner, BuildRight

(36) CometProject
Input [8]: [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, ss_sold_date_sk#48, d_date_sk#51]
Arguments: [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47], [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47]

(37) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#52, s_state#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(38) CometFilter
Input [2]: [s_store_sk#52, s_state#53]
Condition : ((isnotnull(s_state#53) AND (s_state#53 = TN)) AND isnotnull(s_store_sk#52))

(39) CometProject
Input [2]: [s_store_sk#52, s_state#53]
Arguments: [s_store_sk#52], [s_store_sk#52]

(40) CometBroadcastExchange
Input [1]: [s_store_sk#52]
Arguments: [s_store_sk#52]

(41) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47]
Right output [1]: [s_store_sk#52]
Arguments: [ss_store_sk#43], [s_store_sk#52], Inner, BuildRight

(42) CometProject
Input [7]: [ss_item_sk#41, ss_store_sk#43, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, s_store_sk#52]
Arguments: [ss_item_sk#41, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47], [ss_item_sk#41, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47]

(43) ReusedExchange [Reuses operator id: 22]
Output [2]: [i_item_sk#54, i_item_id#55]

(44) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#41, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47]
Right output [2]: [i_item_sk#54, i_item_id#55]
Arguments: [ss_item_sk#41], [i_item_sk#54], Inner, BuildRight

(45) CometProject
Input [7]: [ss_item_sk#41, ss_quantity#44, ss_list_price#45, ss_sales_price#46, ss_coupon_amt#47, i_item_sk#54, i_item_id#55]
Arguments: [i_item_id#55, agg1#56, agg2#57, agg3#58, agg4#59], [i_item_id#55, ss_quantity#44 AS agg1#56, ss_list_price#45 AS agg2#57, ss_coupon_amt#47 AS agg3#58, ss_sales_price#46 AS agg4#59]

(46) CometHashAggregate
Input [5]: [i_item_id#55, agg1#56, agg2#57, agg3#58, agg4#59]
Keys [1]: [i_item_id#55]
Functions [4]: [partial_avg(agg1#56), partial_avg(UnscaledValue(agg2#57)), partial_avg(UnscaledValue(agg3#58)), partial_avg(UnscaledValue(agg4#59))]

(47) ColumnarToRow [codegen id : 3]
Input [9]: [i_item_id#55, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67]

(48) Exchange
Input [9]: [i_item_id#55, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67]
Arguments: hashpartitioning(i_item_id#55, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(49) HashAggregate [codegen id : 4]
Input [9]: [i_item_id#55, sum#60, count#61, sum#62, count#63, sum#64, count#65, sum#66, count#67]
Keys [1]: [i_item_id#55]
Functions [4]: [avg(agg1#56), avg(UnscaledValue(agg2#57)), avg(UnscaledValue(agg3#58)), avg(UnscaledValue(agg4#59))]
Aggregate Attributes [4]: [avg(agg1#56)#68, avg(UnscaledValue(agg2#57))#69, avg(UnscaledValue(agg3#58))#70, avg(UnscaledValue(agg4#59))#71]
Results [7]: [i_item_id#55, null AS s_state#72, 1 AS g_state#73, avg(agg1#56)#68 AS agg1#74, cast((avg(UnscaledValue(agg2#57))#69 / 100.0) as decimal(11,6)) AS agg2#75, cast((avg(UnscaledValue(agg3#58))#70 / 100.0) as decimal(11,6)) AS agg3#76, cast((avg(UnscaledValue(agg4#59))#71 / 100.0) as decimal(11,6)) AS agg4#77]

(50) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#78, ss_cdemo_sk#79, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#85), dynamicpruningexpression(ss_sold_date_sk#85 IN dynamicpruning#86)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(51) CometFilter
Input [8]: [ss_item_sk#78, ss_cdemo_sk#79, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85]
Condition : ((isnotnull(ss_cdemo_sk#79) AND isnotnull(ss_store_sk#80)) AND isnotnull(ss_item_sk#78))

(52) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#87]

(53) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#78, ss_cdemo_sk#79, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85]
Right output [1]: [cd_demo_sk#87]
Arguments: [ss_cdemo_sk#79], [cd_demo_sk#87], Inner, BuildRight

(54) CometProject
Input [9]: [ss_item_sk#78, ss_cdemo_sk#79, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85, cd_demo_sk#87]
Arguments: [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85], [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85]

(55) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#88]

(56) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85]
Right output [1]: [d_date_sk#88]
Arguments: [ss_sold_date_sk#85], [d_date_sk#88], Inner, BuildRight

(57) CometProject
Input [8]: [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, ss_sold_date_sk#85, d_date_sk#88]
Arguments: [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84], [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84]

(58) ReusedExchange [Reuses operator id: 40]
Output [1]: [s_store_sk#89]

(59) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84]
Right output [1]: [s_store_sk#89]
Arguments: [ss_store_sk#80], [s_store_sk#89], Inner, BuildRight

(60) CometProject
Input [7]: [ss_item_sk#78, ss_store_sk#80, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, s_store_sk#89]
Arguments: [ss_item_sk#78, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84], [ss_item_sk#78, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84]

(61) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(62) CometFilter
Input [1]: [i_item_sk#90]
Condition : isnotnull(i_item_sk#90)

(63) CometBroadcastExchange
Input [1]: [i_item_sk#90]
Arguments: [i_item_sk#90]

(64) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#78, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84]
Right output [1]: [i_item_sk#90]
Arguments: [ss_item_sk#78], [i_item_sk#90], Inner, BuildRight

(65) CometProject
Input [6]: [ss_item_sk#78, ss_quantity#81, ss_list_price#82, ss_sales_price#83, ss_coupon_amt#84, i_item_sk#90]
Arguments: [agg1#91, agg2#92, agg3#93, agg4#94], [ss_quantity#81 AS agg1#91, ss_list_price#82 AS agg2#92, ss_coupon_amt#84 AS agg3#93, ss_sales_price#83 AS agg4#94]

(66) CometHashAggregate
Input [4]: [agg1#91, agg2#92, agg3#93, agg4#94]
Keys: []
Functions [4]: [partial_avg(agg1#91), partial_avg(UnscaledValue(agg2#92)), partial_avg(UnscaledValue(agg3#93)), partial_avg(UnscaledValue(agg4#94))]

(67) ColumnarToRow [codegen id : 5]
Input [8]: [sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102]

(68) Exchange
Input [8]: [sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=3]

(69) HashAggregate [codegen id : 6]
Input [8]: [sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102]
Keys: []
Functions [4]: [avg(agg1#91), avg(UnscaledValue(agg2#92)), avg(UnscaledValue(agg3#93)), avg(UnscaledValue(agg4#94))]
Aggregate Attributes [4]: [avg(agg1#91)#103, avg(UnscaledValue(agg2#92))#104, avg(UnscaledValue(agg3#93))#105, avg(UnscaledValue(agg4#94))#106]
Results [7]: [null AS i_item_id#107, null AS s_state#108, 1 AS g_state#109, avg(agg1#91)#103 AS agg1#110, cast((avg(UnscaledValue(agg2#92))#104 / 100.0) as decimal(11,6)) AS agg2#111, cast((avg(UnscaledValue(agg3#93))#105 / 100.0) as decimal(11,6)) AS agg3#112, cast((avg(UnscaledValue(agg4#94))#106 / 100.0) as decimal(11,6)) AS agg4#113]

(70) Union

(71) TakeOrderedAndProject
Input [7]: [i_item_id#19, s_state#17, g_state#36, agg1#37, agg2#38, agg3#39, agg4#40]
Arguments: 100, [i_item_id#19 ASC NULLS FIRST, s_state#17 ASC NULLS FIRST], [i_item_id#19, s_state#17, g_state#36, agg1#37, agg2#38, agg3#39, agg4#40]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (76)
+- * ColumnarToRow (75)
   +- CometProject (74)
      +- CometFilter (73)
         +- CometScan parquet spark_catalog.default.date_dim (72)


(72) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(73) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 1998)) AND isnotnull(d_date_sk#14))

(74) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(75) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(76) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 29 Hosting Expression = ss_sold_date_sk#48 IN dynamicpruning#9

Subquery:3 Hosting operator id = 50 Hosting Expression = ss_sold_date_sk#85 IN dynamicpruning#9


