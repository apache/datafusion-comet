== Physical Plan ==
* ColumnarToRow (69)
+- CometTakeOrderedAndProject (68)
   +- CometUnion (67)
      :- CometHashAggregate (27)
      :  +- CometExchange (26)
      :     +- CometHashAggregate (25)
      :        +- CometProject (24)
      :           +- CometBroadcastHashJoin (23)
      :              :- CometProject (19)
      :              :  +- CometBroadcastHashJoin (18)
      :              :     :- CometProject (14)
      :              :     :  +- CometBroadcastHashJoin (13)
      :              :     :     :- CometProject (8)
      :              :     :     :  +- CometBroadcastHashJoin (7)
      :              :     :     :     :- CometFilter (2)
      :              :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
      :              :     :     :     +- CometBroadcastExchange (6)
      :              :     :     :        +- CometProject (5)
      :              :     :     :           +- CometFilter (4)
      :              :     :     :              +- CometScan parquet spark_catalog.default.customer_demographics (3)
      :              :     :     +- CometBroadcastExchange (12)
      :              :     :        +- CometProject (11)
      :              :     :           +- CometFilter (10)
      :              :     :              +- CometScan parquet spark_catalog.default.date_dim (9)
      :              :     +- CometBroadcastExchange (17)
      :              :        +- CometFilter (16)
      :              :           +- CometScan parquet spark_catalog.default.store (15)
      :              +- CometBroadcastExchange (22)
      :                 +- CometFilter (21)
      :                    +- CometScan parquet spark_catalog.default.item (20)
      :- CometHashAggregate (47)
      :  +- CometExchange (46)
      :     +- CometHashAggregate (45)
      :        +- CometProject (44)
      :           +- CometBroadcastHashJoin (43)
      :              :- CometProject (41)
      :              :  +- CometBroadcastHashJoin (40)
      :              :     :- CometProject (35)
      :              :     :  +- CometBroadcastHashJoin (34)
      :              :     :     :- CometProject (32)
      :              :     :     :  +- CometBroadcastHashJoin (31)
      :              :     :     :     :- CometFilter (29)
      :              :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (28)
      :              :     :     :     +- ReusedExchange (30)
      :              :     :     +- ReusedExchange (33)
      :              :     +- CometBroadcastExchange (39)
      :              :        +- CometProject (38)
      :              :           +- CometFilter (37)
      :              :              +- CometScan parquet spark_catalog.default.store (36)
      :              +- ReusedExchange (42)
      +- CometHashAggregate (66)
         +- CometExchange (65)
            +- CometHashAggregate (64)
               +- CometProject (63)
                  +- CometBroadcastHashJoin (62)
                     :- CometProject (58)
                     :  +- CometBroadcastHashJoin (57)
                     :     :- CometProject (55)
                     :     :  +- CometBroadcastHashJoin (54)
                     :     :     :- CometProject (52)
                     :     :     :  +- CometBroadcastHashJoin (51)
                     :     :     :     :- CometFilter (49)
                     :     :     :     :  +- CometScan parquet spark_catalog.default.store_sales (48)
                     :     :     :     +- ReusedExchange (50)
                     :     :     +- ReusedExchange (53)
                     :     +- ReusedExchange (56)
                     +- CometBroadcastExchange (61)
                        +- CometFilter (60)
                           +- CometScan parquet spark_catalog.default.item (59)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(3) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(4) CometFilter
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Condition : ((((((isnotnull(cd_gender#11) AND isnotnull(cd_marital_status#12)) AND isnotnull(cd_education_status#13)) AND (cd_gender#11 = F)) AND (cd_marital_status#12 = W)) AND (cd_education_status#13 = Primary             )) AND isnotnull(cd_demo_sk#10))

(5) CometProject
Input [4]: [cd_demo_sk#10, cd_gender#11, cd_marital_status#12, cd_education_status#13]
Arguments: [cd_demo_sk#10], [cd_demo_sk#10]

(6) CometBroadcastExchange
Input [1]: [cd_demo_sk#10]
Arguments: [cd_demo_sk#10]

(7) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [cd_demo_sk#10]
Arguments: [ss_cdemo_sk#2], [cd_demo_sk#10], Inner, BuildRight

(8) CometProject
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#10]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(9) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 1998)) AND isnotnull(d_date_sk#14))

(11) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: [d_date_sk#14]

(13) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#8], [d_date_sk#14], Inner, BuildRight

(14) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#14]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]

(15) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_state#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#16, s_state#17]
Condition : ((isnotnull(s_state#17) AND (s_state#17 = TN)) AND isnotnull(s_store_sk#16))

(17) CometBroadcastExchange
Input [2]: [s_store_sk#16, s_state#17]
Arguments: [s_store_sk#16, s_state#17]

(18) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Right output [2]: [s_store_sk#16, s_state#17]
Arguments: [ss_store_sk#3], [s_store_sk#16], Inner, BuildRight

(19) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#16, s_state#17]
Arguments: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17], [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17]

(20) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(21) CometFilter
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : isnotnull(i_item_sk#18)

(22) CometBroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: [i_item_sk#18, i_item_id#19]

(23) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17]
Right output [2]: [i_item_sk#18, i_item_id#19]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(24) CometProject
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17, i_item_sk#18, i_item_id#19]
Arguments: [i_item_id#19, s_state#17, agg1#20, agg2#21, agg3#22, agg4#23], [i_item_id#19, s_state#17, ss_quantity#4 AS agg1#20, ss_list_price#5 AS agg2#21, ss_coupon_amt#7 AS agg3#22, ss_sales_price#6 AS agg4#23]

(25) CometHashAggregate
Input [6]: [i_item_id#19, s_state#17, agg1#20, agg2#21, agg3#22, agg4#23]
Keys [2]: [i_item_id#19, s_state#17]
Functions [4]: [partial_avg(agg1#20), partial_avg(UnscaledValue(agg2#21)), partial_avg(UnscaledValue(agg3#22)), partial_avg(UnscaledValue(agg4#23))]

(26) CometExchange
Input [10]: [i_item_id#19, s_state#17, sum#24, count#25, sum#26, count#27, sum#28, count#29, sum#30, count#31]
Arguments: hashpartitioning(i_item_id#19, s_state#17, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(27) CometHashAggregate
Input [10]: [i_item_id#19, s_state#17, sum#24, count#25, sum#26, count#27, sum#28, count#29, sum#30, count#31]
Keys [2]: [i_item_id#19, s_state#17]
Functions [4]: [avg(agg1#20), avg(UnscaledValue(agg2#21)), avg(UnscaledValue(agg3#22)), avg(UnscaledValue(agg4#23))]

(28) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#32, ss_cdemo_sk#33, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#39), dynamicpruningexpression(ss_sold_date_sk#39 IN dynamicpruning#40)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(29) CometFilter
Input [8]: [ss_item_sk#32, ss_cdemo_sk#33, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39]
Condition : ((isnotnull(ss_cdemo_sk#33) AND isnotnull(ss_store_sk#34)) AND isnotnull(ss_item_sk#32))

(30) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#41]

(31) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#32, ss_cdemo_sk#33, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39]
Right output [1]: [cd_demo_sk#41]
Arguments: [ss_cdemo_sk#33], [cd_demo_sk#41], Inner, BuildRight

(32) CometProject
Input [9]: [ss_item_sk#32, ss_cdemo_sk#33, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39, cd_demo_sk#41]
Arguments: [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39], [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39]

(33) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#42]

(34) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39]
Right output [1]: [d_date_sk#42]
Arguments: [ss_sold_date_sk#39], [d_date_sk#42], Inner, BuildRight

(35) CometProject
Input [8]: [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, ss_sold_date_sk#39, d_date_sk#42]
Arguments: [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38], [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38]

(36) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#43, s_state#44]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(37) CometFilter
Input [2]: [s_store_sk#43, s_state#44]
Condition : ((isnotnull(s_state#44) AND (s_state#44 = TN)) AND isnotnull(s_store_sk#43))

(38) CometProject
Input [2]: [s_store_sk#43, s_state#44]
Arguments: [s_store_sk#43], [s_store_sk#43]

(39) CometBroadcastExchange
Input [1]: [s_store_sk#43]
Arguments: [s_store_sk#43]

(40) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38]
Right output [1]: [s_store_sk#43]
Arguments: [ss_store_sk#34], [s_store_sk#43], Inner, BuildRight

(41) CometProject
Input [7]: [ss_item_sk#32, ss_store_sk#34, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, s_store_sk#43]
Arguments: [ss_item_sk#32, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38], [ss_item_sk#32, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38]

(42) ReusedExchange [Reuses operator id: 22]
Output [2]: [i_item_sk#45, i_item_id#46]

(43) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#32, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38]
Right output [2]: [i_item_sk#45, i_item_id#46]
Arguments: [ss_item_sk#32], [i_item_sk#45], Inner, BuildRight

(44) CometProject
Input [7]: [ss_item_sk#32, ss_quantity#35, ss_list_price#36, ss_sales_price#37, ss_coupon_amt#38, i_item_sk#45, i_item_id#46]
Arguments: [i_item_id#46, agg1#47, agg2#48, agg3#49, agg4#50], [i_item_id#46, ss_quantity#35 AS agg1#47, ss_list_price#36 AS agg2#48, ss_coupon_amt#38 AS agg3#49, ss_sales_price#37 AS agg4#50]

(45) CometHashAggregate
Input [5]: [i_item_id#46, agg1#47, agg2#48, agg3#49, agg4#50]
Keys [1]: [i_item_id#46]
Functions [4]: [partial_avg(agg1#47), partial_avg(UnscaledValue(agg2#48)), partial_avg(UnscaledValue(agg3#49)), partial_avg(UnscaledValue(agg4#50))]

(46) CometExchange
Input [9]: [i_item_id#46, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58]
Arguments: hashpartitioning(i_item_id#46, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(47) CometHashAggregate
Input [9]: [i_item_id#46, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58]
Keys [1]: [i_item_id#46]
Functions [4]: [avg(agg1#47), avg(UnscaledValue(agg2#48)), avg(UnscaledValue(agg3#49)), avg(UnscaledValue(agg4#50))]

(48) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#59, ss_cdemo_sk#60, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#66), dynamicpruningexpression(ss_sold_date_sk#66 IN dynamicpruning#67)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(49) CometFilter
Input [8]: [ss_item_sk#59, ss_cdemo_sk#60, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66]
Condition : ((isnotnull(ss_cdemo_sk#60) AND isnotnull(ss_store_sk#61)) AND isnotnull(ss_item_sk#59))

(50) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#68]

(51) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#59, ss_cdemo_sk#60, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66]
Right output [1]: [cd_demo_sk#68]
Arguments: [ss_cdemo_sk#60], [cd_demo_sk#68], Inner, BuildRight

(52) CometProject
Input [9]: [ss_item_sk#59, ss_cdemo_sk#60, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66, cd_demo_sk#68]
Arguments: [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66], [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66]

(53) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#69]

(54) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66]
Right output [1]: [d_date_sk#69]
Arguments: [ss_sold_date_sk#66], [d_date_sk#69], Inner, BuildRight

(55) CometProject
Input [8]: [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, ss_sold_date_sk#66, d_date_sk#69]
Arguments: [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65], [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65]

(56) ReusedExchange [Reuses operator id: 39]
Output [1]: [s_store_sk#70]

(57) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65]
Right output [1]: [s_store_sk#70]
Arguments: [ss_store_sk#61], [s_store_sk#70], Inner, BuildRight

(58) CometProject
Input [7]: [ss_item_sk#59, ss_store_sk#61, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, s_store_sk#70]
Arguments: [ss_item_sk#59, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65], [ss_item_sk#59, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65]

(59) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(60) CometFilter
Input [1]: [i_item_sk#71]
Condition : isnotnull(i_item_sk#71)

(61) CometBroadcastExchange
Input [1]: [i_item_sk#71]
Arguments: [i_item_sk#71]

(62) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#59, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65]
Right output [1]: [i_item_sk#71]
Arguments: [ss_item_sk#59], [i_item_sk#71], Inner, BuildRight

(63) CometProject
Input [6]: [ss_item_sk#59, ss_quantity#62, ss_list_price#63, ss_sales_price#64, ss_coupon_amt#65, i_item_sk#71]
Arguments: [agg1#72, agg2#73, agg3#74, agg4#75], [ss_quantity#62 AS agg1#72, ss_list_price#63 AS agg2#73, ss_coupon_amt#65 AS agg3#74, ss_sales_price#64 AS agg4#75]

(64) CometHashAggregate
Input [4]: [agg1#72, agg2#73, agg3#74, agg4#75]
Keys: []
Functions [4]: [partial_avg(agg1#72), partial_avg(UnscaledValue(agg2#73)), partial_avg(UnscaledValue(agg3#74)), partial_avg(UnscaledValue(agg4#75))]

(65) CometExchange
Input [8]: [sum#76, count#77, sum#78, count#79, sum#80, count#81, sum#82, count#83]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(66) CometHashAggregate
Input [8]: [sum#76, count#77, sum#78, count#79, sum#80, count#81, sum#82, count#83]
Keys: []
Functions [4]: [avg(agg1#72), avg(UnscaledValue(agg2#73)), avg(UnscaledValue(agg3#74)), avg(UnscaledValue(agg4#75))]

(67) CometUnion
Child 0 Input [7]: [i_item_id#19, s_state#17, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]
Child 1 Input [7]: [i_item_id#46, s_state#89, g_state#90, agg1#91, agg2#92, agg3#93, agg4#94]
Child 2 Input [7]: [i_item_id#95, s_state#96, g_state#97, agg1#98, agg2#99, agg3#100, agg4#101]

(68) CometTakeOrderedAndProject
Input [7]: [i_item_id#19, s_state#17, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[i_item_id#19 ASC NULLS FIRST,s_state#17 ASC NULLS FIRST], output=[i_item_id#19,s_state#17,g_state#84,agg1#85,agg2#86,agg3#87,agg4#88]), [i_item_id#19, s_state#17, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88], 100, [i_item_id#19 ASC NULLS FIRST, s_state#17 ASC NULLS FIRST], [i_item_id#19, s_state#17, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]

(69) ColumnarToRow [codegen id : 1]
Input [7]: [i_item_id#19, s_state#17, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (74)
+- * ColumnarToRow (73)
   +- CometProject (72)
      +- CometFilter (71)
         +- CometScan parquet spark_catalog.default.date_dim (70)


(70) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#14, d_year#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(71) CometFilter
Input [2]: [d_date_sk#14, d_year#15]
Condition : ((isnotnull(d_year#15) AND (d_year#15 = 1998)) AND isnotnull(d_date_sk#14))

(72) CometProject
Input [2]: [d_date_sk#14, d_year#15]
Arguments: [d_date_sk#14], [d_date_sk#14]

(73) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#14]

(74) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]

Subquery:2 Hosting operator id = 28 Hosting Expression = ss_sold_date_sk#39 IN dynamicpruning#9

Subquery:3 Hosting operator id = 48 Hosting Expression = ss_sold_date_sk#66 IN dynamicpruning#9


