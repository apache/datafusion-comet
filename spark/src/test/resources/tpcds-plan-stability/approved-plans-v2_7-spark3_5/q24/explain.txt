== Physical Plan ==
* ColumnarToRow (43)
+- CometSort (42)
   +- CometColumnarExchange (41)
      +- CometFilter (40)
         +- CometHashAggregate (39)
            +- CometColumnarExchange (38)
               +- CometHashAggregate (37)
                  +- CometHashAggregate (36)
                     +- CometColumnarExchange (35)
                        +- CometHashAggregate (34)
                           +- CometProject (33)
                              +- CometBroadcastHashJoin (32)
                                 :- CometProject (28)
                                 :  +- CometBroadcastHashJoin (27)
                                 :     :- CometProject (23)
                                 :     :  +- CometBroadcastHashJoin (22)
                                 :     :     :- CometProject (18)
                                 :     :     :  +- CometBroadcastHashJoin (17)
                                 :     :     :     :- CometProject (12)
                                 :     :     :     :  +- CometSortMergeJoin (11)
                                 :     :     :     :     :- CometSort (5)
                                 :     :     :     :     :  +- CometColumnarExchange (4)
                                 :     :     :     :     :     +- CometProject (3)
                                 :     :     :     :     :        +- CometFilter (2)
                                 :     :     :     :     :           +- CometScan parquet spark_catalog.default.store_sales (1)
                                 :     :     :     :     +- CometSort (10)
                                 :     :     :     :        +- CometColumnarExchange (9)
                                 :     :     :     :           +- CometProject (8)
                                 :     :     :     :              +- CometFilter (7)
                                 :     :     :     :                 +- CometScan parquet spark_catalog.default.store_returns (6)
                                 :     :     :     +- CometBroadcastExchange (16)
                                 :     :     :        +- CometProject (15)
                                 :     :     :           +- CometFilter (14)
                                 :     :     :              +- CometScan parquet spark_catalog.default.store (13)
                                 :     :     +- CometBroadcastExchange (21)
                                 :     :        +- CometFilter (20)
                                 :     :           +- CometScan parquet spark_catalog.default.item (19)
                                 :     +- CometBroadcastExchange (26)
                                 :        +- CometFilter (25)
                                 :           +- CometScan parquet spark_catalog.default.customer (24)
                                 +- CometBroadcastExchange (31)
                                    +- CometFilter (30)
                                       +- CometScan parquet spark_catalog.default.customer_address (29)


(1) Scan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(3) CometProject
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(4) CometColumnarExchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=1]

(5) CometSort
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST]

(6) Scan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) CometFilter
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(8) CometProject
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_item_sk#7, sr_ticket_number#8]

(9) CometColumnarExchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=2]

(10) CometSort
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST]

(11) CometSortMergeJoin
Left output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Right output [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_ticket_number#4, ss_item_sk#1], [sr_ticket_number#8, sr_item_sk#7], Inner

(12) CometProject
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]

(13) Scan parquet spark_catalog.default.store
Output [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(14) CometFilter
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Condition : (((isnotnull(s_market_id#12) AND (s_market_id#12 = 8)) AND isnotnull(s_store_sk#10)) AND isnotnull(s_zip#14))

(15) CometProject
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14], [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(16) CometBroadcastExchange
Input [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(17) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Right output [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_store_sk#3], [s_store_sk#10], Inner, BuildRight

(18) CometProject
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14], [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]

(19) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), EqualTo(i_color,pale                ), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(20) CometFilter
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Condition : ((isnotnull(i_color#18) AND (i_color#18 = pale                )) AND isnotnull(i_item_sk#15))

(21) CometBroadcastExchange
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(22) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]
Right output [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [ss_item_sk#1], [i_item_sk#15], Inner, BuildRight

(23) CometProject
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20], [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(24) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(25) CometFilter
Input [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Condition : ((isnotnull(c_customer_sk#21) AND isnotnull(c_current_addr_sk#22)) AND isnotnull(c_birth_country#25))

(26) CometBroadcastExchange
Input [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Arguments: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]

(27) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Right output [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Arguments: [ss_customer_sk#2], [c_customer_sk#21], Inner, BuildRight

(28) CometProject
Input [15]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Arguments: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25], [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]

(29) Scan parquet spark_catalog.default.customer_address
Output [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(30) CometFilter
Input [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Condition : ((isnotnull(ca_address_sk#26) AND isnotnull(ca_country#29)) AND isnotnull(ca_zip#28))

(31) CometBroadcastExchange
Input [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Arguments: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]

(32) CometBroadcastHashJoin
Left output [13]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Right output [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Arguments: [c_current_addr_sk#22, c_birth_country#25, s_zip#14], [ca_address_sk#26, upper(ca_country#29), ca_zip#28], Inner, BuildRight

(33) CometProject
Input [17]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25, ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Arguments: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#23, c_last_name#24, ca_state#27], [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#23, c_last_name#24, ca_state#27]

(34) CometHashAggregate
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#23, c_last_name#24, ca_state#27]
Keys [10]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]

(35) CometColumnarExchange
Input [11]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#30]
Arguments: hashpartitioning(c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=3]

(36) CometHashAggregate
Input [11]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#30]
Keys [10]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]

(37) CometHashAggregate
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, netpaid#31]
Keys [3]: [c_last_name#24, c_first_name#23, s_store_name#11]
Functions [1]: [partial_sum(netpaid#31)]

(38) CometColumnarExchange
Input [5]: [c_last_name#24, c_first_name#23, s_store_name#11, sum#32, isEmpty#33]
Arguments: hashpartitioning(c_last_name#24, c_first_name#23, s_store_name#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=4]

(39) CometHashAggregate
Input [5]: [c_last_name#24, c_first_name#23, s_store_name#11, sum#32, isEmpty#33]
Keys [3]: [c_last_name#24, c_first_name#23, s_store_name#11]
Functions [1]: [sum(netpaid#31)]

(40) CometFilter
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#34]
Condition : (isnotnull(paid#34) AND (cast(paid#34 as decimal(33,8)) > cast(Subquery scalar-subquery#35, [id=#36] as decimal(33,8))))

(41) CometColumnarExchange
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#34]
Arguments: rangepartitioning(c_last_name#24 ASC NULLS FIRST, c_first_name#23 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=5]

(42) CometSort
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#34]
Arguments: [c_last_name#24, c_first_name#23, s_store_name#11, paid#34], [c_last_name#24 ASC NULLS FIRST, c_first_name#23 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST]

(43) ColumnarToRow [codegen id : 1]
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#34]

===== Subqueries =====

Subquery:1 Hosting operator id = 40 Hosting Expression = Subquery scalar-subquery#35, [id=#36]
* ColumnarToRow (70)
+- CometHashAggregate (69)
   +- CometColumnarExchange (68)
      +- CometHashAggregate (67)
         +- CometHashAggregate (66)
            +- CometColumnarExchange (65)
               +- CometHashAggregate (64)
                  +- CometProject (63)
                     +- CometBroadcastHashJoin (62)
                        :- CometProject (60)
                        :  +- CometBroadcastHashJoin (59)
                        :     :- CometProject (57)
                        :     :  +- CometBroadcastHashJoin (56)
                        :     :     :- CometProject (52)
                        :     :     :  +- CometBroadcastHashJoin (51)
                        :     :     :     :- CometProject (49)
                        :     :     :     :  +- CometSortMergeJoin (48)
                        :     :     :     :     :- CometSort (45)
                        :     :     :     :     :  +- ReusedExchange (44)
                        :     :     :     :     +- CometSort (47)
                        :     :     :     :        +- ReusedExchange (46)
                        :     :     :     +- ReusedExchange (50)
                        :     :     +- CometBroadcastExchange (55)
                        :     :        +- CometFilter (54)
                        :     :           +- CometScan parquet spark_catalog.default.item (53)
                        :     +- ReusedExchange (58)
                        +- ReusedExchange (61)


(44) ReusedExchange [Reuses operator id: 4]
Output [5]: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_ticket_number#40, ss_net_paid#41]

(45) CometSort
Input [5]: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_ticket_number#40, ss_net_paid#41]
Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_ticket_number#40, ss_net_paid#41], [ss_ticket_number#40 ASC NULLS FIRST, ss_item_sk#37 ASC NULLS FIRST]

(46) ReusedExchange [Reuses operator id: 9]
Output [2]: [sr_item_sk#42, sr_ticket_number#43]

(47) CometSort
Input [2]: [sr_item_sk#42, sr_ticket_number#43]
Arguments: [sr_item_sk#42, sr_ticket_number#43], [sr_ticket_number#43 ASC NULLS FIRST, sr_item_sk#42 ASC NULLS FIRST]

(48) CometSortMergeJoin
Left output [5]: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_ticket_number#40, ss_net_paid#41]
Right output [2]: [sr_item_sk#42, sr_ticket_number#43]
Arguments: [ss_ticket_number#40, ss_item_sk#37], [sr_ticket_number#43, sr_item_sk#42], Inner

(49) CometProject
Input [7]: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_ticket_number#40, ss_net_paid#41, sr_item_sk#42, sr_ticket_number#43]
Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_net_paid#41], [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_net_paid#41]

(50) ReusedExchange [Reuses operator id: 16]
Output [4]: [s_store_sk#44, s_store_name#45, s_state#46, s_zip#47]

(51) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_net_paid#41]
Right output [4]: [s_store_sk#44, s_store_name#45, s_state#46, s_zip#47]
Arguments: [ss_store_sk#39], [s_store_sk#44], Inner, BuildRight

(52) CometProject
Input [8]: [ss_item_sk#37, ss_customer_sk#38, ss_store_sk#39, ss_net_paid#41, s_store_sk#44, s_store_name#45, s_state#46, s_zip#47]
Arguments: [ss_item_sk#37, ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47], [ss_item_sk#37, ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47]

(53) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#48, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(54) CometFilter
Input [6]: [i_item_sk#48, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]
Condition : isnotnull(i_item_sk#48)

(55) CometBroadcastExchange
Input [6]: [i_item_sk#48, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]
Arguments: [i_item_sk#48, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]

(56) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#37, ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47]
Right output [6]: [i_item_sk#48, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]
Arguments: [ss_item_sk#37], [i_item_sk#48], Inner, BuildRight

(57) CometProject
Input [12]: [ss_item_sk#37, ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_item_sk#48, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]
Arguments: [ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53], [ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]

(58) ReusedExchange [Reuses operator id: 26]
Output [5]: [c_customer_sk#54, c_current_addr_sk#55, c_first_name#56, c_last_name#57, c_birth_country#58]

(59) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53]
Right output [5]: [c_customer_sk#54, c_current_addr_sk#55, c_first_name#56, c_last_name#57, c_birth_country#58]
Arguments: [ss_customer_sk#38], [c_customer_sk#54], Inner, BuildRight

(60) CometProject
Input [15]: [ss_customer_sk#38, ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_customer_sk#54, c_current_addr_sk#55, c_first_name#56, c_last_name#57, c_birth_country#58]
Arguments: [ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_current_addr_sk#55, c_first_name#56, c_last_name#57, c_birth_country#58], [ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_current_addr_sk#55, c_first_name#56, c_last_name#57, c_birth_country#58]

(61) ReusedExchange [Reuses operator id: 31]
Output [4]: [ca_address_sk#59, ca_state#60, ca_zip#61, ca_country#62]

(62) CometBroadcastHashJoin
Left output [13]: [ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_current_addr_sk#55, c_first_name#56, c_last_name#57, c_birth_country#58]
Right output [4]: [ca_address_sk#59, ca_state#60, ca_zip#61, ca_country#62]
Arguments: [c_current_addr_sk#55, c_birth_country#58, s_zip#47], [ca_address_sk#59, upper(ca_country#62), ca_zip#61], Inner, BuildRight

(63) CometProject
Input [17]: [ss_net_paid#41, s_store_name#45, s_state#46, s_zip#47, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_current_addr_sk#55, c_first_name#56, c_last_name#57, c_birth_country#58, ca_address_sk#59, ca_state#60, ca_zip#61, ca_country#62]
Arguments: [ss_net_paid#41, s_store_name#45, s_state#46, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_first_name#56, c_last_name#57, ca_state#60], [ss_net_paid#41, s_store_name#45, s_state#46, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_first_name#56, c_last_name#57, ca_state#60]

(64) CometHashAggregate
Input [11]: [ss_net_paid#41, s_store_name#45, s_state#46, i_current_price#49, i_size#50, i_color#51, i_units#52, i_manager_id#53, c_first_name#56, c_last_name#57, ca_state#60]
Keys [10]: [c_last_name#57, c_first_name#56, s_store_name#45, ca_state#60, s_state#46, i_color#51, i_current_price#49, i_manager_id#53, i_units#52, i_size#50]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#41))]

(65) CometColumnarExchange
Input [11]: [c_last_name#57, c_first_name#56, s_store_name#45, ca_state#60, s_state#46, i_color#51, i_current_price#49, i_manager_id#53, i_units#52, i_size#50, sum#63]
Arguments: hashpartitioning(c_last_name#57, c_first_name#56, s_store_name#45, ca_state#60, s_state#46, i_color#51, i_current_price#49, i_manager_id#53, i_units#52, i_size#50, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(66) CometHashAggregate
Input [11]: [c_last_name#57, c_first_name#56, s_store_name#45, ca_state#60, s_state#46, i_color#51, i_current_price#49, i_manager_id#53, i_units#52, i_size#50, sum#63]
Keys [10]: [c_last_name#57, c_first_name#56, s_store_name#45, ca_state#60, s_state#46, i_color#51, i_current_price#49, i_manager_id#53, i_units#52, i_size#50]
Functions [1]: [sum(UnscaledValue(ss_net_paid#41))]

(67) CometHashAggregate
Input [1]: [netpaid#64]
Keys: []
Functions [1]: [partial_avg(netpaid#64)]

(68) CometColumnarExchange
Input [2]: [sum#65, count#66]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(69) CometHashAggregate
Input [2]: [sum#65, count#66]
Keys: []
Functions [1]: [avg(netpaid#64)]

(70) ColumnarToRow [codegen id : 1]
Input [1]: [(0.05 * avg(netpaid))#67]


