== Physical Plan ==
* CometColumnarToRow (49)
+- CometSort (48)
   +- CometColumnarExchange (47)
      +- * Filter (46)
         +- * HashAggregate (45)
            +- * CometColumnarToRow (44)
               +- CometColumnarExchange (43)
                  +- * HashAggregate (42)
                     +- * HashAggregate (41)
                        +- * CometColumnarToRow (40)
                           +- CometColumnarExchange (39)
                              +- * HashAggregate (38)
                                 +- * Project (37)
                                    +- * BroadcastHashJoin Inner BuildRight (36)
                                       :- * Project (31)
                                       :  +- * BroadcastHashJoin Inner BuildRight (30)
                                       :     :- * Project (25)
                                       :     :  +- * BroadcastHashJoin Inner BuildRight (24)
                                       :     :     :- * CometColumnarToRow (19)
                                       :     :     :  +- CometProject (18)
                                       :     :     :     +- CometBroadcastHashJoin (17)
                                       :     :     :        :- CometProject (12)
                                       :     :     :        :  +- CometSortMergeJoin (11)
                                       :     :     :        :     :- CometSort (5)
                                       :     :     :        :     :  +- CometExchange (4)
                                       :     :     :        :     :     +- CometProject (3)
                                       :     :     :        :     :        +- CometFilter (2)
                                       :     :     :        :     :           +- CometScan parquet spark_catalog.default.store_sales (1)
                                       :     :     :        :     +- CometSort (10)
                                       :     :     :        :        +- CometExchange (9)
                                       :     :     :        :           +- CometProject (8)
                                       :     :     :        :              +- CometFilter (7)
                                       :     :     :        :                 +- CometScan parquet spark_catalog.default.store_returns (6)
                                       :     :     :        +- CometBroadcastExchange (16)
                                       :     :     :           +- CometProject (15)
                                       :     :     :              +- CometFilter (14)
                                       :     :     :                 +- CometScan parquet spark_catalog.default.store (13)
                                       :     :     +- BroadcastExchange (23)
                                       :     :        +- * Filter (22)
                                       :     :           +- * CometColumnarToRow (21)
                                       :     :              +- CometScan parquet spark_catalog.default.item (20)
                                       :     +- BroadcastExchange (29)
                                       :        +- * CometColumnarToRow (28)
                                       :           +- CometFilter (27)
                                       :              +- CometScan parquet spark_catalog.default.customer (26)
                                       +- BroadcastExchange (35)
                                          +- * CometColumnarToRow (34)
                                             +- CometFilter (33)
                                                +- CometScan parquet spark_catalog.default.customer_address (32)


(1) CometScan parquet spark_catalog.default.store_sales
Output [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_sales]
PushedFilters: [IsNotNull(ss_ticket_number), IsNotNull(ss_item_sk), IsNotNull(ss_store_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_net_paid:decimal(7,2)>

(2) CometFilter
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Condition : (((isnotnull(ss_ticket_number#4) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_customer_sk#2))

(3) CometProject
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, ss_sold_date_sk#6]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]

(4) CometExchange
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: hashpartitioning(ss_ticket_number#4, ss_item_sk#1, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(5) CometSort
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5], [ss_ticket_number#4 ASC NULLS FIRST, ss_item_sk#1 ASC NULLS FIRST]

(6) CometScan parquet spark_catalog.default.store_returns
Output [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_ticket_number), IsNotNull(sr_item_sk)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int>

(7) CometFilter
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Condition : (isnotnull(sr_ticket_number#8) AND isnotnull(sr_item_sk#7))

(8) CometProject
Input [3]: [sr_item_sk#7, sr_ticket_number#8, sr_returned_date_sk#9]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_item_sk#7, sr_ticket_number#8]

(9) CometExchange
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: hashpartitioning(sr_ticket_number#8, sr_item_sk#7, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(10) CometSort
Input [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [sr_item_sk#7, sr_ticket_number#8], [sr_ticket_number#8 ASC NULLS FIRST, sr_item_sk#7 ASC NULLS FIRST]

(11) CometSortMergeJoin
Left output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5]
Right output [2]: [sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_ticket_number#4, ss_item_sk#1], [sr_ticket_number#8, sr_item_sk#7], Inner

(12) CometProject
Input [7]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ticket_number#4, ss_net_paid#5, sr_item_sk#7, sr_ticket_number#8]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5], [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]

(13) CometScan parquet spark_catalog.default.store
Output [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_market_id), EqualTo(s_market_id,8), IsNotNull(s_store_sk), IsNotNull(s_zip)]
ReadSchema: struct<s_store_sk:int,s_store_name:string,s_market_id:int,s_state:string,s_zip:string>

(14) CometFilter
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Condition : (((isnotnull(s_market_id#12) AND (s_market_id#12 = 8)) AND isnotnull(s_store_sk#10)) AND isnotnull(s_zip#14))

(15) CometProject
Input [5]: [s_store_sk#10, s_store_name#11, s_market_id#12, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14], [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(16) CometBroadcastExchange
Input [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]

(17) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5]
Right output [4]: [s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_store_sk#3], [s_store_sk#10], Inner, BuildRight

(18) CometProject
Input [8]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_net_paid#5, s_store_sk#10, s_store_name#11, s_state#13, s_zip#14]
Arguments: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14], [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]

(19) CometColumnarToRow [codegen id : 4]
Input [6]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14]

(20) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_color), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(21) CometColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(22) Filter [codegen id : 1]
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Condition : ((isnotnull(i_color#18) AND (rpad(i_color#18, 20,  ) = pale                )) AND isnotnull(i_item_sk#15))

(23) BroadcastExchange
Input [6]: [i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#15]
Join type: Inner
Join condition: None

(25) Project [codegen id : 4]
Output [10]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]
Input [12]: [ss_item_sk#1, ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_item_sk#15, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20]

(26) CometScan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(27) CometFilter
Input [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Condition : ((isnotnull(c_customer_sk#21) AND isnotnull(c_current_addr_sk#22)) AND isnotnull(c_birth_country#25))

(28) CometColumnarToRow [codegen id : 2]
Input [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]

(29) BroadcastExchange
Input [5]: [c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(30) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#21]
Join type: Inner
Join condition: None

(31) Project [codegen id : 4]
Output [13]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]
Input [15]: [ss_customer_sk#2, ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_customer_sk#21, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25]

(32) CometScan parquet spark_catalog.default.customer_address
Output [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_country), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_zip:string,ca_country:string>

(33) CometFilter
Input [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Condition : ((isnotnull(ca_address_sk#26) AND isnotnull(ca_country#29)) AND isnotnull(ca_zip#28))

(34) CometColumnarToRow [codegen id : 3]
Input [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]

(35) BroadcastExchange
Input [4]: [ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]
Arguments: HashedRelationBroadcastMode(List(input[0, int, false], upper(input[3, string, false]), rpad(input[2, string, false], 10,  )),false), [plan_id=5]

(36) BroadcastHashJoin [codegen id : 4]
Left keys [3]: [c_current_addr_sk#22, c_birth_country#25, rpad(s_zip#14, 10,  )]
Right keys [3]: [ca_address_sk#26, upper(ca_country#29), rpad(ca_zip#28, 10,  )]
Join type: Inner
Join condition: None

(37) Project [codegen id : 4]
Output [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#23, c_last_name#24, ca_state#27]
Input [17]: [ss_net_paid#5, s_store_name#11, s_state#13, s_zip#14, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_current_addr_sk#22, c_first_name#23, c_last_name#24, c_birth_country#25, ca_address_sk#26, ca_state#27, ca_zip#28, ca_country#29]

(38) HashAggregate [codegen id : 4]
Input [11]: [ss_net_paid#5, s_store_name#11, s_state#13, i_current_price#16, i_size#17, i_color#18, i_units#19, i_manager_id#20, c_first_name#23, c_last_name#24, ca_state#27]
Keys [10]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum#30]
Results [11]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#31]

(39) CometColumnarExchange
Input [11]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#31]
Arguments: hashpartitioning(c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=6]

(40) CometColumnarToRow [codegen id : 5]
Input [11]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#31]

(41) HashAggregate [codegen id : 5]
Input [11]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17, sum#31]
Keys [10]: [c_last_name#24, c_first_name#23, s_store_name#11, ca_state#27, s_state#13, i_color#18, i_current_price#16, i_manager_id#20, i_units#19, i_size#17]
Functions [1]: [sum(UnscaledValue(ss_net_paid#5))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#5))#32]
Results [4]: [c_last_name#24, c_first_name#23, s_store_name#11, MakeDecimal(sum(UnscaledValue(ss_net_paid#5))#32,17,2) AS netpaid#33]

(42) HashAggregate [codegen id : 5]
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, netpaid#33]
Keys [3]: [c_last_name#24, c_first_name#23, s_store_name#11]
Functions [1]: [partial_sum(netpaid#33)]
Aggregate Attributes [2]: [sum#34, isEmpty#35]
Results [5]: [c_last_name#24, c_first_name#23, s_store_name#11, sum#36, isEmpty#37]

(43) CometColumnarExchange
Input [5]: [c_last_name#24, c_first_name#23, s_store_name#11, sum#36, isEmpty#37]
Arguments: hashpartitioning(c_last_name#24, c_first_name#23, s_store_name#11, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=7]

(44) CometColumnarToRow [codegen id : 6]
Input [5]: [c_last_name#24, c_first_name#23, s_store_name#11, sum#36, isEmpty#37]

(45) HashAggregate [codegen id : 6]
Input [5]: [c_last_name#24, c_first_name#23, s_store_name#11, sum#36, isEmpty#37]
Keys [3]: [c_last_name#24, c_first_name#23, s_store_name#11]
Functions [1]: [sum(netpaid#33)]
Aggregate Attributes [1]: [sum(netpaid#33)#38]
Results [4]: [c_last_name#24, c_first_name#23, s_store_name#11, sum(netpaid#33)#38 AS paid#39]

(46) Filter [codegen id : 6]
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#39]
Condition : (isnotnull(paid#39) AND (cast(paid#39 as decimal(33,8)) > cast(Subquery scalar-subquery#40, [id=#41] as decimal(33,8))))

(47) CometColumnarExchange
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#39]
Arguments: rangepartitioning(c_last_name#24 ASC NULLS FIRST, c_first_name#23 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=8]

(48) CometSort
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#39]
Arguments: [c_last_name#24, c_first_name#23, s_store_name#11, paid#39], [c_last_name#24 ASC NULLS FIRST, c_first_name#23 ASC NULLS FIRST, s_store_name#11 ASC NULLS FIRST]

(49) CometColumnarToRow [codegen id : 7]
Input [4]: [c_last_name#24, c_first_name#23, s_store_name#11, paid#39]

===== Subqueries =====

Subquery:1 Hosting operator id = 46 Hosting Expression = Subquery scalar-subquery#40, [id=#41]
* HashAggregate (80)
+- * CometColumnarToRow (79)
   +- CometColumnarExchange (78)
      +- * HashAggregate (77)
         +- * HashAggregate (76)
            +- * CometColumnarToRow (75)
               +- CometColumnarExchange (74)
                  +- * HashAggregate (73)
                     +- * Project (72)
                        +- * BroadcastHashJoin Inner BuildRight (71)
                           :- * CometColumnarToRow (69)
                           :  +- CometProject (68)
                           :     +- CometBroadcastHashJoin (67)
                           :        :- CometProject (63)
                           :        :  +- CometBroadcastHashJoin (62)
                           :        :     :- CometProject (58)
                           :        :     :  +- CometBroadcastHashJoin (57)
                           :        :     :     :- CometProject (55)
                           :        :     :     :  +- CometSortMergeJoin (54)
                           :        :     :     :     :- CometSort (51)
                           :        :     :     :     :  +- ReusedExchange (50)
                           :        :     :     :     +- CometSort (53)
                           :        :     :     :        +- ReusedExchange (52)
                           :        :     :     +- ReusedExchange (56)
                           :        :     +- CometBroadcastExchange (61)
                           :        :        +- CometFilter (60)
                           :        :           +- CometScan parquet spark_catalog.default.item (59)
                           :        +- CometBroadcastExchange (66)
                           :           +- CometFilter (65)
                           :              +- CometScan parquet spark_catalog.default.customer (64)
                           +- ReusedExchange (70)


(50) ReusedExchange [Reuses operator id: 4]
Output [5]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46]

(51) CometSort
Input [5]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46]
Arguments: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46], [ss_ticket_number#45 ASC NULLS FIRST, ss_item_sk#42 ASC NULLS FIRST]

(52) ReusedExchange [Reuses operator id: 9]
Output [2]: [sr_item_sk#47, sr_ticket_number#48]

(53) CometSort
Input [2]: [sr_item_sk#47, sr_ticket_number#48]
Arguments: [sr_item_sk#47, sr_ticket_number#48], [sr_ticket_number#48 ASC NULLS FIRST, sr_item_sk#47 ASC NULLS FIRST]

(54) CometSortMergeJoin
Left output [5]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46]
Right output [2]: [sr_item_sk#47, sr_ticket_number#48]
Arguments: [ss_ticket_number#45, ss_item_sk#42], [sr_ticket_number#48, sr_item_sk#47], Inner

(55) CometProject
Input [7]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_ticket_number#45, ss_net_paid#46, sr_item_sk#47, sr_ticket_number#48]
Arguments: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_net_paid#46], [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_net_paid#46]

(56) ReusedExchange [Reuses operator id: 16]
Output [4]: [s_store_sk#49, s_store_name#50, s_state#51, s_zip#52]

(57) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_net_paid#46]
Right output [4]: [s_store_sk#49, s_store_name#50, s_state#51, s_zip#52]
Arguments: [ss_store_sk#44], [s_store_sk#49], Inner, BuildRight

(58) CometProject
Input [8]: [ss_item_sk#42, ss_customer_sk#43, ss_store_sk#44, ss_net_paid#46, s_store_sk#49, s_store_name#50, s_state#51, s_zip#52]
Arguments: [ss_item_sk#42, ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52], [ss_item_sk#42, ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52]

(59) CometScan parquet spark_catalog.default.item
Output [6]: [i_item_sk#53, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2),i_size:string,i_color:string,i_units:string,i_manager_id:int>

(60) CometFilter
Input [6]: [i_item_sk#53, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]
Condition : isnotnull(i_item_sk#53)

(61) CometBroadcastExchange
Input [6]: [i_item_sk#53, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]
Arguments: [i_item_sk#53, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]

(62) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#42, ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52]
Right output [6]: [i_item_sk#53, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]
Arguments: [ss_item_sk#42], [i_item_sk#53], Inner, BuildRight

(63) CometProject
Input [12]: [ss_item_sk#42, ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_item_sk#53, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]
Arguments: [ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58], [ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]

(64) CometScan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#59, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk), IsNotNull(c_birth_country)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int,c_first_name:string,c_last_name:string,c_birth_country:string>

(65) CometFilter
Input [5]: [c_customer_sk#59, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]
Condition : ((isnotnull(c_customer_sk#59) AND isnotnull(c_current_addr_sk#60)) AND isnotnull(c_birth_country#63))

(66) CometBroadcastExchange
Input [5]: [c_customer_sk#59, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]
Arguments: [c_customer_sk#59, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]

(67) CometBroadcastHashJoin
Left output [10]: [ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58]
Right output [5]: [c_customer_sk#59, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]
Arguments: [ss_customer_sk#43], [c_customer_sk#59], Inner, BuildRight

(68) CometProject
Input [15]: [ss_customer_sk#43, ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58, c_customer_sk#59, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]
Arguments: [ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63], [ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]

(69) CometColumnarToRow [codegen id : 2]
Input [13]: [ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63]

(70) ReusedExchange [Reuses operator id: 35]
Output [4]: [ca_address_sk#64, ca_state#65, ca_zip#66, ca_country#67]

(71) BroadcastHashJoin [codegen id : 2]
Left keys [3]: [c_current_addr_sk#60, c_birth_country#63, rpad(s_zip#52, 10,  )]
Right keys [3]: [ca_address_sk#64, upper(ca_country#67), rpad(ca_zip#66, 10,  )]
Join type: Inner
Join condition: None

(72) Project [codegen id : 2]
Output [11]: [ss_net_paid#46, s_store_name#50, s_state#51, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58, c_first_name#61, c_last_name#62, ca_state#65]
Input [17]: [ss_net_paid#46, s_store_name#50, s_state#51, s_zip#52, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58, c_current_addr_sk#60, c_first_name#61, c_last_name#62, c_birth_country#63, ca_address_sk#64, ca_state#65, ca_zip#66, ca_country#67]

(73) HashAggregate [codegen id : 2]
Input [11]: [ss_net_paid#46, s_store_name#50, s_state#51, i_current_price#54, i_size#55, i_color#56, i_units#57, i_manager_id#58, c_first_name#61, c_last_name#62, ca_state#65]
Keys [10]: [c_last_name#62, c_first_name#61, s_store_name#50, ca_state#65, s_state#51, i_color#56, i_current_price#54, i_manager_id#58, i_units#57, i_size#55]
Functions [1]: [partial_sum(UnscaledValue(ss_net_paid#46))]
Aggregate Attributes [1]: [sum#68]
Results [11]: [c_last_name#62, c_first_name#61, s_store_name#50, ca_state#65, s_state#51, i_color#56, i_current_price#54, i_manager_id#58, i_units#57, i_size#55, sum#69]

(74) CometColumnarExchange
Input [11]: [c_last_name#62, c_first_name#61, s_store_name#50, ca_state#65, s_state#51, i_color#56, i_current_price#54, i_manager_id#58, i_units#57, i_size#55, sum#69]
Arguments: hashpartitioning(c_last_name#62, c_first_name#61, s_store_name#50, ca_state#65, s_state#51, i_color#56, i_current_price#54, i_manager_id#58, i_units#57, i_size#55, 5), ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=9]

(75) CometColumnarToRow [codegen id : 3]
Input [11]: [c_last_name#62, c_first_name#61, s_store_name#50, ca_state#65, s_state#51, i_color#56, i_current_price#54, i_manager_id#58, i_units#57, i_size#55, sum#69]

(76) HashAggregate [codegen id : 3]
Input [11]: [c_last_name#62, c_first_name#61, s_store_name#50, ca_state#65, s_state#51, i_color#56, i_current_price#54, i_manager_id#58, i_units#57, i_size#55, sum#69]
Keys [10]: [c_last_name#62, c_first_name#61, s_store_name#50, ca_state#65, s_state#51, i_color#56, i_current_price#54, i_manager_id#58, i_units#57, i_size#55]
Functions [1]: [sum(UnscaledValue(ss_net_paid#46))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_paid#46))#32]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_paid#46))#32,17,2) AS netpaid#70]

(77) HashAggregate [codegen id : 3]
Input [1]: [netpaid#70]
Keys: []
Functions [1]: [partial_avg(netpaid#70)]
Aggregate Attributes [2]: [sum#71, count#72]
Results [2]: [sum#73, count#74]

(78) CometColumnarExchange
Input [2]: [sum#73, count#74]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometColumnarShuffle, [plan_id=10]

(79) CometColumnarToRow [codegen id : 4]
Input [2]: [sum#73, count#74]

(80) HashAggregate [codegen id : 4]
Input [2]: [sum#73, count#74]
Keys: []
Functions [1]: [avg(netpaid#70)]
Aggregate Attributes [1]: [avg(netpaid#70)#75]
Results [1]: [(0.05 * avg(netpaid#70)#75) AS (0.05 * avg(netpaid))#76]


