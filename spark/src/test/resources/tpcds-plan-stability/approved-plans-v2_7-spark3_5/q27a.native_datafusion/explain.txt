== Physical Plan ==
* CometColumnarToRow (71)
+- CometTakeOrderedAndProject (70)
   +- CometUnion (69)
      :- CometHashAggregate (29)
      :  +- CometExchange (28)
      :     +- CometHashAggregate (27)
      :        +- CometProject (26)
      :           +- CometBroadcastHashJoin (25)
      :              :- CometProject (20)
      :              :  +- CometBroadcastHashJoin (19)
      :              :     :- CometProject (14)
      :              :     :  +- CometBroadcastHashJoin (13)
      :              :     :     :- CometProject (8)
      :              :     :     :  +- CometBroadcastHashJoin (7)
      :              :     :     :     :- CometFilter (2)
      :              :     :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (1)
      :              :     :     :     +- CometBroadcastExchange (6)
      :              :     :     :        +- CometProject (5)
      :              :     :     :           +- CometFilter (4)
      :              :     :     :              +- CometNativeScan parquet spark_catalog.default.customer_demographics (3)
      :              :     :     +- CometBroadcastExchange (12)
      :              :     :        +- CometProject (11)
      :              :     :           +- CometFilter (10)
      :              :     :              +- CometNativeScan parquet spark_catalog.default.date_dim (9)
      :              :     +- CometBroadcastExchange (18)
      :              :        +- CometProject (17)
      :              :           +- CometFilter (16)
      :              :              +- CometNativeScan parquet spark_catalog.default.store (15)
      :              +- CometBroadcastExchange (24)
      :                 +- CometProject (23)
      :                    +- CometFilter (22)
      :                       +- CometNativeScan parquet spark_catalog.default.item (21)
      :- CometHashAggregate (49)
      :  +- CometExchange (48)
      :     +- CometHashAggregate (47)
      :        +- CometProject (46)
      :           +- CometBroadcastHashJoin (45)
      :              :- CometProject (43)
      :              :  +- CometBroadcastHashJoin (42)
      :              :     :- CometProject (37)
      :              :     :  +- CometBroadcastHashJoin (36)
      :              :     :     :- CometProject (34)
      :              :     :     :  +- CometBroadcastHashJoin (33)
      :              :     :     :     :- CometFilter (31)
      :              :     :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (30)
      :              :     :     :     +- ReusedExchange (32)
      :              :     :     +- ReusedExchange (35)
      :              :     +- CometBroadcastExchange (41)
      :              :        +- CometProject (40)
      :              :           +- CometFilter (39)
      :              :              +- CometNativeScan parquet spark_catalog.default.store (38)
      :              +- ReusedExchange (44)
      +- CometHashAggregate (68)
         +- CometExchange (67)
            +- CometHashAggregate (66)
               +- CometProject (65)
                  +- CometBroadcastHashJoin (64)
                     :- CometProject (60)
                     :  +- CometBroadcastHashJoin (59)
                     :     :- CometProject (57)
                     :     :  +- CometBroadcastHashJoin (56)
                     :     :     :- CometProject (54)
                     :     :     :  +- CometBroadcastHashJoin (53)
                     :     :     :     :- CometFilter (51)
                     :     :     :     :  +- CometNativeScan parquet spark_catalog.default.store_sales (50)
                     :     :     :     +- ReusedExchange (52)
                     :     :     +- ReusedExchange (55)
                     :     +- ReusedExchange (58)
                     +- CometBroadcastExchange (63)
                        +- CometFilter (62)
                           +- CometNativeScan parquet spark_catalog.default.item (61)


(1) CometNativeScan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#8)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) CometFilter
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1))

(3) CometNativeScan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(4) CometFilter
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
Condition : ((((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_gender#10, 1, true, false, true) = F) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_marital_status#11, 1, true, false, true) = W)) AND (staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, cd_education_status#12, 20, true, false, true) = Primary             )) AND isnotnull(cd_demo_sk#9))

(5) CometProject
Input [4]: [cd_demo_sk#9, cd_gender#10, cd_marital_status#11, cd_education_status#12]
Arguments: [cd_demo_sk#9], [cd_demo_sk#9]

(6) CometBroadcastExchange
Input [1]: [cd_demo_sk#9]
Arguments: [cd_demo_sk#9]

(7) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [cd_demo_sk#9]
Arguments: [ss_cdemo_sk#2], [cd_demo_sk#9], Inner, BuildRight

(8) CometProject
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#9]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#13, d_year#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#13, d_year#14]
Condition : ((isnotnull(d_year#14) AND (d_year#14 = 1998)) AND isnotnull(d_date_sk#13))

(11) CometProject
Input [2]: [d_date_sk#13, d_year#14]
Arguments: [d_date_sk#13], [d_date_sk#13]

(12) CometBroadcastExchange
Input [1]: [d_date_sk#13]
Arguments: [d_date_sk#13]

(13) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Right output [1]: [d_date_sk#13]
Arguments: [ss_sold_date_sk#8], [d_date_sk#13], Inner, BuildRight

(14) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#13]
Arguments: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7], [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]

(15) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#15, s_state#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(16) CometFilter
Input [2]: [s_store_sk#15, s_state#16]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#16, 2, true, false, true) = TN) AND isnotnull(s_store_sk#15))

(17) CometProject
Input [2]: [s_store_sk#15, s_state#16]
Arguments: [s_store_sk#15, s_state#17], [s_store_sk#15, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#16, 2, true, false, true) AS s_state#17]

(18) CometBroadcastExchange
Input [2]: [s_store_sk#15, s_state#17]
Arguments: [s_store_sk#15, s_state#17]

(19) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Right output [2]: [s_store_sk#15, s_state#17]
Arguments: [ss_store_sk#3], [s_store_sk#15], Inner, BuildRight

(20) CometProject
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#15, s_state#17]
Arguments: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17], [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17]

(21) CometNativeScan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(22) CometFilter
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : isnotnull(i_item_sk#18)

(23) CometProject
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: [i_item_sk#18, i_item_id#20], [i_item_sk#18, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, i_item_id#19, 16, true, false, true) AS i_item_id#20]

(24) CometBroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#20]
Arguments: [i_item_sk#18, i_item_id#20]

(25) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17]
Right output [2]: [i_item_sk#18, i_item_id#20]
Arguments: [ss_item_sk#1], [i_item_sk#18], Inner, BuildRight

(26) CometProject
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#17, i_item_sk#18, i_item_id#20]
Arguments: [i_item_id#21, s_state#22, agg1#23, agg2#24, agg3#25, agg4#26], [i_item_id#20 AS i_item_id#21, s_state#17 AS s_state#22, ss_quantity#4 AS agg1#23, ss_list_price#5 AS agg2#24, ss_coupon_amt#7 AS agg3#25, ss_sales_price#6 AS agg4#26]

(27) CometHashAggregate
Input [6]: [i_item_id#21, s_state#22, agg1#23, agg2#24, agg3#25, agg4#26]
Keys [2]: [i_item_id#21, s_state#22]
Functions [4]: [partial_avg(agg1#23), partial_avg(UnscaledValue(agg2#24)), partial_avg(UnscaledValue(agg3#25)), partial_avg(UnscaledValue(agg4#26))]

(28) CometExchange
Input [10]: [i_item_id#21, s_state#22, sum#27, count#28, sum#29, count#30, sum#31, count#32, sum#33, count#34]
Arguments: hashpartitioning(i_item_id#21, s_state#22, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(29) CometHashAggregate
Input [10]: [i_item_id#21, s_state#22, sum#27, count#28, sum#29, count#30, sum#31, count#32, sum#33, count#34]
Keys [2]: [i_item_id#21, s_state#22]
Functions [4]: [avg(agg1#23), avg(UnscaledValue(agg2#24)), avg(UnscaledValue(agg3#25)), avg(UnscaledValue(agg4#26))]

(30) CometNativeScan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#35, ss_cdemo_sk#36, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#42)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(31) CometFilter
Input [8]: [ss_item_sk#35, ss_cdemo_sk#36, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42]
Condition : ((isnotnull(ss_cdemo_sk#36) AND isnotnull(ss_store_sk#37)) AND isnotnull(ss_item_sk#35))

(32) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#43]

(33) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#35, ss_cdemo_sk#36, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42]
Right output [1]: [cd_demo_sk#43]
Arguments: [ss_cdemo_sk#36], [cd_demo_sk#43], Inner, BuildRight

(34) CometProject
Input [9]: [ss_item_sk#35, ss_cdemo_sk#36, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42, cd_demo_sk#43]
Arguments: [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42], [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42]

(35) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#44]

(36) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42]
Right output [1]: [d_date_sk#44]
Arguments: [ss_sold_date_sk#42], [d_date_sk#44], Inner, BuildRight

(37) CometProject
Input [8]: [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, ss_sold_date_sk#42, d_date_sk#44]
Arguments: [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41], [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41]

(38) CometNativeScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#45, s_state#46]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(39) CometFilter
Input [2]: [s_store_sk#45, s_state#46]
Condition : ((staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, s_state#46, 2, true, false, true) = TN) AND isnotnull(s_store_sk#45))

(40) CometProject
Input [2]: [s_store_sk#45, s_state#46]
Arguments: [s_store_sk#45], [s_store_sk#45]

(41) CometBroadcastExchange
Input [1]: [s_store_sk#45]
Arguments: [s_store_sk#45]

(42) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41]
Right output [1]: [s_store_sk#45]
Arguments: [ss_store_sk#37], [s_store_sk#45], Inner, BuildRight

(43) CometProject
Input [7]: [ss_item_sk#35, ss_store_sk#37, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, s_store_sk#45]
Arguments: [ss_item_sk#35, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41], [ss_item_sk#35, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41]

(44) ReusedExchange [Reuses operator id: 24]
Output [2]: [i_item_sk#47, i_item_id#20]

(45) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#35, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41]
Right output [2]: [i_item_sk#47, i_item_id#20]
Arguments: [ss_item_sk#35], [i_item_sk#47], Inner, BuildRight

(46) CometProject
Input [7]: [ss_item_sk#35, ss_quantity#38, ss_list_price#39, ss_sales_price#40, ss_coupon_amt#41, i_item_sk#47, i_item_id#20]
Arguments: [i_item_id#20, agg1#48, agg2#49, agg3#50, agg4#51], [i_item_id#20, ss_quantity#38 AS agg1#48, ss_list_price#39 AS agg2#49, ss_coupon_amt#41 AS agg3#50, ss_sales_price#40 AS agg4#51]

(47) CometHashAggregate
Input [5]: [i_item_id#20, agg1#48, agg2#49, agg3#50, agg4#51]
Keys [1]: [i_item_id#20]
Functions [4]: [partial_avg(agg1#48), partial_avg(UnscaledValue(agg2#49)), partial_avg(UnscaledValue(agg3#50)), partial_avg(UnscaledValue(agg4#51))]

(48) CometExchange
Input [9]: [i_item_id#20, sum#52, count#53, sum#54, count#55, sum#56, count#57, sum#58, count#59]
Arguments: hashpartitioning(i_item_id#20, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(49) CometHashAggregate
Input [9]: [i_item_id#20, sum#52, count#53, sum#54, count#55, sum#56, count#57, sum#58, count#59]
Keys [1]: [i_item_id#20]
Functions [4]: [avg(agg1#48), avg(UnscaledValue(agg2#49)), avg(UnscaledValue(agg3#50)), avg(UnscaledValue(agg4#51))]

(50) CometNativeScan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#60, ss_cdemo_sk#61, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#67)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(51) CometFilter
Input [8]: [ss_item_sk#60, ss_cdemo_sk#61, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67]
Condition : ((isnotnull(ss_cdemo_sk#61) AND isnotnull(ss_store_sk#62)) AND isnotnull(ss_item_sk#60))

(52) ReusedExchange [Reuses operator id: 6]
Output [1]: [cd_demo_sk#68]

(53) CometBroadcastHashJoin
Left output [8]: [ss_item_sk#60, ss_cdemo_sk#61, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67]
Right output [1]: [cd_demo_sk#68]
Arguments: [ss_cdemo_sk#61], [cd_demo_sk#68], Inner, BuildRight

(54) CometProject
Input [9]: [ss_item_sk#60, ss_cdemo_sk#61, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67, cd_demo_sk#68]
Arguments: [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67], [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67]

(55) ReusedExchange [Reuses operator id: 12]
Output [1]: [d_date_sk#69]

(56) CometBroadcastHashJoin
Left output [7]: [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67]
Right output [1]: [d_date_sk#69]
Arguments: [ss_sold_date_sk#67], [d_date_sk#69], Inner, BuildRight

(57) CometProject
Input [8]: [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, ss_sold_date_sk#67, d_date_sk#69]
Arguments: [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66], [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66]

(58) ReusedExchange [Reuses operator id: 41]
Output [1]: [s_store_sk#70]

(59) CometBroadcastHashJoin
Left output [6]: [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66]
Right output [1]: [s_store_sk#70]
Arguments: [ss_store_sk#62], [s_store_sk#70], Inner, BuildRight

(60) CometProject
Input [7]: [ss_item_sk#60, ss_store_sk#62, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, s_store_sk#70]
Arguments: [ss_item_sk#60, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66], [ss_item_sk#60, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66]

(61) CometNativeScan parquet spark_catalog.default.item
Output [1]: [i_item_sk#71]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(62) CometFilter
Input [1]: [i_item_sk#71]
Condition : isnotnull(i_item_sk#71)

(63) CometBroadcastExchange
Input [1]: [i_item_sk#71]
Arguments: [i_item_sk#71]

(64) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#60, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66]
Right output [1]: [i_item_sk#71]
Arguments: [ss_item_sk#60], [i_item_sk#71], Inner, BuildRight

(65) CometProject
Input [6]: [ss_item_sk#60, ss_quantity#63, ss_list_price#64, ss_sales_price#65, ss_coupon_amt#66, i_item_sk#71]
Arguments: [agg1#72, agg2#73, agg3#74, agg4#75], [ss_quantity#63 AS agg1#72, ss_list_price#64 AS agg2#73, ss_coupon_amt#66 AS agg3#74, ss_sales_price#65 AS agg4#75]

(66) CometHashAggregate
Input [4]: [agg1#72, agg2#73, agg3#74, agg4#75]
Keys: []
Functions [4]: [partial_avg(agg1#72), partial_avg(UnscaledValue(agg2#73)), partial_avg(UnscaledValue(agg3#74)), partial_avg(UnscaledValue(agg4#75))]

(67) CometExchange
Input [8]: [sum#76, count#77, sum#78, count#79, sum#80, count#81, sum#82, count#83]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(68) CometHashAggregate
Input [8]: [sum#76, count#77, sum#78, count#79, sum#80, count#81, sum#82, count#83]
Keys: []
Functions [4]: [avg(agg1#72), avg(UnscaledValue(agg2#73)), avg(UnscaledValue(agg3#74)), avg(UnscaledValue(agg4#75))]

(69) CometUnion
Child 0 Input [7]: [i_item_id#21, s_state#22, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]
Child 1 Input [7]: [i_item_id#20, s_state#89, g_state#90, agg1#91, agg2#92, agg3#93, agg4#94]
Child 2 Input [7]: [i_item_id#95, s_state#96, g_state#97, agg1#98, agg2#99, agg3#100, agg4#101]

(70) CometTakeOrderedAndProject
Input [7]: [i_item_id#21, s_state#22, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[i_item_id#21 ASC NULLS FIRST,s_state#22 ASC NULLS FIRST], output=[i_item_id#21,s_state#22,g_state#84,agg1#85,agg2#86,agg3#87,agg4#88]), [i_item_id#21, s_state#22, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88], 100, 0, [i_item_id#21 ASC NULLS FIRST, s_state#22 ASC NULLS FIRST], [i_item_id#21, s_state#22, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]

(71) CometColumnarToRow [codegen id : 1]
Input [7]: [i_item_id#21, s_state#22, g_state#84, agg1#85, agg2#86, agg3#87, agg4#88]

