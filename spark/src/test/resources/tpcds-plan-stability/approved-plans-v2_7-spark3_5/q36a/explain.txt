== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- Window (40)
      +- * Sort (39)
         +- Exchange (38)
            +- * HashAggregate (37)
               +- Exchange (36)
                  +- * HashAggregate (35)
                     +- Union (34)
                        :- * HashAggregate (23)
                        :  +- Exchange (22)
                        :     +- * ColumnarToRow (21)
                        :        +- CometHashAggregate (20)
                        :           +- CometProject (19)
                        :              +- CometBroadcastHashJoin (18)
                        :                 :- CometProject (13)
                        :                 :  +- CometBroadcastHashJoin (12)
                        :                 :     :- CometProject (8)
                        :                 :     :  +- CometBroadcastHashJoin (7)
                        :                 :     :     :- CometFilter (2)
                        :                 :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                        :                 :     :     +- CometBroadcastExchange (6)
                        :                 :     :        +- CometProject (5)
                        :                 :     :           +- CometFilter (4)
                        :                 :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
                        :                 :     +- CometBroadcastExchange (11)
                        :                 :        +- CometFilter (10)
                        :                 :           +- CometScan parquet spark_catalog.default.item (9)
                        :                 +- CometBroadcastExchange (17)
                        :                    +- CometProject (16)
                        :                       +- CometFilter (15)
                        :                          +- CometScan parquet spark_catalog.default.store (14)
                        :- * HashAggregate (28)
                        :  +- Exchange (27)
                        :     +- * HashAggregate (26)
                        :        +- * HashAggregate (25)
                        :           +- ReusedExchange (24)
                        +- * HashAggregate (33)
                           +- Exchange (32)
                              +- * HashAggregate (31)
                                 +- * HashAggregate (30)
                                    +- ReusedExchange (29)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(5) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: [d_date_sk#7]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#7]
Arguments: [ss_sold_date_sk#5], [d_date_sk#7], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#7]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#9, i_class#10, i_category#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Condition : isnotnull(i_item_sk#9)

(11) CometBroadcastExchange
Input [3]: [i_item_sk#9, i_class#10, i_category#11]
Arguments: [i_item_sk#9, i_class#10, i_category#11]

(12) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#9, i_class#10, i_category#11]
Arguments: [ss_item_sk#1], [i_item_sk#9], Inner, BuildRight

(13) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#9, i_class#10, i_category#11]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11]

(14) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#12, s_state#13]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) CometFilter
Input [2]: [s_store_sk#12, s_state#13]
Condition : ((isnotnull(s_state#13) AND (s_state#13 = TN)) AND isnotnull(s_store_sk#12))

(16) CometProject
Input [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12], [s_store_sk#12]

(17) CometBroadcastExchange
Input [1]: [s_store_sk#12]
Arguments: [s_store_sk#12]

(18) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11]
Right output [1]: [s_store_sk#12]
Arguments: [ss_store_sk#2], [s_store_sk#12], Inner, BuildRight

(19) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11, s_store_sk#12]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11], [ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11]

(20) CometHashAggregate
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#10, i_category#11]
Keys [2]: [i_category#11, i_class#10]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]

(21) ColumnarToRow [codegen id : 1]
Input [4]: [i_category#11, i_class#10, sum#14, sum#15]

(22) Exchange
Input [4]: [i_category#11, i_class#10, sum#14, sum#15]
Arguments: hashpartitioning(i_category#11, i_class#10, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(23) HashAggregate [codegen id : 2]
Input [4]: [i_category#11, i_class#10, sum#14, sum#15]
Keys [2]: [i_category#11, i_class#10]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#16, sum(UnscaledValue(ss_ext_sales_price#3))#17]
Results [6]: [cast((MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#16,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#17,17,2)) as decimal(38,20)) AS gross_margin#18, i_category#11, i_class#10, 0 AS t_category#19, 0 AS t_class#20, 0 AS lochierarchy#21]

(24) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#22, i_class#23, sum#24, sum#25]

(25) HashAggregate [codegen id : 4]
Input [4]: [i_category#22, i_class#23, sum#24, sum#25]
Keys [2]: [i_category#22, i_class#23]
Functions [2]: [sum(UnscaledValue(ss_net_profit#26)), sum(UnscaledValue(ss_ext_sales_price#27))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#26))#28, sum(UnscaledValue(ss_ext_sales_price#27))#29]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#26))#28,17,2) AS ss_net_profit#30, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#27))#29,17,2) AS ss_ext_sales_price#31, i_category#22]

(26) HashAggregate [codegen id : 4]
Input [3]: [ss_net_profit#30, ss_ext_sales_price#31, i_category#22]
Keys [1]: [i_category#22]
Functions [2]: [partial_sum(ss_net_profit#30), partial_sum(ss_ext_sales_price#31)]
Aggregate Attributes [4]: [sum#32, isEmpty#33, sum#34, isEmpty#35]
Results [5]: [i_category#22, sum#36, isEmpty#37, sum#38, isEmpty#39]

(27) Exchange
Input [5]: [i_category#22, sum#36, isEmpty#37, sum#38, isEmpty#39]
Arguments: hashpartitioning(i_category#22, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(28) HashAggregate [codegen id : 5]
Input [5]: [i_category#22, sum#36, isEmpty#37, sum#38, isEmpty#39]
Keys [1]: [i_category#22]
Functions [2]: [sum(ss_net_profit#30), sum(ss_ext_sales_price#31)]
Aggregate Attributes [2]: [sum(ss_net_profit#30)#40, sum(ss_ext_sales_price#31)#41]
Results [6]: [cast((sum(ss_net_profit#30)#40 / sum(ss_ext_sales_price#31)#41) as decimal(38,20)) AS gross_margin#42, i_category#22, null AS i_class#43, 0 AS t_category#44, 1 AS t_class#45, 1 AS lochierarchy#46]

(29) ReusedExchange [Reuses operator id: 22]
Output [4]: [i_category#47, i_class#48, sum#49, sum#50]

(30) HashAggregate [codegen id : 7]
Input [4]: [i_category#47, i_class#48, sum#49, sum#50]
Keys [2]: [i_category#47, i_class#48]
Functions [2]: [sum(UnscaledValue(ss_net_profit#51)), sum(UnscaledValue(ss_ext_sales_price#52))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#51))#28, sum(UnscaledValue(ss_ext_sales_price#52))#29]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#51))#28,17,2) AS ss_net_profit#53, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#52))#29,17,2) AS ss_ext_sales_price#54]

(31) HashAggregate [codegen id : 7]
Input [2]: [ss_net_profit#53, ss_ext_sales_price#54]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#53), partial_sum(ss_ext_sales_price#54)]
Aggregate Attributes [4]: [sum#55, isEmpty#56, sum#57, isEmpty#58]
Results [4]: [sum#59, isEmpty#60, sum#61, isEmpty#62]

(32) Exchange
Input [4]: [sum#59, isEmpty#60, sum#61, isEmpty#62]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=3]

(33) HashAggregate [codegen id : 8]
Input [4]: [sum#59, isEmpty#60, sum#61, isEmpty#62]
Keys: []
Functions [2]: [sum(ss_net_profit#53), sum(ss_ext_sales_price#54)]
Aggregate Attributes [2]: [sum(ss_net_profit#53)#63, sum(ss_ext_sales_price#54)#64]
Results [6]: [cast((sum(ss_net_profit#53)#63 / sum(ss_ext_sales_price#54)#64) as decimal(38,20)) AS gross_margin#65, null AS i_category#66, null AS i_class#67, 1 AS t_category#68, 1 AS t_class#69, 2 AS lochierarchy#70]

(34) Union

(35) HashAggregate [codegen id : 9]
Input [6]: [gross_margin#18, i_category#11, i_class#10, t_category#19, t_class#20, lochierarchy#21]
Keys [6]: [gross_margin#18, i_category#11, i_class#10, t_category#19, t_class#20, lochierarchy#21]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#18, i_category#11, i_class#10, t_category#19, t_class#20, lochierarchy#21]

(36) Exchange
Input [6]: [gross_margin#18, i_category#11, i_class#10, t_category#19, t_class#20, lochierarchy#21]
Arguments: hashpartitioning(gross_margin#18, i_category#11, i_class#10, t_category#19, t_class#20, lochierarchy#21, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(37) HashAggregate [codegen id : 10]
Input [6]: [gross_margin#18, i_category#11, i_class#10, t_category#19, t_class#20, lochierarchy#21]
Keys [6]: [gross_margin#18, i_category#11, i_class#10, t_category#19, t_class#20, lochierarchy#21]
Functions: []
Aggregate Attributes: []
Results [5]: [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, CASE WHEN (t_class#20 = 0) THEN i_category#11 END AS _w0#71]

(38) Exchange
Input [5]: [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, _w0#71]
Arguments: hashpartitioning(lochierarchy#21, _w0#71, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(39) Sort [codegen id : 11]
Input [5]: [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, _w0#71]
Arguments: [lochierarchy#21 ASC NULLS FIRST, _w0#71 ASC NULLS FIRST, gross_margin#18 ASC NULLS FIRST], false, 0

(40) Window
Input [5]: [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, _w0#71]
Arguments: [rank(gross_margin#18) windowspecdefinition(lochierarchy#21, _w0#71, gross_margin#18 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#72], [lochierarchy#21, _w0#71], [gross_margin#18 ASC NULLS FIRST]

(41) Project [codegen id : 12]
Output [5]: [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, rank_within_parent#72]
Input [6]: [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, _w0#71, rank_within_parent#72]

(42) TakeOrderedAndProject
Input [5]: [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, rank_within_parent#72]
Arguments: 100, [lochierarchy#21 DESC NULLS LAST, CASE WHEN (lochierarchy#21 = 0) THEN i_category#11 END ASC NULLS FIRST, rank_within_parent#72 ASC NULLS FIRST], [gross_margin#18, i_category#11, i_class#10, lochierarchy#21, rank_within_parent#72]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (47)
+- * ColumnarToRow (46)
   +- CometProject (45)
      +- CometFilter (44)
         +- CometScan parquet spark_catalog.default.date_dim (43)


(43) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#7, d_year#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(44) CometFilter
Input [2]: [d_date_sk#7, d_year#8]
Condition : ((isnotnull(d_year#8) AND (d_year#8 = 2001)) AND isnotnull(d_date_sk#7))

(45) CometProject
Input [2]: [d_date_sk#7, d_year#8]
Arguments: [d_date_sk#7], [d_date_sk#7]

(46) ColumnarToRow [codegen id : 1]
Input [1]: [d_date_sk#7]

(47) BroadcastExchange
Input [1]: [d_date_sk#7]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


