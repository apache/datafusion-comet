== Physical Plan ==
TakeOrderedAndProject (58)
+- * Project (57)
   +- Window (56)
      +- * Sort (55)
         +- Exchange (54)
            +- * HashAggregate (53)
               +- Exchange (52)
                  +- * HashAggregate (51)
                     +- Union (50)
                        :- * HashAggregate (39)
                        :  +- Exchange (38)
                        :     +- * HashAggregate (37)
                        :        +- * Project (36)
                        :           +- * BroadcastHashJoin Inner BuildRight (35)
                        :              :- * ColumnarToRow (9)
                        :              :  +- CometProject (8)
                        :              :     +- CometBroadcastHashJoin (7)
                        :              :        :- CometFilter (2)
                        :              :        :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (1)
                        :              :        +- CometBroadcastExchange (6)
                        :              :           +- CometProject (5)
                        :              :              +- CometFilter (4)
                        :              :                 +- CometNativeScan: `spark_catalog`.`default`.`date_dim` (3)
                        :              +- BroadcastExchange (34)
                        :                 +- * BroadcastHashJoin LeftSemi BuildRight (33)
                        :                    :- * ColumnarToRow (12)
                        :                    :  +- CometFilter (11)
                        :                    :     +- CometNativeScan: `spark_catalog`.`default`.`store` (10)
                        :                    +- BroadcastExchange (32)
                        :                       +- * Project (31)
                        :                          +- * Filter (30)
                        :                             +- Window (29)
                        :                                +- WindowGroupLimit (28)
                        :                                   +- * ColumnarToRow (27)
                        :                                      +- CometSort (26)
                        :                                         +- CometHashAggregate (25)
                        :                                            +- CometExchange (24)
                        :                                               +- CometHashAggregate (23)
                        :                                                  +- CometProject (22)
                        :                                                     +- CometBroadcastHashJoin (21)
                        :                                                        :- CometProject (19)
                        :                                                        :  +- CometBroadcastHashJoin (18)
                        :                                                        :     :- CometFilter (14)
                        :                                                        :     :  +- CometNativeScan: `spark_catalog`.`default`.`store_sales` (13)
                        :                                                        :     +- CometBroadcastExchange (17)
                        :                                                        :        +- CometFilter (16)
                        :                                                        :           +- CometNativeScan: `spark_catalog`.`default`.`store` (15)
                        :                                                        +- ReusedExchange (20)
                        :- * HashAggregate (44)
                        :  +- Exchange (43)
                        :     +- * HashAggregate (42)
                        :        +- * HashAggregate (41)
                        :           +- ReusedExchange (40)
                        +- * HashAggregate (49)
                           +- Exchange (48)
                              +- * HashAggregate (47)
                                 +- * HashAggregate (46)
                                    +- ReusedExchange (45)


(1) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Arguments: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]

(2) CometFilter
Input [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Condition : isnotnull(ss_store_sk#1)

(3) CometNativeScan: `spark_catalog`.`default`.`date_dim`
Output [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4, d_month_seq#5]

(4) CometFilter
Input [2]: [d_date_sk#4, d_month_seq#5]
Condition : (((isnotnull(d_month_seq#5) AND (d_month_seq#5 >= 1212)) AND (d_month_seq#5 <= 1223)) AND isnotnull(d_date_sk#4))

(5) CometProject
Input [2]: [d_date_sk#4, d_month_seq#5]
Arguments: [d_date_sk#4], [d_date_sk#4]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#4]
Arguments: [d_date_sk#4]

(7) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3]
Right output [1]: [d_date_sk#4]
Arguments: [ss_sold_date_sk#3], [d_date_sk#4], Inner, BuildRight

(8) CometProject
Input [4]: [ss_store_sk#1, ss_net_profit#2, ss_sold_date_sk#3, d_date_sk#4]
Arguments: [ss_store_sk#1, ss_net_profit#2], [ss_store_sk#1, ss_net_profit#2]

(9) ColumnarToRow [codegen id : 4]
Input [2]: [ss_store_sk#1, ss_net_profit#2]

(10) CometNativeScan: `spark_catalog`.`default`.`store`
Output [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: [s_store_sk#6, s_county#7, s_state#8]

(11) CometFilter
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Condition : isnotnull(s_store_sk#6)

(12) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#6, s_county#7, s_state#8]

(13) CometNativeScan: `spark_catalog`.`default`.`store_sales`
Output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Arguments: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]

(14) CometFilter
Input [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Condition : isnotnull(ss_store_sk#9)

(15) CometNativeScan: `spark_catalog`.`default`.`store`
Output [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12, s_state#13]

(16) CometFilter
Input [2]: [s_store_sk#12, s_state#13]
Condition : isnotnull(s_store_sk#12)

(17) CometBroadcastExchange
Input [2]: [s_store_sk#12, s_state#13]
Arguments: [s_store_sk#12, s_state#13]

(18) CometBroadcastHashJoin
Left output [3]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11]
Right output [2]: [s_store_sk#12, s_state#13]
Arguments: [ss_store_sk#9], [s_store_sk#12], Inner, BuildRight

(19) CometProject
Input [5]: [ss_store_sk#9, ss_net_profit#10, ss_sold_date_sk#11, s_store_sk#12, s_state#13]
Arguments: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13], [ss_net_profit#10, ss_sold_date_sk#11, s_state#13]

(20) ReusedExchange [Reuses operator id: 6]
Output [1]: [d_date_sk#14]

(21) CometBroadcastHashJoin
Left output [3]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13]
Right output [1]: [d_date_sk#14]
Arguments: [ss_sold_date_sk#11], [d_date_sk#14], Inner, BuildRight

(22) CometProject
Input [4]: [ss_net_profit#10, ss_sold_date_sk#11, s_state#13, d_date_sk#14]
Arguments: [ss_net_profit#10, s_state#13], [ss_net_profit#10, s_state#13]

(23) CometHashAggregate
Input [2]: [ss_net_profit#10, s_state#13]
Keys [1]: [s_state#13]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#10))]

(24) CometExchange
Input [2]: [s_state#13, sum#15]
Arguments: hashpartitioning(s_state#13, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(25) CometHashAggregate
Input [2]: [s_state#13, sum#15]
Keys [1]: [s_state#13]
Functions [1]: [sum(UnscaledValue(ss_net_profit#10))]

(26) CometSort
Input [3]: [s_state#13, _w0#16, s_state#13]
Arguments: [s_state#13, _w0#16, s_state#13], [s_state#13 ASC NULLS FIRST, _w0#16 DESC NULLS LAST]

(27) ColumnarToRow [codegen id : 1]
Input [3]: [s_state#13, _w0#16, s_state#13]

(28) WindowGroupLimit
Input [3]: [s_state#13, _w0#16, s_state#13]
Arguments: [s_state#13], [_w0#16 DESC NULLS LAST], rank(_w0#16), 5, Final

(29) Window
Input [3]: [s_state#13, _w0#16, s_state#13]
Arguments: [rank(_w0#16) windowspecdefinition(s_state#13, _w0#16 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS ranking#17], [s_state#13], [_w0#16 DESC NULLS LAST]

(30) Filter [codegen id : 2]
Input [4]: [s_state#13, _w0#16, s_state#13, ranking#17]
Condition : (ranking#17 <= 5)

(31) Project [codegen id : 2]
Output [1]: [s_state#13]
Input [4]: [s_state#13, _w0#16, s_state#13, ranking#17]

(32) BroadcastExchange
Input [1]: [s_state#13]
Arguments: HashedRelationBroadcastMode(List(input[0, string, true]),false), [plan_id=2]

(33) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [s_state#8]
Right keys [1]: [s_state#13]
Join type: LeftSemi
Join condition: None

(34) BroadcastExchange
Input [3]: [s_store_sk#6, s_county#7, s_state#8]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(35) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#1]
Right keys [1]: [s_store_sk#6]
Join type: Inner
Join condition: None

(36) Project [codegen id : 4]
Output [3]: [ss_net_profit#2, s_county#7, s_state#8]
Input [5]: [ss_store_sk#1, ss_net_profit#2, s_store_sk#6, s_county#7, s_state#8]

(37) HashAggregate [codegen id : 4]
Input [3]: [ss_net_profit#2, s_county#7, s_state#8]
Keys [2]: [s_state#8, s_county#7]
Functions [1]: [partial_sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum#18]
Results [3]: [s_state#8, s_county#7, sum#19]

(38) Exchange
Input [3]: [s_state#8, s_county#7, sum#19]
Arguments: hashpartitioning(s_state#8, s_county#7, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(39) HashAggregate [codegen id : 5]
Input [3]: [s_state#8, s_county#7, sum#19]
Keys [2]: [s_state#8, s_county#7]
Functions [1]: [sum(UnscaledValue(ss_net_profit#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#2))#20]
Results [6]: [cast(MakeDecimal(sum(UnscaledValue(ss_net_profit#2))#20,17,2) as decimal(27,2)) AS total_sum#21, s_state#8, s_county#7, 0 AS g_state#22, 0 AS g_county#23, 0 AS lochierarchy#24]

(40) ReusedExchange [Reuses operator id: 38]
Output [3]: [s_state#25, s_county#26, sum#27]

(41) HashAggregate [codegen id : 10]
Input [3]: [s_state#25, s_county#26, sum#27]
Keys [2]: [s_state#25, s_county#26]
Functions [1]: [sum(UnscaledValue(ss_net_profit#28))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#28))#20]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#28))#20,17,2) AS total_sum#29, s_state#25]

(42) HashAggregate [codegen id : 10]
Input [2]: [total_sum#29, s_state#25]
Keys [1]: [s_state#25]
Functions [1]: [partial_sum(total_sum#29)]
Aggregate Attributes [2]: [sum#30, isEmpty#31]
Results [3]: [s_state#25, sum#32, isEmpty#33]

(43) Exchange
Input [3]: [s_state#25, sum#32, isEmpty#33]
Arguments: hashpartitioning(s_state#25, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(44) HashAggregate [codegen id : 11]
Input [3]: [s_state#25, sum#32, isEmpty#33]
Keys [1]: [s_state#25]
Functions [1]: [sum(total_sum#29)]
Aggregate Attributes [1]: [sum(total_sum#29)#34]
Results [6]: [sum(total_sum#29)#34 AS total_sum#35, s_state#25, null AS s_county#36, 0 AS g_state#37, 1 AS g_county#38, 1 AS lochierarchy#39]

(45) ReusedExchange [Reuses operator id: 38]
Output [3]: [s_state#40, s_county#41, sum#42]

(46) HashAggregate [codegen id : 16]
Input [3]: [s_state#40, s_county#41, sum#42]
Keys [2]: [s_state#40, s_county#41]
Functions [1]: [sum(UnscaledValue(ss_net_profit#43))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_net_profit#43))#20]
Results [1]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#43))#20,17,2) AS total_sum#44]

(47) HashAggregate [codegen id : 16]
Input [1]: [total_sum#44]
Keys: []
Functions [1]: [partial_sum(total_sum#44)]
Aggregate Attributes [2]: [sum#45, isEmpty#46]
Results [2]: [sum#47, isEmpty#48]

(48) Exchange
Input [2]: [sum#47, isEmpty#48]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(49) HashAggregate [codegen id : 17]
Input [2]: [sum#47, isEmpty#48]
Keys: []
Functions [1]: [sum(total_sum#44)]
Aggregate Attributes [1]: [sum(total_sum#44)#49]
Results [6]: [sum(total_sum#44)#49 AS total_sum#50, null AS s_state#51, null AS s_county#52, 1 AS g_state#53, 1 AS g_county#54, 2 AS lochierarchy#55]

(50) Union

(51) HashAggregate [codegen id : 18]
Input [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Keys [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Functions: []
Aggregate Attributes: []
Results [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]

(52) Exchange
Input [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Arguments: hashpartitioning(total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(53) HashAggregate [codegen id : 19]
Input [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Keys [6]: [total_sum#21, s_state#8, s_county#7, g_state#22, g_county#23, lochierarchy#24]
Functions: []
Aggregate Attributes: []
Results [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, CASE WHEN (g_county#23 = 0) THEN s_state#8 END AS _w0#56]

(54) Exchange
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#56]
Arguments: hashpartitioning(lochierarchy#24, _w0#56, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(55) Sort [codegen id : 20]
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#56]
Arguments: [lochierarchy#24 ASC NULLS FIRST, _w0#56 ASC NULLS FIRST, total_sum#21 DESC NULLS LAST], false, 0

(56) Window
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#56]
Arguments: [rank(total_sum#21) windowspecdefinition(lochierarchy#24, _w0#56, total_sum#21 DESC NULLS LAST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#57], [lochierarchy#24, _w0#56], [total_sum#21 DESC NULLS LAST]

(57) Project [codegen id : 21]
Output [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, rank_within_parent#57]
Input [6]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, _w0#56, rank_within_parent#57]

(58) TakeOrderedAndProject
Input [5]: [total_sum#21, s_state#8, s_county#7, lochierarchy#24, rank_within_parent#57]
Arguments: 100, [lochierarchy#24 DESC NULLS LAST, CASE WHEN (lochierarchy#24 = 0) THEN s_state#8 END ASC NULLS FIRST, rank_within_parent#57 ASC NULLS FIRST], [total_sum#21, s_state#8, s_county#7, lochierarchy#24, rank_within_parent#57]

