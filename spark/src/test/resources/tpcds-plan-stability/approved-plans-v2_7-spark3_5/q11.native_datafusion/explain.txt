== Physical Plan ==
* CometColumnarToRow (68)
+- CometTakeOrderedAndProject (67)
   +- CometProject (66)
      +- CometBroadcastHashJoin (65)
         :- CometProject (51)
         :  +- CometBroadcastHashJoin (50)
         :     :- CometBroadcastHashJoin (33)
         :     :  :- CometFilter (17)
         :     :  :  +- CometHashAggregate (16)
         :     :  :     +- CometExchange (15)
         :     :  :        +- CometHashAggregate (14)
         :     :  :           +- CometProject (13)
         :     :  :              +- CometBroadcastHashJoin (12)
         :     :  :                 :- CometProject (8)
         :     :  :                 :  +- CometBroadcastHashJoin (7)
         :     :  :                 :     :- CometProject (3)
         :     :  :                 :     :  +- CometFilter (2)
         :     :  :                 :     :     +- CometNativeScan parquet spark_catalog.default.customer (1)
         :     :  :                 :     +- CometBroadcastExchange (6)
         :     :  :                 :        +- CometFilter (5)
         :     :  :                 :           +- CometNativeScan parquet spark_catalog.default.store_sales (4)
         :     :  :                 +- CometBroadcastExchange (11)
         :     :  :                    +- CometFilter (10)
         :     :  :                       +- CometNativeScan parquet spark_catalog.default.date_dim (9)
         :     :  +- CometBroadcastExchange (32)
         :     :     +- CometHashAggregate (31)
         :     :        +- CometExchange (30)
         :     :           +- CometHashAggregate (29)
         :     :              +- CometProject (28)
         :     :                 +- CometBroadcastHashJoin (27)
         :     :                    :- CometProject (23)
         :     :                    :  +- CometBroadcastHashJoin (22)
         :     :                    :     :- CometProject (20)
         :     :                    :     :  +- CometFilter (19)
         :     :                    :     :     +- CometNativeScan parquet spark_catalog.default.customer (18)
         :     :                    :     +- ReusedExchange (21)
         :     :                    +- CometBroadcastExchange (26)
         :     :                       +- CometFilter (25)
         :     :                          +- CometNativeScan parquet spark_catalog.default.date_dim (24)
         :     +- CometBroadcastExchange (49)
         :        +- CometFilter (48)
         :           +- CometHashAggregate (47)
         :              +- CometExchange (46)
         :                 +- CometHashAggregate (45)
         :                    +- CometProject (44)
         :                       +- CometBroadcastHashJoin (43)
         :                          :- CometProject (41)
         :                          :  +- CometBroadcastHashJoin (40)
         :                          :     :- CometProject (36)
         :                          :     :  +- CometFilter (35)
         :                          :     :     +- CometNativeScan parquet spark_catalog.default.customer (34)
         :                          :     +- CometBroadcastExchange (39)
         :                          :        +- CometFilter (38)
         :                          :           +- CometNativeScan parquet spark_catalog.default.web_sales (37)
         :                          +- ReusedExchange (42)
         +- CometBroadcastExchange (64)
            +- CometHashAggregate (63)
               +- CometExchange (62)
                  +- CometHashAggregate (61)
                     +- CometProject (60)
                        +- CometBroadcastHashJoin (59)
                           :- CometProject (57)
                           :  +- CometBroadcastHashJoin (56)
                           :     :- CometProject (54)
                           :     :  +- CometFilter (53)
                           :     :     +- CometNativeScan parquet spark_catalog.default.customer (52)
                           :     +- ReusedExchange (55)
                           +- ReusedExchange (58)


(1) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(2) CometFilter
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Condition : (isnotnull(c_customer_sk#1) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#2, 16, true, false, true)))

(3) CometProject
Input [8]: [c_customer_sk#1, c_customer_id#2, c_first_name#3, c_last_name#4, c_preferred_cust_flag#5, c_birth_country#6, c_login#7, c_email_address#8]
Arguments: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14], [c_customer_sk#1, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#2, 16, true, false, true) AS c_customer_id#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#3, 20, true, false, true) AS c_first_name#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#4, 30, true, false, true) AS c_last_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_preferred_cust_flag#5, 1, true, false, true) AS c_preferred_cust_flag#12, c_birth_country#6, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_login#7, 13, true, false, true) AS c_login#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_email_address#8, 50, true, false, true) AS c_email_address#14]

(4) CometNativeScan parquet spark_catalog.default.store_sales
Output [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ss_sold_date_sk#18)]
PushedFilters: [IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_ext_discount_amt:decimal(7,2),ss_ext_list_price:decimal(7,2)>

(5) CometFilter
Input [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Condition : isnotnull(ss_customer_sk#15)

(6) CometBroadcastExchange
Input [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Arguments: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]

(7) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14]
Right output [4]: [ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Arguments: [c_customer_sk#1], [ss_customer_sk#15], Inner, BuildRight

(8) CometProject
Input [12]: [c_customer_sk#1, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_customer_sk#15, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Arguments: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18], [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]

(9) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#19, d_year#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(10) CometFilter
Input [2]: [d_date_sk#19, d_year#20]
Condition : ((isnotnull(d_year#20) AND (d_year#20 = 2001)) AND isnotnull(d_date_sk#19))

(11) CometBroadcastExchange
Input [2]: [d_date_sk#19, d_year#20]
Arguments: [d_date_sk#19, d_year#20]

(12) CometBroadcastHashJoin
Left output [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18]
Right output [2]: [d_date_sk#19, d_year#20]
Arguments: [ss_sold_date_sk#18], [d_date_sk#19], Inner, BuildRight

(13) CometProject
Input [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, ss_sold_date_sk#18, d_date_sk#19, d_year#20]
Arguments: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, d_year#20], [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, d_year#20]

(14) CometHashAggregate
Input [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, ss_ext_discount_amt#16, ss_ext_list_price#17, d_year#20]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#17 - ss_ext_discount_amt#16)))]

(15) CometExchange
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, sum#21]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(16) CometHashAggregate
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14, sum#21]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#20, c_preferred_cust_flag#12, c_birth_country#6, c_login#13, c_email_address#14]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#17 - ss_ext_discount_amt#16)))]

(17) CometFilter
Input [2]: [customer_id#22, year_total#23]
Condition : (isnotnull(year_total#23) AND (year_total#23 > 0.00))

(18) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#24, c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(19) CometFilter
Input [8]: [c_customer_sk#24, c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31]
Condition : (isnotnull(c_customer_sk#24) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#25, 16, true, false, true)))

(20) CometProject
Input [8]: [c_customer_sk#24, c_customer_id#25, c_first_name#26, c_last_name#27, c_preferred_cust_flag#28, c_birth_country#29, c_login#30, c_email_address#31]
Arguments: [c_customer_sk#24, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14], [c_customer_sk#24, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#25, 16, true, false, true) AS c_customer_id#9, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#26, 20, true, false, true) AS c_first_name#10, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#27, 30, true, false, true) AS c_last_name#11, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_preferred_cust_flag#28, 1, true, false, true) AS c_preferred_cust_flag#12, c_birth_country#29, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_login#30, 13, true, false, true) AS c_login#13, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_email_address#31, 50, true, false, true) AS c_email_address#14]

(21) ReusedExchange [Reuses operator id: 6]
Output [4]: [ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_list_price#34, ss_sold_date_sk#35]

(22) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#24, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14]
Right output [4]: [ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_list_price#34, ss_sold_date_sk#35]
Arguments: [c_customer_sk#24], [ss_customer_sk#32], Inner, BuildRight

(23) CometProject
Input [12]: [c_customer_sk#24, c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_customer_sk#32, ss_ext_discount_amt#33, ss_ext_list_price#34, ss_sold_date_sk#35]
Arguments: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_ext_discount_amt#33, ss_ext_list_price#34, ss_sold_date_sk#35], [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_ext_discount_amt#33, ss_ext_list_price#34, ss_sold_date_sk#35]

(24) CometNativeScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#36, d_year#37]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(25) CometFilter
Input [2]: [d_date_sk#36, d_year#37]
Condition : ((isnotnull(d_year#37) AND (d_year#37 = 2002)) AND isnotnull(d_date_sk#36))

(26) CometBroadcastExchange
Input [2]: [d_date_sk#36, d_year#37]
Arguments: [d_date_sk#36, d_year#37]

(27) CometBroadcastHashJoin
Left output [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_ext_discount_amt#33, ss_ext_list_price#34, ss_sold_date_sk#35]
Right output [2]: [d_date_sk#36, d_year#37]
Arguments: [ss_sold_date_sk#35], [d_date_sk#36], Inner, BuildRight

(28) CometProject
Input [12]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_ext_discount_amt#33, ss_ext_list_price#34, ss_sold_date_sk#35, d_date_sk#36, d_year#37]
Arguments: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_ext_discount_amt#33, ss_ext_list_price#34, d_year#37], [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_ext_discount_amt#33, ss_ext_list_price#34, d_year#37]

(29) CometHashAggregate
Input [10]: [c_customer_id#9, c_first_name#10, c_last_name#11, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, ss_ext_discount_amt#33, ss_ext_list_price#34, d_year#37]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#37, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14]
Functions [1]: [partial_sum(UnscaledValue((ss_ext_list_price#34 - ss_ext_discount_amt#33)))]

(30) CometExchange
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#37, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, sum#38]
Arguments: hashpartitioning(c_customer_id#9, c_first_name#10, c_last_name#11, d_year#37, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(31) CometHashAggregate
Input [9]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#37, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14, sum#38]
Keys [8]: [c_customer_id#9, c_first_name#10, c_last_name#11, d_year#37, c_preferred_cust_flag#12, c_birth_country#29, c_login#13, c_email_address#14]
Functions [1]: [sum(UnscaledValue((ss_ext_list_price#34 - ss_ext_discount_amt#33)))]

(32) CometBroadcastExchange
Input [5]: [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43]
Arguments: [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43]

(33) CometBroadcastHashJoin
Left output [2]: [customer_id#22, year_total#23]
Right output [5]: [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43]
Arguments: [customer_id#22], [customer_id#39], Inner, BuildRight

(34) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#44, c_customer_id#45, c_first_name#46, c_last_name#47, c_preferred_cust_flag#48, c_birth_country#49, c_login#50, c_email_address#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(35) CometFilter
Input [8]: [c_customer_sk#44, c_customer_id#45, c_first_name#46, c_last_name#47, c_preferred_cust_flag#48, c_birth_country#49, c_login#50, c_email_address#51]
Condition : (isnotnull(c_customer_sk#44) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#45, 16, true, false, true)))

(36) CometProject
Input [8]: [c_customer_sk#44, c_customer_id#45, c_first_name#46, c_last_name#47, c_preferred_cust_flag#48, c_birth_country#49, c_login#50, c_email_address#51]
Arguments: [c_customer_sk#44, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57], [c_customer_sk#44, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#45, 16, true, false, true) AS c_customer_id#52, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#46, 20, true, false, true) AS c_first_name#53, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#47, 30, true, false, true) AS c_last_name#54, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_preferred_cust_flag#48, 1, true, false, true) AS c_preferred_cust_flag#55, c_birth_country#49, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_login#50, 13, true, false, true) AS c_login#56, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_email_address#51, 50, true, false, true) AS c_email_address#57]

(37) CometNativeScan parquet spark_catalog.default.web_sales
Output [4]: [ws_bill_customer_sk#58, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]
Batched: true
Location: InMemoryFileIndex(0 paths)[]
PartitionFilters: [isnotnull(ws_sold_date_sk#61)]
PushedFilters: [IsNotNull(ws_bill_customer_sk)]
ReadSchema: struct<ws_bill_customer_sk:int,ws_ext_discount_amt:decimal(7,2),ws_ext_list_price:decimal(7,2)>

(38) CometFilter
Input [4]: [ws_bill_customer_sk#58, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]
Condition : isnotnull(ws_bill_customer_sk#58)

(39) CometBroadcastExchange
Input [4]: [ws_bill_customer_sk#58, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]
Arguments: [ws_bill_customer_sk#58, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]

(40) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#44, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57]
Right output [4]: [ws_bill_customer_sk#58, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]
Arguments: [c_customer_sk#44], [ws_bill_customer_sk#58], Inner, BuildRight

(41) CometProject
Input [12]: [c_customer_sk#44, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_bill_customer_sk#58, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]
Arguments: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61], [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]

(42) ReusedExchange [Reuses operator id: 11]
Output [2]: [d_date_sk#62, d_year#63]

(43) CometBroadcastHashJoin
Left output [10]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61]
Right output [2]: [d_date_sk#62, d_year#63]
Arguments: [ws_sold_date_sk#61], [d_date_sk#62], Inner, BuildRight

(44) CometProject
Input [12]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_ext_discount_amt#59, ws_ext_list_price#60, ws_sold_date_sk#61, d_date_sk#62, d_year#63]
Arguments: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_ext_discount_amt#59, ws_ext_list_price#60, d_year#63], [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_ext_discount_amt#59, ws_ext_list_price#60, d_year#63]

(45) CometHashAggregate
Input [10]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, ws_ext_discount_amt#59, ws_ext_list_price#60, d_year#63]
Keys [8]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, d_year#63]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#60 - ws_ext_discount_amt#59)))]

(46) CometExchange
Input [9]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, d_year#63, sum#64]
Arguments: hashpartitioning(c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, d_year#63, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(47) CometHashAggregate
Input [9]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, d_year#63, sum#64]
Keys [8]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#49, c_login#56, c_email_address#57, d_year#63]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#60 - ws_ext_discount_amt#59)))]

(48) CometFilter
Input [2]: [customer_id#65, year_total#66]
Condition : (isnotnull(year_total#66) AND (year_total#66 > 0.00))

(49) CometBroadcastExchange
Input [2]: [customer_id#65, year_total#66]
Arguments: [customer_id#65, year_total#66]

(50) CometBroadcastHashJoin
Left output [7]: [customer_id#22, year_total#23, customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43]
Right output [2]: [customer_id#65, year_total#66]
Arguments: [customer_id#22], [customer_id#65], Inner, BuildRight

(51) CometProject
Input [9]: [customer_id#22, year_total#23, customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43, customer_id#65, year_total#66]
Arguments: [customer_id#22, year_total#23, customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43, year_total#66], [customer_id#22, year_total#23, customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43, year_total#66]

(52) CometNativeScan parquet spark_catalog.default.customer
Output [8]: [c_customer_sk#67, c_customer_id#68, c_first_name#69, c_last_name#70, c_preferred_cust_flag#71, c_birth_country#72, c_login#73, c_email_address#74]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_customer_id:string,c_first_name:string,c_last_name:string,c_preferred_cust_flag:string,c_birth_country:string,c_login:string,c_email_address:string>

(53) CometFilter
Input [8]: [c_customer_sk#67, c_customer_id#68, c_first_name#69, c_last_name#70, c_preferred_cust_flag#71, c_birth_country#72, c_login#73, c_email_address#74]
Condition : (isnotnull(c_customer_sk#67) AND isnotnull(staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#68, 16, true, false, true)))

(54) CometProject
Input [8]: [c_customer_sk#67, c_customer_id#68, c_first_name#69, c_last_name#70, c_preferred_cust_flag#71, c_birth_country#72, c_login#73, c_email_address#74]
Arguments: [c_customer_sk#67, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57], [c_customer_sk#67, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_customer_id#68, 16, true, false, true) AS c_customer_id#52, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_first_name#69, 20, true, false, true) AS c_first_name#53, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_last_name#70, 30, true, false, true) AS c_last_name#54, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_preferred_cust_flag#71, 1, true, false, true) AS c_preferred_cust_flag#55, c_birth_country#72, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_login#73, 13, true, false, true) AS c_login#56, staticinvoke(class org.apache.spark.sql.catalyst.util.CharVarcharCodegenUtils, StringType, readSidePadding, c_email_address#74, 50, true, false, true) AS c_email_address#57]

(55) ReusedExchange [Reuses operator id: 39]
Output [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]

(56) CometBroadcastHashJoin
Left output [8]: [c_customer_sk#67, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57]
Right output [4]: [ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]
Arguments: [c_customer_sk#67], [ws_bill_customer_sk#75], Inner, BuildRight

(57) CometProject
Input [12]: [c_customer_sk#67, c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_bill_customer_sk#75, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]
Arguments: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78], [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]

(58) ReusedExchange [Reuses operator id: 26]
Output [2]: [d_date_sk#79, d_year#80]

(59) CometBroadcastHashJoin
Left output [10]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78]
Right output [2]: [d_date_sk#79, d_year#80]
Arguments: [ws_sold_date_sk#78], [d_date_sk#79], Inner, BuildRight

(60) CometProject
Input [12]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_ext_discount_amt#76, ws_ext_list_price#77, ws_sold_date_sk#78, d_date_sk#79, d_year#80]
Arguments: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80], [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80]

(61) CometHashAggregate
Input [10]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, ws_ext_discount_amt#76, ws_ext_list_price#77, d_year#80]
Keys [8]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, d_year#80]
Functions [1]: [partial_sum(UnscaledValue((ws_ext_list_price#77 - ws_ext_discount_amt#76)))]

(62) CometExchange
Input [9]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, d_year#80, sum#81]
Arguments: hashpartitioning(c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, d_year#80, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(63) CometHashAggregate
Input [9]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, d_year#80, sum#81]
Keys [8]: [c_customer_id#52, c_first_name#53, c_last_name#54, c_preferred_cust_flag#55, c_birth_country#72, c_login#56, c_email_address#57, d_year#80]
Functions [1]: [sum(UnscaledValue((ws_ext_list_price#77 - ws_ext_discount_amt#76)))]

(64) CometBroadcastExchange
Input [2]: [customer_id#82, year_total#83]
Arguments: [customer_id#82, year_total#83]

(65) CometBroadcastHashJoin
Left output [8]: [customer_id#22, year_total#23, customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43, year_total#66]
Right output [2]: [customer_id#82, year_total#83]
Arguments: [customer_id#22], [customer_id#82], Inner, (CASE WHEN (year_total#66 > 0.00) THEN (year_total#83 / year_total#66) ELSE 0E-20 END > CASE WHEN (year_total#23 > 0.00) THEN (year_total#43 / year_total#23) ELSE 0E-20 END), BuildRight

(66) CometProject
Input [10]: [customer_id#22, year_total#23, customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42, year_total#43, year_total#66, customer_id#82, year_total#83]
Arguments: [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42], [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42]

(67) CometTakeOrderedAndProject
Input [4]: [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42]
Arguments: TakeOrderedAndProject(limit=100, orderBy=[customer_id#39 ASC NULLS FIRST,customer_first_name#40 ASC NULLS FIRST,customer_last_name#41 ASC NULLS FIRST,customer_email_address#42 ASC NULLS FIRST], output=[customer_id#39,customer_first_name#40,customer_last_name#41,customer_email_address#42]), [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42], 100, 0, [customer_id#39 ASC NULLS FIRST, customer_first_name#40 ASC NULLS FIRST, customer_last_name#41 ASC NULLS FIRST, customer_email_address#42 ASC NULLS FIRST], [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42]

(68) CometColumnarToRow [codegen id : 1]
Input [4]: [customer_id#39, customer_first_name#40, customer_last_name#41, customer_email_address#42]

