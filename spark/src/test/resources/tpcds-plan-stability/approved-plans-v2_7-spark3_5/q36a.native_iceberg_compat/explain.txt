== Physical Plan ==
TakeOrderedAndProject (42)
+- * Project (41)
   +- Window (40)
      +- * ColumnarToRow (39)
         +- CometSort (38)
            +- CometExchange (37)
               +- CometHashAggregate (36)
                  +- CometExchange (35)
                     +- CometHashAggregate (34)
                        +- CometUnion (33)
                           :- CometHashAggregate (22)
                           :  +- CometExchange (21)
                           :     +- CometHashAggregate (20)
                           :        +- CometProject (19)
                           :           +- CometBroadcastHashJoin (18)
                           :              :- CometProject (13)
                           :              :  +- CometBroadcastHashJoin (12)
                           :              :     :- CometProject (8)
                           :              :     :  +- CometBroadcastHashJoin (7)
                           :              :     :     :- CometFilter (2)
                           :              :     :     :  +- CometScan parquet spark_catalog.default.store_sales (1)
                           :              :     :     +- CometBroadcastExchange (6)
                           :              :     :        +- CometProject (5)
                           :              :     :           +- CometFilter (4)
                           :              :     :              +- CometScan parquet spark_catalog.default.date_dim (3)
                           :              :     +- CometBroadcastExchange (11)
                           :              :        +- CometFilter (10)
                           :              :           +- CometScan parquet spark_catalog.default.item (9)
                           :              +- CometBroadcastExchange (17)
                           :                 +- CometProject (16)
                           :                    +- CometFilter (15)
                           :                       +- CometScan parquet spark_catalog.default.store (14)
                           :- CometHashAggregate (27)
                           :  +- CometExchange (26)
                           :     +- CometHashAggregate (25)
                           :        +- CometHashAggregate (24)
                           :           +- ReusedExchange (23)
                           +- CometHashAggregate (32)
                              +- CometExchange (31)
                                 +- CometHashAggregate (30)
                                    +- CometHashAggregate (29)
                                       +- ReusedExchange (28)


(1) CometScan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) CometFilter
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : (isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2))

(3) CometScan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#6, d_year#7]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(4) CometFilter
Input [2]: [d_date_sk#6, d_year#7]
Condition : ((isnotnull(d_year#7) AND (d_year#7 = 2001)) AND isnotnull(d_date_sk#6))

(5) CometProject
Input [2]: [d_date_sk#6, d_year#7]
Arguments: [d_date_sk#6], [d_date_sk#6]

(6) CometBroadcastExchange
Input [1]: [d_date_sk#6]
Arguments: [d_date_sk#6]

(7) CometBroadcastHashJoin
Left output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Right output [1]: [d_date_sk#6]
Arguments: [ss_sold_date_sk#5], [d_date_sk#6], Inner, BuildRight

(8) CometProject
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#6]
Arguments: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4], [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]

(9) CometScan parquet spark_catalog.default.item
Output [3]: [i_item_sk#8, i_class#9, i_category#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(10) CometFilter
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Condition : isnotnull(i_item_sk#8)

(11) CometBroadcastExchange
Input [3]: [i_item_sk#8, i_class#9, i_category#10]
Arguments: [i_item_sk#8, i_class#9, i_category#10]

(12) CometBroadcastHashJoin
Left output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Right output [3]: [i_item_sk#8, i_class#9, i_category#10]
Arguments: [ss_item_sk#1], [i_item_sk#8], Inner, BuildRight

(13) CometProject
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#8, i_class#9, i_category#10]
Arguments: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10], [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10]

(14) CometScan parquet spark_catalog.default.store
Output [2]: [s_store_sk#11, s_state#12]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) CometFilter
Input [2]: [s_store_sk#11, s_state#12]
Condition : ((isnotnull(s_state#12) AND (s_state#12 = TN)) AND isnotnull(s_store_sk#11))

(16) CometProject
Input [2]: [s_store_sk#11, s_state#12]
Arguments: [s_store_sk#11], [s_store_sk#11]

(17) CometBroadcastExchange
Input [1]: [s_store_sk#11]
Arguments: [s_store_sk#11]

(18) CometBroadcastHashJoin
Left output [5]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10]
Right output [1]: [s_store_sk#11]
Arguments: [ss_store_sk#2], [s_store_sk#11], Inner, BuildRight

(19) CometProject
Input [6]: [ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10, s_store_sk#11]
Arguments: [ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10], [ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10]

(20) CometHashAggregate
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#9, i_category#10]
Keys [2]: [i_category#10, i_class#9]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]

(21) CometExchange
Input [4]: [i_category#10, i_class#9, sum#13, sum#14]
Arguments: hashpartitioning(i_category#10, i_class#9, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=1]

(22) CometHashAggregate
Input [4]: [i_category#10, i_class#9, sum#13, sum#14]
Keys [2]: [i_category#10, i_class#9]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]

(23) ReusedExchange [Reuses operator id: 21]
Output [4]: [i_category#15, i_class#16, sum#17, sum#18]

(24) CometHashAggregate
Input [4]: [i_category#15, i_class#16, sum#17, sum#18]
Keys [2]: [i_category#15, i_class#16]
Functions [2]: [sum(UnscaledValue(ss_net_profit#19)), sum(UnscaledValue(ss_ext_sales_price#20))]

(25) CometHashAggregate
Input [3]: [ss_net_profit#21, ss_ext_sales_price#22, i_category#15]
Keys [1]: [i_category#15]
Functions [2]: [partial_sum(ss_net_profit#21), partial_sum(ss_ext_sales_price#22)]

(26) CometExchange
Input [5]: [i_category#15, sum#23, isEmpty#24, sum#25, isEmpty#26]
Arguments: hashpartitioning(i_category#15, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=2]

(27) CometHashAggregate
Input [5]: [i_category#15, sum#23, isEmpty#24, sum#25, isEmpty#26]
Keys [1]: [i_category#15]
Functions [2]: [sum(ss_net_profit#21), sum(ss_ext_sales_price#22)]

(28) ReusedExchange [Reuses operator id: 21]
Output [4]: [i_category#27, i_class#28, sum#29, sum#30]

(29) CometHashAggregate
Input [4]: [i_category#27, i_class#28, sum#29, sum#30]
Keys [2]: [i_category#27, i_class#28]
Functions [2]: [sum(UnscaledValue(ss_net_profit#31)), sum(UnscaledValue(ss_ext_sales_price#32))]

(30) CometHashAggregate
Input [2]: [ss_net_profit#33, ss_ext_sales_price#34]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#33), partial_sum(ss_ext_sales_price#34)]

(31) CometExchange
Input [4]: [sum#35, isEmpty#36, sum#37, isEmpty#38]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=3]

(32) CometHashAggregate
Input [4]: [sum#35, isEmpty#36, sum#37, isEmpty#38]
Keys: []
Functions [2]: [sum(ss_net_profit#33), sum(ss_ext_sales_price#34)]

(33) CometUnion
Child 0 Input [6]: [gross_margin#39, i_category#10, i_class#9, t_category#40, t_class#41, lochierarchy#42]
Child 1 Input [6]: [gross_margin#43, i_category#15, i_class#44, t_category#45, t_class#46, lochierarchy#47]
Child 2 Input [6]: [gross_margin#48, i_category#49, i_class#50, t_category#51, t_class#52, lochierarchy#53]

(34) CometHashAggregate
Input [6]: [gross_margin#39, i_category#10, i_class#9, t_category#40, t_class#41, lochierarchy#42]
Keys [6]: [gross_margin#39, i_category#10, i_class#9, t_category#40, t_class#41, lochierarchy#42]
Functions: []

(35) CometExchange
Input [6]: [gross_margin#39, i_category#10, i_class#9, t_category#40, t_class#41, lochierarchy#42]
Arguments: hashpartitioning(gross_margin#39, i_category#10, i_class#9, t_category#40, t_class#41, lochierarchy#42, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=4]

(36) CometHashAggregate
Input [6]: [gross_margin#39, i_category#10, i_class#9, t_category#40, t_class#41, lochierarchy#42]
Keys [6]: [gross_margin#39, i_category#10, i_class#9, t_category#40, t_class#41, lochierarchy#42]
Functions: []

(37) CometExchange
Input [5]: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, _w0#54]
Arguments: hashpartitioning(lochierarchy#42, _w0#54, 5), ENSURE_REQUIREMENTS, CometNativeShuffle, [plan_id=5]

(38) CometSort
Input [5]: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, _w0#54]
Arguments: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, _w0#54], [lochierarchy#42 ASC NULLS FIRST, _w0#54 ASC NULLS FIRST, gross_margin#39 ASC NULLS FIRST]

(39) ColumnarToRow [codegen id : 1]
Input [5]: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, _w0#54]

(40) Window
Input [5]: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, _w0#54]
Arguments: [rank(gross_margin#39) windowspecdefinition(lochierarchy#42, _w0#54, gross_margin#39 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#55], [lochierarchy#42, _w0#54], [gross_margin#39 ASC NULLS FIRST]

(41) Project [codegen id : 2]
Output [5]: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, rank_within_parent#55]
Input [6]: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, _w0#54, rank_within_parent#55]

(42) TakeOrderedAndProject
Input [5]: [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, rank_within_parent#55]
Arguments: 100, [lochierarchy#42 DESC NULLS LAST, CASE WHEN (lochierarchy#42 = 0) THEN i_category#10 END ASC NULLS FIRST, rank_within_parent#55 ASC NULLS FIRST], [gross_margin#39, i_category#10, i_class#9, lochierarchy#42, rank_within_parent#55]

