// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.



syntax = "proto3";

package spark.spark_operator;

import "expr.proto";
import "partitioning.proto";
import "types.proto";

option java_package = "org.apache.comet.serde";

// The basic message representing a Spark operator.
message Operator {
  // The child operators of this
  repeated Operator children = 1;

  // Spark plan ID
  uint32 plan_id = 2;

  oneof op_struct {
    Scan scan = 100;
    Projection projection = 101;
    Filter filter = 102;
    Sort sort = 103;
    HashAggregate hash_agg = 104;
    Limit limit = 105;
    ShuffleWriter shuffle_writer = 106;
    Expand expand = 107;
    SortMergeJoin sort_merge_join = 108;
    HashJoin hash_join = 109;
    Window window = 110;
    NativeScan native_scan = 111;
    IcebergScan iceberg_scan = 112;
  }
}

message SparkPartitionedFile {
  string file_path = 1;
  int64 start = 2;
  int64 length = 3;
  int64 file_size = 4;
  repeated spark.spark_expression.Expr partition_values = 5;
}

// This name and the one above are not great, but they correspond to the (unfortunate) Spark names.
// I prepended "Spark" since I think there's a name collision on the native side, but we can revisit.
message SparkFilePartition {
  repeated SparkPartitionedFile partitioned_file = 1;
}

message SparkStructField {
  string name = 1;
  spark.spark_expression.DataType data_type = 2;
  bool nullable = 3;
}

message Scan {
  repeated spark.spark_expression.DataType fields = 1;
  // The source of the scan (e.g. file scan, broadcast exchange, shuffle, etc). This
  // is purely for informational purposes when viewing native query plans in
  // debug mode.
  string source = 2;
  // Whether native code can assume ownership of batches that it receives
  bool arrow_ffi_safe = 3;
}

message NativeScan {
  repeated spark.spark_expression.DataType fields = 1;
  // The source of the scan (e.g. file scan, broadcast exchange, shuffle, etc). This
  // is purely for informational purposes when viewing native query plans in
  // debug mode.
  string source = 2;
  repeated SparkStructField required_schema = 3;
  repeated SparkStructField data_schema = 4;
  repeated SparkStructField partition_schema = 5;
  repeated spark.spark_expression.Expr data_filters = 6;
  repeated SparkFilePartition file_partitions = 7;
  repeated int64 projection_vector = 8;
  string session_timezone = 9;
  repeated spark.spark_expression.Expr default_values = 10;
  repeated int64 default_values_indexes = 11;
  bool case_sensitive = 12;
  // Options for configuring object stores such as AWS S3, GCS, etc. The key-value pairs are taken
  // from Hadoop configuration for compatibility with Hadoop FileSystem implementations of object
  // stores.
  // The configuration values have hadoop. or spark.hadoop. prefix trimmed. For instance, the
  // configuration value "spark.hadoop.fs.s3a.access.key" will be stored as "fs.s3a.access.key" in
  // the map.
  map<string, string> object_store_options = 13;
  bool encryption_enabled = 14;
}

message IcebergScan {
  // Schema to read
  repeated SparkStructField required_schema = 1;

  // Catalog-specific configuration properties used to build FileIO for reading files
  // MUST contain "metadata_location" key for the table metadata file/directory
  // Examples: S3 credentials, warehouse location, metadata_location, etc.
  map<string, string> catalog_properties = 2;

  // Pre-planned file scan tasks grouped by Spark partition
  // Each IcebergFilePartition contains tasks for one Spark partition.
  // This structure mirrors SparkFilePartition used by NativeScan.
  // NOTE: Each task contains its own residual filter expression for row-group pruning.
  repeated IcebergFilePartition file_partitions = 3;

  // Total number of Spark partitions
  // Used to set up proper partitioning in DataFusion execution plan
  int32 num_partitions = 4;
}

// Groups FileScanTasks for a single Spark partition
// This mirrors SparkFilePartition structure used by NativeScan
message IcebergFilePartition {
  repeated IcebergFileScanTask file_scan_tasks = 1;
}

// Represents a single Iceberg FileScanTask from iceberg-rust
// This maps directly to iceberg::scan::FileScanTask
message IcebergFileScanTask {
  // Path to the data file (e.g., s3://bucket/warehouse/db/table/data/00000-0-abc.parquet)
  string data_file_path = 1;

  // Byte range within the file to read (for split files)
  uint64 start = 2;
  uint64 length = 3;

  // Optional: Record count if reading entire file
  optional uint64 record_count = 4;

  // File format: "PARQUET", "AVRO", "ORC"
  string data_file_format = 5;

  // Iceberg schema for this file (JSON serialized)
  // Each file may have a different schema due to schema evolution
  string schema_json = 6;

  // Field IDs to project from the file (subset of schema)
  repeated int32 project_field_ids = 7;

  // Delete files that apply to this data file (for Merge-On-Read tables)
  repeated IcebergDeleteFile delete_files = 8;

  // Residual filter expression for this specific file
  //
  // This is NOT the same as the scan-level data_filters in IcebergScan!
  //
  // The residual is created by Iceberg's ResidualEvaluator which partially evaluates
  // the scan filter against this file's partition values. For example:
  // - Original filter: date >= '2024-01-01' AND status = 'active'
  // - File partition: date = '2024-06-15'
  // - Residual for this file: status = 'active' (date filter proven true by partition)
  //
  // Different files can have different residuals based on their partition values.
  // This allows optimal row-group level filtering in the Parquet reader.
  //
  // If empty, no filtering is needed for this file (all rows match).
  optional spark.spark_expression.Expr residual = 9;
}

// Represents an Iceberg delete file (equality or positional deletes)
// Used for MOR (Merge-On-Read) tables where deletes are tracked separately from data files.
//
// Iceberg supports two delete strategies:
// 1. Positional deletes: Delete files contain (file_path, row_position) pairs
//   indicating specific rows to skip when reading data files.
// 2. Equality deletes: Delete files contain values for specific columns (identified by
//   equality_ids). Any row in the data file matching those values should be filtered out.
//
// The Rust side (iceberg-rust ArrowReader) applies these deletes automatically during scanning.
message IcebergDeleteFile {
  // Path to the delete file
  string file_path = 1;

  // Content type: "POSITION_DELETES" or "EQUALITY_DELETES"
  string content_type = 2;

  // Partition spec ID
  int32 partition_spec_id = 3;

  // Equality field IDs (for equality deletes only, empty for positional deletes)
  // These IDs identify which columns to use for matching when applying equality deletes
  repeated int32 equality_ids = 4;
}

message Projection {
  repeated spark.spark_expression.Expr project_list = 1;
}

message Filter {
  spark.spark_expression.Expr predicate = 1;
  // Some expressions don't support dictionary arrays, so may need to wrap the child in a CopyExec
  bool wrap_child_in_copy_exec = 3;
}

message Sort {
  repeated spark.spark_expression.Expr sort_orders = 1;
  optional int32 fetch = 3;
  optional int32 skip = 4;
}

message HashAggregate {
  repeated spark.spark_expression.Expr grouping_exprs = 1;
  repeated spark.spark_expression.AggExpr agg_exprs = 2;
  repeated spark.spark_expression.Expr result_exprs = 3;
  AggregateMode mode = 5;
}

message Limit {
  int32 limit = 1;
  int32 offset = 2;
}

enum CompressionCodec {
  None = 0;
  Zstd = 1;
  Lz4 = 2;
  Snappy = 3;
}

message ShuffleWriter {
  spark.spark_partitioning.Partitioning partitioning = 1;
  string output_data_file = 3;
  string output_index_file = 4;
  CompressionCodec codec = 5;
  int32 compression_level = 6;
  bool tracing_enabled = 7;
}

enum AggregateMode {
  Partial = 0;
  Final = 1;
}

message Expand {
  repeated spark.spark_expression.Expr project_list = 1;
  int32 num_expr_per_project = 3;
}

message HashJoin {
  repeated spark.spark_expression.Expr left_join_keys = 1;
  repeated spark.spark_expression.Expr right_join_keys = 2;
  JoinType join_type = 3;
  optional spark.spark_expression.Expr condition = 4;
  BuildSide build_side = 5;
}

message SortMergeJoin {
  repeated spark.spark_expression.Expr left_join_keys = 1;
  repeated spark.spark_expression.Expr right_join_keys = 2;
  JoinType join_type = 3;
  repeated spark.spark_expression.Expr sort_options = 4;
  optional spark.spark_expression.Expr condition = 5;
}

enum JoinType {
  Inner = 0;
  LeftOuter = 1;
  RightOuter = 2;
  FullOuter = 3;
  LeftSemi = 4;
  LeftAnti = 5;
}

enum BuildSide {
  BuildLeft = 0;
  BuildRight = 1;
}

message WindowExpr {
  spark.spark_expression.Expr built_in_window_function = 1;
  spark.spark_expression.AggExpr agg_func = 2;
  WindowSpecDefinition spec = 3;
}

enum WindowFrameType {
  Rows = 0;
  Range = 1;
}

message WindowFrame {
  WindowFrameType frame_type = 1;
  LowerWindowFrameBound lower_bound = 2;
  UpperWindowFrameBound upper_bound = 3;
}

message LowerWindowFrameBound {
  oneof lower_frame_bound_struct {
    UnboundedPreceding unboundedPreceding = 1;
    Preceding preceding = 2;
    CurrentRow currentRow = 3;
  }
}

message UpperWindowFrameBound {
  oneof upper_frame_bound_struct {
    UnboundedFollowing unboundedFollowing = 1;
    Following following = 2;
    CurrentRow currentRow = 3;
  }
}

message Preceding {
  int64 offset = 1;
}

message Following {
  int64 offset = 1;
}

message UnboundedPreceding {}
message UnboundedFollowing {}
message CurrentRow {}

message WindowSpecDefinition {
  repeated spark.spark_expression.Expr partitionSpec = 1;
  repeated spark.spark_expression.Expr orderSpec = 2;
  WindowFrame frameSpecification = 3;
}

message Window {
  repeated WindowExpr window_expr = 1;
  repeated spark.spark_expression.Expr order_by_list = 2;
  repeated spark.spark_expression.Expr partition_by_list = 3;
  Operator child = 4;
}
